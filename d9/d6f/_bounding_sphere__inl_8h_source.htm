<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Plasma Engine: Code/Engine/Foundation/Math/Implementation/BoundingSphere_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Plasma Engine<span id="projectnumber">&#160;2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d9/d6f/_bounding_sphere__inl_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">BoundingSphere_inl.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;Foundation/Math/Mat4.h&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span> </div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00006" data-start="{" data-end="}">
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#af7f99c9599885d265a1e51afed4e420d">    6</a></span>PL_FORCE_INLINE <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#af7f99c9599885d265a1e51afed4e420d">plBoundingSphereTemplate&lt;Type&gt;::plBoundingSphereTemplate</a>()</div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span>{</div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="preprocessor">#if PL_ENABLED(PL_MATH_CHECK_FOR_NAN)</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span>  <span class="comment">// Initialize all data to NaN in debug mode to find problems with uninitialized data easier.</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span>  <span class="comment">// m_vCenter is already initialized to NaN by its own constructor.</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span>  <span class="keyword">const</span> Type TypeNaN = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a7452a7f2b15201705625a7cb78723a98">plMath::NaN&lt;Type&gt;</a>();</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>  m_fRadius = TypeNaN;</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>}</div>
</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span> </div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00017" data-start="{" data-end="}">
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#ada411d5b351c203c07d383bcf269e80d">   17</a></span>PL_FORCE_INLINE <a class="code hl_class" href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate&lt;Type&gt;</a> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#ada411d5b351c203c07d383bcf269e80d">plBoundingSphereTemplate&lt;Type&gt;::MakeZero</a>()</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>{</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>  <a class="code hl_class" href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate&lt;Type&gt;</a> res;</div>
<div class="foldopen" id="foldopen00020" data-start="{" data-end="}">
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#af7f99c9599885d265a1e51afed4e420d">   20</a></span>  res.m_vCenter.SetZero();</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>  res.m_fRadius = 0.0f;</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>  <span class="keywordflow">return</span> res;</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>}</div>
<div class="foldopen" id="foldopen00024" data-start="{" data-end="}">
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#ada411d5b351c203c07d383bcf269e80d">   24</a></span> </div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00026" data-start="{" data-end="}">
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#adf104ee786bc3a4761bd1273134955e6">   26</a></span>PL_FORCE_INLINE <a class="code hl_class" href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate&lt;Type&gt;</a> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#adf104ee786bc3a4761bd1273134955e6">plBoundingSphereTemplate&lt;Type&gt;::MakeInvalid</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; vCenter)</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>{</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>  <a class="code hl_class" href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate&lt;Type&gt;</a> res;</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>  res.m_vCenter = vCenter;</div>
<div class="foldopen" id="foldopen00030" data-start="{" data-end="}">
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#adf104ee786bc3a4761bd1273134955e6">   30</a></span>  res.m_fRadius = -plMath::SmallEpsilon&lt;Type&gt;(); <span class="comment">// has to be very small for ExpandToInclude to work</span></div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>  <span class="keywordflow">return</span> res;</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span>}</div>
</div>
</div>
<div class="foldopen" id="foldopen00033" data-start="{" data-end="}">
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a23461a02721b01c4bc884ae28ab03e51">   33</a></span> </div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00035" data-start="{" data-end="}">
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a23461a02721b01c4bc884ae28ab03e51">   35</a></span>PL_FORCE_INLINE <a class="code hl_class" href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate&lt;Type&gt;</a> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a23461a02721b01c4bc884ae28ab03e51">plBoundingSphereTemplate&lt;Type&gt;::MakeFromCenterAndRadius</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; vCenter, Type fRadius)</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>{</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>  <a class="code hl_class" href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate&lt;Type&gt;</a> res;</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>  res.m_vCenter = vCenter;</div>
<div class="foldopen" id="foldopen00039" data-start="{" data-end="}">
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a86fd566e27ae963934df1e1e437a13eb">   39</a></span>  res.m_fRadius = fRadius;</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span>  PL_ASSERT_DEBUG(res.<a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a7976749d700b4792092b7b1c97d3040f">IsValid</a>(), <span class="stringliteral">&quot;The sphere was created with invalid values.&quot;</span>);</div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span>  <span class="keywordflow">return</span> res;</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>}</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span> </div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00045" data-start="{" data-end="}">
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a86fd566e27ae963934df1e1e437a13eb">   45</a></span>PL_FORCE_INLINE <a class="code hl_class" href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate&lt;Type&gt;</a> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a86fd566e27ae963934df1e1e437a13eb">plBoundingSphereTemplate&lt;Type&gt;::MakeFromPoints</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>* pPoints, plUInt32 uiNumPoints, plUInt32 uiStride <span class="comment">/*= sizeof(plVec3Template&lt;Type&gt;)*/</span>)</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>{</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>  PL_ASSERT_DEBUG(pPoints != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The array must not be empty.&quot;</span>);</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>  PL_ASSERT_DEBUG(uiStride &gt;= <span class="keyword">sizeof</span>(<a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>), <span class="stringliteral">&quot;The data must not overlap.&quot;</span>);</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>  PL_ASSERT_DEBUG(uiNumPoints &gt; 0, <span class="stringliteral">&quot;The array must contain at least one point.&quot;</span>);</div>
<div class="foldopen" id="foldopen00050" data-start="{" data-end="}">
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a3efad6cea7f3c63afcd1926247ced096">   50</a></span> </div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>* pCur = &amp;pPoints[0];</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span> </div>
<div class="foldopen" id="foldopen00053" data-start="{" data-end="}">
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a7976749d700b4792092b7b1c97d3040f">   53</a></span>  <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> vCenter(0.0f);</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span> </div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>  <span class="keywordflow">for</span> (plUInt32 i = 0; i &lt; uiNumPoints; ++i)</div>
<div class="foldopen" id="foldopen00056" data-start="{" data-end="}">
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#af0af7787915c3f71baf3187286a4a06e">   56</a></span>  {</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>    vCenter += *pCur;</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>    pCur = <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a15b127801462e31890c28aac2d8bc4bf">plMemoryUtils::AddByteOffset</a>(pCur, uiStride);</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>  }</div>
<div class="foldopen" id="foldopen00060" data-start="{" data-end="}">
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#ad73214e2fec34b11ab3d31d6aed63dcd">   60</a></span> </div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>  vCenter /= (Type)uiNumPoints;</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span> </div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>  Type fMaxDistSQR = 0.0f;</div>
<div class="foldopen" id="foldopen00064" data-start="{" data-end="}">
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a43d01535b6bd65c276ead264163c1e8e">   64</a></span> </div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>  pCur = &amp;pPoints[0];</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>  <span class="keywordflow">for</span> (plUInt32 i = 0; i &lt; uiNumPoints; ++i)</div>
<div class="foldopen" id="foldopen00067" data-start="{" data-end="}">
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#ae50a48211ca2c9fde3cf8e8a4504b5a7">   67</a></span>  {</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>    <span class="keyword">const</span> Type fDistSQR = (*pCur - vCenter).GetLengthSquared();</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>    fMaxDistSQR = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">plMath::Max</a>(fMaxDistSQR, fDistSQR);</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span> </div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>    pCur = <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a15b127801462e31890c28aac2d8bc4bf">plMemoryUtils::AddByteOffset</a>(pCur, uiStride);</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>  }</div>
<div class="foldopen" id="foldopen00073" data-start="{" data-end="}">
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a1bd393a2a7ba6aa51b936e13b896fbe8">   73</a></span> </div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>  <a class="code hl_class" href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate&lt;Type&gt;</a> res;</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>  res.m_vCenter = vCenter;</div>
<div class="foldopen" id="foldopen00076" data-start="{" data-end="}">
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a44bc7534e7341eee458b262778a83e2b">   76</a></span>  res.m_fRadius = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#aae02023b382e3990f9ebf91f40473310">plMath::Sqrt</a>(fMaxDistSQR);</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span> </div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>  PL_ASSERT_DEBUG(res.<a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a7976749d700b4792092b7b1c97d3040f">IsValid</a>(), <span class="stringliteral">&quot;The point cloud contained corrupted data.&quot;</span>);</div>
<div class="foldopen" id="foldopen00079" data-start="{" data-end="}">
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#af9d829bafc04751faddb4bab8bdbf6af">   79</a></span> </div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>  <span class="keywordflow">return</span> res;</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>}</div>
<div class="foldopen" id="foldopen00082" data-start="{" data-end="}">
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a15243bed478dfb01b75cadeea4d3fb22">   82</a></span> </div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00084" data-start="{" data-end="}">
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a3efad6cea7f3c63afcd1926247ced096">   84</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a3efad6cea7f3c63afcd1926247ced096">plBoundingSphereTemplate&lt;Type&gt;::IsZero</a>(Type fEpsilon <span class="comment">/* = plMath::DefaultEpsilon&lt;Type&gt;() */</span>)<span class="keyword"> const</span></div>
<div class="foldopen" id="foldopen00085" data-start="{" data-end="}">
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a47d5e17048961fb339a7e7fdedc30f50">   85</a></span><span class="keyword"></span>{</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>  <span class="keywordflow">return</span> m_vCenter.<a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a3efad6cea7f3c63afcd1926247ced096">IsZero</a>(fEpsilon) &amp;&amp; <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ab41c015ef2ef7ea68f915082545755ae">plMath::IsZero</a>(m_fRadius, fEpsilon);</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>}</div>
<div class="foldopen" id="foldopen00088" data-start="{" data-end="}">
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a902dc63cfe73242fde5261d1bcc30a4f">   88</a></span> </div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00090" data-start="{" data-end="}">
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a7976749d700b4792092b7b1c97d3040f">   90</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a7976749d700b4792092b7b1c97d3040f">plBoundingSphereTemplate&lt;Type&gt;::IsValid</a>()<span class="keyword"> const</span></div>
<div class="foldopen" id="foldopen00091" data-start="{" data-end="}">
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a4281902d763ba55705bb93be25d62eb1">   91</a></span><span class="keyword"></span>{</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>  <span class="keywordflow">return</span> (m_vCenter.IsValid() &amp;&amp; m_fRadius &gt;= 0.0f);</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>}</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span> </div>
<div class="foldopen" id="foldopen00095" data-start="{" data-end="}">
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a3e1c14592861197bf74c21046d0ba010">   95</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00096" data-start="{" data-end="}">
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#af0af7787915c3f71baf3187286a4a06e">   96</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#af0af7787915c3f71baf3187286a4a06e">plBoundingSphereTemplate&lt;Type&gt;::IsNaN</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span><span class="keyword"></span>{</div>
<div class="foldopen" id="foldopen00098" data-start="{" data-end="}">
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a7f58c44afb68fa76264f0efcf11cbbb1">   98</a></span>  <span class="keywordflow">return</span> (m_vCenter.IsNaN() || plMath::IsNaN(m_fRadius));</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>}</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span> </div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00102" data-start="{" data-end="}">
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#ad73214e2fec34b11ab3d31d6aed63dcd">  102</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#ad73214e2fec34b11ab3d31d6aed63dcd">plBoundingSphereTemplate&lt;Type&gt;::ExpandToInclude</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; vPoint)</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>{</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>  <span class="keyword">const</span> Type fDistSQR = (vPoint - m_vCenter).GetLengthSquared();</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span> </div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>  <span class="keywordflow">if</span> (<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a25ddcfae0bd88d04d015b266a236065f">plMath::Square</a>(m_fRadius) &lt; fDistSQR)</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>    m_fRadius = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#aae02023b382e3990f9ebf91f40473310">plMath::Sqrt</a>(fDistSQR);</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a09e749025010a6f14fc708dccc67d8d8">  108</a></span>}</div>
</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span> </div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00111" data-start="{" data-end="}">
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#af9fd1df82a6d6e0e27ed2dd857b9c29b">  111</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#ad73214e2fec34b11ab3d31d6aed63dcd">plBoundingSphereTemplate&lt;Type&gt;::ExpandToInclude</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate&lt;Type&gt;</a>&amp; rhs)</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>{</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>  <span class="keyword">const</span> Type fReqRadius = (rhs.m_vCenter - m_vCenter).GetLength() + rhs.m_fRadius;</div>
<div class="foldopen" id="foldopen00114" data-start="{" data-end="}">
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a93a35f27d7c4af714321120ef34e0256">  114</a></span> </div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>  m_fRadius = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">plMath::Max</a>(m_fRadius, fReqRadius);</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>}</div>
<div class="foldopen" id="foldopen00117" data-start="{" data-end="}">
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#ac33ab17df9ff8a29b80659a8f1ea0b4c">  117</a></span> </div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00119" data-start="{" data-end="}">
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a1bd393a2a7ba6aa51b936e13b896fbe8">  119</a></span>PL_FORCE_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a1bd393a2a7ba6aa51b936e13b896fbe8">plBoundingSphereTemplate&lt;Type&gt;::Grow</a>(Type fDiff)</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>{</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>  PL_ASSERT_DEBUG(IsValid(), <span class="stringliteral">&quot;Cannot grow a sphere that is invalid.&quot;</span>);</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span> </div>
<div class="foldopen" id="foldopen00123" data-start="{" data-end="}">
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#ad5f22a515ddbc6d5d923dc2b845b0de5">  123</a></span>  m_fRadius += fDiff;</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span> </div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>  PL_ASSERT_DEBUG(IsValid(), <span class="stringliteral">&quot;The grown sphere has become invalid.&quot;</span>);</div>
<div class="foldopen" id="foldopen00126" data-start="{" data-end="}">
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a68861b66d4e565a81e4bdda4d87f277f">  126</a></span>}</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span> </div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00129" data-start="{" data-end="}">
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a44bc7534e7341eee458b262778a83e2b">  129</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a44bc7534e7341eee458b262778a83e2b">plBoundingSphereTemplate&lt;Type&gt;::IsIdentical</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>  <span class="keywordflow">return</span> (m_vCenter.IsIdentical(rhs.m_vCenter) &amp;&amp; m_fRadius == rhs.m_fRadius);</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>}</div>
</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span> </div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00135" data-start="{" data-end="}">
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#af9d829bafc04751faddb4bab8bdbf6af">  135</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#af9d829bafc04751faddb4bab8bdbf6af">plBoundingSphereTemplate&lt;Type&gt;::IsEqual</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate&lt;Type&gt;</a>&amp; rhs, Type fEpsilon)<span class="keyword"> const</span></div>
<div class="foldopen" id="foldopen00136" data-start="{" data-end="}">
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#aa355fcbb5ac08671a53796f108739e66">  136</a></span><span class="keyword"></span>{</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>  <span class="keywordflow">return</span> (m_vCenter.IsEqual(rhs.m_vCenter, fEpsilon) &amp;&amp; <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ab5afdf4907a0a61a687be8a9e1e1f81c">plMath::IsEqual</a>(m_fRadius, rhs.m_fRadius, fEpsilon));</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>}</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span> </div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00141" data-start="{" data-end="}">
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#af79c066a9f8bc79f110655f92a9c6f2e">  141</a></span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate&lt;Type&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code hl_class" href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate&lt;Type&gt;</a>&amp; rhs)</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>{</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>  <span class="keywordflow">return</span> lhs.<a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a44bc7534e7341eee458b262778a83e2b">IsIdentical</a>(rhs);</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>}</div>
<div class="foldopen" id="foldopen00145" data-start="{" data-end="}">
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a55a520b2834c5d25a5f73b2492a7c649">  145</a></span> </div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate&lt;Type&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code hl_class" href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate&lt;Type&gt;</a>&amp; rhs)</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>{</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>  <span class="keywordflow">return</span> !lhs.<a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a44bc7534e7341eee458b262778a83e2b">IsIdentical</a>(rhs);</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>}</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span> </div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00153" data-start="{" data-end="}">
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a15243bed478dfb01b75cadeea4d3fb22">  153</a></span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a15243bed478dfb01b75cadeea4d3fb22">plBoundingSphereTemplate&lt;Type&gt;::Translate</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; vTranslation)</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>{</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>  m_vCenter += vTranslation;</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>}</div>
</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span> </div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00159" data-start="{" data-end="}">
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a47d5e17048961fb339a7e7fdedc30f50">  159</a></span>PL_FORCE_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a47d5e17048961fb339a7e7fdedc30f50">plBoundingSphereTemplate&lt;Type&gt;::ScaleFromCenter</a>(Type fScale)</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>{</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>  PL_ASSERT_DEBUG(fScale &gt;= 0.0f, <span class="stringliteral">&quot;Cannot invert the sphere.&quot;</span>);</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span> </div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>  m_fRadius *= fScale;</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span> </div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>  PL_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>}</div>
</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span> </div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00169" data-start="{" data-end="}">
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a902dc63cfe73242fde5261d1bcc30a4f">  169</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a902dc63cfe73242fde5261d1bcc30a4f">plBoundingSphereTemplate&lt;Type&gt;::ScaleFromOrigin</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; vScale)</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>{</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>  PL_ASSERT_DEBUG(vScale.x &gt;= 0.0f, <span class="stringliteral">&quot;Cannot invert the sphere.&quot;</span>);</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>  PL_ASSERT_DEBUG(vScale.y &gt;= 0.0f, <span class="stringliteral">&quot;Cannot invert the sphere.&quot;</span>);</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>  PL_ASSERT_DEBUG(vScale.z &gt;= 0.0f, <span class="stringliteral">&quot;Cannot invert the sphere.&quot;</span>);</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span> </div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>  m_vCenter = m_vCenter.CompMul(vScale);</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span> </div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>  <span class="comment">// scale the radius by the maximum scaling factor (the sphere cannot become an ellipsoid,</span></div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>  <span class="comment">// so to be a &#39;bounding&#39; sphere, it should be as large as possible</span></div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>  m_fRadius *= <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">plMath::Max</a>(vScale.x, vScale.y, vScale.z);</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>}</div>
</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span> </div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00183" data-start="{" data-end="}">
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a4281902d763ba55705bb93be25d62eb1">  183</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a4281902d763ba55705bb93be25d62eb1">plBoundingSphereTemplate&lt;Type&gt;::TransformFromOrigin</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d4/dbd/classpl_mat4_template.htm">plMat4Template&lt;Type&gt;</a>&amp; mTransform)</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>{</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>  m_vCenter = mTransform.<a class="code hl_function" href="../../d4/dbd/classpl_mat4_template.htm#a8162d53282ae699f646a79de7e4bf183">TransformPosition</a>(m_vCenter);</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span> </div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> Scale = mTransform.<a class="code hl_function" href="../../d4/dbd/classpl_mat4_template.htm#aceed1fbe400275bab9fd047dd7d0b11c">GetScalingFactors</a>();</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>  m_fRadius *= <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">plMath::Max</a>(Scale.x, Scale.y, Scale.z);</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>}</div>
</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span> </div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00192" data-start="{" data-end="}">
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a3e1c14592861197bf74c21046d0ba010">  192</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a3e1c14592861197bf74c21046d0ba010">plBoundingSphereTemplate&lt;Type&gt;::TransformFromCenter</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d4/dbd/classpl_mat4_template.htm">plMat4Template&lt;Type&gt;</a>&amp; mTransform)</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>{</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>  m_vCenter += mTransform.<a class="code hl_function" href="../../d4/dbd/classpl_mat4_template.htm#a2ac5925abba756e528d58ee09b283e72">GetTranslationVector</a>();</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span> </div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> Scale = mTransform.<a class="code hl_function" href="../../d4/dbd/classpl_mat4_template.htm#aceed1fbe400275bab9fd047dd7d0b11c">GetScalingFactors</a>();</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>  m_fRadius *= <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">plMath::Max</a>(Scale.x, Scale.y, Scale.z);</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>}</div>
</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span> </div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00201" data-start="{" data-end="}">
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a7f58c44afb68fa76264f0efcf11cbbb1">  201</a></span>Type <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a7f58c44afb68fa76264f0efcf11cbbb1">plBoundingSphereTemplate&lt;Type&gt;::GetDistanceTo</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; vPoint)<span class="keyword"> const</span></div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>  <span class="keywordflow">return</span> (vPoint - m_vCenter).GetLength() - m_fRadius;</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>}</div>
</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span> </div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00207" data-start="{" data-end="}">
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a88dad58a87b2e72f9ca38fa7714bd85f">  207</a></span>Type <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a7f58c44afb68fa76264f0efcf11cbbb1">plBoundingSphereTemplate&lt;Type&gt;::GetDistanceTo</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span>  <span class="keywordflow">return</span> (rhs.m_vCenter - m_vCenter).GetLength() - m_fRadius - rhs.m_fRadius;</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>}</div>
</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span> </div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00213" data-start="{" data-end="}">
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#af9fd1df82a6d6e0e27ed2dd857b9c29b">  213</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#af9fd1df82a6d6e0e27ed2dd857b9c29b">plBoundingSphereTemplate&lt;Type&gt;::Contains</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; vPoint)<span class="keyword"> const</span></div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>  <span class="keywordflow">return</span> (vPoint - m_vCenter).GetLengthSquared() &lt;= <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a25ddcfae0bd88d04d015b266a236065f">plMath::Square</a>(m_fRadius);</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>}</div>
</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span> </div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00219" data-start="{" data-end="}">
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#ac33ab17df9ff8a29b80659a8f1ea0b4c">  219</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#af9fd1df82a6d6e0e27ed2dd857b9c29b">plBoundingSphereTemplate&lt;Type&gt;::Contains</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>  <span class="keywordflow">return</span> (rhs.m_vCenter - m_vCenter).GetLength() + rhs.m_fRadius &lt;= m_fRadius;</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>}</div>
</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span> </div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00225" data-start="{" data-end="}">
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a68861b66d4e565a81e4bdda4d87f277f">  225</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#ad5f22a515ddbc6d5d923dc2b845b0de5">plBoundingSphereTemplate&lt;Type&gt;::Overlaps</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>  <span class="keywordflow">return</span> (rhs.m_vCenter - m_vCenter).GetLengthSquared() &lt; <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a25ddcfae0bd88d04d015b266a236065f">plMath::Square</a>(rhs.m_fRadius + m_fRadius);</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>}</div>
</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span> </div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00231" data-start="{" data-end="}">
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#aa355fcbb5ac08671a53796f108739e66">  231</a></span><span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#aa355fcbb5ac08671a53796f108739e66">plBoundingSphereTemplate&lt;Type&gt;::GetClampedPoint</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; vPoint)</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>{</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> vDir = vPoint - m_vCenter;</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span>  <span class="keyword">const</span> Type fDistSQR = vDir.<a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a572854a70177ef1a0f0b6c49ecb27843">GetLengthSquared</a>();</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span> </div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>  <span class="comment">// return the point, if it is already inside the sphere</span></div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>  <span class="keywordflow">if</span> (fDistSQR &lt;= <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a25ddcfae0bd88d04d015b266a236065f">plMath::Square</a>(m_fRadius))</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>    <span class="keywordflow">return</span> vPoint;</div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span> </div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span>  <span class="comment">// otherwise return a point on the surface of the sphere</span></div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span> </div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>  <span class="keyword">const</span> Type fLength = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#aae02023b382e3990f9ebf91f40473310">plMath::Sqrt</a>(fDistSQR);</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span> </div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>  <span class="keywordflow">return</span> m_vCenter + m_fRadius * (vDir / fLength);</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>}</div>
</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span> </div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00248" data-start="{" data-end="}">
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a93a35f27d7c4af714321120ef34e0256">  248</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#af9fd1df82a6d6e0e27ed2dd857b9c29b">plBoundingSphereTemplate&lt;Type&gt;::Contains</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>* pPoints, plUInt32 uiNumPoints, plUInt32 uiStride <span class="comment">/* = sizeof(plVec3Template) */</span>)<span class="keyword"> const</span></div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>  PL_ASSERT_DEBUG(pPoints != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The array must not be empty.&quot;</span>);</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>  PL_ASSERT_DEBUG(uiNumPoints &gt; 0, <span class="stringliteral">&quot;The array must contain at least one point.&quot;</span>);</div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>  PL_ASSERT_DEBUG(uiStride &gt;= <span class="keyword">sizeof</span>(<a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>), <span class="stringliteral">&quot;The data must not overlap.&quot;</span>);</div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span> </div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span>  <span class="keyword">const</span> Type fRadiusSQR = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a25ddcfae0bd88d04d015b266a236065f">plMath::Square</a>(m_fRadius);</div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span> </div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>* pCur = &amp;pPoints[0];</div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span> </div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span>  <span class="keywordflow">for</span> (plUInt32 i = 0; i &lt; uiNumPoints; ++i)</div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span>  {</div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span>    <span class="keywordflow">if</span> ((*pCur - m_vCenter).GetLengthSquared() &gt; fRadiusSQR)</div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span>      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span> </div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span>    pCur = <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a15b127801462e31890c28aac2d8bc4bf">plMemoryUtils::AddByteOffset</a>(pCur, uiStride);</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>  }</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span> </div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span>  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span>}</div>
</div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span> </div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00270" data-start="{" data-end="}">
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#ad5f22a515ddbc6d5d923dc2b845b0de5">  270</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#ad5f22a515ddbc6d5d923dc2b845b0de5">plBoundingSphereTemplate&lt;Type&gt;::Overlaps</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>* pPoints, plUInt32 uiNumPoints, plUInt32 uiStride <span class="comment">/* = sizeof(plVec3Template) */</span>)<span class="keyword"> const</span></div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span>  PL_ASSERT_DEBUG(pPoints != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The array must not be empty.&quot;</span>);</div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span>  PL_ASSERT_DEBUG(uiNumPoints &gt; 0, <span class="stringliteral">&quot;The array must contain at least one point.&quot;</span>);</div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span>  PL_ASSERT_DEBUG(uiStride &gt;= <span class="keyword">sizeof</span>(<a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>), <span class="stringliteral">&quot;The data must not overlap.&quot;</span>);</div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span> </div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span>  <span class="keyword">const</span> Type fRadiusSQR = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a25ddcfae0bd88d04d015b266a236065f">plMath::Square</a>(m_fRadius);</div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span> </div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>* pCur = &amp;pPoints[0];</div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span> </div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span>  <span class="keywordflow">for</span> (plUInt32 i = 0; i &lt; uiNumPoints; ++i)</div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span>  {</div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span>    <span class="keywordflow">if</span> ((*pCur - m_vCenter).GetLengthSquared() &lt;= fRadiusSQR)</div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span>      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span> </div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span>    pCur = <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a15b127801462e31890c28aac2d8bc4bf">plMemoryUtils::AddByteOffset</a>(pCur, uiStride);</div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span>  }</div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span> </div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span>  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span>}</div>
</div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span> </div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00292" data-start="{" data-end="}">
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a43d01535b6bd65c276ead264163c1e8e">  292</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#ad73214e2fec34b11ab3d31d6aed63dcd">plBoundingSphereTemplate&lt;Type&gt;::ExpandToInclude</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>* pPoints, plUInt32 uiNumPoints, plUInt32 uiStride <span class="comment">/* = sizeof(plVec3Template) */</span>)</div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span>{</div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span>  PL_ASSERT_DEBUG(pPoints != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The array must not be empty.&quot;</span>);</div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span>  PL_ASSERT_DEBUG(uiStride &gt;= <span class="keyword">sizeof</span>(<a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>), <span class="stringliteral">&quot;The data must not overlap.&quot;</span>);</div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span> </div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>* pCur = &amp;pPoints[0];</div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span> </div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span>  Type fMaxDistSQR = 0.0f;</div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span> </div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span>  <span class="keywordflow">for</span> (plUInt32 i = 0; i &lt; uiNumPoints; ++i)</div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span>  {</div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span>    <span class="keyword">const</span> Type fDistSQR = (*pCur - m_vCenter).GetLengthSquared();</div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span>    fMaxDistSQR = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">plMath::Max</a>(fMaxDistSQR, fDistSQR);</div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span> </div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span>    pCur = <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a15b127801462e31890c28aac2d8bc4bf">plMemoryUtils::AddByteOffset</a>(pCur, uiStride);</div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span>  }</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span> </div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span>  <span class="keywordflow">if</span> (<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a25ddcfae0bd88d04d015b266a236065f">plMath::Square</a>(m_fRadius) &lt; fMaxDistSQR)</div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span>    m_fRadius = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#aae02023b382e3990f9ebf91f40473310">plMath::Sqrt</a>(fMaxDistSQR);</div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span>}</div>
</div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span> </div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00314" data-start="{" data-end="}">
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a09e749025010a6f14fc708dccc67d8d8">  314</a></span>Type <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a7f58c44afb68fa76264f0efcf11cbbb1">plBoundingSphereTemplate&lt;Type&gt;::GetDistanceTo</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>* pPoints, plUInt32 uiNumPoints, plUInt32 uiStride <span class="comment">/* = sizeof(plVec3Template) */</span>)<span class="keyword"> const</span></div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span>  PL_ASSERT_DEBUG(pPoints != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The array must not be empty.&quot;</span>);</div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span>  PL_ASSERT_DEBUG(uiNumPoints &gt; 0, <span class="stringliteral">&quot;The array must contain at least one point.&quot;</span>);</div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>  PL_ASSERT_DEBUG(uiStride &gt;= <span class="keyword">sizeof</span>(<a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>), <span class="stringliteral">&quot;The data must not overlap.&quot;</span>);</div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span> </div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>* pCur = &amp;pPoints[0];</div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span> </div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span>  Type fMinDistSQR = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a6173d524e4c3564b75deacc577ad176a">plMath::MaxValue&lt;Type&gt;</a>();</div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span> </div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span>  <span class="keywordflow">for</span> (plUInt32 i = 0; i &lt; uiNumPoints; ++i)</div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span>  {</div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span>    <span class="keyword">const</span> Type fDistSQR = (*pCur - m_vCenter).GetLengthSquared();</div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span> </div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span>    fMinDistSQR = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a314b24989122e22968ae0a11cc872e28">plMath::Min</a>(fMinDistSQR, fDistSQR);</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span> </div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span>    pCur = <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a15b127801462e31890c28aac2d8bc4bf">plMemoryUtils::AddByteOffset</a>(pCur, uiStride);</div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span>  }</div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span> </div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#aae02023b382e3990f9ebf91f40473310">plMath::Sqrt</a>(fMinDistSQR);</div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span>}</div>
</div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span> </div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00337" data-start="{" data-end="}">
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#af79c066a9f8bc79f110655f92a9c6f2e">  337</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#af79c066a9f8bc79f110655f92a9c6f2e">plBoundingSphereTemplate&lt;Type&gt;::GetRayIntersection</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; vRayStartPos, <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; vRayDirNormalized,</div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span>  Type* out_pIntersectionDistance <span class="comment">/* = nullptr */</span>, <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>* out_pIntersection <span class="comment">/* = nullptr */</span>)<span class="keyword"> const</span></div>
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno">  339</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00340" name="l00340"></a><span class="lineno">  340</span>  PL_ASSERT_DEBUG(vRayDirNormalized.<a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a48f7479d10c24b443b7df80df5407cef">IsNormalized</a>(), <span class="stringliteral">&quot;The ray direction must be normalized.&quot;</span>);</div>
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno">  341</span> </div>
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno">  342</span>  <span class="comment">// Ugly Code taken from &#39;Real Time Rendering First Edition&#39; Page 299</span></div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span> </div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span>  <span class="keyword">const</span> Type fRadiusSQR = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a25ddcfae0bd88d04d015b266a236065f">plMath::Square</a>(m_fRadius);</div>
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno">  345</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> vRelPos = m_vCenter - vRayStartPos;</div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span> </div>
<div class="line"><a id="l00347" name="l00347"></a><span class="lineno">  347</span>  <span class="keyword">const</span> Type d = vRelPos.<a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a97023781e4ee1e7ab4a36953bba77cf0">Dot</a>(vRayDirNormalized);</div>
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno">  348</span>  <span class="keyword">const</span> Type fRelPosLenSQR = vRelPos.<a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a572854a70177ef1a0f0b6c49ecb27843">GetLengthSquared</a>();</div>
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno">  349</span> </div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span>  <span class="keywordflow">if</span> (d &lt; 0.0f &amp;&amp; fRelPosLenSQR &gt; fRadiusSQR)</div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span> </div>
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno">  353</span>  <span class="keyword">const</span> Type m2 = fRelPosLenSQR - <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a25ddcfae0bd88d04d015b266a236065f">plMath::Square</a>(d);</div>
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno">  354</span> </div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno">  355</span>  <span class="keywordflow">if</span> (m2 &gt; fRadiusSQR)</div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span> </div>
<div class="line"><a id="l00358" name="l00358"></a><span class="lineno">  358</span>  <span class="keyword">const</span> Type q = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#aae02023b382e3990f9ebf91f40473310">plMath::Sqrt</a>(fRadiusSQR - m2);</div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span> </div>
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno">  360</span>  Type fIntersectionTime;</div>
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno">  361</span> </div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno">  362</span>  <span class="keywordflow">if</span> (fRelPosLenSQR &gt; fRadiusSQR)</div>
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno">  363</span>    fIntersectionTime = d - q;</div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span>  <span class="keywordflow">else</span></div>
<div class="line"><a id="l00365" name="l00365"></a><span class="lineno">  365</span>    fIntersectionTime = d + q;</div>
<div class="line"><a id="l00366" name="l00366"></a><span class="lineno">  366</span> </div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span>  <span class="keywordflow">if</span> (out_pIntersectionDistance)</div>
<div class="line"><a id="l00368" name="l00368"></a><span class="lineno">  368</span>    *out_pIntersectionDistance = fIntersectionTime;</div>
<div class="line"><a id="l00369" name="l00369"></a><span class="lineno">  369</span>  <span class="keywordflow">if</span> (out_pIntersection)</div>
<div class="line"><a id="l00370" name="l00370"></a><span class="lineno">  370</span>    *out_pIntersection = vRayStartPos + vRayDirNormalized * fIntersectionTime;</div>
<div class="line"><a id="l00371" name="l00371"></a><span class="lineno">  371</span> </div>
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno">  372</span>  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00373" name="l00373"></a><span class="lineno">  373</span>}</div>
</div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno">  374</span> </div>
<div class="line"><a id="l00375" name="l00375"></a><span class="lineno">  375</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00376" data-start="{" data-end="}">
<div class="line"><a id="l00376" name="l00376"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a55a520b2834c5d25a5f73b2492a7c649">  376</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a55a520b2834c5d25a5f73b2492a7c649">plBoundingSphereTemplate&lt;Type&gt;::GetLineSegmentIntersection</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; vLineStartPos, <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; vLineEndPos,</div>
<div class="line"><a id="l00377" name="l00377"></a><span class="lineno">  377</span>  Type* out_pHitFraction <span class="comment">/* = nullptr */</span>, <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>* out_pIntersection <span class="comment">/* = nullptr */</span>)<span class="keyword"> const</span></div>
<div class="line"><a id="l00378" name="l00378"></a><span class="lineno">  378</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00379" name="l00379"></a><span class="lineno">  379</span>  Type fIntersection = 0.0f;</div>
<div class="line"><a id="l00380" name="l00380"></a><span class="lineno">  380</span> </div>
<div class="line"><a id="l00381" name="l00381"></a><span class="lineno">  381</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> vDir = vLineEndPos - vLineStartPos;</div>
<div class="line"><a id="l00382" name="l00382"></a><span class="lineno">  382</span>  <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> vDirNorm = vDir;</div>
<div class="line"><a id="l00383" name="l00383"></a><span class="lineno">  383</span>  <span class="keyword">const</span> Type fLen = vDirNorm.<a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a689178abc4bbb07988155bf8f944f571">GetLengthAndNormalize</a>();</div>
<div class="line"><a id="l00384" name="l00384"></a><span class="lineno">  384</span> </div>
<div class="line"><a id="l00385" name="l00385"></a><span class="lineno">  385</span>  <span class="keywordflow">if</span> (!GetRayIntersection(vLineStartPos, vDirNorm, &amp;fIntersection))</div>
<div class="line"><a id="l00386" name="l00386"></a><span class="lineno">  386</span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00387" name="l00387"></a><span class="lineno">  387</span> </div>
<div class="line"><a id="l00388" name="l00388"></a><span class="lineno">  388</span>  <span class="keywordflow">if</span> (fIntersection &gt; fLen)</div>
<div class="line"><a id="l00389" name="l00389"></a><span class="lineno">  389</span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00390" name="l00390"></a><span class="lineno">  390</span> </div>
<div class="line"><a id="l00391" name="l00391"></a><span class="lineno">  391</span>  <span class="keywordflow">if</span> (out_pHitFraction)</div>
<div class="line"><a id="l00392" name="l00392"></a><span class="lineno">  392</span>    *out_pHitFraction = fIntersection / fLen;</div>
<div class="line"><a id="l00393" name="l00393"></a><span class="lineno">  393</span> </div>
<div class="line"><a id="l00394" name="l00394"></a><span class="lineno">  394</span>  <span class="keywordflow">if</span> (out_pIntersection)</div>
<div class="line"><a id="l00395" name="l00395"></a><span class="lineno">  395</span>    *out_pIntersection = vLineStartPos + vDirNorm * fIntersection;</div>
<div class="line"><a id="l00396" name="l00396"></a><span class="lineno">  396</span> </div>
<div class="line"><a id="l00397" name="l00397"></a><span class="lineno">  397</span>  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00398" name="l00398"></a><span class="lineno">  398</span>}</div>
</div>
</div>
<div class="line"><a id="l00399" name="l00399"></a><span class="lineno">  399</span> </div>
<div class="line"><a id="l00400" name="l00400"></a><span class="lineno">  400</span><span class="preprocessor">#include &lt;Foundation/Math/Implementation/AllClasses_inl.h&gt;</span></div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate</a></div><div class="ttdoc">An implementation of a bounding sphere.</div><div class="ttdef"><b>Definition</b> BoundingSphere.h:11</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_a15243bed478dfb01b75cadeea4d3fb22"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#a15243bed478dfb01b75cadeea4d3fb22">plBoundingSphereTemplate::Translate</a></div><div class="ttdeci">void Translate(const plVec3Template&lt; Type &gt; &amp;vTranslation)</div><div class="ttdoc">Moves the sphere by the given vector.</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:153</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_a1bd393a2a7ba6aa51b936e13b896fbe8"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#a1bd393a2a7ba6aa51b936e13b896fbe8">plBoundingSphereTemplate::Grow</a></div><div class="ttdeci">void Grow(Type fDiff)</div><div class="ttdoc">Increases the size of the sphere by the given amount.</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:119</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_a23461a02721b01c4bc884ae28ab03e51"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#a23461a02721b01c4bc884ae28ab03e51">plBoundingSphereTemplate::MakeFromCenterAndRadius</a></div><div class="ttdeci">static plBoundingSphereTemplate&lt; Type &gt; MakeFromCenterAndRadius(const plVec3Template&lt; Type &gt; &amp;vCenter, Type fRadius)</div><div class="ttdoc">Creates a sphere with the provided center and radius.</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:35</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_a3e1c14592861197bf74c21046d0ba010"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#a3e1c14592861197bf74c21046d0ba010">plBoundingSphereTemplate::TransformFromCenter</a></div><div class="ttdeci">void TransformFromCenter(const plMat4Template&lt; Type &gt; &amp;mTransform)</div><div class="ttdoc">Transforms the sphere with the given matrix from its own center. I.e. rotations have no effect,...</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:192</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_a3efad6cea7f3c63afcd1926247ced096"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#a3efad6cea7f3c63afcd1926247ced096">plBoundingSphereTemplate::IsZero</a></div><div class="ttdeci">bool IsZero(Type fEpsilon=plMath::DefaultEpsilon&lt; Type &gt;()) const</div><div class="ttdoc">Checks whether the sphere is all zero.</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:84</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_a4281902d763ba55705bb93be25d62eb1"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#a4281902d763ba55705bb93be25d62eb1">plBoundingSphereTemplate::TransformFromOrigin</a></div><div class="ttdeci">void TransformFromOrigin(const plMat4Template&lt; Type &gt; &amp;mTransform)</div><div class="ttdoc">Transforms the sphere with the given matrix from the world origin. I.e. scalings and rotations will i...</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:183</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_a44bc7534e7341eee458b262778a83e2b"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#a44bc7534e7341eee458b262778a83e2b">plBoundingSphereTemplate::IsIdentical</a></div><div class="ttdeci">bool IsIdentical(const plBoundingSphereTemplate &amp;rhs) const</div><div class="ttdoc">Tests whether two spheres are identical.</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:129</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_a47d5e17048961fb339a7e7fdedc30f50"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#a47d5e17048961fb339a7e7fdedc30f50">plBoundingSphereTemplate::ScaleFromCenter</a></div><div class="ttdeci">void ScaleFromCenter(Type fScale)</div><div class="ttdoc">Scales the sphere's size, does not change its center position.</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:159</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_a55a520b2834c5d25a5f73b2492a7c649"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#a55a520b2834c5d25a5f73b2492a7c649">plBoundingSphereTemplate::GetLineSegmentIntersection</a></div><div class="ttdeci">bool GetLineSegmentIntersection(const plVec3Template&lt; Type &gt; &amp;vLineStartPos, const plVec3Template&lt; Type &gt; &amp;vLineEndPos, Type *out_pHitFraction=nullptr, plVec3Template&lt; Type &gt; *out_pIntersection=nullptr) const</div><div class="ttdoc">Returns true if the line segment intersects the sphere.</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:376</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_a7976749d700b4792092b7b1c97d3040f"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#a7976749d700b4792092b7b1c97d3040f">plBoundingSphereTemplate::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdoc">Returns whether the sphere has valid values.</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:90</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_a7f58c44afb68fa76264f0efcf11cbbb1"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#a7f58c44afb68fa76264f0efcf11cbbb1">plBoundingSphereTemplate::GetDistanceTo</a></div><div class="ttdeci">Type GetDistanceTo(const plVec3Template&lt; Type &gt; &amp;vPoint) const</div><div class="ttdoc">Computes the distance of the point to the sphere's surface. Returns negative values for points inside...</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:201</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_a86fd566e27ae963934df1e1e437a13eb"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#a86fd566e27ae963934df1e1e437a13eb">plBoundingSphereTemplate::MakeFromPoints</a></div><div class="ttdeci">static plBoundingSphereTemplate&lt; Type &gt; MakeFromPoints(const plVec3Template&lt; Type &gt; *pPoints, plUInt32 uiNumPoints, plUInt32 uiStride=sizeof(plVec3Template&lt; Type &gt;))</div><div class="ttdoc">Creates a bounding sphere around the provided points.</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:45</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_a902dc63cfe73242fde5261d1bcc30a4f"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#a902dc63cfe73242fde5261d1bcc30a4f">plBoundingSphereTemplate::ScaleFromOrigin</a></div><div class="ttdeci">void ScaleFromOrigin(const plVec3Template&lt; Type &gt; &amp;vScale)</div><div class="ttdoc">Scales the sphere in world unites, meaning its center position will change as well.</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:169</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_aa355fcbb5ac08671a53796f108739e66"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#aa355fcbb5ac08671a53796f108739e66">plBoundingSphereTemplate::GetClampedPoint</a></div><div class="ttdeci">const plVec3Template&lt; Type &gt; GetClampedPoint(const plVec3Template&lt; Type &gt; &amp;vPoint)</div><div class="ttdoc">Clamps the given position to the volume of the sphere. The resulting point will always be inside the ...</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:231</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_ad5f22a515ddbc6d5d923dc2b845b0de5"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#ad5f22a515ddbc6d5d923dc2b845b0de5">plBoundingSphereTemplate::Overlaps</a></div><div class="ttdeci">bool Overlaps(const plVec3Template&lt; Type &gt; *pPoints, plUInt32 uiNumPoints, plUInt32 uiStride=sizeof(plVec3Template&lt; Type &gt;)) const</div><div class="ttdoc">Checks whether any of the given points is inside the sphere.</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:270</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_ad73214e2fec34b11ab3d31d6aed63dcd"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#ad73214e2fec34b11ab3d31d6aed63dcd">plBoundingSphereTemplate::ExpandToInclude</a></div><div class="ttdeci">void ExpandToInclude(const plVec3Template&lt; Type &gt; &amp;vPoint)</div><div class="ttdoc">Increases the sphere's radius to include this point. Does NOT change its position,...</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:102</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_ada411d5b351c203c07d383bcf269e80d"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#ada411d5b351c203c07d383bcf269e80d">plBoundingSphereTemplate::MakeZero</a></div><div class="ttdeci">static plBoundingSphereTemplate&lt; Type &gt; MakeZero()</div><div class="ttdoc">Creates a sphere at the origin with radius zero.</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:17</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_adf104ee786bc3a4761bd1273134955e6"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#adf104ee786bc3a4761bd1273134955e6">plBoundingSphereTemplate::MakeInvalid</a></div><div class="ttdeci">static plBoundingSphereTemplate&lt; Type &gt; MakeInvalid(const plVec3Template&lt; Type &gt; &amp;vCenter=plVec3Template&lt; Type &gt;::MakeZero())</div><div class="ttdoc">Creates an 'invalid' sphere, with its center at the given position and a negative radius.</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:26</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_af0af7787915c3f71baf3187286a4a06e"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#af0af7787915c3f71baf3187286a4a06e">plBoundingSphereTemplate::IsNaN</a></div><div class="ttdeci">bool IsNaN() const</div><div class="ttdoc">Returns whether any value is NaN.</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:96</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_af79c066a9f8bc79f110655f92a9c6f2e"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#af79c066a9f8bc79f110655f92a9c6f2e">plBoundingSphereTemplate::GetRayIntersection</a></div><div class="ttdeci">bool GetRayIntersection(const plVec3Template&lt; Type &gt; &amp;vRayStartPos, const plVec3Template&lt; Type &gt; &amp;vRayDir, Type *out_pIntersectionDistance=nullptr, plVec3Template&lt; Type &gt; *out_pIntersection=nullptr) const</div><div class="ttdoc">Computes the intersection of a ray with this sphere. Returns true if there was an intersection....</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:337</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_af7f99c9599885d265a1e51afed4e420d"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#af7f99c9599885d265a1e51afed4e420d">plBoundingSphereTemplate::plBoundingSphereTemplate</a></div><div class="ttdeci">plBoundingSphereTemplate()</div><div class="ttdoc">Default constructor does not initialize any data.</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:6</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_af9d829bafc04751faddb4bab8bdbf6af"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#af9d829bafc04751faddb4bab8bdbf6af">plBoundingSphereTemplate::IsEqual</a></div><div class="ttdeci">bool IsEqual(const plBoundingSphereTemplate &amp;rhs, Type fEpsilon=plMath::DefaultEpsilon&lt; Type &gt;()) const</div><div class="ttdoc">Tests whether two spheres are equal within some threshold.</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:135</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_af9fd1df82a6d6e0e27ed2dd857b9c29b"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#af9fd1df82a6d6e0e27ed2dd857b9c29b">plBoundingSphereTemplate::Contains</a></div><div class="ttdeci">bool Contains(const plVec3Template&lt; Type &gt; &amp;vPoint) const</div><div class="ttdoc">Returns true if the given point is inside the sphere.</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:213</div></div>
<div class="ttc" id="aclasspl_mat4_template_htm"><div class="ttname"><a href="../../d4/dbd/classpl_mat4_template.htm">plMat4Template</a></div><div class="ttdoc">A 4x4 component matrix class.</div><div class="ttdef"><b>Definition</b> Mat4.h:11</div></div>
<div class="ttc" id="aclasspl_mat4_template_htm_a2ac5925abba756e528d58ee09b283e72"><div class="ttname"><a href="../../d4/dbd/classpl_mat4_template.htm#a2ac5925abba756e528d58ee09b283e72">plMat4Template::GetTranslationVector</a></div><div class="ttdeci">const plVec3Template&lt; Type &gt; GetTranslationVector() const</div><div class="ttdoc">Returns the first 3 components of the last column.</div><div class="ttdef"><b>Definition</b> Mat4_inl.h:430</div></div>
<div class="ttc" id="aclasspl_mat4_template_htm_a8162d53282ae699f646a79de7e4bf183"><div class="ttname"><a href="../../d4/dbd/classpl_mat4_template.htm#a8162d53282ae699f646a79de7e4bf183">plMat4Template::TransformPosition</a></div><div class="ttdeci">const plVec3Template&lt; Type &gt; TransformPosition(const plVec3Template&lt; Type &gt; &amp;v) const</div><div class="ttdoc">Matrix-vector multiplication, assuming the 4th component of the vector is one (default behavior).</div><div class="ttdef"><b>Definition</b> Mat4_inl.h:347</div></div>
<div class="ttc" id="aclasspl_mat4_template_htm_aceed1fbe400275bab9fd047dd7d0b11c"><div class="ttname"><a href="../../d4/dbd/classpl_mat4_template.htm#aceed1fbe400275bab9fd047dd7d0b11c">plMat4Template::GetScalingFactors</a></div><div class="ttdeci">const plVec3Template&lt; Type &gt; GetScalingFactors() const</div><div class="ttdoc">Returns the 3 scaling factors that are encoded in the matrix.</div><div class="ttdef"><b>Definition</b> Mat4_inl.h:737</div></div>
<div class="ttc" id="aclasspl_memory_utils_htm_a15b127801462e31890c28aac2d8bc4bf"><div class="ttname"><a href="../../df/d4d/classpl_memory_utils.htm#a15b127801462e31890c28aac2d8bc4bf">plMemoryUtils::AddByteOffset</a></div><div class="ttdeci">static T * AddByteOffset(T *pPtr, std::ptrdiff_t offset)</div><div class="ttdoc">Returns the address stored in ptr plus the given byte offset iOffset, cast to type T.</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm">plVec3Template</a></div><div class="ttdoc">A 3-component vector class.</div><div class="ttdef"><b>Definition</b> Vec3.h:9</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a48f7479d10c24b443b7df80df5407cef"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a48f7479d10c24b443b7df80df5407cef">plVec3Template::IsNormalized</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE bool IsNormalized(Type fEpsilon=plMath::HugeEpsilon&lt; Type &gt;()) const</div><div class="ttdoc">Returns, whether the squared length of this vector is between 0.999f and 1.001f.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:121</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a572854a70177ef1a0f0b6c49ecb27843"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a572854a70177ef1a0f0b6c49ecb27843">plVec3Template::GetLengthSquared</a></div><div class="ttdeci">Type GetLengthSquared() const</div><div class="ttdoc">Returns the squared length. Faster, since no square-root is taken. Useful, if one only wants to compa...</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:70</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a689178abc4bbb07988155bf8f944f571"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a689178abc4bbb07988155bf8f944f571">plVec3Template::GetLengthAndNormalize</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE Type GetLengthAndNormalize()</div><div class="ttdoc">Normalizes this vector and returns its previous length in one operation. More efficient than calling ...</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:78</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a97023781e4ee1e7ab4a36953bba77cf0"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a97023781e4ee1e7ab4a36953bba77cf0">plVec3Template::Dot</a></div><div class="ttdeci">Type Dot(const plVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the Dot-product of the two vectors (commutative, order does not matter)</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:290</div></div>
<div class="ttc" id="anamespacepl_math_htm_a25ddcfae0bd88d04d015b266a236065f"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a25ddcfae0bd88d04d015b266a236065f">plMath::Square</a></div><div class="ttdeci">constexpr PL_ALWAYS_INLINE T Square(T f)</div><div class="ttdoc">Returns f * f.</div><div class="ttdef"><b>Definition</b> Math_inl.h:8</div></div>
<div class="ttc" id="anamespacepl_math_htm_a314b24989122e22968ae0a11cc872e28"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a314b24989122e22968ae0a11cc872e28">plMath::Min</a></div><div class="ttdeci">constexpr PL_ALWAYS_INLINE T Min(T f1, T f2)</div><div class="ttdoc">Returns the smaller value, f1 or f2.</div><div class="ttdef"><b>Definition</b> Math_inl.h:27</div></div>
<div class="ttc" id="anamespacepl_math_htm_a6173d524e4c3564b75deacc577ad176a"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a6173d524e4c3564b75deacc577ad176a">plMath::MaxValue</a></div><div class="ttdeci">constexpr TYPE MaxValue()</div><div class="ttdoc">Returns the largest possible positive value (that is not infinity).</div></div>
<div class="ttc" id="anamespacepl_math_htm_a7452a7f2b15201705625a7cb78723a98"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a7452a7f2b15201705625a7cb78723a98">plMath::NaN</a></div><div class="ttdeci">constexpr TYPE NaN()</div><div class="ttdoc">Returns the value for NaN as the template type. Returns zero, if the type does not support NaN.</div><div class="ttdef"><b>Definition</b> Constants_inl.h:58</div></div>
<div class="ttc" id="anamespacepl_math_htm_aae02023b382e3990f9ebf91f40473310"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#aae02023b382e3990f9ebf91f40473310">plMath::Sqrt</a></div><div class="ttdeci">PL_ALWAYS_INLINE double Sqrt(double f)</div><div class="ttdoc">Returns the square root of f.</div><div class="ttdef"><b>Definition</b> MathDouble_inl.h:99</div></div>
<div class="ttc" id="anamespacepl_math_htm_ab41c015ef2ef7ea68f915082545755ae"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#ab41c015ef2ef7ea68f915082545755ae">plMath::IsZero</a></div><div class="ttdeci">bool IsZero(Type f, Type fEpsilon)</div><div class="ttdoc">Checks whether the given number is close to zero.</div><div class="ttdef"><b>Definition</b> Math_inl.h:288</div></div>
<div class="ttc" id="anamespacepl_math_htm_ab5afdf4907a0a61a687be8a9e1e1f81c"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#ab5afdf4907a0a61a687be8a9e1e1f81c">plMath::IsEqual</a></div><div class="ttdeci">constexpr bool IsEqual(Type lhs, Type rhs, Type fEpsilon)</div><div class="ttdoc">Checks, whether fValue is in the range [fDesired - fMaxImprecision; fDesired + fMaxImprecision].</div><div class="ttdef"><b>Definition</b> Math_inl.h:276</div></div>
<div class="ttc" id="anamespacepl_math_htm_ad724a3f51a1faa9bcc3e6a53fd6b9a4f"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">plMath::Max</a></div><div class="ttdeci">constexpr PL_ALWAYS_INLINE T Max(T f1, T f2)</div><div class="ttdoc">Returns the greater value, f1 or f2.</div><div class="ttdef"><b>Definition</b> Math_inl.h:39</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_b421fc8dbee4bf114051d293564697bb.htm">Math</a></li><li class="navelem"><a class="el" href="../../dir_7df9876b976cc75bc915cc1184bc6f86.htm">Implementation</a></li><li class="navelem"><b>BoundingSphere_inl.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
