<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>plEngine: plOpenDdlParser Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only-darkmode-toggle.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">plEngine<span id="projectnumber">&#160;Release 2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d4/dc9/classpl_open_ddl_parser.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="../../d3/d97/classpl_open_ddl_parser-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plOpenDdlParser Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div></div>
</div><!--header-->
<div class="contents">

<p>A low level parser for the OpenDDL format. It can incrementally parse the structure, individual blocks can be skipped.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../da/d91/_open_ddl_parser_8h_source.htm">OpenDdlParser.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for plOpenDdlParser:</div>
<div class="dyncontent">
<div class="center"><img src="../../d9/d2c/classpl_open_ddl_parser__inherit__graph.png" border="0" usemap="#apl_open_ddl_parser_inherit__map" alt="Inheritance graph"/></div>
<map name="apl_open_ddl_parser_inherit__map" id="apl_open_ddl_parser_inherit__map">
<area shape="rect" title="A low level parser for the OpenDDL format. It can incrementally parse the structure,..." alt="" coords="7,5,126,32"/>
<area shape="rect" href="../../d0/d83/classpl_open_ddl_reader.htm" title="An OpenDDL reader parses an entire DDL document and creates an in&#45;memory representation of the docume..." alt="" coords="5,80,128,107"/>
<area shape="poly" title=" " alt="" coords="69,48,69,80,64,80,64,48"/>
<area shape="rect" title=" " alt="" coords="15,155,118,181"/>
<area shape="poly" title=" " alt="" coords="69,122,69,154,64,154,64,122"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ae1bc1f95c7714d3df6c9bd77d9d7f2a0" id="r_ae1bc1f95c7714d3df6c9bd77d9d7f2a0"><td class="memItemLeft" align="right" valign="top"><a id="ae1bc1f95c7714d3df6c9bd77d9d7f2a0" name="ae1bc1f95c7714d3df6c9bd77d9d7f2a0"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>HadFatalParsingError</b> () const</td></tr>
<tr class="memdesc:ae1bc1f95c7714d3df6c9bd77d9d7f2a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Whether an error occurred during parsing that resulted in cancellation of further parsing. <br /></td></tr>
<tr class="separator:ae1bc1f95c7714d3df6c9bd77d9d7f2a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-methods" name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a5dd6e98de28d8565e25bae1995052861" id="r_a5dd6e98de28d8565e25bae1995052861"><td class="memItemLeft" align="right" valign="top"><a id="a5dd6e98de28d8565e25bae1995052861" name="a5dd6e98de28d8565e25bae1995052861"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetLogInterface</b> (<a class="el" href="../../d5/d6c/classpl_log_interface.htm">plLogInterface</a> *pLog)</td></tr>
<tr class="memdesc:a5dd6e98de28d8565e25bae1995052861"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets an <a class="el" href="../../d5/d6c/classpl_log_interface.htm" title="Base class for all logging classes.">plLogInterface</a> through which errors and warnings are reported. <br /></td></tr>
<tr class="separator:a5dd6e98de28d8565e25bae1995052861"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f1b08d4238dc8187db5896eb2f34405" id="r_a4f1b08d4238dc8187db5896eb2f34405"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4f1b08d4238dc8187db5896eb2f34405">SetCacheSize</a> (plUInt32 uiSizeInKB)</td></tr>
<tr class="memdesc:a4f1b08d4238dc8187db5896eb2f34405"><td class="mdescLeft">&#160;</td><td class="mdescRight">Data is returned in larger chunks, to reduce the number of function calls. The cache size determines the maximum chunk size per primitive type.  <br /></td></tr>
<tr class="separator:a4f1b08d4238dc8187db5896eb2f34405"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e09f139a2da25bdce3c0edcf3bb57b5" id="r_a1e09f139a2da25bdce3c0edcf3bb57b5"><td class="memItemLeft" align="right" valign="top"><a id="a1e09f139a2da25bdce3c0edcf3bb57b5" name="a1e09f139a2da25bdce3c0edcf3bb57b5"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetInputStream</b> (<a class="el" href="../../df/d3d/classpl_stream_reader.htm">plStreamReader</a> &amp;stream, plUInt32 uiFirstLineOffset=0)</td></tr>
<tr class="memdesc:a1e09f139a2da25bdce3c0edcf3bb57b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures the parser to read from the given stream. This can only be called once on a parser instance. <br /></td></tr>
<tr class="separator:a1e09f139a2da25bdce3c0edcf3bb57b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacaa19ee76981deba6d6d24ab8490b3f" id="r_aacaa19ee76981deba6d6d24ab8490b3f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aacaa19ee76981deba6d6d24ab8490b3f">ContinueParsing</a> ()</td></tr>
<tr class="memdesc:aacaa19ee76981deba6d6d24ab8490b3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Call this to parse the next piece of the document. This may trigger a callback through which data is returned.  <br /></td></tr>
<tr class="separator:aacaa19ee76981deba6d6d24ab8490b3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab060843a1e5ea0e1865f5766b06e28c" id="r_aab060843a1e5ea0e1865f5766b06e28c"><td class="memItemLeft" align="right" valign="top"><a id="aab060843a1e5ea0e1865f5766b06e28c" name="aab060843a1e5ea0e1865f5766b06e28c"></a>
<a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><b>ParseAll</b> ()</td></tr>
<tr class="memdesc:aab060843a1e5ea0e1865f5766b06e28c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calls <a class="el" href="#aacaa19ee76981deba6d6d24ab8490b3f" title="Call this to parse the next piece of the document. This may trigger a callback through which data is ...">ContinueParsing()</a> in a loop until that returns false. <br /></td></tr>
<tr class="separator:aab060843a1e5ea0e1865f5766b06e28c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a469915106b61bd5c87e6a673287582e4" id="r_a469915106b61bd5c87e6a673287582e4"><td class="memItemLeft" align="right" valign="top"><a id="a469915106b61bd5c87e6a673287582e4" name="a469915106b61bd5c87e6a673287582e4"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SkipRestOfObject</b> ()</td></tr>
<tr class="memdesc:a469915106b61bd5c87e6a673287582e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Skips the rest of the currently open object. No <a class="el" href="#abf24a508c2bd33aae660217d8bf41e90" title="Called when the end of an object is encountered.">OnEndObject()</a> call will be done for this object either. <br /></td></tr>
<tr class="separator:a469915106b61bd5c87e6a673287582e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09a44dcef5a1a2db965fef8cc3ef37bf" id="r_a09a44dcef5a1a2db965fef8cc3ef37bf"><td class="memItemLeft" align="right" valign="top"><a id="a09a44dcef5a1a2db965fef8cc3ef37bf" name="a09a44dcef5a1a2db965fef8cc3ef37bf"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>StopParsing</b> ()</td></tr>
<tr class="memdesc:a09a44dcef5a1a2db965fef8cc3ef37bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Can be used to prevent parsing the rest of the document. <br /></td></tr>
<tr class="separator:a09a44dcef5a1a2db965fef8cc3ef37bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92e4c879c1f3a457c3e22943e922a3a0" id="r_a92e4c879c1f3a457c3e22943e922a3a0"><td class="memItemLeft" align="right" valign="top"><a id="a92e4c879c1f3a457c3e22943e922a3a0" name="a92e4c879c1f3a457c3e22943e922a3a0"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>ParsingError</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sMessage, bool bFatal)</td></tr>
<tr class="memdesc:a92e4c879c1f3a457c3e22943e922a3a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Outputs that a parsing error was detected (via OnParsingError) and stops further parsing, if bFatal is set to true. <br /></td></tr>
<tr class="separator:a92e4c879c1f3a457c3e22943e922a3a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6810bd5180b2c19221b6f5a4c99ffcb2" id="r_a6810bd5180b2c19221b6f5a4c99ffcb2"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6810bd5180b2c19221b6f5a4c99ffcb2">OnParsingError</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sMessage, bool bFatal, plUInt32 uiLine, plUInt32 uiColumn)</td></tr>
<tr class="memdesc:a6810bd5180b2c19221b6f5a4c99ffcb2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when something unexpected is encountered in the document.  <br /></td></tr>
<tr class="separator:a6810bd5180b2c19221b6f5a4c99ffcb2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8c6034fcdae70aaa352d82d1c7c33b2" id="r_ac8c6034fcdae70aaa352d82d1c7c33b2"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac8c6034fcdae70aaa352d82d1c7c33b2">OnBeginObject</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sType, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, bool bGlobalName)=0</td></tr>
<tr class="memdesc:ac8c6034fcdae70aaa352d82d1c7c33b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when a new object is encountered.  <br /></td></tr>
<tr class="separator:ac8c6034fcdae70aaa352d82d1c7c33b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf24a508c2bd33aae660217d8bf41e90" id="r_abf24a508c2bd33aae660217d8bf41e90"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#abf24a508c2bd33aae660217d8bf41e90">OnEndObject</a> ()=0</td></tr>
<tr class="memdesc:abf24a508c2bd33aae660217d8bf41e90"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when the end of an object is encountered.  <br /></td></tr>
<tr class="separator:abf24a508c2bd33aae660217d8bf41e90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a961fb56f954daf89461a372129fd6c" id="r_a6a961fb56f954daf89461a372129fd6c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6a961fb56f954daf89461a372129fd6c">OnBeginPrimitiveList</a> (plOpenDdlPrimitiveType type, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, bool bGlobalName)=0</td></tr>
<tr class="memdesc:a6a961fb56f954daf89461a372129fd6c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when a new primitive object is encountered.  <br /></td></tr>
<tr class="separator:a6a961fb56f954daf89461a372129fd6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c2d5ebb979fdd96b55848edaa9b3bc0" id="r_a3c2d5ebb979fdd96b55848edaa9b3bc0"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3c2d5ebb979fdd96b55848edaa9b3bc0">OnEndPrimitiveList</a> ()=0</td></tr>
<tr class="memdesc:a3c2d5ebb979fdd96b55848edaa9b3bc0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when the end of a primitive object is encountered.  <br /></td></tr>
<tr class="separator:a3c2d5ebb979fdd96b55848edaa9b3bc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76d84aa70ba363e8f81bd1ca7cb8cacf" id="r_a76d84aa70ba363e8f81bd1ca7cb8cacf"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a76d84aa70ba363e8f81bd1ca7cb8cacf">OnPrimitiveBool</a> (plUInt32 count, const bool *pData, bool bThisIsAll)=0</td></tr>
<tr class="memdesc:a76d84aa70ba363e8f81bd1ca7cb8cacf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:a76d84aa70ba363e8f81bd1ca7cb8cacf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7ba7db1ab2384ea65b33949b468e5a4" id="r_ad7ba7db1ab2384ea65b33949b468e5a4"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad7ba7db1ab2384ea65b33949b468e5a4">OnPrimitiveInt8</a> (plUInt32 count, const plInt8 *pData, bool bThisIsAll)=0</td></tr>
<tr class="memdesc:ad7ba7db1ab2384ea65b33949b468e5a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:ad7ba7db1ab2384ea65b33949b468e5a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72566c4602cb5a4e68de021735172ef6" id="r_a72566c4602cb5a4e68de021735172ef6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a72566c4602cb5a4e68de021735172ef6">OnPrimitiveInt16</a> (plUInt32 count, const plInt16 *pData, bool bThisIsAll)=0</td></tr>
<tr class="memdesc:a72566c4602cb5a4e68de021735172ef6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:a72566c4602cb5a4e68de021735172ef6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ea15f8895a299ede992ce0b0210d10f" id="r_a5ea15f8895a299ede992ce0b0210d10f"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5ea15f8895a299ede992ce0b0210d10f">OnPrimitiveInt32</a> (plUInt32 count, const plInt32 *pData, bool bThisIsAll)=0</td></tr>
<tr class="memdesc:a5ea15f8895a299ede992ce0b0210d10f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:a5ea15f8895a299ede992ce0b0210d10f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a899ffe3ff05512705a0291614cb8b60b" id="r_a899ffe3ff05512705a0291614cb8b60b"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a899ffe3ff05512705a0291614cb8b60b">OnPrimitiveInt64</a> (plUInt32 count, const plInt64 *pData, bool bThisIsAll)=0</td></tr>
<tr class="memdesc:a899ffe3ff05512705a0291614cb8b60b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:a899ffe3ff05512705a0291614cb8b60b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99f64956d848eb45aa4bdba45dd08559" id="r_a99f64956d848eb45aa4bdba45dd08559"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a99f64956d848eb45aa4bdba45dd08559">OnPrimitiveUInt8</a> (plUInt32 count, const plUInt8 *pData, bool bThisIsAll)=0</td></tr>
<tr class="memdesc:a99f64956d848eb45aa4bdba45dd08559"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:a99f64956d848eb45aa4bdba45dd08559"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21a765f5325d89c7af619c11daa04b31" id="r_a21a765f5325d89c7af619c11daa04b31"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a21a765f5325d89c7af619c11daa04b31">OnPrimitiveUInt16</a> (plUInt32 count, const plUInt16 *pData, bool bThisIsAll)=0</td></tr>
<tr class="memdesc:a21a765f5325d89c7af619c11daa04b31"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:a21a765f5325d89c7af619c11daa04b31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6dc22351f7fc4b0cd17bab0cd2a00aad" id="r_a6dc22351f7fc4b0cd17bab0cd2a00aad"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6dc22351f7fc4b0cd17bab0cd2a00aad">OnPrimitiveUInt32</a> (plUInt32 count, const plUInt32 *pData, bool bThisIsAll)=0</td></tr>
<tr class="memdesc:a6dc22351f7fc4b0cd17bab0cd2a00aad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:a6dc22351f7fc4b0cd17bab0cd2a00aad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f98cd4f7f186e89630b9097098117d2" id="r_a9f98cd4f7f186e89630b9097098117d2"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a9f98cd4f7f186e89630b9097098117d2">OnPrimitiveUInt64</a> (plUInt32 count, const plUInt64 *pData, bool bThisIsAll)=0</td></tr>
<tr class="memdesc:a9f98cd4f7f186e89630b9097098117d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:a9f98cd4f7f186e89630b9097098117d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a931abada90b3ad39e521aee531b23deb" id="r_a931abada90b3ad39e521aee531b23deb"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a931abada90b3ad39e521aee531b23deb">OnPrimitiveFloat</a> (plUInt32 count, const float *pData, bool bThisIsAll)=0</td></tr>
<tr class="memdesc:a931abada90b3ad39e521aee531b23deb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:a931abada90b3ad39e521aee531b23deb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2dec42d04bb2e5a9d847b5632edeeb76" id="r_a2dec42d04bb2e5a9d847b5632edeeb76"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2dec42d04bb2e5a9d847b5632edeeb76">OnPrimitiveDouble</a> (plUInt32 count, const double *pData, bool bThisIsAll)=0</td></tr>
<tr class="memdesc:a2dec42d04bb2e5a9d847b5632edeeb76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:a2dec42d04bb2e5a9d847b5632edeeb76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9e2229be16e9f90d885e43ff54157c2" id="r_ac9e2229be16e9f90d885e43ff54157c2"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac9e2229be16e9f90d885e43ff54157c2">OnPrimitiveString</a> (plUInt32 count, const <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> *pData, bool bThisIsAll)=0</td></tr>
<tr class="memdesc:ac9e2229be16e9f90d885e43ff54157c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:ac9e2229be16e9f90d885e43ff54157c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-attribs" name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a6b057121a5f5bdce8e72565ac178e9e0" id="r_a6b057121a5f5bdce8e72565ac178e9e0"><td class="memItemLeft" align="right" valign="top"><a id="a6b057121a5f5bdce8e72565ac178e9e0" name="a6b057121a5f5bdce8e72565ac178e9e0"></a>
<a class="el" href="../../d5/d6c/classpl_log_interface.htm">plLogInterface</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>m_pLogInterface</b></td></tr>
<tr class="separator:a6b057121a5f5bdce8e72565ac178e9e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A low level parser for the OpenDDL format. It can incrementally parse the structure, individual blocks can be skipped. </p>
<p>The document structure is returned through virtual functions that need to be overridden. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="aacaa19ee76981deba6d6d24ab8490b3f" name="aacaa19ee76981deba6d6d24ab8490b3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aacaa19ee76981deba6d6d24ab8490b3f">&#9670;&#160;</a></span>ContinueParsing()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool plOpenDdlParser::ContinueParsing </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Call this to parse the next piece of the document. This may trigger a callback through which data is returned. </p>
<p>This function returns false when the end of the document has been reached, or a fatal parsing error has been reported. </p>

</div>
</div>
<a id="ac8c6034fcdae70aaa352d82d1c7c33b2" name="ac8c6034fcdae70aaa352d82d1c7c33b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac8c6034fcdae70aaa352d82d1c7c33b2">&#9670;&#160;</a></span>OnBeginObject()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plOpenDdlParser::OnBeginObject </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sType</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sName</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bGlobalName</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when a new object is encountered. </p>

<p>Implemented in <a class="el" href="../../d0/d83/classpl_open_ddl_reader.htm#a5e57a4e45e55cc76870980c09c263d01">plOpenDdlReader</a>.</p>

</div>
</div>
<a id="a6a961fb56f954daf89461a372129fd6c" name="a6a961fb56f954daf89461a372129fd6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a961fb56f954daf89461a372129fd6c">&#9670;&#160;</a></span>OnBeginPrimitiveList()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plOpenDdlParser::OnBeginPrimitiveList </td>
          <td>(</td>
          <td class="paramtype">plOpenDdlPrimitiveType</td>          <td class="paramname"><span class="paramname"><em>type</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sName</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bGlobalName</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when a new primitive object is encountered. </p>

<p>Implemented in <a class="el" href="../../d0/d83/classpl_open_ddl_reader.htm#a72061cbe99e7f9d8cd749f5291eb4f03">plOpenDdlReader</a>.</p>

</div>
</div>
<a id="abf24a508c2bd33aae660217d8bf41e90" name="abf24a508c2bd33aae660217d8bf41e90"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abf24a508c2bd33aae660217d8bf41e90">&#9670;&#160;</a></span>OnEndObject()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plOpenDdlParser::OnEndObject </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when the end of an object is encountered. </p>

<p>Implemented in <a class="el" href="../../d0/d83/classpl_open_ddl_reader.htm#a2888d135b287c1b6234320b10458f5e9">plOpenDdlReader</a>.</p>

</div>
</div>
<a id="a3c2d5ebb979fdd96b55848edaa9b3bc0" name="a3c2d5ebb979fdd96b55848edaa9b3bc0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c2d5ebb979fdd96b55848edaa9b3bc0">&#9670;&#160;</a></span>OnEndPrimitiveList()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plOpenDdlParser::OnEndPrimitiveList </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when the end of a primitive object is encountered. </p>

<p>Implemented in <a class="el" href="../../d0/d83/classpl_open_ddl_reader.htm#a52e844f97e5beac0335f20d1898ad1ab">plOpenDdlReader</a>.</p>

</div>
</div>
<a id="a6810bd5180b2c19221b6f5a4c99ffcb2" name="a6810bd5180b2c19221b6f5a4c99ffcb2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6810bd5180b2c19221b6f5a4c99ffcb2">&#9670;&#160;</a></span>OnParsingError()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plOpenDdlParser::OnParsingError </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sMessage</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bFatal</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiLine</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiColumn</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when something unexpected is encountered in the document. </p>
<p>The error message describes what was expected and what was encountered. If bFatal is true, the error has left the parser in an unrecoverable state and thus it will not continue parsing. In that case client code will need to clean up it's open state, as no further callbacks will be called. If bFatal is false, the document is not entirely valid, but the parser is still able to continue. </p>

<p>Reimplemented in <a class="el" href="../../d0/d83/classpl_open_ddl_reader.htm#aa702fc2ffa307608fe7cbd4f6e743a33">plOpenDdlReader</a>.</p>

</div>
</div>
<a id="a76d84aa70ba363e8f81bd1ca7cb8cacf" name="a76d84aa70ba363e8f81bd1ca7cb8cacf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a76d84aa70ba363e8f81bd1ca7cb8cacf">&#9670;&#160;</a></span>OnPrimitiveBool()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plOpenDdlParser::OnPrimitiveBool </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>
<dl class="todo"><dt><b><a class="el" href="../../dd/da0/todo.htm#_todo000045">Todo</a></b></dt><dd>Currently not supported </dd></dl>

<p>Implemented in <a class="el" href="../../d0/d83/classpl_open_ddl_reader.htm#a5b533de33efb166d7ded9ae61f3080c5">plOpenDdlReader</a>.</p>

</div>
</div>
<a id="a2dec42d04bb2e5a9d847b5632edeeb76" name="a2dec42d04bb2e5a9d847b5632edeeb76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2dec42d04bb2e5a9d847b5632edeeb76">&#9670;&#160;</a></span>OnPrimitiveDouble()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plOpenDdlParser::OnPrimitiveDouble </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>

<p>Implemented in <a class="el" href="../../d0/d83/classpl_open_ddl_reader.htm#a5ced502f690613ca90442f624d32ea1a">plOpenDdlReader</a>.</p>

</div>
</div>
<a id="a931abada90b3ad39e521aee531b23deb" name="a931abada90b3ad39e521aee531b23deb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a931abada90b3ad39e521aee531b23deb">&#9670;&#160;</a></span>OnPrimitiveFloat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plOpenDdlParser::OnPrimitiveFloat </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>

<p>Implemented in <a class="el" href="../../d0/d83/classpl_open_ddl_reader.htm#af297e7d13b14ab913046b33f03cf4e0f">plOpenDdlReader</a>.</p>

</div>
</div>
<a id="a72566c4602cb5a4e68de021735172ef6" name="a72566c4602cb5a4e68de021735172ef6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72566c4602cb5a4e68de021735172ef6">&#9670;&#160;</a></span>OnPrimitiveInt16()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plOpenDdlParser::OnPrimitiveInt16 </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const plInt16 *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>

<p>Implemented in <a class="el" href="../../d0/d83/classpl_open_ddl_reader.htm#a7903a28c729661a4817ba8cacd64f295">plOpenDdlReader</a>.</p>

</div>
</div>
<a id="a5ea15f8895a299ede992ce0b0210d10f" name="a5ea15f8895a299ede992ce0b0210d10f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ea15f8895a299ede992ce0b0210d10f">&#9670;&#160;</a></span>OnPrimitiveInt32()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plOpenDdlParser::OnPrimitiveInt32 </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const plInt32 *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>

<p>Implemented in <a class="el" href="../../d0/d83/classpl_open_ddl_reader.htm#a3d0e5a38332d0e0b394a480fc25677f1">plOpenDdlReader</a>.</p>

</div>
</div>
<a id="a899ffe3ff05512705a0291614cb8b60b" name="a899ffe3ff05512705a0291614cb8b60b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a899ffe3ff05512705a0291614cb8b60b">&#9670;&#160;</a></span>OnPrimitiveInt64()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plOpenDdlParser::OnPrimitiveInt64 </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const plInt64 *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>

<p>Implemented in <a class="el" href="../../d0/d83/classpl_open_ddl_reader.htm#aee3850925181113de298d68565be4fe6">plOpenDdlReader</a>.</p>

</div>
</div>
<a id="ad7ba7db1ab2384ea65b33949b468e5a4" name="ad7ba7db1ab2384ea65b33949b468e5a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7ba7db1ab2384ea65b33949b468e5a4">&#9670;&#160;</a></span>OnPrimitiveInt8()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plOpenDdlParser::OnPrimitiveInt8 </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const plInt8 *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>

<p>Implemented in <a class="el" href="../../d0/d83/classpl_open_ddl_reader.htm#ac81493c51068a2174827c678158abac6">plOpenDdlReader</a>.</p>

</div>
</div>
<a id="ac9e2229be16e9f90d885e43ff54157c2" name="ac9e2229be16e9f90d885e43ff54157c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac9e2229be16e9f90d885e43ff54157c2">&#9670;&#160;</a></span>OnPrimitiveString()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plOpenDdlParser::OnPrimitiveString </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>

<p>Implemented in <a class="el" href="../../d0/d83/classpl_open_ddl_reader.htm#ac9dcc04346068ba636fdeb378fe27a56">plOpenDdlReader</a>.</p>

</div>
</div>
<a id="a21a765f5325d89c7af619c11daa04b31" name="a21a765f5325d89c7af619c11daa04b31"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21a765f5325d89c7af619c11daa04b31">&#9670;&#160;</a></span>OnPrimitiveUInt16()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plOpenDdlParser::OnPrimitiveUInt16 </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const plUInt16 *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>

<p>Implemented in <a class="el" href="../../d0/d83/classpl_open_ddl_reader.htm#a6aa1a64a13394d594dff185c9a634517">plOpenDdlReader</a>.</p>

</div>
</div>
<a id="a6dc22351f7fc4b0cd17bab0cd2a00aad" name="a6dc22351f7fc4b0cd17bab0cd2a00aad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6dc22351f7fc4b0cd17bab0cd2a00aad">&#9670;&#160;</a></span>OnPrimitiveUInt32()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plOpenDdlParser::OnPrimitiveUInt32 </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const plUInt32 *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>

<p>Implemented in <a class="el" href="../../d0/d83/classpl_open_ddl_reader.htm#afe3c8ca38a6efee0a0b13c6069c30d4d">plOpenDdlReader</a>.</p>

</div>
</div>
<a id="a9f98cd4f7f186e89630b9097098117d2" name="a9f98cd4f7f186e89630b9097098117d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f98cd4f7f186e89630b9097098117d2">&#9670;&#160;</a></span>OnPrimitiveUInt64()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plOpenDdlParser::OnPrimitiveUInt64 </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const plUInt64 *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>

<p>Implemented in <a class="el" href="../../d0/d83/classpl_open_ddl_reader.htm#a39d519b6d60332d7d1070a012c14f7a8">plOpenDdlReader</a>.</p>

</div>
</div>
<a id="a99f64956d848eb45aa4bdba45dd08559" name="a99f64956d848eb45aa4bdba45dd08559"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a99f64956d848eb45aa4bdba45dd08559">&#9670;&#160;</a></span>OnPrimitiveUInt8()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plOpenDdlParser::OnPrimitiveUInt8 </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const plUInt8 *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>

<p>Implemented in <a class="el" href="../../d0/d83/classpl_open_ddl_reader.htm#aa8cdd9aec9f5f3ebfd1e4c09edcb9ef9">plOpenDdlReader</a>.</p>

</div>
</div>
<a id="a4f1b08d4238dc8187db5896eb2f34405" name="a4f1b08d4238dc8187db5896eb2f34405"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f1b08d4238dc8187db5896eb2f34405">&#9670;&#160;</a></span>SetCacheSize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plOpenDdlParser::SetCacheSize </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiSizeInKB</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Data is returned in larger chunks, to reduce the number of function calls. The cache size determines the maximum chunk size per primitive type. </p>
<p>Default cache size is 4 KB. That means up to 1000 integers may be returned in one chunk (or 500 doubles). It does not help to increase the chunk size, when the input data doesn't use such large data lists. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/Engine/Foundation/IO/<a class="el" href="../../da/d91/_open_ddl_parser_8h_source.htm">OpenDdlParser.h</a></li>
<li>Code/Engine/Foundation/IO/Implementation/<b>OpenDdlParser.cpp</b></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm">plOpenDdlParser</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
