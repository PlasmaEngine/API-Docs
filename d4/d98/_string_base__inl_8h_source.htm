<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<!-- BEGIN opengraph metadata -->
<meta property="og:title" content="Doxygen Awesome" />
<meta property="og:image" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta property="og:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<meta property="og:url" content="https://jothepro.github.io/doxygen-awesome-css/" />
<!-- END opengraph metadata -->
<!-- BEGIN twitter metadata -->
<meta name="twitter:image:src" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta name="twitter:title" content="Doxygen Awesome" />
<meta name="twitter:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<!-- END twitter metadata -->
<title>Plasma Engine: Code/Engine/Foundation/Strings/Implementation/StringBase_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link rel="icon" type="image/svg+xml" href="logo.drawio.svg"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-paragraph-link.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-tabs.js"></script>
<script type="text/javascript" src="../../toggle-alternative-theme.js"></script>
<script type="text/javascript">
    DoxygenAwesomeFragmentCopyButton.init()
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeParagraphLink.init()
    DoxygenAwesomeInteractiveToc.init()
    DoxygenAwesomeTabs.init()
</script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Plasma Engine
   &#160;<span id="projectnumber">2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d4/d98/_string_base__inl_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">StringBase_inl.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span>PL_ALWAYS_INLINE <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;Derived&gt;::InternalGetData</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span>  <span class="keyword">const</span> Derived* pDerived = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Derived*<span class="keyword">&gt;</span>(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span>  <span class="keywordflow">return</span> pDerived-&gt;GetData();</div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span>}</div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span> </div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span>PL_ALWAYS_INLINE <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;Derived&gt;::InternalGetDataEnd</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>  <span class="keyword">const</span> Derived* pDerived = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Derived*<span class="keyword">&gt;</span>(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>  <span class="keywordflow">return</span> pDerived-&gt;GetData() + pDerived-&gt;GetElementCount();</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span>}</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span> </div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>PL_ALWAYS_INLINE plUInt32 <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;Derived&gt;::InternalGetElementCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>  <span class="keyword">const</span> Derived* pDerived = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Derived*<span class="keyword">&gt;</span>(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>  <span class="keywordflow">return</span> pDerived-&gt;GetElementCount();</div>
<div class="foldopen" id="foldopen00022" data-start="{" data-end="}">
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a7ac3a243ee9ea1f99f7d82dd8e1d60b5">   22</a></span>}</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span> </div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00025" data-start="{" data-end="}">
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a7ac3a243ee9ea1f99f7d82dd8e1d60b5">   25</a></span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a7ac3a243ee9ea1f99f7d82dd8e1d60b5">plStringBase&lt;Derived&gt;::IsEmpty</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#af3e32769f27383ebd20d9cb1d581be91">plStringUtils::IsNullOrEmpty</a>(InternalGetData()) || (InternalGetData() == InternalGetDataEnd());</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a4af994336831ee8ce7ea1aa392388ed6">   28</a></span>}</div>
</div>
</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span> </div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00031" data-start="{" data-end="}">
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#ab6961a7b6896b3b482b20df06de7c689">   31</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a6ae403b4b3e534b94edd50edd888b4f0">plStringBase&lt;Derived&gt;::StartsWith</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStartsWith)<span class="keyword"> const</span></div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#aa1b49002e90a4951b887735c06800981">plStringUtils::StartsWith</a>(InternalGetData(), sStartsWith.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a74f83d2da688a507fee719c4deea8e28">GetStartPointer</a>(), InternalGetDataEnd(), sStartsWith.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a4467c8ce79c4a4dd012a0380fe9bb0d0">GetEndPointer</a>());</div>
<div class="foldopen" id="foldopen00034" data-start="{" data-end="}">
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a8986dab73aa8d7095b79ddf761cf6b0d">   34</a></span>}</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span> </div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00037" data-start="{" data-end="}">
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a4af994336831ee8ce7ea1aa392388ed6">   37</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a4af994336831ee8ce7ea1aa392388ed6">plStringBase&lt;Derived&gt;::StartsWith_NoCase</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStartsWith)<span class="keyword"> const</span></div>
<div class="foldopen" id="foldopen00038" data-start="{" data-end="}">
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#afb80af12ae97555d0870359e86bd1a68">   38</a></span><span class="keyword"></span>{</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#aecfa42149d0d8b134bd0821c31c35b5e">plStringUtils::StartsWith_NoCase</a>(InternalGetData(), sStartsWith.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a74f83d2da688a507fee719c4deea8e28">GetStartPointer</a>(), InternalGetDataEnd(), sStartsWith.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a4467c8ce79c4a4dd012a0380fe9bb0d0">GetEndPointer</a>());</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span>}</div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span> </div>
<div class="foldopen" id="foldopen00042" data-start="{" data-end="}">
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a8972e55722d17be6604b1df08082cf83">   42</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00043" data-start="{" data-end="}">
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#ab6961a7b6896b3b482b20df06de7c689">   43</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#ab6961a7b6896b3b482b20df06de7c689">plStringBase&lt;Derived&gt;::EndsWith</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sEndsWith)<span class="keyword"> const</span></div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#a838eada49316bf517333d30ec38d3b4c">plStringUtils::EndsWith</a>(InternalGetData(), sEndsWith.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a74f83d2da688a507fee719c4deea8e28">GetStartPointer</a>(), InternalGetDataEnd(), sEndsWith.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a4467c8ce79c4a4dd012a0380fe9bb0d0">GetEndPointer</a>());</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a2d116e5f43c0ae774c2346b5f94a992c">   46</a></span>}</div>
</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span> </div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00049" data-start="{" data-end="}">
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a8986dab73aa8d7095b79ddf761cf6b0d">   49</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a8986dab73aa8d7095b79ddf761cf6b0d">plStringBase&lt;Derived&gt;::EndsWith_NoCase</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sEndsWith)<span class="keyword"> const</span></div>
<div class="foldopen" id="foldopen00050" data-start="{" data-end="}">
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a54c2b870afa5c0a2fb437e32219eb7d1">   50</a></span><span class="keyword"></span>{</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#a4d30321cef0e930af1a5f510d85eb82e">plStringUtils::EndsWith_NoCase</a>(InternalGetData(), sEndsWith.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a74f83d2da688a507fee719c4deea8e28">GetStartPointer</a>(), InternalGetDataEnd(), sEndsWith.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a4467c8ce79c4a4dd012a0380fe9bb0d0">GetEndPointer</a>());</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>}</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span> </div>
<div class="foldopen" id="foldopen00054" data-start="{" data-end="}">
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#af40ca95f7c2b77e18266ffe6ff7483a8">   54</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00055" data-start="{" data-end="}">
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#afb80af12ae97555d0870359e86bd1a68">   55</a></span><span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#afb80af12ae97555d0870359e86bd1a68">plStringBase&lt;Derived&gt;::FindSubString</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStringToFind, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt <span class="comment">/* = nullptr */</span>)<span class="keyword"> const</span></div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>  <span class="keywordflow">if</span> (szStartSearchAt == <span class="keyword">nullptr</span>)</div>
<div class="foldopen" id="foldopen00058" data-start="{" data-end="}">
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a8b6659ee0b76480c3ba534f74a4089fa">   58</a></span>    szStartSearchAt = InternalGetData();</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span> </div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>  PL_ASSERT_DEV((szStartSearchAt &gt;= InternalGetData()) &amp;&amp; (szStartSearchAt &lt;= InternalGetDataEnd()), <span class="stringliteral">&quot;The given pointer to start searching at is not inside this strings valid range.&quot;</span>);</div>
<div class="foldopen" id="foldopen00061" data-start="{" data-end="}">
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a71ac29b18708a376ce3e9f03bb756a82">   61</a></span> </div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#a57b8e9f8cd1a2821d8dad1e050ed6f77">plStringUtils::FindSubString</a>(szStartSearchAt, sStringToFind.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a74f83d2da688a507fee719c4deea8e28">GetStartPointer</a>(), InternalGetDataEnd(), sStringToFind.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a4467c8ce79c4a4dd012a0380fe9bb0d0">GetEndPointer</a>());</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>}</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span> </div>
<div class="foldopen" id="foldopen00065" data-start="{" data-end="}">
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a946009c071c70e5b2ad616a16213d113">   65</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00066" data-start="{" data-end="}">
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a8972e55722d17be6604b1df08082cf83">   66</a></span><span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a8972e55722d17be6604b1df08082cf83">plStringBase&lt;Derived&gt;::FindSubString_NoCase</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStringToFind, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt <span class="comment">/* = nullptr */</span>)<span class="keyword"> const</span></div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span><span class="keyword"></span>{</div>
<div class="foldopen" id="foldopen00068" data-start="{" data-end="}">
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a91a71d7390204850be0e8fc9193e0f31">   68</a></span>  <span class="keywordflow">if</span> (szStartSearchAt == <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>    szStartSearchAt = InternalGetData();</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span> </div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>  PL_ASSERT_DEV((szStartSearchAt &gt;= InternalGetData()) &amp;&amp; (szStartSearchAt &lt;= InternalGetDataEnd()), <span class="stringliteral">&quot;The given pointer to start searching at is not inside this strings valid range.&quot;</span>);</div>
<div class="foldopen" id="foldopen00072" data-start="{" data-end="}">
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a4af63c140fc4fe56e1a290df992cec7e">   72</a></span> </div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#a377e785747082b885661b4be55481134">plStringUtils::FindSubString_NoCase</a>(szStartSearchAt, sStringToFind.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a74f83d2da688a507fee719c4deea8e28">GetStartPointer</a>(), InternalGetDataEnd(), sStringToFind.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a4467c8ce79c4a4dd012a0380fe9bb0d0">GetEndPointer</a>());</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>}</div>
<div class="foldopen" id="foldopen00075" data-start="{" data-end="}">
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a928260385c9a80109751fbdb1849b321">   75</a></span> </div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00077" data-start="{" data-end="}">
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a2d116e5f43c0ae774c2346b5f94a992c">   77</a></span><span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a2d116e5f43c0ae774c2346b5f94a992c">plStringBase&lt;Derived&gt;::FindLastSubString</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStringToFind, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt <span class="comment">/* = nullptr */</span>)<span class="keyword"> const</span></div>
<div class="foldopen" id="foldopen00078" data-start="{" data-end="}">
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a1854b21f65a086f15e164f739d53950d">   78</a></span><span class="keyword"></span>{</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>  <span class="keywordflow">if</span> (szStartSearchAt == <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>    szStartSearchAt = InternalGetDataEnd();</div>
<div class="foldopen" id="foldopen00081" data-start="{" data-end="}">
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#ad0801b3fafc90b1beba38313c205e704">   81</a></span> </div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>  PL_ASSERT_DEV((szStartSearchAt &gt;= InternalGetData()) &amp;&amp; (szStartSearchAt &lt;= InternalGetDataEnd()),</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>    <span class="stringliteral">&quot;The given pointer to start searching at is not inside this strings valid range.&quot;</span>);</div>
<div class="foldopen" id="foldopen00084" data-start="{" data-end="}">
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a632d41fe7d33c9e42391ee905a361b06">   84</a></span> </div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#ae91a8556266df1ec41400e10c7430914">plStringUtils::FindLastSubString</a>(InternalGetData(), sStringToFind.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a74f83d2da688a507fee719c4deea8e28">GetStartPointer</a>(), szStartSearchAt, InternalGetDataEnd(), sStringToFind.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a4467c8ce79c4a4dd012a0380fe9bb0d0">GetEndPointer</a>());</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>}</div>
<div class="foldopen" id="foldopen00087" data-start="{" data-end="}">
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#aa5dc9b2300f37b7bb4a42999870e6092">   87</a></span> </div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00089" data-start="{" data-end="}">
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a54c2b870afa5c0a2fb437e32219eb7d1">   89</a></span><span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a54c2b870afa5c0a2fb437e32219eb7d1">plStringBase&lt;Derived&gt;::FindLastSubString_NoCase</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStringToFind, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt <span class="comment">/* = nullptr */</span>)<span class="keyword"> const</span></div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>  <span class="keywordflow">if</span> (szStartSearchAt == <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>    szStartSearchAt = InternalGetDataEnd();</div>
<div class="foldopen" id="foldopen00093" data-start="{" data-end="}">
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#ac5f533a25843450da719ad9c78827c29">   93</a></span> </div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>  PL_ASSERT_DEV((szStartSearchAt &gt;= InternalGetData()) &amp;&amp; (szStartSearchAt &lt;= InternalGetDataEnd()),</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>    <span class="stringliteral">&quot;The given pointer to start searching at is not inside this strings valid range.&quot;</span>);</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span> </div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#ac00851da0fe9a6a1a1f9383befb50820">plStringUtils::FindLastSubString_NoCase</a>(InternalGetData(), sStringToFind.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a74f83d2da688a507fee719c4deea8e28">GetStartPointer</a>(), szStartSearchAt, InternalGetDataEnd(), sStringToFind.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a4467c8ce79c4a4dd012a0380fe9bb0d0">GetEndPointer</a>());</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>}</div>
<div class="foldopen" id="foldopen00099" data-start="{" data-end="}">
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a97bd0de57b678794224901f970b864b7">   99</a></span> </div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00101" data-start="{" data-end="}">
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#af40ca95f7c2b77e18266ffe6ff7483a8">  101</a></span><span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#af40ca95f7c2b77e18266ffe6ff7483a8">plStringBase&lt;Derived&gt;::FindWholeWord</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szSearchFor, <a class="code hl_typedef" href="../../de/d4d/classpl_string_utils.htm#a8bc7e3a526fc09382eaa1276895f3266">plStringUtils::PL_CHARACTER_FILTER</a> isDelimiterCB, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt <span class="comment">/* = nullptr */</span>)<span class="keyword"> const</span></div>
<div class="foldopen" id="foldopen00102" data-start="{" data-end="}">
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a8edc0eeb6a433a7397215106abd0f39f">  102</a></span><span class="keyword"></span>{</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>  <span class="keywordflow">if</span> (szStartSearchAt == <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>    szStartSearchAt = InternalGetData();</div>
<div class="foldopen" id="foldopen00105" data-start="{" data-end="}">
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#ae137b75721c90c6ca1b8aec2b9fa7653">  105</a></span> </div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>  PL_ASSERT_DEV((szStartSearchAt &gt;= InternalGetData()) &amp;&amp; (szStartSearchAt &lt;= InternalGetDataEnd()), <span class="stringliteral">&quot;The given pointer to start searching at is not inside this strings valid range.&quot;</span>);</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span> </div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#aeb36ed6f5d73d409049c30c993f999a2">plStringUtils::FindWholeWord</a>(szStartSearchAt, szSearchFor, isDelimiterCB, InternalGetDataEnd());</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>}</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span> </div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00112" data-start="{" data-end="}">
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a8b6659ee0b76480c3ba534f74a4089fa">  112</a></span><span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a8b6659ee0b76480c3ba534f74a4089fa">plStringBase&lt;Derived&gt;::FindWholeWord_NoCase</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szSearchFor, <a class="code hl_typedef" href="../../de/d4d/classpl_string_utils.htm#a8bc7e3a526fc09382eaa1276895f3266">plStringUtils::PL_CHARACTER_FILTER</a> isDelimiterCB, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt <span class="comment">/* = nullptr */</span>)<span class="keyword"> const</span></div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>  <span class="keywordflow">if</span> (szStartSearchAt == <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>    szStartSearchAt = InternalGetData();</div>
<div class="foldopen" id="foldopen00116" data-start="{" data-end="}">
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a9a9997394d0cbb4121601246cfd910c6">  116</a></span> </div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>  PL_ASSERT_DEV((szStartSearchAt &gt;= InternalGetData()) &amp;&amp; (szStartSearchAt &lt;= InternalGetDataEnd()), <span class="stringliteral">&quot;The given pointer to start searching at is not inside this strings valid range.&quot;</span>);</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span> </div>
<div class="foldopen" id="foldopen00119" data-start="{" data-end="}">
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a99dd48e46918eea24a01ee4893f8301a">  119</a></span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#a7534b7f3c1b300505e8d7fe356520d2f">plStringUtils::FindWholeWord_NoCase</a>(szStartSearchAt, szSearchFor, isDelimiterCB, InternalGetDataEnd());</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>}</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span> </div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00123" data-start="{" data-end="}">
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a71ac29b18708a376ce3e9f03bb756a82">  123</a></span>plInt32 <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a71ac29b18708a376ce3e9f03bb756a82">plStringBase&lt;Derived&gt;::Compare</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther)<span class="keyword"> const</span></div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#a7b21ecc35f92bff6ff21d0822077eaa6">plStringUtils::Compare</a>(InternalGetData(), sOther.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a74f83d2da688a507fee719c4deea8e28">GetStartPointer</a>(), InternalGetDataEnd(), sOther.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a4467c8ce79c4a4dd012a0380fe9bb0d0">GetEndPointer</a>());</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#ad0543d52d510868337e70f18ab4467a6">  126</a></span>}</div>
</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span> </div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00129" data-start="{" data-end="}">
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a946009c071c70e5b2ad616a16213d113">  129</a></span>plInt32 <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a946009c071c70e5b2ad616a16213d113">plStringBase&lt;Derived&gt;::CompareN</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther, plUInt32 uiCharsToCompare)<span class="keyword"> const</span></div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span><span class="keyword"></span>{</div>
<div class="foldopen" id="foldopen00131" data-start="{" data-end="}">
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a8b26dfed7384bb3264d3f134648396f9">  131</a></span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#a22aeb4d20b7672aea4e05fa163244cca">plStringUtils::CompareN</a>(InternalGetData(), sOther.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a74f83d2da688a507fee719c4deea8e28">GetStartPointer</a>(), uiCharsToCompare, InternalGetDataEnd(), sOther.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a4467c8ce79c4a4dd012a0380fe9bb0d0">GetEndPointer</a>());</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>}</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span> </div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00135" data-start="{" data-end="}">
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a91a71d7390204850be0e8fc9193e0f31">  135</a></span>plInt32 <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a91a71d7390204850be0e8fc9193e0f31">plStringBase&lt;Derived&gt;::Compare_NoCase</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther)<span class="keyword"> const</span></div>
<div class="foldopen" id="foldopen00136" data-start="{" data-end="}">
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a5be3ebeaf3a8e57322061b6424ca25a8">  136</a></span><span class="keyword"></span>{</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#a07ab9e86704a1d319a455456d2d8ab94">plStringUtils::Compare_NoCase</a>(InternalGetData(), sOther.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a74f83d2da688a507fee719c4deea8e28">GetStartPointer</a>(), InternalGetDataEnd(), sOther.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a4467c8ce79c4a4dd012a0380fe9bb0d0">GetEndPointer</a>());</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>}</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span> </div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00141" data-start="{" data-end="}">
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a4af63c140fc4fe56e1a290df992cec7e">  141</a></span>plInt32 <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a4af63c140fc4fe56e1a290df992cec7e">plStringBase&lt;Derived&gt;::CompareN_NoCase</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther, plUInt32 uiCharsToCompare)<span class="keyword"> const</span></div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#a267c56a514681d441d714a70e12f3d0a">plStringUtils::CompareN_NoCase</a>(InternalGetData(), sOther.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a74f83d2da688a507fee719c4deea8e28">GetStartPointer</a>(), uiCharsToCompare, InternalGetDataEnd(), sOther.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a4467c8ce79c4a4dd012a0380fe9bb0d0">GetEndPointer</a>());</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>}</div>
</div>
<div class="foldopen" id="foldopen00145" data-start="{" data-end="}">
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#ad8352abf502483f0e4e10c6733bde642">  145</a></span> </div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00147" data-start="{" data-end="}">
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a928260385c9a80109751fbdb1849b321">  147</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a928260385c9a80109751fbdb1849b321">plStringBase&lt;Derived&gt;::IsEqual</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther)<span class="keyword"> const</span></div>
<div class="foldopen" id="foldopen00148" data-start="{" data-end="}">
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a275c7069b3e5ddd9daf7ea75352128a3">  148</a></span><span class="keyword"></span>{</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#a078ffb499352fde674181a35aebd1f2d">plStringUtils::IsEqual</a>(InternalGetData(), sOther.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a74f83d2da688a507fee719c4deea8e28">GetStartPointer</a>(), InternalGetDataEnd(), sOther.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a4467c8ce79c4a4dd012a0380fe9bb0d0">GetEndPointer</a>());</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>}</div>
<div class="foldopen" id="foldopen00151" data-start="{" data-end="}">
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a4a340cb26613564b37461946d685215f">  151</a></span> </div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00153" data-start="{" data-end="}">
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a1854b21f65a086f15e164f739d53950d">  153</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a1854b21f65a086f15e164f739d53950d">plStringBase&lt;Derived&gt;::IsEqualN</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther, plUInt32 uiCharsToCompare)<span class="keyword"> const</span></div>
<div class="foldopen" id="foldopen00154" data-start="{" data-end="}">
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#aef9d9918c2d608eb5451b735057a272f">  154</a></span><span class="keyword"></span>{</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#aba00c3c3256411a9f615f03aaa6caca7">plStringUtils::IsEqualN</a>(InternalGetData(), sOther.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a74f83d2da688a507fee719c4deea8e28">GetStartPointer</a>(), uiCharsToCompare, InternalGetDataEnd(), sOther.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a4467c8ce79c4a4dd012a0380fe9bb0d0">GetEndPointer</a>());</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>}</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span> </div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00159" data-start="{" data-end="}">
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#ad0801b3fafc90b1beba38313c205e704">  159</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#ad0801b3fafc90b1beba38313c205e704">plStringBase&lt;Derived&gt;::IsEqual_NoCase</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther)<span class="keyword"> const</span></div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#a27a5be3ff9db439a31a48affe41ddc52">plStringUtils::IsEqual_NoCase</a>(InternalGetData(), sOther.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a74f83d2da688a507fee719c4deea8e28">GetStartPointer</a>(), InternalGetDataEnd(), sOther.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a4467c8ce79c4a4dd012a0380fe9bb0d0">GetEndPointer</a>());</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>}</div>
</div>
<div class="foldopen" id="foldopen00163" data-start="{" data-end="}">
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a97a42649db4dba41449786ad43a237cf">  163</a></span> </div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00165" data-start="{" data-end="}">
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a632d41fe7d33c9e42391ee905a361b06">  165</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a632d41fe7d33c9e42391ee905a361b06">plStringBase&lt;Derived&gt;::IsEqualN_NoCase</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther, plUInt32 uiCharsToCompare)<span class="keyword"> const</span></div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#ab090c9d993e98ea7a05e581932146ad1">plStringUtils::IsEqualN_NoCase</a>(InternalGetData(), sOther.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a74f83d2da688a507fee719c4deea8e28">GetStartPointer</a>(), uiCharsToCompare, InternalGetDataEnd(), sOther.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a4467c8ce79c4a4dd012a0380fe9bb0d0">GetEndPointer</a>());</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>}</div>
</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span> </div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00171" data-start="{" data-end="}">
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#aa5dc9b2300f37b7bb4a42999870e6092">  171</a></span><span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#aa5dc9b2300f37b7bb4a42999870e6092">plStringBase&lt;Derived&gt;::ComputeCharacterPosition</a>(plUInt32 uiCharacterIndex)<span class="keyword"> const</span></div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>  <span class="keyword">const</span> <span class="keywordtype">char</span>* pos = InternalGetData();</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>  <span class="keywordflow">if</span> (<a class="code hl_function" href="../../d5/de1/classpl_unicode_utils.htm#aa6a187e04624fd339f0299801626f41a">plUnicodeUtils::MoveToNextUtf8</a>(pos, InternalGetDataEnd(), uiCharacterIndex).Failed())</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span> </div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>  <span class="keywordflow">return</span> pos;</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>}</div>
</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span> </div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00181" data-start="{" data-end="}">
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#ac5f533a25843450da719ad9c78827c29">  181</a></span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/da5/structpl_string_iterator.htm">plStringBase&lt;Derived&gt;::iterator</a> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#ac5f533a25843450da719ad9c78827c29">plStringBase&lt;Derived&gt;::GetIteratorFront</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>  <span class="keywordflow">return</span> begin(*<span class="keyword">this</span>);</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>}</div>
</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span> </div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00187" data-start="{" data-end="}">
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a97bd0de57b678794224901f970b864b7">  187</a></span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d8/d32/structpl_string_reverse_iterator.htm">plStringBase&lt;Derived&gt;::reverse_iterator</a> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a97bd0de57b678794224901f970b864b7">plStringBase&lt;Derived&gt;::GetIteratorBack</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>  <span class="keywordflow">return</span> rbegin(*<span class="keyword">this</span>);</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>}</div>
</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span> </div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>{</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>  <span class="keywordflow">return</span> lhs.<a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a928260385c9a80109751fbdb1849b321">IsEqual</a>(rhs.<a class="code hl_function" href="../../de/d73/structpl_string_base.htm#ae137b75721c90c6ca1b8aec2b9fa7653">GetView</a>());</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>}</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span> </div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <span class="keywordtype">char</span>* lhs, <span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>{</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>  <span class="keywordflow">return</span> rhs.<a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a928260385c9a80109751fbdb1849b321">IsEqual</a>(lhs);</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>}</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span> </div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>* rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>{</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>  <span class="keywordflow">return</span> lhs.<a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a928260385c9a80109751fbdb1849b321">IsEqual</a>(rhs);</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>}</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span> </div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span><span class="preprocessor">#if PL_DISABLED(PL_USE_CPP20_OPERATORS)</span></div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span> </div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>{</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>  <span class="keywordflow">return</span> !lhs.<a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a928260385c9a80109751fbdb1849b321">IsEqual</a>(rhs);</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>}</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span> </div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <span class="keywordtype">char</span>* lhs, <span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>{</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>  <span class="keywordflow">return</span> !rhs.<a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a928260385c9a80109751fbdb1849b321">IsEqual</a>(lhs);</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>}</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span> </div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>* rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>{</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>  <span class="keywordflow">return</span> !lhs.<a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a928260385c9a80109751fbdb1849b321">IsEqual</a>(rhs);</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>}</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span> </div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span> </div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span><span class="preprocessor">#if PL_ENABLED(PL_USE_CPP20_OPERATORS)</span></div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span> </div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>PL_ALWAYS_INLINE std::strong_ordering operator&lt;=&gt;(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedRhs&gt;</a>&amp; rhs)</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>{</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>  <span class="keywordflow">return</span> lhs.<a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a71ac29b18708a376ce3e9f03bb756a82">Compare</a>(rhs) &lt;=&gt; 0;</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>}</div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span> </div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>PL_ALWAYS_INLINE std::strong_ordering operator&lt;=&gt;(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>* rhs)</div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>{</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>  <span class="keywordflow">return</span> lhs.<a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a71ac29b18708a376ce3e9f03bb756a82">Compare</a>(rhs) &lt;=&gt; 0;</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>}</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span> </div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span><span class="preprocessor">#else</span></div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span> </div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>{</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>  <span class="keywordflow">return</span> lhs.<a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a71ac29b18708a376ce3e9f03bb756a82">Compare</a>(rhs) &lt; 0;</div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>}</div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span> </div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;(<span class="keyword">const</span> <span class="keywordtype">char</span>* lhs, <span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span>{</div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span>  <span class="keywordflow">return</span> rhs.<a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a71ac29b18708a376ce3e9f03bb756a82">Compare</a>(lhs) &gt; 0;</div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span>}</div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span> </div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>* rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span>{</div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span>  <span class="keywordflow">return</span> lhs.<a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a71ac29b18708a376ce3e9f03bb756a82">Compare</a>(rhs) &lt; 0;</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>}</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span> </div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span>{</div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>  <span class="keywordflow">return</span> lhs.<a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a71ac29b18708a376ce3e9f03bb756a82">Compare</a>(rhs) &gt; 0;</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span>}</div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span> </div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;(<span class="keyword">const</span> <span class="keywordtype">char</span>* lhs, <span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span>{</div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span>  <span class="keywordflow">return</span> rhs.<a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a71ac29b18708a376ce3e9f03bb756a82">Compare</a>(lhs) &lt; 0;</div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span>}</div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span> </div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>* rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span>{</div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span>  <span class="keywordflow">return</span> lhs.<a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a71ac29b18708a376ce3e9f03bb756a82">Compare</a>(rhs) &gt; 0;</div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span>}</div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span> </div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;=(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span>{</div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#a7b21ecc35f92bff6ff21d0822077eaa6">plStringUtils::Compare</a>(lhs.InternalGetData(), rhs.InternalGetData(), lhs.InternalGetDataEnd(), rhs.InternalGetDataEnd()) &lt;= 0;</div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span>}</div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span> </div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;=(<span class="keyword">const</span> <span class="keywordtype">char</span>* lhs, <span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span>{</div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span>  <span class="keywordflow">return</span> rhs.<a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a71ac29b18708a376ce3e9f03bb756a82">Compare</a>(lhs) &gt;= 0;</div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span>}</div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span> </div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;=(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>* rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span>{</div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span>  <span class="keywordflow">return</span> lhs.<a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a71ac29b18708a376ce3e9f03bb756a82">Compare</a>(rhs) &lt;= 0;</div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span>}</div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span> </div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;=(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span>{</div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#a7b21ecc35f92bff6ff21d0822077eaa6">plStringUtils::Compare</a>(lhs.InternalGetData(), rhs.InternalGetData(), lhs.InternalGetDataEnd(), rhs.InternalGetDataEnd()) &gt;= 0;</div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span>}</div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span> </div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;=(<span class="keyword">const</span> <span class="keywordtype">char</span>* lhs, <span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span>{</div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span>  <span class="keywordflow">return</span> rhs.<a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a71ac29b18708a376ce3e9f03bb756a82">Compare</a>(lhs) &lt;= 0;</div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span>}</div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span> </div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;=(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>* rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span>{</div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span>  <span class="keywordflow">return</span> lhs.<a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a71ac29b18708a376ce3e9f03bb756a82">Compare</a>(rhs) &gt;= 0;</div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>}</div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span> </div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span> </div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="foldopen" id="foldopen00323" data-start="{" data-end="}">
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a8edc0eeb6a433a7397215106abd0f39f">  323</a></span>PL_ALWAYS_INLINE <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;DerivedLhs&gt;::operator</a> <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a>(InternalGetData(), InternalGetElementCount());</div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span>}</div>
</div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span> </div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00329" data-start="{" data-end="}">
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#ae137b75721c90c6ca1b8aec2b9fa7653">  329</a></span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#ae137b75721c90c6ca1b8aec2b9fa7653">plStringBase&lt;Derived&gt;::GetView</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a>(InternalGetData(), InternalGetElementCount());</div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span>}</div>
</div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span> </div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</div>
<div class="foldopen" id="foldopen00336" data-start="{" data-end="}">
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a9a9997394d0cbb4121601246cfd910c6">  336</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a9a9997394d0cbb4121601246cfd910c6">plStringBase&lt;Derived&gt;::Split</a>(<span class="keywordtype">bool</span> bReturnEmptyStrings, Container&amp; ref_output, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator1, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator2 <span class="comment">/*= nullptr*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator3 <span class="comment">/*= nullptr*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator4 <span class="comment">/*= nullptr*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator5 <span class="comment">/*= nullptr*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator6 <span class="comment">/*= nullptr*/</span>)<span class="keyword"> const</span></div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span>  GetView().Split(bReturnEmptyStrings, ref_output, szSeparator1, szSeparator2, szSeparator3, szSeparator4, szSeparator5, szSeparator6);</div>
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno">  339</span>}</div>
</div>
<div class="line"><a id="l00340" name="l00340"></a><span class="lineno">  340</span> </div>
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno">  341</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00342" data-start="{" data-end="}">
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a97a42649db4dba41449786ad43a237cf">  342</a></span><a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a97a42649db4dba41449786ad43a237cf">plStringBase&lt;Derived&gt;::GetRootedPathRootName</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span>  <span class="keywordflow">return</span> GetView().<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a846852e4c2e92e8dd6ba5296f874d31e">GetRootedPathRootName</a>();</div>
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno">  345</span>}</div>
</div>
</div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span> </div>
<div class="line"><a id="l00347" name="l00347"></a><span class="lineno">  347</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00348" data-start="{" data-end="}">
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#aef9d9918c2d608eb5451b735057a272f">  348</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#aef9d9918c2d608eb5451b735057a272f">plStringBase&lt;Derived&gt;::IsRootedPath</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno">  349</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span>  <span class="keywordflow">return</span> GetView().<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a02a9a326f5c92a06f6a6508691c9d842">IsRootedPath</a>();</div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span>}</div>
</div>
</div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span> </div>
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno">  353</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00354" data-start="{" data-end="}">
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a4a340cb26613564b37461946d685215f">  354</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a4a340cb26613564b37461946d685215f">plStringBase&lt;Derived&gt;::IsRelativePath</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno">  355</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span>  <span class="keywordflow">return</span> GetView().IsRelativePath();</div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span>}</div>
</div>
<div class="line"><a id="l00358" name="l00358"></a><span class="lineno">  358</span> </div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00360" data-start="{" data-end="}">
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a275c7069b3e5ddd9daf7ea75352128a3">  360</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a275c7069b3e5ddd9daf7ea75352128a3">plStringBase&lt;Derived&gt;::IsAbsolutePath</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno">  361</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno">  362</span>  <span class="keywordflow">return</span> GetView().IsAbsolutePath();</div>
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno">  363</span>}</div>
</div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span> </div>
<div class="line"><a id="l00365" name="l00365"></a><span class="lineno">  365</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00366" data-start="{" data-end="}">
<div class="line"><a id="l00366" name="l00366"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#ad8352abf502483f0e4e10c6733bde642">  366</a></span><a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#ad8352abf502483f0e4e10c6733bde642">plStringBase&lt;Derived&gt;::GetFileDirectory</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00368" name="l00368"></a><span class="lineno">  368</span>  <span class="keywordflow">return</span> GetView().<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a41303a224077767f7dbee5bde40470b8">GetFileDirectory</a>();</div>
<div class="line"><a id="l00369" name="l00369"></a><span class="lineno">  369</span>}</div>
</div>
<div class="line"><a id="l00370" name="l00370"></a><span class="lineno">  370</span> </div>
<div class="line"><a id="l00371" name="l00371"></a><span class="lineno">  371</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00372" data-start="{" data-end="}">
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a5be3ebeaf3a8e57322061b6424ca25a8">  372</a></span><a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a5be3ebeaf3a8e57322061b6424ca25a8">plStringBase&lt;Derived&gt;::GetFileNameAndExtension</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00373" name="l00373"></a><span class="lineno">  373</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno">  374</span>  <span class="keywordflow">return</span> GetView().<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a046cbd0612c8ea534bb99d1dcff74340">GetFileNameAndExtension</a>();</div>
<div class="line"><a id="l00375" name="l00375"></a><span class="lineno">  375</span>}</div>
</div>
<div class="line"><a id="l00376" name="l00376"></a><span class="lineno">  376</span> </div>
<div class="line"><a id="l00377" name="l00377"></a><span class="lineno">  377</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00378" data-start="{" data-end="}">
<div class="line"><a id="l00378" name="l00378"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a8b26dfed7384bb3264d3f134648396f9">  378</a></span><a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a8b26dfed7384bb3264d3f134648396f9">plStringBase&lt;Derived&gt;::GetFileName</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00379" name="l00379"></a><span class="lineno">  379</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00380" name="l00380"></a><span class="lineno">  380</span>  <span class="keywordflow">return</span> GetView().<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a8e8bd896012a13523d2709bd2b4c5e50">GetFileName</a>();</div>
<div class="line"><a id="l00381" name="l00381"></a><span class="lineno">  381</span>}</div>
</div>
<div class="line"><a id="l00382" name="l00382"></a><span class="lineno">  382</span> </div>
<div class="line"><a id="l00383" name="l00383"></a><span class="lineno">  383</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00384" data-start="{" data-end="}">
<div class="line"><a id="l00384" name="l00384"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#ad0543d52d510868337e70f18ab4467a6">  384</a></span><a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#ad0543d52d510868337e70f18ab4467a6">plStringBase&lt;Derived&gt;::GetFileExtension</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00385" name="l00385"></a><span class="lineno">  385</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00386" name="l00386"></a><span class="lineno">  386</span>  <span class="keywordflow">return</span> GetView().<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a674f70fe775113dbca00bfbb8024c6b4">GetFileExtension</a>();</div>
<div class="line"><a id="l00387" name="l00387"></a><span class="lineno">  387</span>}</div>
</div>
<div class="line"><a id="l00388" name="l00388"></a><span class="lineno">  388</span> </div>
<div class="line"><a id="l00389" name="l00389"></a><span class="lineno">  389</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00390" data-start="{" data-end="}">
<div class="line"><a id="l00390" name="l00390"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#abdbf19533811ec120710ad7caffe7ad0">  390</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#abdbf19533811ec120710ad7caffe7ad0">plStringBase&lt;Derived&gt;::HasExtension</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sExtension)<span class="keyword"> const</span></div>
<div class="line"><a id="l00391" name="l00391"></a><span class="lineno">  391</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00392" name="l00392"></a><span class="lineno">  392</span>  <span class="keywordflow">return</span> GetView().<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#ac321d38ecaaae40acbff1c08644ed070">HasExtension</a>(sExtension);</div>
<div class="line"><a id="l00393" name="l00393"></a><span class="lineno">  393</span>}</div>
</div>
<div class="line"><a id="l00394" name="l00394"></a><span class="lineno">  394</span> </div>
<div class="line"><a id="l00395" name="l00395"></a><span class="lineno">  395</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00396" data-start="{" data-end="}">
<div class="line"><a id="l00396" name="l00396"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a99dd48e46918eea24a01ee4893f8301a">  396</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a99dd48e46918eea24a01ee4893f8301a">plStringBase&lt;Derived&gt;::HasAnyExtension</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00397" name="l00397"></a><span class="lineno">  397</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00398" name="l00398"></a><span class="lineno">  398</span>  <span class="keywordflow">return</span> GetView().HasAnyExtension();</div>
<div class="line"><a id="l00399" name="l00399"></a><span class="lineno">  399</span>}</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="ttc" id="aclasspl_string_utils_htm_a078ffb499352fde674181a35aebd1f2d"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#a078ffb499352fde674181a35aebd1f2d">plStringUtils::IsEqual</a></div><div class="ttdeci">static bool IsEqual(const char *pString1, const char *pString2, const char *pString1End=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true, if the two given strings are identical (bitwise).</div><div class="ttdef"><b>Definition</b> StringUtils_inl.h:125</div></div>
<div class="ttc" id="aclasspl_string_utils_htm_a07ab9e86704a1d319a455456d2d8ab94"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#a07ab9e86704a1d319a455456d2d8ab94">plStringUtils::Compare_NoCase</a></div><div class="ttdeci">static plInt32 Compare_NoCase(const char *pString1, const char *pString2, const char *pString1End=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Compares two strings for equality, case-insensitive.</div><div class="ttdef"><b>Definition</b> StringUtils.cpp:286</div></div>
<div class="ttc" id="aclasspl_string_utils_htm_a22aeb4d20b7672aea4e05fa163244cca"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#a22aeb4d20b7672aea4e05fa163244cca">plStringUtils::CompareN</a></div><div class="ttdeci">static plInt32 CompareN(const char *pString1, const char *pString2, plUInt32 uiCharsToCompare, const char *pString1End=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Compares the first uiCharsToCompare characters of the two strings for equality.</div><div class="ttdef"><b>Definition</b> StringUtils.cpp:247</div></div>
<div class="ttc" id="aclasspl_string_utils_htm_a267c56a514681d441d714a70e12f3d0a"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#a267c56a514681d441d714a70e12f3d0a">plStringUtils::CompareN_NoCase</a></div><div class="ttdeci">static plInt32 CompareN_NoCase(const char *pString1, const char *pString2, plUInt32 uiCharsToCompare, const char *pString1End=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Compares the first uiCharsToCompare characters of the two strings for equality, case-insensitive.</div><div class="ttdef"><b>Definition</b> StringUtils.cpp:320</div></div>
<div class="ttc" id="aclasspl_string_utils_htm_a27a5be3ff9db439a31a48affe41ddc52"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#a27a5be3ff9db439a31a48affe41ddc52">plStringUtils::IsEqual_NoCase</a></div><div class="ttdeci">static bool IsEqual_NoCase(const char *pString1, const char *pString2, const char *pString1End=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true, if the two given strings are identical (case-insensitive).</div><div class="ttdef"><b>Definition</b> StringUtils_inl.h:136</div></div>
<div class="ttc" id="aclasspl_string_utils_htm_a377e785747082b885661b4be55481134"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#a377e785747082b885661b4be55481134">plStringUtils::FindSubString_NoCase</a></div><div class="ttdeci">static const char * FindSubString_NoCase(const char *szSource, const char *szStringToFind, const char *pSourceEnd=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szStringToFindEnd=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Searches for the first occurrence of szStringToFind in szSource. Ignores case.</div><div class="ttdef"><b>Definition</b> StringUtils.cpp:569</div></div>
<div class="ttc" id="aclasspl_string_utils_htm_a4d30321cef0e930af1a5f510d85eb82e"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#a4d30321cef0e930af1a5f510d85eb82e">plStringUtils::EndsWith_NoCase</a></div><div class="ttdeci">static bool EndsWith_NoCase(const char *szString, const char *szEndsWith, const char *pStringEnd=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szEndsWithEnd=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true if szString ends with the string given in szEndsWith. Ignores case.</div><div class="ttdef"><b>Definition</b> StringUtils.cpp:517</div></div>
<div class="ttc" id="aclasspl_string_utils_htm_a57b8e9f8cd1a2821d8dad1e050ed6f77"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#a57b8e9f8cd1a2821d8dad1e050ed6f77">plStringUtils::FindSubString</a></div><div class="ttdeci">static const char * FindSubString(const char *szSource, const char *szStringToFind, const char *pSourceEnd=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szStringToFindEnd=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Searches for the first occurrence of szStringToFind in szSource.</div><div class="ttdef"><b>Definition</b> StringUtils.cpp:550</div></div>
<div class="ttc" id="aclasspl_string_utils_htm_a7534b7f3c1b300505e8d7fe356520d2f"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#a7534b7f3c1b300505e8d7fe356520d2f">plStringUtils::FindWholeWord_NoCase</a></div><div class="ttdeci">static const char * FindWholeWord_NoCase(const char *szString, const char *szSearchFor, PL_CHARACTER_FILTER isDelimiterCB, const char *pStringEnd=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Searches szString for the word szSearchFor. If IsDelimiterCB returns true for both characters in fron...</div><div class="ttdef"><b>Definition</b> StringUtils.cpp:662</div></div>
<div class="ttc" id="aclasspl_string_utils_htm_a7b21ecc35f92bff6ff21d0822077eaa6"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#a7b21ecc35f92bff6ff21d0822077eaa6">plStringUtils::Compare</a></div><div class="ttdeci">static plInt32 Compare(const char *pString1, const char *pString2, const char *pString1End=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Compares two strings for equality.</div><div class="ttdef"><b>Definition</b> StringUtils.cpp:218</div></div>
<div class="ttc" id="aclasspl_string_utils_htm_a838eada49316bf517333d30ec38d3b4c"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#a838eada49316bf517333d30ec38d3b4c">plStringUtils::EndsWith</a></div><div class="ttdeci">static bool EndsWith(const char *szString, const char *szEndsWith, const char *pStringEnd=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szEndsWithEnd=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true if szString ends with the string given in szEndsWith.</div><div class="ttdef"><b>Definition</b> StringUtils.cpp:501</div></div>
<div class="ttc" id="aclasspl_string_utils_htm_a8bc7e3a526fc09382eaa1276895f3266"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#a8bc7e3a526fc09382eaa1276895f3266">plStringUtils::PL_CHARACTER_FILTER</a></div><div class="ttdeci">bool(*)(plUInt32 uiChar) PL_CHARACTER_FILTER</div><div class="ttdoc">Function Definition for a function that determines whether a (Utf32) character belongs to a certain c...</div><div class="ttdef"><b>Definition</b> StringUtils.h:209</div></div>
<div class="ttc" id="aclasspl_string_utils_htm_aa1b49002e90a4951b887735c06800981"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#aa1b49002e90a4951b887735c06800981">plStringUtils::StartsWith</a></div><div class="ttdeci">static bool StartsWith(const char *szString, const char *szStartsWith, const char *pStringEnd=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szStartsWithEnd=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true if szString starts with the string given in szStartsWith.</div><div class="ttdef"><b>Definition</b> StringUtils.cpp:453</div></div>
<div class="ttc" id="aclasspl_string_utils_htm_ab090c9d993e98ea7a05e581932146ad1"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#ab090c9d993e98ea7a05e581932146ad1">plStringUtils::IsEqualN_NoCase</a></div><div class="ttdeci">static bool IsEqualN_NoCase(const char *pString1, const char *pString2, plUInt32 uiCharsToCompare, const char *pString1End=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true, if the two given strings are identical (case-insensitive) up to the n-th character.</div><div class="ttdef"><b>Definition</b> StringUtils_inl.h:141</div></div>
<div class="ttc" id="aclasspl_string_utils_htm_aba00c3c3256411a9f615f03aaa6caca7"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#aba00c3c3256411a9f615f03aaa6caca7">plStringUtils::IsEqualN</a></div><div class="ttdeci">static bool IsEqualN(const char *pString1, const char *pString2, plUInt32 uiCharsToCompare, const char *pString1End=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true, if the two given strings are identical (bitwise) up to the n-th character.</div><div class="ttdef"><b>Definition</b> StringUtils_inl.h:130</div></div>
<div class="ttc" id="aclasspl_string_utils_htm_ac00851da0fe9a6a1a1f9383befb50820"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#ac00851da0fe9a6a1a1f9383befb50820">plStringUtils::FindLastSubString_NoCase</a></div><div class="ttdeci">static const char * FindLastSubString_NoCase(const char *szSource, const char *szStringToFind, const char *szStartSearchAt=nullptr, const char *pSourceEnd=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szStringToFindEnd=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Searches for the last occurrence of szStringToFind in szSource before szStartSearchAt....</div><div class="ttdef"><b>Definition</b> StringUtils.cpp:611</div></div>
<div class="ttc" id="aclasspl_string_utils_htm_ae91a8556266df1ec41400e10c7430914"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#ae91a8556266df1ec41400e10c7430914">plStringUtils::FindLastSubString</a></div><div class="ttdeci">static const char * FindLastSubString(const char *szSource, const char *szStringToFind, const char *szStartSearchAt=nullptr, const char *pSourceEnd=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szStringToFindEnd=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Searches for the last occurrence of szStringToFind in szSource before szStartSearchAt.</div><div class="ttdef"><b>Definition</b> StringUtils.cpp:589</div></div>
<div class="ttc" id="aclasspl_string_utils_htm_aeb36ed6f5d73d409049c30c993f999a2"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#aeb36ed6f5d73d409049c30c993f999a2">plStringUtils::FindWholeWord</a></div><div class="ttdeci">static const char * FindWholeWord(const char *szString, const char *szSearchFor, PL_CHARACTER_FILTER isDelimiterCB, const char *pStringEnd=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Searches szString for the word szSearchFor. If IsDelimiterCB returns true for both characters in fron...</div><div class="ttdef"><b>Definition</b> StringUtils.cpp:632</div></div>
<div class="ttc" id="aclasspl_string_utils_htm_aecfa42149d0d8b134bd0821c31c35b5e"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#aecfa42149d0d8b134bd0821c31c35b5e">plStringUtils::StartsWith_NoCase</a></div><div class="ttdeci">static bool StartsWith_NoCase(const char *szString, const char *szStartsWith, const char *pStringEnd=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szStartsWithEnd=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true if szString starts with the string given in szStartsWith. Ignores case.</div><div class="ttdef"><b>Definition</b> StringUtils.cpp:477</div></div>
<div class="ttc" id="aclasspl_string_utils_htm_af3e32769f27383ebd20d9cb1d581be91"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#af3e32769f27383ebd20d9cb1d581be91">plStringUtils::IsNullOrEmpty</a></div><div class="ttdeci">static constexpr bool IsNullOrEmpty(const T *pString)</div><div class="ttdoc">Returns true, if the given string is a nullptr pointer or a string that immediately terminates with a...</div></div>
<div class="ttc" id="aclasspl_string_view_htm"><div class="ttname"><a href="../../d6/d79/classpl_string_view.htm">plStringView</a></div><div class="ttdoc">plStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...</div><div class="ttdef"><b>Definition</b> StringView.h:34</div></div>
<div class="ttc" id="aclasspl_string_view_htm_a02a9a326f5c92a06f6a6508691c9d842"><div class="ttname"><a href="../../d6/d79/classpl_string_view.htm#a02a9a326f5c92a06f6a6508691c9d842">plStringView::IsRootedPath</a></div><div class="ttdeci">bool IsRootedPath() const</div><div class="ttdoc">Returns true, if the given path represents a 'rooted' path. See plFileSystem for details.</div><div class="ttdef"><b>Definition</b> StringView.cpp:286</div></div>
<div class="ttc" id="aclasspl_string_view_htm_a046cbd0612c8ea534bb99d1dcff74340"><div class="ttname"><a href="../../d6/d79/classpl_string_view.htm#a046cbd0612c8ea534bb99d1dcff74340">plStringView::GetFileNameAndExtension</a></div><div class="ttdeci">plStringView GetFileNameAndExtension() const</div><div class="ttdoc">Returns the substring that represents the file name including the file extension.</div><div class="ttdef"><b>Definition</b> StringView.cpp:266</div></div>
<div class="ttc" id="aclasspl_string_view_htm_a41303a224077767f7dbee5bde40470b8"><div class="ttname"><a href="../../d6/d79/classpl_string_view.htm#a41303a224077767f7dbee5bde40470b8">plStringView::GetFileDirectory</a></div><div class="ttdeci">plStringView GetFileDirectory() const</div><div class="ttdoc">Returns the directory of the given file, which is the substring up to the last path separator.</div><div class="ttdef"><b>Definition</b> StringView.cpp:271</div></div>
<div class="ttc" id="aclasspl_string_view_htm_a4467c8ce79c4a4dd012a0380fe9bb0d0"><div class="ttname"><a href="../../d6/d79/classpl_string_view.htm#a4467c8ce79c4a4dd012a0380fe9bb0d0">plStringView::GetEndPointer</a></div><div class="ttdeci">const char * GetEndPointer() const</div><div class="ttdoc">Returns the end of the view range. This will point to the byte AFTER the last character.</div><div class="ttdef"><b>Definition</b> StringView.h:108</div></div>
<div class="ttc" id="aclasspl_string_view_htm_a674f70fe775113dbca00bfbb8024c6b4"><div class="ttname"><a href="../../d6/d79/classpl_string_view.htm#a674f70fe775113dbca00bfbb8024c6b4">plStringView::GetFileExtension</a></div><div class="ttdeci">plStringView GetFileExtension(bool bFullExtension=false) const</div><div class="ttdoc">Returns the file extension of the given path. Will be empty, if the path does not end with a proper e...</div><div class="ttdef"><b>Definition</b> StringView.cpp:256</div></div>
<div class="ttc" id="aclasspl_string_view_htm_a74f83d2da688a507fee719c4deea8e28"><div class="ttname"><a href="../../d6/d79/classpl_string_view.htm#a74f83d2da688a507fee719c4deea8e28">plStringView::GetStartPointer</a></div><div class="ttdeci">const char * GetStartPointer() const</div><div class="ttdoc">Returns the start of the view range.</div><div class="ttdef"><b>Definition</b> StringView.h:102</div></div>
<div class="ttc" id="aclasspl_string_view_htm_a846852e4c2e92e8dd6ba5296f874d31e"><div class="ttname"><a href="../../d6/d79/classpl_string_view.htm#a846852e4c2e92e8dd6ba5296f874d31e">plStringView::GetRootedPathRootName</a></div><div class="ttdeci">plStringView GetRootedPathRootName() const</div><div class="ttdoc">Extracts the root name from a rooted path.</div><div class="ttdef"><b>Definition</b> StringView.cpp:291</div></div>
<div class="ttc" id="aclasspl_string_view_htm_a8e8bd896012a13523d2709bd2b4c5e50"><div class="ttname"><a href="../../d6/d79/classpl_string_view.htm#a8e8bd896012a13523d2709bd2b4c5e50">plStringView::GetFileName</a></div><div class="ttdeci">plStringView GetFileName() const</div><div class="ttdoc">Returns the file name of a path, excluding the path and extension.</div><div class="ttdef"><b>Definition</b> StringView.cpp:261</div></div>
<div class="ttc" id="aclasspl_string_view_htm_ac321d38ecaaae40acbff1c08644ed070"><div class="ttname"><a href="../../d6/d79/classpl_string_view.htm#ac321d38ecaaae40acbff1c08644ed070">plStringView::HasExtension</a></div><div class="ttdeci">bool HasExtension(plStringView sExtension) const</div><div class="ttdoc">Checks whether the given path ends with the given extension. szExtension may start with a '....</div><div class="ttdef"><b>Definition</b> StringView.cpp:251</div></div>
<div class="ttc" id="aclasspl_unicode_utils_htm_aa6a187e04624fd339f0299801626f41a"><div class="ttname"><a href="../../d5/de1/classpl_unicode_utils.htm#aa6a187e04624fd339f0299801626f41a">plUnicodeUtils::MoveToNextUtf8</a></div><div class="ttdeci">static plResult MoveToNextUtf8(const char *&amp;ref_szUtf8, plUInt32 uiNumCharacters=1)</div><div class="ttdoc">Moves the given string pointer ahead to the next Utf8 character sequence.</div><div class="ttdef"><b>Definition</b> UnicodeUtils_inl.h:201</div></div>
<div class="ttc" id="astructpl_string_base_htm"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm">plStringBase</a></div><div class="ttdoc">Base class for strings, which implements all read-only string functions.</div><div class="ttdef"><b>Definition</b> StringBase.h:14</div></div>
<div class="ttc" id="astructpl_string_base_htm_a1854b21f65a086f15e164f739d53950d"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a1854b21f65a086f15e164f739d53950d">plStringBase::IsEqualN</a></div><div class="ttdeci">bool IsEqualN(plStringView sOther, plUInt32 uiCharsToCompare) const</div><div class="ttdoc">Compares up to a given number of characters of this string with the other string for equality....</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:153</div></div>
<div class="ttc" id="astructpl_string_base_htm_a275c7069b3e5ddd9daf7ea75352128a3"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a275c7069b3e5ddd9daf7ea75352128a3">plStringBase::IsAbsolutePath</a></div><div class="ttdeci">bool IsAbsolutePath() const</div><div class="ttdoc">Returns true, if the given path represents an absolute path on the current OS.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:360</div></div>
<div class="ttc" id="astructpl_string_base_htm_a2d116e5f43c0ae774c2346b5f94a992c"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a2d116e5f43c0ae774c2346b5f94a992c">plStringBase::FindLastSubString</a></div><div class="ttdeci">const char * FindLastSubString(plStringView sStringToFind, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:77</div></div>
<div class="ttc" id="astructpl_string_base_htm_a4a340cb26613564b37461946d685215f"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a4a340cb26613564b37461946d685215f">plStringBase::IsRelativePath</a></div><div class="ttdeci">bool IsRelativePath() const</div><div class="ttdoc">Returns true, if the given path represents a relative path on the current OS.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:354</div></div>
<div class="ttc" id="astructpl_string_base_htm_a4af63c140fc4fe56e1a290df992cec7e"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a4af63c140fc4fe56e1a290df992cec7e">plStringBase::CompareN_NoCase</a></div><div class="ttdeci">plInt32 CompareN_NoCase(plStringView sOther, plUInt32 uiCharsToCompare) const</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:141</div></div>
<div class="ttc" id="astructpl_string_base_htm_a4af994336831ee8ce7ea1aa392388ed6"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a4af994336831ee8ce7ea1aa392388ed6">plStringBase::StartsWith_NoCase</a></div><div class="ttdeci">bool StartsWith_NoCase(plStringView sStartsWith) const</div><div class="ttdoc">Returns true, if this string starts with the given string. Case insensitive.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:37</div></div>
<div class="ttc" id="astructpl_string_base_htm_a54c2b870afa5c0a2fb437e32219eb7d1"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a54c2b870afa5c0a2fb437e32219eb7d1">plStringBase::FindLastSubString_NoCase</a></div><div class="ttdeci">const char * FindLastSubString_NoCase(plStringView sStringToFind, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:89</div></div>
<div class="ttc" id="astructpl_string_base_htm_a5be3ebeaf3a8e57322061b6424ca25a8"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a5be3ebeaf3a8e57322061b6424ca25a8">plStringBase::GetFileNameAndExtension</a></div><div class="ttdeci">plStringView GetFileNameAndExtension() const</div><div class="ttdoc">Returns the substring that represents the file name including the file extension.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:372</div></div>
<div class="ttc" id="astructpl_string_base_htm_a632d41fe7d33c9e42391ee905a361b06"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a632d41fe7d33c9e42391ee905a361b06">plStringBase::IsEqualN_NoCase</a></div><div class="ttdeci">bool IsEqualN_NoCase(plStringView sOther, plUInt32 uiCharsToCompare) const</div><div class="ttdoc">Compares up to a given number of characters of this string with the other string for equality....</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:165</div></div>
<div class="ttc" id="astructpl_string_base_htm_a6ae403b4b3e534b94edd50edd888b4f0"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a6ae403b4b3e534b94edd50edd888b4f0">plStringBase::StartsWith</a></div><div class="ttdeci">bool StartsWith(plStringView sStartsWith) const</div><div class="ttdoc">Returns true, if this string starts with the given string.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:31</div></div>
<div class="ttc" id="astructpl_string_base_htm_a71ac29b18708a376ce3e9f03bb756a82"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a71ac29b18708a376ce3e9f03bb756a82">plStringBase::Compare</a></div><div class="ttdeci">plInt32 Compare(plStringView sOther) const</div><div class="ttdoc">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller',...</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:123</div></div>
<div class="ttc" id="astructpl_string_base_htm_a7ac3a243ee9ea1f99f7d82dd8e1d60b5"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a7ac3a243ee9ea1f99f7d82dd8e1d60b5">plStringBase::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns whether the string is an empty string.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:25</div></div>
<div class="ttc" id="astructpl_string_base_htm_a8972e55722d17be6604b1df08082cf83"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a8972e55722d17be6604b1df08082cf83">plStringBase::FindSubString_NoCase</a></div><div class="ttdeci">const char * FindSubString_NoCase(plStringView sStringToFind, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:66</div></div>
<div class="ttc" id="astructpl_string_base_htm_a8986dab73aa8d7095b79ddf761cf6b0d"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a8986dab73aa8d7095b79ddf761cf6b0d">plStringBase::EndsWith_NoCase</a></div><div class="ttdeci">bool EndsWith_NoCase(plStringView sEndsWith) const</div><div class="ttdoc">Returns true, if this string ends with the given string. Case insensitive.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:49</div></div>
<div class="ttc" id="astructpl_string_base_htm_a8b26dfed7384bb3264d3f134648396f9"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a8b26dfed7384bb3264d3f134648396f9">plStringBase::GetFileName</a></div><div class="ttdeci">plStringView GetFileName() const</div><div class="ttdoc">Returns the file name of a path, excluding the path and extension.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:378</div></div>
<div class="ttc" id="astructpl_string_base_htm_a8b6659ee0b76480c3ba534f74a4089fa"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a8b6659ee0b76480c3ba534f74a4089fa">plStringBase::FindWholeWord_NoCase</a></div><div class="ttdeci">const char * FindWholeWord_NoCase(const char *szSearchFor, plStringUtils::PL_CHARACTER_FILTER isDelimiterCB, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:112</div></div>
<div class="ttc" id="astructpl_string_base_htm_a91a71d7390204850be0e8fc9193e0f31"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a91a71d7390204850be0e8fc9193e0f31">plStringBase::Compare_NoCase</a></div><div class="ttdeci">plInt32 Compare_NoCase(plStringView sOther) const</div><div class="ttdoc">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller',...</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:135</div></div>
<div class="ttc" id="astructpl_string_base_htm_a928260385c9a80109751fbdb1849b321"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a928260385c9a80109751fbdb1849b321">plStringBase::IsEqual</a></div><div class="ttdeci">bool IsEqual(plStringView sOther) const</div><div class="ttdoc">Compares this string with the other string for equality.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:147</div></div>
<div class="ttc" id="astructpl_string_base_htm_a946009c071c70e5b2ad616a16213d113"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a946009c071c70e5b2ad616a16213d113">plStringBase::CompareN</a></div><div class="ttdeci">plInt32 CompareN(plStringView sOther, plUInt32 uiCharsToCompare) const</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:129</div></div>
<div class="ttc" id="astructpl_string_base_htm_a97a42649db4dba41449786ad43a237cf"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a97a42649db4dba41449786ad43a237cf">plStringBase::GetRootedPathRootName</a></div><div class="ttdeci">plStringView GetRootedPathRootName() const</div><div class="ttdoc">Extracts the root name from a rooted path.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:342</div></div>
<div class="ttc" id="astructpl_string_base_htm_a97bd0de57b678794224901f970b864b7"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a97bd0de57b678794224901f970b864b7">plStringBase::GetIteratorBack</a></div><div class="ttdeci">reverse_iterator GetIteratorBack() const</div><div class="ttdoc">Returns an iterator to this string, which points to the very last character (NOT the end).</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:187</div></div>
<div class="ttc" id="astructpl_string_base_htm_a99dd48e46918eea24a01ee4893f8301a"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a99dd48e46918eea24a01ee4893f8301a">plStringBase::HasAnyExtension</a></div><div class="ttdeci">bool HasAnyExtension() const</div><div class="ttdoc">Checks whether the given path has any file extension.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:396</div></div>
<div class="ttc" id="astructpl_string_base_htm_a9a9997394d0cbb4121601246cfd910c6"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a9a9997394d0cbb4121601246cfd910c6">plStringBase::Split</a></div><div class="ttdeci">void Split(bool bReturnEmptyStrings, Container &amp;ref_output, const char *szSeparator1, const char *szSeparator2=nullptr, const char *szSeparator3=nullptr, const char *szSeparator4=nullptr, const char *szSeparator5=nullptr, const char *szSeparator6=nullptr) const</div><div class="ttdoc">Fills the given container with plStringView's which represent each found substring....</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:336</div></div>
<div class="ttc" id="astructpl_string_base_htm_aa5dc9b2300f37b7bb4a42999870e6092"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#aa5dc9b2300f37b7bb4a42999870e6092">plStringBase::ComputeCharacterPosition</a></div><div class="ttdeci">const char * ComputeCharacterPosition(plUInt32 uiCharacterIndex) const</div><div class="ttdoc">Computes the pointer to the n-th character in the string. This is a linear search from the start.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:171</div></div>
<div class="ttc" id="astructpl_string_base_htm_ab6961a7b6896b3b482b20df06de7c689"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#ab6961a7b6896b3b482b20df06de7c689">plStringBase::EndsWith</a></div><div class="ttdeci">bool EndsWith(plStringView sEndsWith) const</div><div class="ttdoc">Returns true, if this string ends with the given string.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:43</div></div>
<div class="ttc" id="astructpl_string_base_htm_abdbf19533811ec120710ad7caffe7ad0"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#abdbf19533811ec120710ad7caffe7ad0">plStringBase::HasExtension</a></div><div class="ttdeci">bool HasExtension(plStringView sExtension) const</div><div class="ttdoc">Checks whether the given path ends with the given extension. szExtension should start with a '....</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:390</div></div>
<div class="ttc" id="astructpl_string_base_htm_ac5f533a25843450da719ad9c78827c29"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#ac5f533a25843450da719ad9c78827c29">plStringBase::GetIteratorFront</a></div><div class="ttdeci">iterator GetIteratorFront() const</div><div class="ttdoc">Returns an iterator to this string, which points to the very first character.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:181</div></div>
<div class="ttc" id="astructpl_string_base_htm_ad0543d52d510868337e70f18ab4467a6"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#ad0543d52d510868337e70f18ab4467a6">plStringBase::GetFileExtension</a></div><div class="ttdeci">plStringView GetFileExtension() const</div><div class="ttdoc">Returns the file extension of the given path. Will be empty, if the path does not end with a proper e...</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:384</div></div>
<div class="ttc" id="astructpl_string_base_htm_ad0801b3fafc90b1beba38313c205e704"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#ad0801b3fafc90b1beba38313c205e704">plStringBase::IsEqual_NoCase</a></div><div class="ttdeci">bool IsEqual_NoCase(plStringView sOther) const</div><div class="ttdoc">Compares this string with the other string for equality.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:159</div></div>
<div class="ttc" id="astructpl_string_base_htm_ad8352abf502483f0e4e10c6733bde642"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#ad8352abf502483f0e4e10c6733bde642">plStringBase::GetFileDirectory</a></div><div class="ttdeci">plStringView GetFileDirectory() const</div><div class="ttdoc">Returns the directory of the given file, which is the substring up to the last path separator.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:366</div></div>
<div class="ttc" id="astructpl_string_base_htm_ae137b75721c90c6ca1b8aec2b9fa7653"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#ae137b75721c90c6ca1b8aec2b9fa7653">plStringBase::GetView</a></div><div class="ttdeci">plStringView GetView() const</div><div class="ttdoc">Returns a string view to this string's data.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:329</div></div>
<div class="ttc" id="astructpl_string_base_htm_aef9d9918c2d608eb5451b735057a272f"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#aef9d9918c2d608eb5451b735057a272f">plStringBase::IsRootedPath</a></div><div class="ttdeci">bool IsRootedPath() const</div><div class="ttdoc">Returns true, if the given path represents a 'rooted' path. See plFileSystem for details.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:348</div></div>
<div class="ttc" id="astructpl_string_base_htm_af40ca95f7c2b77e18266ffe6ff7483a8"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#af40ca95f7c2b77e18266ffe6ff7483a8">plStringBase::FindWholeWord</a></div><div class="ttdeci">const char * FindWholeWord(const char *szSearchFor, plStringUtils::PL_CHARACTER_FILTER isDelimiterCB, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:101</div></div>
<div class="ttc" id="astructpl_string_base_htm_afb80af12ae97555d0870359e86bd1a68"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#afb80af12ae97555d0870359e86bd1a68">plStringBase::FindSubString</a></div><div class="ttdeci">const char * FindSubString(plStringView sStringToFind, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:55</div></div>
<div class="ttc" id="astructpl_string_iterator_htm"><div class="ttname"><a href="../../d3/da5/structpl_string_iterator.htm">plStringIterator</a></div><div class="ttdoc">STL forward iterator used by all string classes. Iterates over unicode characters....</div><div class="ttdef"><b>Definition</b> StringIterator.h:10</div></div>
<div class="ttc" id="astructpl_string_reverse_iterator_htm"><div class="ttname"><a href="../../d8/d32/structpl_string_reverse_iterator.htm">plStringReverseIterator</a></div><div class="ttdoc">STL reverse iterator used by all string classes. Iterates over unicode characters....</div><div class="ttdef"><b>Definition</b> StringIterator.h:163</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_93f3a51c0220f51fc2c286c08d531e1e.htm">Strings</a></li><li class="navelem"><a class="el" href="../../dir_fec2b21556ce2cf7e27237dfb4edc8a6.htm">Implementation</a></li><li class="navelem"><b>StringBase_inl.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
