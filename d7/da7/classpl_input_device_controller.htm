<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>plEngine: plInputDeviceController Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only-darkmode-toggle.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">plEngine<span id="projectnumber">&#160;Release 2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d7/da7/classpl_input_device_controller.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="../../d8/dc2/classpl_input_device_controller-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plInputDeviceController Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div></div>
</div><!--header-->
<div class="contents">

<p>This class is the base class for all controller type input devices.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d2/d94/_controller_8h_source.htm">Controller.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for plInputDeviceController:</div>
<div class="dyncontent">
<div class="center"><img src="../../d2/d71/classpl_input_device_controller__inherit__graph.png" border="0" usemap="#apl_input_device_controller_inherit__map" alt="Inheritance graph"/></div>
<map name="apl_input_device_controller_inherit__map" id="apl_input_device_controller_inherit__map">
<area shape="rect" title="This class is the base class for all controller type input devices." alt="" coords="83,320,235,347"/>
<area shape="rect" title=" " alt="" coords="5,395,145,421"/>
<area shape="poly" title=" " alt="" coords="134,359,91,396,88,392,131,355"/>
<area shape="rect" href="../../da/d0b/classpl_input_device_x_box360.htm" title="An implementation of plInputDeviceController that handles XBox 360 controllers." alt="" coords="169,395,317,421"/>
<area shape="poly" title=" " alt="" coords="187,355,230,392,227,396,184,359"/>
<area shape="rect" href="../../d8/d58/classpl_input_device.htm" title="The base class for all input device types." alt="" coords="110,245,208,272"/>
<area shape="poly" title=" " alt="" coords="162,288,162,320,156,320,156,288"/>
<area shape="rect" href="../../db/d85/classpl_enumerable.htm" title=" " alt="" coords="63,155,255,197"/>
<area shape="poly" title=" " alt="" coords="162,213,162,245,156,245,156,213"/>
<area shape="rect" href="../../d4/d91/classpl_reflected_class.htm" title="All classes that should be dynamically reflectable, need to be derived from this base class." alt="" coords="100,80,218,107"/>
<area shape="poly" title=" " alt="" coords="162,122,162,154,156,154,156,122"/>
<area shape="rect" href="../../de/dc4/classpl_no_base.htm" title="Dummy type to pass to templates and macros that expect a base type for a class that has no base." alt="" coords="120,5,198,32"/>
<area shape="poly" title=" " alt="" coords="162,48,162,80,156,80,156,48"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d3/d7d/structpl_input_device_controller_1_1_motor.htm">Motor</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describes which vibration motor to configure.  <a href="../../d3/d7d/structpl_input_device_controller_1_1_motor.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ad16b23f57c577c9669cb0e696adc391e" id="r_ad16b23f57c577c9669cb0e696adc391e"><td class="memItemLeft" align="right" valign="top"><a id="ad16b23f57c577c9669cb0e696adc391e" name="ad16b23f57c577c9669cb0e696adc391e"></a>enum &#160;</td><td class="memItemRight" valign="bottom">{ <b>MaxControllers</b> = 4
, <b>VibrationSamplesPerSecond</b> = 16
, <b>VibrationTrackSeconds</b> = 2
, <b>MaxVibrationSamples</b> = VibrationSamplesPerSecond * VibrationTrackSeconds
 }</td></tr>
<tr class="separator:ad16b23f57c577c9669cb0e696adc391e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a74d0f696e85104c2a191300bf39f949b" id="r_a74d0f696e85104c2a191300bf39f949b"><td class="memItemLeft" align="right" valign="top"><a id="a74d0f696e85104c2a191300bf39f949b" name="a74d0f696e85104c2a191300bf39f949b"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>EnableVibration</b> (plUInt8 uiVirtual, bool bEnable)</td></tr>
<tr class="memdesc:a74d0f696e85104c2a191300bf39f949b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enables or disables vibration on the given controller (virtual index). If it is disabled, the controller will never vibrate, even if vibration profiles are sent to it. <br /></td></tr>
<tr class="separator:a74d0f696e85104c2a191300bf39f949b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29297416c3f04246ba63df04d896752c" id="r_a29297416c3f04246ba63df04d896752c"><td class="memItemLeft" align="right" valign="top"><a id="a29297416c3f04246ba63df04d896752c" name="a29297416c3f04246ba63df04d896752c"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsVibrationEnabled</b> (plUInt8 uiVirtual) const</td></tr>
<tr class="memdesc:a29297416c3f04246ba63df04d896752c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether vibration is enabled on the given controller (virtual index). <br /></td></tr>
<tr class="separator:a29297416c3f04246ba63df04d896752c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7f69e3ddc106fdd8fd36f4ac54d8472" id="r_ab7f69e3ddc106fdd8fd36f4ac54d8472"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab7f69e3ddc106fdd8fd36f4ac54d8472">SetVibrationStrength</a> (plUInt8 uiVirtual, Motor::Enum motor, float fValue)</td></tr>
<tr class="memdesc:ab7f69e3ddc106fdd8fd36f4ac54d8472"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the vibration strength for the given controller and motor. <em>fValue</em> is a value between 0 and 1.  <br /></td></tr>
<tr class="separator:ab7f69e3ddc106fdd8fd36f4ac54d8472"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbd2bea0cc00483becf6d5d9a4d67de4" id="r_acbd2bea0cc00483becf6d5d9a4d67de4"><td class="memItemLeft" align="right" valign="top"><a id="acbd2bea0cc00483becf6d5d9a4d67de4" name="acbd2bea0cc00483becf6d5d9a4d67de4"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>GetVibrationStrength</b> (plUInt8 uiVirtual, Motor::Enum motor)</td></tr>
<tr class="memdesc:acbd2bea0cc00483becf6d5d9a4d67de4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the amount of (constant) vibration that is currently set on this controller. <br /></td></tr>
<tr class="separator:acbd2bea0cc00483becf6d5d9a4d67de4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9d8e2fafbf972baba0be805520f0f5c" id="r_aa9d8e2fafbf972baba0be805520f0f5c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa9d8e2fafbf972baba0be805520f0f5c">SetControllerMapping</a> (plUInt8 uiVirtualController, plInt8 iTakeInputFromPhysical)</td></tr>
<tr class="memdesc:aa9d8e2fafbf972baba0be805520f0f5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets from which physical controller a virtual controller is supposed to take its input.  <br /></td></tr>
<tr class="separator:aa9d8e2fafbf972baba0be805520f0f5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af77651bbddce8acdaf2a4cfebcc3faf6" id="r_af77651bbddce8acdaf2a4cfebcc3faf6"><td class="memItemLeft" align="right" valign="top"><a id="af77651bbddce8acdaf2a4cfebcc3faf6" name="af77651bbddce8acdaf2a4cfebcc3faf6"></a>
plInt8&#160;</td><td class="memItemRight" valign="bottom"><b>GetControllerMapping</b> (plUInt8 uiVirtual) const</td></tr>
<tr class="memdesc:af77651bbddce8acdaf2a4cfebcc3faf6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns from which physical controller the given virtual controller takes its input. May be negative, which means the virtual controller is deactivated. <br /></td></tr>
<tr class="separator:af77651bbddce8acdaf2a4cfebcc3faf6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0776be2437ced8c10bd0987699348f6f" id="r_a0776be2437ced8c10bd0987699348f6f"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a0776be2437ced8c10bd0987699348f6f">IsControllerConnected</a> (plUInt8 uiPhysical) const =0</td></tr>
<tr class="memdesc:a0776be2437ced8c10bd0987699348f6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Queries whether the controller with the given physical index is connected to the computer. This may change at any time.  <br /></td></tr>
<tr class="separator:a0776be2437ced8c10bd0987699348f6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa005c2e210c6c8858fd863dffc64f55b" id="r_aa005c2e210c6c8858fd863dffc64f55b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa005c2e210c6c8858fd863dffc64f55b">AddVibrationTrack</a> (plUInt8 uiVirtual, Motor::Enum motor, float *pVibrationTrackValue, plUInt32 uiSamples, float fScalingFactor=1.0f)</td></tr>
<tr class="memdesc:aa005c2e210c6c8858fd863dffc64f55b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a short 'vibration track' (a sequence of vibrations) to the given controller.  <br /></td></tr>
<tr class="separator:aa005c2e210c6c8858fd863dffc64f55b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classpl_input_device"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_classpl_input_device')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../d8/d58/classpl_input_device.htm">plInputDevice</a></td></tr>
<tr class="memitem:af57c1b46b6f442cca14a7ff4625db140 inherit pub_methods_classpl_input_device" id="r_af57c1b46b6f442cca14a7ff4625db140"><td class="memItemLeft" align="right" valign="top">
&#160;</td><td class="memItemRight" valign="bottom"><b>plInputDevice</b> ()</td></tr>
<tr class="memdesc:af57c1b46b6f442cca14a7ff4625db140 inherit pub_methods_classpl_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Constructor. <br /></td></tr>
<tr class="separator:af57c1b46b6f442cca14a7ff4625db140 inherit pub_methods_classpl_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae131b9527d9c4fa711fb8d46651ae51 inherit pub_methods_classpl_input_device" id="r_aae131b9527d9c4fa711fb8d46651ae51"><td class="memItemLeft" align="right" valign="top">
float&#160;</td><td class="memItemRight" valign="bottom"><b>GetInputSlotState</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sSlot) const</td></tr>
<tr class="memdesc:aae131b9527d9c4fa711fb8d46651ae51 inherit pub_methods_classpl_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows to query current input values for the given slot. <br /></td></tr>
<tr class="separator:aae131b9527d9c4fa711fb8d46651ae51 inherit pub_methods_classpl_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f6616572a2308f59c78944a8fe4c291 inherit pub_methods_classpl_input_device" id="r_a6f6616572a2308f59c78944a8fe4c291"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d58/classpl_input_device.htm#a6f6616572a2308f59c78944a8fe4c291">HasDeviceBeenUsedLastFrame</a> () const</td></tr>
<tr class="memdesc:a6f6616572a2308f59c78944a8fe4c291 inherit pub_methods_classpl_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the device was 'used' during the last frame, ie. when it generated input due to some user interaction.  <br /></td></tr>
<tr class="separator:a6f6616572a2308f59c78944a8fe4c291 inherit pub_methods_classpl_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classpl_reflected_class"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_classpl_reflected_class')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../d4/d91/classpl_reflected_class.htm">plReflectedClass</a></td></tr>
<tr class="memitem:a30a01812783d348746ff11a6db47d63f inherit pub_methods_classpl_reflected_class" id="r_a30a01812783d348746ff11a6db47d63f"><td class="memItemLeft" align="right" valign="top">
virtual const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetDynamicRTTI</b> () const</td></tr>
<tr class="separator:a30a01812783d348746ff11a6db47d63f inherit pub_methods_classpl_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa092c6d843ea7030165419c3c19dfe46 inherit pub_methods_classpl_reflected_class" id="r_aa092c6d843ea7030165419c3c19dfe46"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsInstanceOf</b> (const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *pType) const</td></tr>
<tr class="memdesc:aa092c6d843ea7030165419c3c19dfe46 inherit pub_methods_classpl_reflected_class"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the type of this instance is of the given type or derived from it. <br /></td></tr>
<tr class="separator:aa092c6d843ea7030165419c3c19dfe46 inherit pub_methods_classpl_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class" id="r_aa77e5cf0d600ccf2ec569e5d13c70887"><td class="memTemplParams" colspan="2">
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsInstanceOf</b> () const</td></tr>
<tr class="memdesc:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the type of this instance is of the given type or derived from it. <br /></td></tr>
<tr class="separator:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-methods" name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:ac5a955e9e9fac039cc3c357308c3d58b" id="r_ac5a955e9e9fac039cc3c357308c3d58b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac5a955e9e9fac039cc3c357308c3d58b">UpdateVibration</a> (<a class="el" href="../../d1/df6/structpl_time.htm">plTime</a> tTimeDifference)</td></tr>
<tr class="memdesc:ac5a955e9e9fac039cc3c357308c3d58b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Combines the constant vibration and vibration tracks and applies them on each controller.  <br /></td></tr>
<tr class="separator:ac5a955e9e9fac039cc3c357308c3d58b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classpl_input_device"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_methods_classpl_input_device')"><img src="../../closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="../../d8/d58/classpl_input_device.htm">plInputDevice</a></td></tr>
<tr class="memitem:ae979467dda16cc0b8d3f557dac50c3a2 inherit pro_methods_classpl_input_device" id="r_ae979467dda16cc0b8d3f557dac50c3a2"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d58/classpl_input_device.htm#ae979467dda16cc0b8d3f557dac50c3a2">InitializeDevice</a> ()=0</td></tr>
<tr class="memdesc:ae979467dda16cc0b8d3f557dac50c3a2 inherit pro_methods_classpl_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this if you need to do device specific initialization before the first use.  <br /></td></tr>
<tr class="separator:ae979467dda16cc0b8d3f557dac50c3a2 inherit pro_methods_classpl_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa323572aca9aaacef148e3136fcbd25 inherit pro_methods_classpl_input_device" id="r_aaa323572aca9aaacef148e3136fcbd25"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d58/classpl_input_device.htm#aaa323572aca9aaacef148e3136fcbd25">UpdateInputSlotValues</a> ()=0</td></tr>
<tr class="memdesc:aaa323572aca9aaacef148e3136fcbd25 inherit pro_methods_classpl_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this, if you need to query the state of the hardware to update the input slots.  <br /></td></tr>
<tr class="separator:aaa323572aca9aaacef148e3136fcbd25 inherit pro_methods_classpl_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94fc5982ebae3db958cb6ff01548229c inherit pro_methods_classpl_input_device" id="r_a94fc5982ebae3db958cb6ff01548229c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d58/classpl_input_device.htm#a94fc5982ebae3db958cb6ff01548229c">ResetInputSlotValues</a> ()</td></tr>
<tr class="memdesc:a94fc5982ebae3db958cb6ff01548229c inherit pro_methods_classpl_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this, if you need to reset certain input slot values to zero, after the <a class="el" href="../../d7/d6c/classpl_input_manager.htm" title="The central class to set up and query the state of all input.">plInputManager</a> is finished with the current frame update.  <br /></td></tr>
<tr class="separator:a94fc5982ebae3db958cb6ff01548229c inherit pro_methods_classpl_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affc9a06096720f741b0a347003de785c inherit pro_methods_classpl_input_device" id="r_affc9a06096720f741b0a347003de785c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d58/classpl_input_device.htm#affc9a06096720f741b0a347003de785c">RegisterInputSlots</a> ()=0</td></tr>
<tr class="memdesc:affc9a06096720f741b0a347003de785c inherit pro_methods_classpl_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this to register all the input slots that this device exposes.  <br /></td></tr>
<tr class="separator:affc9a06096720f741b0a347003de785c inherit pro_methods_classpl_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a511af7ad1f755af01367218302bbc3ba inherit pro_methods_classpl_input_device" id="r_a511af7ad1f755af01367218302bbc3ba"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d58/classpl_input_device.htm#a511af7ad1f755af01367218302bbc3ba">UpdateHardwareState</a> (<a class="el" href="../../d1/df6/structpl_time.htm">plTime</a> tTimeDifference)</td></tr>
<tr class="memdesc:a511af7ad1f755af01367218302bbc3ba inherit pro_methods_classpl_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function is called once after <a class="el" href="../../d7/d6c/classpl_input_manager.htm#a99266a2977ca6f1430823992e7520bb7" title="Updates the state of the input manager. This should be called exactly once each frame.">plInputManager::Update</a> with the same time delta value. It allows to update hardware state, such as the vibration of gamepad motors.  <br /></td></tr>
<tr class="separator:a511af7ad1f755af01367218302bbc3ba inherit pro_methods_classpl_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-methods" name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:a9f84f64a6c82b825780eaded9a2d7022" id="r_a9f84f64a6c82b825780eaded9a2d7022"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a9f84f64a6c82b825780eaded9a2d7022">ApplyVibration</a> (plUInt8 uiPhysicalController, Motor::Enum eMotor, float fStrength)=0</td></tr>
<tr class="memdesc:a9f84f64a6c82b825780eaded9a2d7022"><td class="mdescLeft">&#160;</td><td class="mdescRight">Must be implemented by a derived controller implementation. Should set apply the vibration for the given physical controller and motor with the given strength.  <br /></td></tr>
<tr class="separator:a9f84f64a6c82b825780eaded9a2d7022"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="inherited" name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_static_methods_classpl_no_base"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_static_methods_classpl_no_base')"><img src="../../closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="../../de/dc4/classpl_no_base.htm">plNoBase</a></td></tr>
<tr class="memitem:af5fef4e4ea9a9dc1842d1dd3812e5d7f inherit pub_static_methods_classpl_no_base" id="r_af5fef4e4ea9a9dc1842d1dd3812e5d7f"><td class="memItemLeft" align="right" valign="top">
static const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetStaticRTTI</b> ()</td></tr>
<tr class="separator:af5fef4e4ea9a9dc1842d1dd3812e5d7f inherit pub_static_methods_classpl_no_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_static_methods_classpl_input_device"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_static_methods_classpl_input_device')"><img src="../../closed.png" alt="-"/>&#160;Static Protected Member Functions inherited from <a class="el" href="../../d8/d58/classpl_input_device.htm">plInputDevice</a></td></tr>
<tr class="memitem:af24f5f5d425517bf14ef293c6d63e3bd inherit pro_static_methods_classpl_input_device" id="r_af24f5f5d425517bf14ef293c6d63e3bd"><td class="memItemLeft" align="right" valign="top">
static void&#160;</td><td class="memItemRight" valign="bottom"><b>RegisterInputSlot</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sDefaultDisplayName, <a class="el" href="../../df/dd9/structpl_bitflags.htm">plBitflags</a>&lt; <a class="el" href="../../d5/d35/structpl_input_slot_flags.htm">plInputSlotFlags</a> &gt; SlotFlags)</td></tr>
<tr class="memdesc:af24f5f5d425517bf14ef293c6d63e3bd inherit pro_static_methods_classpl_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calls <a class="el" href="../../d8/d58/classpl_input_device.htm#af24f5f5d425517bf14ef293c6d63e3bd" title="Calls RegisterInputSlot() on the plInputManager and passes the parameters through.">RegisterInputSlot()</a> on the <a class="el" href="../../d7/d6c/classpl_input_manager.htm" title="The central class to set up and query the state of all input.">plInputManager</a> and passes the parameters through. <br /></td></tr>
<tr class="separator:af24f5f5d425517bf14ef293c6d63e3bd inherit pro_static_methods_classpl_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_classpl_input_device"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_attribs_classpl_input_device')"><img src="../../closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="../../d8/d58/classpl_input_device.htm">plInputDevice</a></td></tr>
<tr class="memitem:a58a57c044af26a2471aa7bb6b4ff6c88 inherit pro_attribs_classpl_input_device" id="r_a58a57c044af26a2471aa7bb6b4ff6c88"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/d50/classpl_map.htm">plMap</a>&lt; <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plString</a>, float &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d58/classpl_input_device.htm#a58a57c044af26a2471aa7bb6b4ff6c88">m_InputSlotValues</a></td></tr>
<tr class="memdesc:a58a57c044af26a2471aa7bb6b4ff6c88 inherit pro_attribs_classpl_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores all the values for all input slots that this device handles.  <br /></td></tr>
<tr class="separator:a58a57c044af26a2471aa7bb6b4ff6c88 inherit pro_attribs_classpl_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e053200fc30e3efae873031f2f8b5fb inherit pro_attribs_classpl_input_device" id="r_a8e053200fc30e3efae873031f2f8b5fb"><td class="memItemLeft" align="right" valign="top">
plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>m_uiLastCharacter</b></td></tr>
<tr class="memdesc:a8e053200fc30e3efae873031f2f8b5fb inherit pro_attribs_classpl_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">If this input device type handles character input, it should write the last typed character into this variable. The <a class="el" href="../../d7/d6c/classpl_input_manager.htm" title="The central class to set up and query the state of all input.">plInputManager</a> calls RetrieveLastCharacter() to query what the user typed last. <br /></td></tr>
<tr class="separator:a8e053200fc30e3efae873031f2f8b5fb inherit pro_attribs_classpl_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_classpl_enumerable"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_attribs_classpl_enumerable')"><img src="../../closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="../../db/d85/classpl_enumerable.htm">plEnumerable&lt; plInputDevice, plReflectedClass &gt;</a></td></tr>
<tr class="memitem:aa4eba5b9c96dbe89638a952ae66077dc inherit pro_attribs_classpl_enumerable" id="r_aa4eba5b9c96dbe89638a952ae66077dc"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../db/d85/classpl_enumerable.htm">plEnumerable</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>m_pNextInstance</b></td></tr>
<tr class="separator:aa4eba5b9c96dbe89638a952ae66077dc inherit pro_attribs_classpl_enumerable"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This class is the base class for all controller type input devices. </p>
<p>This class is derived from <a class="el" href="../../d8/d58/classpl_input_device.htm" title="The base class for all input device types.">plInputDevice</a> but adds some interface functions common to most controllers. This class adds functions to query and modify the state about controller vibration, about the mapping of physical controllers to virtual ones (which controller index triggers which controller input slots) and also allows to query which controller is actually connected. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="aa005c2e210c6c8858fd863dffc64f55b" name="aa005c2e210c6c8858fd863dffc64f55b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa005c2e210c6c8858fd863dffc64f55b">&#9670;&#160;</a></span>AddVibrationTrack()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void plInputDeviceController::AddVibrationTrack </td>
          <td>(</td>
          <td class="paramtype">plUInt8</td>          <td class="paramname"><span class="paramname"><em>uiVirtual</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Motor::Enum</td>          <td class="paramname"><span class="paramname"><em>motor</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float *</td>          <td class="paramname"><span class="paramname"><em>pVibrationTrackValue</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiSamples</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float</td>          <td class="paramname"><span class="paramname"><em>fScalingFactor</em></span><span class="paramdefsep"> = </span><span class="paramdefval">1.0f</span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a short 'vibration track' (a sequence of vibrations) to the given controller. </p>
<p>Each controller has a short (typically 2 second) buffer for vibration values, that it will play. This allows to have different 'tracks' for different events, which are simply set on the controller. You can add an unlimited amount of tracks on a controller, the controller stores the maximum of all tracks and plays that. That means whenever the player shoots, or is hit etc., you can add a vibration track to the controller and it will be combined with all other tracks and played (no memory allocations are required).</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">uiVirtual</td><td>The virtual index of the controller. </td></tr>
    <tr><td class="paramname">eMotor</td><td>Which motor to apply the track on. </td></tr>
    <tr><td class="paramname">fVibrationTrackValue</td><td>An array of at least <em>uiSamples</em> float values, each between 0 and 1. </td></tr>
    <tr><td class="paramname">uiSamples</td><td>How many samples <em>fVibrationTrackValue</em> contains. A maximum of MaxVibrationSamples samples is used. </td></tr>
    <tr><td class="paramname">fScalingFactor</td><td>Additional scaling factor to apply to all values in <em>fVibrationTrackValue</em>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a9f84f64a6c82b825780eaded9a2d7022" name="a9f84f64a6c82b825780eaded9a2d7022"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f84f64a6c82b825780eaded9a2d7022">&#9670;&#160;</a></span>ApplyVibration()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plInputDeviceController::ApplyVibration </td>
          <td>(</td>
          <td class="paramtype">plUInt8</td>          <td class="paramname"><span class="paramname"><em>uiPhysicalController</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Motor::Enum</td>          <td class="paramname"><span class="paramname"><em>eMotor</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float</td>          <td class="paramname"><span class="paramname"><em>fStrength</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Must be implemented by a derived controller implementation. Should set apply the vibration for the given physical controller and motor with the given strength. </p>
<p>A strength value of zero will be passed in whenever no vibration is required. No extra resetting needs to be implemented. </p>

</div>
</div>
<a id="a0776be2437ced8c10bd0987699348f6f" name="a0776be2437ced8c10bd0987699348f6f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0776be2437ced8c10bd0987699348f6f">&#9670;&#160;</a></span>IsControllerConnected()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool plInputDeviceController::IsControllerConnected </td>
          <td>(</td>
          <td class="paramtype">plUInt8</td>          <td class="paramname"><span class="paramname"><em>uiPhysical</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Queries whether the controller with the given physical index is connected to the computer. This may change at any time. </p>

<p>Implemented in <a class="el" href="../../da/d0b/classpl_input_device_x_box360.htm#ab020088c2123eb2ddaf334c15bcf0e61">plInputDeviceXBox360</a>.</p>

</div>
</div>
<a id="aa9d8e2fafbf972baba0be805520f0f5c" name="aa9d8e2fafbf972baba0be805520f0f5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9d8e2fafbf972baba0be805520f0f5c">&#9670;&#160;</a></span>SetControllerMapping()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void plInputDeviceController::SetControllerMapping </td>
          <td>(</td>
          <td class="paramtype">plUInt8</td>          <td class="paramname"><span class="paramname"><em>uiVirtualController</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plInt8</td>          <td class="paramname"><span class="paramname"><em>iTakeInputFromPhysical</em></span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets from which physical controller a virtual controller is supposed to take its input. </p>
<p>If iTakeInputFromPhysical is smaller than zero, the given virtual controller is deactivated (it will generate no input). If input is taken from a physical controller, that is already mapped to another virtual controller, that virtual controller will now take input from the physical controller that uiVirtualController was previously mapped to (ie. they will swap from which physical controller to take input). By default all virtual controllers take their input from the physical controller with the same index. You can use this feature to let the player pick up any controller, detect which one it is (e.g. by forcing him to press 'Start') and then map that physical controller index to the virtual index 0 (ie. player 1). Note that unless you specify a negative index for a mapping (which deactivates that virtual controller), mapping controllers around does never deactivate any controller, because the indices are swapped between the different virtual controllers, so which physical controller maps to which virtual controller only 'moves around'. </p>

</div>
</div>
<a id="ab7f69e3ddc106fdd8fd36f4ac54d8472" name="ab7f69e3ddc106fdd8fd36f4ac54d8472"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7f69e3ddc106fdd8fd36f4ac54d8472">&#9670;&#160;</a></span>SetVibrationStrength()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void plInputDeviceController::SetVibrationStrength </td>
          <td>(</td>
          <td class="paramtype">plUInt8</td>          <td class="paramname"><span class="paramname"><em>uiVirtual</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Motor::Enum</td>          <td class="paramname"><span class="paramname"><em>motor</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float</td>          <td class="paramname"><span class="paramname"><em>fValue</em></span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the vibration strength for the given controller and motor. <em>fValue</em> is a value between 0 and 1. </p>
<p>From now on the controller will be vibrating (unless vibration is disabled), until the value is reset to zero. This kind of vibration is always combined with vibration tracks (the maximum of both values is applied at any one time). Using this function is it possible to have more direct control over vibration, while the vibration tracks are convenient for the most common (short) effects. </p>

</div>
</div>
<a id="ac5a955e9e9fac039cc3c357308c3d58b" name="ac5a955e9e9fac039cc3c357308c3d58b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5a955e9e9fac039cc3c357308c3d58b">&#9670;&#160;</a></span>UpdateVibration()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plInputDeviceController::UpdateVibration </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d1/df6/structpl_time.htm">plTime</a></td>          <td class="paramname"><span class="paramname"><em>tTimeDifference</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Combines the constant vibration and vibration tracks and applies them on each controller. </p>
<p>This function needs to be called by a derived implementation in its <a class="el" href="../../d8/d58/classpl_input_device.htm#aaa323572aca9aaacef148e3136fcbd25" title="Override this, if you need to query the state of the hardware to update the input slots.">UpdateInputSlotValues()</a> function. It will call <a class="el" href="#a9f84f64a6c82b825780eaded9a2d7022" title="Must be implemented by a derived controller implementation. Should set apply the vibration for the gi...">ApplyVibration()</a> for each controller and motor with the current value. It already takes care of whether vibration is enabled or disabled, and also mapping virtual to physical controllers. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/Engine/Core/Input/DeviceTypes/<a class="el" href="../../d2/d94/_controller_8h_source.htm">Controller.h</a></li>
<li>Code/Engine/Core/Input/DeviceTypes/<b>DeviceTypes.cpp</b></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d7/da7/classpl_input_device_controller.htm">plInputDeviceController</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
