<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<!-- BEGIN opengraph metadata -->
<meta property="og:title" content="Doxygen Awesome" />
<meta property="og:image" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta property="og:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<meta property="og:url" content="https://jothepro.github.io/doxygen-awesome-css/" />
<!-- END opengraph metadata -->
<!-- BEGIN twitter metadata -->
<meta name="twitter:image:src" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta name="twitter:title" content="Doxygen Awesome" />
<meta name="twitter:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<!-- END twitter metadata -->
<title>Plasma Engine: Code/Engine/Foundation/Containers/HashTable.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link rel="icon" type="image/svg+xml" href="logo.drawio.svg"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-paragraph-link.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-tabs.js"></script>
<script type="text/javascript" src="../../toggle-alternative-theme.js"></script>
<script type="text/javascript">
    DoxygenAwesomeFragmentCopyButton.init()
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeParagraphLink.init()
    DoxygenAwesomeInteractiveToc.init()
    DoxygenAwesomeTabs.init()
</script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Plasma Engine
   &#160;<span id="projectnumber">2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('de/def/_hash_table_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">HashTable.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;Foundation/Algorithm/HashingUtils.h&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="preprocessor">#include &lt;Foundation/Math/Math.h&gt;</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#include &lt;Foundation/Memory/AllocatorWrapper.h&gt;</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span> </div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Hasher&gt;</div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="keyword">class </span><a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase</a>;</div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span> </div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Hasher&gt;</div>
<div class="foldopen" id="foldopen00012" data-start="{" data-end="};">
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno"><a class="line" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">   12</a></span><span class="keyword">struct </span><a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">plHashTableBaseConstIterator</a></div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>{</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>  <span class="keyword">using </span>iterator_category = std::forward_iterator_tag;</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span>  <span class="keyword">using </span><a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">value_type</a> = <a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">plHashTableBaseConstIterator</a>;</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span>  <span class="keyword">using </span>difference_type = std::ptrdiff_t;</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>  <span class="keyword">using </span><a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">pointer</a> = <a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">plHashTableBaseConstIterator</a>*;</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>  <span class="keyword">using </span><a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">reference</a> = <a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">plHashTableBaseConstIterator</a>&amp;;</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span> </div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>  PL_DECLARE_POD_TYPE();</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span> </div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm#af465be6714afd19516ecb66243fe11a9">IsValid</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span> </div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm#af7af83b383ad7f899859852d5ee5a950">operator==</a>(<span class="keyword">const</span> <a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">plHashTableBaseConstIterator</a>&amp; rhs) <span class="keyword">const</span>;</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>  PL_ADD_DEFAULT_OPERATOR_NOTEQUAL(<span class="keyword">const</span> <a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">plHashTableBaseConstIterator</a>&amp;);</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span> </div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>  <span class="keyword">const</span> KeyType&amp; <a class="code hl_function" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm#a92e92c0851d4702fd7237e0ba68307dd">Key</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span> </div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>  <span class="keyword">const</span> ValueType&amp; <a class="code hl_function" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm#a73bd0fedb89487e5ff6c2341299a7c3a">Value</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span> </div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm#a5264c7fbd8348c077844c9bf1b820c58">Next</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span> </div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm#a3f4707368c12bb7c6474798346a9ace7">operator++</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span> </div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno"><a class="line" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm#a60041b58f920d863786ffa51958610c9">   42</a></span>  PL_ALWAYS_INLINE <a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">plHashTableBaseConstIterator</a>&amp; <a class="code hl_function" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm#a60041b58f920d863786ffa51958610c9">operator*</a>() { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span> </div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span><span class="keyword">protected</span>:</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>  <span class="keyword">friend</span> <span class="keyword">class </span><a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase</a>&lt;KeyType, ValueType, Hasher&gt;;</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span> </div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>  <span class="keyword">explicit</span> <a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">plHashTableBaseConstIterator</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;</a>&amp; hashTable);</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>  <span class="keywordtype">void</span> SetToBegin();</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>  <span class="keywordtype">void</span> SetToEnd();</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span> </div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;</a>* m_pHashTable = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>  plUInt32 m_uiCurrentIndex = 0; <span class="comment">// current element index that this iterator points to.</span></div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span>  plUInt32 m_uiCurrentCount = 0; <span class="comment">// current number of valid elements that this iterator has found so far.</span></div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span> </div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span><span class="preprocessor">#if PL_ENABLED(PL_USE_CPP20_OPERATORS)</span></div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>  <span class="keyword">struct </span>Pointer</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>  {</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>    std::pair&lt;const KeyType&amp;, const ValueType&amp;&gt; value;</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>    <span class="keyword">const</span> std::pair&lt;const KeyType&amp;, const ValueType&amp;&gt;* operator-&gt;()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> &amp;value; }</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>  };</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span> </div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>  PL_ALWAYS_INLINE Pointer operator-&gt;()<span class="keyword"> const</span></div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>    <span class="keywordflow">return</span> Pointer{.value = {<a class="code hl_function" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm#a92e92c0851d4702fd7237e0ba68307dd">Key</a>(), <a class="code hl_function" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm#a73bd0fedb89487e5ff6c2341299a7c3a">Value</a>()}};</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>  }</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span> </div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>  <span class="comment">// These function is used to return the values for structured bindings.</span></div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>  <span class="comment">// The number and type of type of each slot are defined in the inl file.</span></div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>  <span class="keyword">template</span> &lt;std::<span class="keywordtype">size_t</span> Index&gt;</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>  std::tuple_element_t&lt;Index, plHashTableBaseConstIterator&gt;&amp; get()<span class="keyword"> const</span></div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>    <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (Index == 0)</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>      <span class="keywordflow">return</span> <a class="code hl_function" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm#a92e92c0851d4702fd7237e0ba68307dd">Key</a>();</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>    <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (Index == 1)</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>      <span class="keywordflow">return</span> <a class="code hl_function" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm#a73bd0fedb89487e5ff6c2341299a7c3a">Value</a>();</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>  }</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>};</div>
</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span> </div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Hasher&gt;</div>
<div class="foldopen" id="foldopen00083" data-start="{" data-end="};">
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno"><a class="line" href="../../d3/ddb/structpl_hash_table_base_iterator.htm">   83</a></span><span class="keyword">struct </span><a class="code hl_struct" href="../../d3/ddb/structpl_hash_table_base_iterator.htm">plHashTableBaseIterator</a> : <span class="keyword">public</span> <a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">plHashTableBaseConstIterator</a>&lt;KeyType, ValueType, Hasher&gt;</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>{</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>  PL_DECLARE_POD_TYPE();</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span> </div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno"><a class="line" href="../../d3/ddb/structpl_hash_table_base_iterator.htm#a1d748c226f6e729b9ad3e6169dcf205a">   88</a></span>  PL_ALWAYS_INLINE <a class="code hl_function" href="../../d3/ddb/structpl_hash_table_base_iterator.htm#a1d748c226f6e729b9ad3e6169dcf205a">plHashTableBaseIterator</a>(<span class="keyword">const</span> <a class="code hl_struct" href="../../d3/ddb/structpl_hash_table_base_iterator.htm">plHashTableBaseIterator</a>&amp; rhs); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span> </div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>  PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d3/ddb/structpl_hash_table_base_iterator.htm#a8f42768b2a3003aa8ce3741865e69fe6">operator=</a>(<span class="keyword">const</span> <a class="code hl_struct" href="../../d3/ddb/structpl_hash_table_base_iterator.htm">plHashTableBaseIterator</a>&amp; rhs); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span> </div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>  <span class="comment">// this is required to pull in the const version of this function</span></div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>  <span class="keyword">using </span><a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">plHashTableBaseConstIterator</a>&lt;KeyType, ValueType, Hasher&gt;<a class="code hl_function" href="../../d3/ddb/structpl_hash_table_base_iterator.htm#aac851c20bb735c93e88aaab0f52b7767">::Value</a>;</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span> </div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>  PL_FORCE_INLINE ValueType&amp; <a class="code hl_function" href="../../d3/ddb/structpl_hash_table_base_iterator.htm#aac851c20bb735c93e88aaab0f52b7767">Value</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span> </div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>  PL_FORCE_INLINE ValueType&amp; <a class="code hl_function" href="../../d3/ddb/structpl_hash_table_base_iterator.htm#aac851c20bb735c93e88aaab0f52b7767">Value</a>() <span class="keyword">const</span>;</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span> </div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno"><a class="line" href="../../d3/ddb/structpl_hash_table_base_iterator.htm#a1bd16eb6511d5fafaba671f3a9cbfa36">  103</a></span>  PL_ALWAYS_INLINE <a class="code hl_struct" href="../../d3/ddb/structpl_hash_table_base_iterator.htm">plHashTableBaseIterator</a>&amp; <a class="code hl_function" href="../../d3/ddb/structpl_hash_table_base_iterator.htm#a1bd16eb6511d5fafaba671f3a9cbfa36">operator*</a>() { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span> </div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>  <span class="keyword">friend</span> <span class="keyword">class </span><a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase</a>&lt;KeyType, ValueType, Hasher&gt;;</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span> </div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>  <span class="keyword">explicit</span> <a class="code hl_function" href="../../d3/ddb/structpl_hash_table_base_iterator.htm#a1d748c226f6e729b9ad3e6169dcf205a">plHashTableBaseIterator</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;</a>&amp; hashTable);</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span> </div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span><span class="preprocessor">#if PL_ENABLED(PL_USE_CPP20_OPERATORS)</span></div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>  <span class="keyword">struct </span>Pointer</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>  {</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>    std::pair&lt;const KeyType&amp;, ValueType&amp;&gt; value;</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>    <span class="keyword">const</span> std::pair&lt;const KeyType&amp;, ValueType&amp;&gt;* operator-&gt;()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> &amp;value; }</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>  };</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span> </div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>  PL_ALWAYS_INLINE Pointer operator-&gt;()<span class="keyword"> const</span></div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>    <span class="keywordflow">return</span> Pointer{.value = {<a class="code hl_function" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm#a92e92c0851d4702fd7237e0ba68307dd">plHashTableBaseConstIterator&lt;KeyType, ValueType, Hasher&gt;::Key</a>(), <a class="code hl_function" href="../../d3/ddb/structpl_hash_table_base_iterator.htm#aac851c20bb735c93e88aaab0f52b7767">Value</a>()}};</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>  }</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span> </div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>  <span class="comment">// These functions are used to return the values for structured bindings.</span></div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>  <span class="comment">// The number and type of type of each slot are defined in the inl file.</span></div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>  <span class="keyword">template</span> &lt;std::<span class="keywordtype">size_t</span> Index&gt;</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>  std::tuple_element_t&lt;Index, plHashTableBaseIterator&gt;&amp; get()</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>  {</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>    <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (Index == 0)</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>      <span class="keywordflow">return</span> <a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">plHashTableBaseConstIterator&lt;KeyType, ValueType, Hasher&gt;::Key</a>();</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>    <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (Index == 1)</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>      <span class="keywordflow">return</span> <a class="code hl_function" href="../../d3/ddb/structpl_hash_table_base_iterator.htm#aac851c20bb735c93e88aaab0f52b7767">Value</a>();</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>  }</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span> </div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>  <span class="keyword">template</span> &lt;std::<span class="keywordtype">size_t</span> Index&gt;</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>  std::tuple_element_t&lt;Index, plHashTableBaseIterator&gt;&amp; get()<span class="keyword"> const</span></div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>    <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (Index == 0)</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>      <span class="keywordflow">return</span> <a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">plHashTableBaseConstIterator&lt;KeyType, ValueType, Hasher&gt;::Key</a>();</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>    <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (Index == 1)</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>      <span class="keywordflow">return</span> <a class="code hl_function" href="../../d3/ddb/structpl_hash_table_base_iterator.htm#aac851c20bb735c93e88aaab0f52b7767">Value</a>();</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>  }</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>};</div>
</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span> </div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span> </div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Hasher&gt;</div>
<div class="foldopen" id="foldopen00156" data-start="{" data-end="};">
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno"><a class="line" href="../../d1/d77/classpl_hash_table_base.htm">  156</a></span><span class="keyword">class </span><a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase</a></div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>{</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>  <span class="keyword">using </span><a class="code hl_struct" href="../../d3/ddb/structpl_hash_table_base_iterator.htm">Iterator</a> = <a class="code hl_struct" href="../../d3/ddb/structpl_hash_table_base_iterator.htm">plHashTableBaseIterator&lt;KeyType, ValueType, Hasher&gt;</a>;</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>  <span class="keyword">using </span><a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">ConstIterator</a> = <a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">plHashTableBaseConstIterator&lt;KeyType, ValueType, Hasher&gt;</a>;</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span> </div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span><span class="keyword">protected</span>:</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>  <span class="keyword">explicit</span> <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#ad6c5f5741011d0ef32a95275acd83b7a">plHashTableBase</a>(<a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span> </div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno"><a class="line" href="../../d1/d77/classpl_hash_table_base.htm#a953b155c2f90e619f282d723089aceb4">  167</a></span>  <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a953b155c2f90e619f282d723089aceb4">plHashTableBase</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;</a>&amp; rhs, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span> </div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno"><a class="line" href="../../d1/d77/classpl_hash_table_base.htm#a8296996164544fe91759837172b18c36">  170</a></span>  <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a8296996164544fe91759837172b18c36">plHashTableBase</a>(<a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;</a>&amp;&amp; rhs, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span> </div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>  <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a5b07f15fd03d8afdca553fcaea84706d">~plHashTableBase</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span> </div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno"><a class="line" href="../../d1/d77/classpl_hash_table_base.htm#a3a4a8b87717eee0a9d12e7f39323a8e2">  176</a></span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a3a4a8b87717eee0a9d12e7f39323a8e2">operator=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;</a>&amp; rhs); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span> </div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno"><a class="line" href="../../d1/d77/classpl_hash_table_base.htm#a9b0a18a834a42eec0211e40e52990d17">  179</a></span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a9b0a18a834a42eec0211e40e52990d17">operator=</a>(<a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;</a>&amp;&amp; rhs); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span> </div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a05c7e8fd2c45ca40b3e06854165202ae">operator==</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>  PL_ADD_DEFAULT_OPERATOR_NOTEQUAL(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;</a>&amp;);</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span> </div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a99fbca5d62f7ce498d8a89711ad0b6b4">Reserve</a>(plUInt32 uiCapacity); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span> </div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a74ac90be885466fb0773ad979afd6b28">Compact</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span> </div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>  plUInt32 <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a3c2a07024da01255c3c0503e6d82ffcd">GetCount</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span> </div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a8838409dbd1dce42124bb74824c0d6b4">IsEmpty</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span> </div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a95c6a29c1fdd09be149dde078baa3b89">Clear</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span> </div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType, <span class="keyword">typename</span> CompatibleValueType&gt;</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno"><a class="line" href="../../d1/d77/classpl_hash_table_base.htm#a907117a01c398b2cdb7e632406cd9652">  209</a></span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a907117a01c398b2cdb7e632406cd9652">Insert</a>(CompatibleKeyType&amp;&amp; key, CompatibleValueType&amp;&amp; value, ValueType* out_pOldValue = <span class="keyword">nullptr</span>); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span> </div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno"><a class="line" href="../../d1/d77/classpl_hash_table_base.htm#aa03f76a0cc178f84de2c32937c9ace5c">  213</a></span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#aa03f76a0cc178f84de2c32937c9ace5c">Remove</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key, ValueType* out_pOldValue = <span class="keyword">nullptr</span>); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span> </div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno"><a class="line" href="../../d1/d77/classpl_hash_table_base.htm#a5990d39d061691183bdad676e1e9636a">  216</a></span>  <a class="code hl_struct" href="../../d3/ddb/structpl_hash_table_base_iterator.htm">Iterator</a> <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a5990d39d061691183bdad676e1e9636a">Remove</a>(<span class="keyword">const</span> <a class="code hl_struct" href="../../d3/ddb/structpl_hash_table_base_iterator.htm">Iterator</a>&amp; pos); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span> </div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno"><a class="line" href="../../d1/d77/classpl_hash_table_base.htm#a2fcc1390a0f3116321acad8dde202adf">  219</a></span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a2fcc1390a0f3116321acad8dde202adf">Remove</a>(<span class="keyword">const</span> <a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">ConstIterator</a>&amp; pos) = <span class="keyword">delete</span>;</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span> </div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno"><a class="line" href="../../d1/d77/classpl_hash_table_base.htm#a48353ae8728017bf107e01ba0b8b3841">  223</a></span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a48353ae8728017bf107e01ba0b8b3841">TryGetValue</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key, ValueType&amp; out_value) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span> </div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno"><a class="line" href="../../d1/d77/classpl_hash_table_base.htm#a0156dd65557d6d35549df881c10eb8c7">  227</a></span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a0156dd65557d6d35549df881c10eb8c7">TryGetValue</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key, <span class="keyword">const</span> ValueType*&amp; out_pValue) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span> </div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno"><a class="line" href="../../d1/d77/classpl_hash_table_base.htm#aa37f0b3b8d47aac58e27c0b0a5926c7f">  231</a></span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#aa37f0b3b8d47aac58e27c0b0a5926c7f">TryGetValue</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key, ValueType*&amp; out_pValue) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span> </div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>  <a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">ConstIterator</a> <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a583c37867460a802d93c0b5fff6633ac">Find</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>;</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span> </div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>  <a class="code hl_struct" href="../../d3/ddb/structpl_hash_table_base_iterator.htm">Iterator</a> <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a583c37867460a802d93c0b5fff6633ac">Find</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key);</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span> </div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno"><a class="line" href="../../d1/d77/classpl_hash_table_base.htm#a548dfa76aefe2b718a6fbc4859e9395d">  243</a></span>  <span class="keyword">const</span> ValueType* <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a548dfa76aefe2b718a6fbc4859e9395d">GetValue</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span> </div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno"><a class="line" href="../../d1/d77/classpl_hash_table_base.htm#aed8989fcf6f7b9536995482f6b00853c">  247</a></span>  ValueType* <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#aed8989fcf6f7b9536995482f6b00853c">GetValue</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span> </div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>  ValueType&amp; <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a50c9809342771e08cdb1d89f451c78be">operator[]</a>(<span class="keyword">const</span> KeyType&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span> </div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span>  ValueType&amp; <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a0cec740f28f835aae6170dfb648e8c89">FindOrAdd</a>(<span class="keyword">const</span> KeyType&amp; key, <span class="keywordtype">bool</span>* out_pExisted = <span class="keyword">nullptr</span>); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span> </div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno"><a class="line" href="../../d1/d77/classpl_hash_table_base.htm#a180f72af49b7753a2c816b18a478103b">  257</a></span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a180f72af49b7753a2c816b18a478103b">Contains</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span> </div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span>  <a class="code hl_struct" href="../../d3/ddb/structpl_hash_table_base_iterator.htm">Iterator</a> <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a0cf98e9e9adc3c0d822cb4c7124e8b9a">GetIterator</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span> </div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span>  <a class="code hl_struct" href="../../d3/ddb/structpl_hash_table_base_iterator.htm">Iterator</a> <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a606266af037d66bb3cc32ef406e3e257">GetEndIterator</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span> </div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span>  <a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">ConstIterator</a> <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a0cf98e9e9adc3c0d822cb4c7124e8b9a">GetIterator</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span> </div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>  <a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">ConstIterator</a> <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a606266af037d66bb3cc32ef406e3e257">GetEndIterator</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span> </div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span>  <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a12cf789b156309f4bf0e734832c10c1c">GetAllocator</a>() <span class="keyword">const</span>;</div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span> </div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span>  plUInt64 <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a301f4fa645010a5852d88abea52543d9">GetHeapMemoryUsage</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span> </div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#aad665625f4f7468ad658d5f3bf000f5e">Swap</a>(<a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;</a>&amp; other); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span> </div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span>  <span class="keyword">friend</span> <span class="keyword">struct </span><a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">plHashTableBaseConstIterator</a>&lt;KeyType, ValueType, Hasher&gt;;</div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span>  <span class="keyword">friend</span> <span class="keyword">struct </span><a class="code hl_struct" href="../../d3/ddb/structpl_hash_table_base_iterator.htm">plHashTableBaseIterator</a>&lt;KeyType, ValueType, Hasher&gt;;</div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span> </div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span>  <span class="keyword">struct </span>Entry</div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span>  {</div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span>    KeyType key;</div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span>    ValueType value;</div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span>  };</div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span> </div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span>  Entry* m_pEntries = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span>  plUInt32* m_pEntryFlags = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span> </div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span>  plUInt32 m_uiCount = 0;</div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span>  plUInt32 m_uiCapacity = 0;</div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span> </div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span>  <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* m_pAllocator = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span> </div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span>  <span class="keyword">enum</span></div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span>  {</div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span>    FREE_ENTRY = 0,</div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span>    VALID_ENTRY = 1,</div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span>    DELETED_ENTRY = 2,</div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span>    FLAGS_MASK = 3,</div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span>    CAPACITY_ALIGNMENT = 32</div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span>  };</div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span> </div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span>  <span class="keywordtype">void</span> SetCapacity(plUInt32 uiCapacity);</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span> </div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span>  <span class="keywordtype">void</span> RemoveInternal(plUInt32 uiIndex);</div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span> </div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span>  plUInt32 FindEntry(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>;</div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span> </div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span>  plUInt32 FindEntry(plUInt32 uiHash, <span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>;</div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span> </div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span>  plUInt32 GetFlagsCapacity() <span class="keyword">const</span>;</div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>  plUInt32 GetFlags(plUInt32* pFlags, plUInt32 uiEntryIndex) <span class="keyword">const</span>;</div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span>  <span class="keywordtype">void</span> SetFlags(plUInt32 uiEntryIndex, plUInt32 uiFlags);</div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span> </div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span>  <span class="keywordtype">bool</span> IsFreeEntry(plUInt32 uiEntryIndex) <span class="keyword">const</span>;</div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span>  <span class="keywordtype">bool</span> IsValidEntry(plUInt32 uiEntryIndex) <span class="keyword">const</span>;</div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span>  <span class="keywordtype">bool</span> IsDeletedEntry(plUInt32 uiEntryIndex) <span class="keyword">const</span>;</div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span> </div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span>  <span class="keywordtype">void</span> MarkEntryAsFree(plUInt32 uiEntryIndex);</div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span>  <span class="keywordtype">void</span> MarkEntryAsValid(plUInt32 uiEntryIndex);</div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span>  <span class="keywordtype">void</span> MarkEntryAsDeleted(plUInt32 uiEntryIndex);</div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span>};</div>
</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span> </div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Hasher = plHashHelper&lt;KeyType&gt;, <span class="keyword">typename</span> AllocatorWrapper = plDefaultAllocatorWrapper&gt;</div>
<div class="foldopen" id="foldopen00332" data-start="{" data-end="};">
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno"><a class="line" href="../../dd/d55/classpl_hash_table.htm">  332</a></span><span class="keyword">class </span><a class="code hl_class" href="../../dd/d55/classpl_hash_table.htm">plHashTable</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase</a>&lt;KeyType, ValueType, Hasher&gt;</div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span>{</div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span>  <a class="code hl_class" href="../../dd/d55/classpl_hash_table.htm">plHashTable</a>();</div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span>  <span class="keyword">explicit</span> <a class="code hl_class" href="../../dd/d55/classpl_hash_table.htm">plHashTable</a>(<a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator);</div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span> </div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span>  <a class="code hl_class" href="../../dd/d55/classpl_hash_table.htm">plHashTable</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt;KeyType, ValueType, Hasher, AllocatorWrapper&gt;</a>&amp; other);</div>
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno">  339</span>  <a class="code hl_class" href="../../dd/d55/classpl_hash_table.htm">plHashTable</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;</a>&amp; other);</div>
<div class="line"><a id="l00340" name="l00340"></a><span class="lineno">  340</span> </div>
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno">  341</span>  <a class="code hl_class" href="../../dd/d55/classpl_hash_table.htm">plHashTable</a>(<a class="code hl_class" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt;KeyType, ValueType, Hasher, AllocatorWrapper&gt;</a>&amp;&amp; other);</div>
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno">  342</span>  <a class="code hl_class" href="../../dd/d55/classpl_hash_table.htm">plHashTable</a>(<a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;</a>&amp;&amp; other);</div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span> </div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span> </div>
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno">  345</span>  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code hl_class" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt;KeyType, ValueType, Hasher, AllocatorWrapper&gt;</a>&amp; rhs);</div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span>  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;</a>&amp; rhs);</div>
<div class="line"><a id="l00347" name="l00347"></a><span class="lineno">  347</span> </div>
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno">  348</span>  <span class="keywordtype">void</span> operator=(<a class="code hl_class" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt;KeyType, ValueType, Hasher, AllocatorWrapper&gt;</a>&amp;&amp; rhs);</div>
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno">  349</span>  <span class="keywordtype">void</span> operator=(<a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;</a>&amp;&amp; rhs);</div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span>};</div>
</div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span> </div>
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno">  353</span><span class="comment">// begin() /end() for range-based for-loop support</span></div>
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno">  354</span> </div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno">  355</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Hasher&gt;</div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/ddb/structpl_hash_table_base_iterator.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;::Iterator</a> begin(<a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;</a>&amp; ref_container)</div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span>{</div>
<div class="line"><a id="l00358" name="l00358"></a><span class="lineno">  358</span>  <span class="keywordflow">return</span> ref_container.<a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a0cf98e9e9adc3c0d822cb4c7124e8b9a">GetIterator</a>();</div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span>}</div>
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno">  360</span> </div>
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno">  361</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Hasher&gt;</div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno">  362</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;::ConstIterator</a> begin(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;</a>&amp; container)</div>
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno">  363</span>{</div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span>  <span class="keywordflow">return</span> container.<a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a0cf98e9e9adc3c0d822cb4c7124e8b9a">GetIterator</a>();</div>
<div class="line"><a id="l00365" name="l00365"></a><span class="lineno">  365</span>}</div>
<div class="line"><a id="l00366" name="l00366"></a><span class="lineno">  366</span> </div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Hasher&gt;</div>
<div class="line"><a id="l00368" name="l00368"></a><span class="lineno">  368</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;::ConstIterator</a> cbegin(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;</a>&amp; container)</div>
<div class="line"><a id="l00369" name="l00369"></a><span class="lineno">  369</span>{</div>
<div class="line"><a id="l00370" name="l00370"></a><span class="lineno">  370</span>  <span class="keywordflow">return</span> container.<a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a0cf98e9e9adc3c0d822cb4c7124e8b9a">GetIterator</a>();</div>
<div class="line"><a id="l00371" name="l00371"></a><span class="lineno">  371</span>}</div>
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno">  372</span> </div>
<div class="line"><a id="l00373" name="l00373"></a><span class="lineno">  373</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Hasher&gt;</div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno">  374</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/ddb/structpl_hash_table_base_iterator.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;::Iterator</a> end(<a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;</a>&amp; ref_container)</div>
<div class="line"><a id="l00375" name="l00375"></a><span class="lineno">  375</span>{</div>
<div class="line"><a id="l00376" name="l00376"></a><span class="lineno">  376</span>  <span class="keywordflow">return</span> ref_container.<a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a606266af037d66bb3cc32ef406e3e257">GetEndIterator</a>();</div>
<div class="line"><a id="l00377" name="l00377"></a><span class="lineno">  377</span>}</div>
<div class="line"><a id="l00378" name="l00378"></a><span class="lineno">  378</span> </div>
<div class="line"><a id="l00379" name="l00379"></a><span class="lineno">  379</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Hasher&gt;</div>
<div class="line"><a id="l00380" name="l00380"></a><span class="lineno">  380</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;::ConstIterator</a> end(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;</a>&amp; container)</div>
<div class="line"><a id="l00381" name="l00381"></a><span class="lineno">  381</span>{</div>
<div class="line"><a id="l00382" name="l00382"></a><span class="lineno">  382</span>  <span class="keywordflow">return</span> container.<a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a606266af037d66bb3cc32ef406e3e257">GetEndIterator</a>();</div>
<div class="line"><a id="l00383" name="l00383"></a><span class="lineno">  383</span>}</div>
<div class="line"><a id="l00384" name="l00384"></a><span class="lineno">  384</span> </div>
<div class="line"><a id="l00385" name="l00385"></a><span class="lineno">  385</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Hasher&gt;</div>
<div class="line"><a id="l00386" name="l00386"></a><span class="lineno">  386</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;::ConstIterator</a> cend(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase&lt;KeyType, ValueType, Hasher&gt;</a>&amp; container)</div>
<div class="line"><a id="l00387" name="l00387"></a><span class="lineno">  387</span>{</div>
<div class="line"><a id="l00388" name="l00388"></a><span class="lineno">  388</span>  <span class="keywordflow">return</span> container.<a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a606266af037d66bb3cc32ef406e3e257">GetEndIterator</a>();</div>
<div class="line"><a id="l00389" name="l00389"></a><span class="lineno">  389</span>}</div>
<div class="line"><a id="l00390" name="l00390"></a><span class="lineno">  390</span> </div>
<div class="line"><a id="l00391" name="l00391"></a><span class="lineno">  391</span><span class="preprocessor">#include &lt;Foundation/Containers/Implementation/HashTable_inl.h&gt;</span></div>
<div class="ttc" id="aclasspl_allocator_htm"><div class="ttname"><a href="../../da/df3/classpl_allocator.htm">plAllocator</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition</b> Allocator.h:23</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase</a></div><div class="ttdoc">Implementation of a hashtable which stores key/value pairs.</div><div class="ttdef"><b>Definition</b> HashTable.h:157</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a0156dd65557d6d35549df881c10eb8c7"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a0156dd65557d6d35549df881c10eb8c7">plHashTableBase::TryGetValue</a></div><div class="ttdeci">bool TryGetValue(const CompatibleKeyType &amp;key, const ValueType *&amp;out_pValue) const</div><div class="ttdoc">Returns whether an entry with the given key was found and if found writes out the pointer to the corr...</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a05c7e8fd2c45ca40b3e06854165202ae"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a05c7e8fd2c45ca40b3e06854165202ae">plHashTableBase::operator==</a></div><div class="ttdeci">bool operator==(const plHashTableBase&lt; KeyType, ValueType, Hasher &gt; &amp;rhs) const</div><div class="ttdoc">Compares this table to another table.</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:282</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a0cec740f28f835aae6170dfb648e8c89"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a0cec740f28f835aae6170dfb648e8c89">plHashTableBase::FindOrAdd</a></div><div class="ttdeci">ValueType &amp; FindOrAdd(const KeyType &amp;key, bool *out_pExisted=nullptr)</div><div class="ttdoc">Returns the value stored at the given key. If none exists, one is created. bExisted indicates whether...</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:583</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a0cf98e9e9adc3c0d822cb4c7124e8b9a"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a0cf98e9e9adc3c0d822cb4c7124e8b9a">plHashTableBase::GetIterator</a></div><div class="ttdeci">Iterator GetIterator()</div><div class="ttdoc">Returns an Iterator to the very first element.</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:625</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a12cf789b156309f4bf0e734832c10c1c"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a12cf789b156309f4bf0e734832c10c1c">plHashTableBase::GetAllocator</a></div><div class="ttdeci">plAllocator * GetAllocator() const</div><div class="ttdoc">Returns the allocator that is used by this instance.</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:657</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a180f72af49b7753a2c816b18a478103b"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a180f72af49b7753a2c816b18a478103b">plHashTableBase::Contains</a></div><div class="ttdeci">bool Contains(const CompatibleKeyType &amp;key) const</div><div class="ttdoc">Returns if an entry with given key exists in the table.</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a2fcc1390a0f3116321acad8dde202adf"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a2fcc1390a0f3116321acad8dde202adf">plHashTableBase::Remove</a></div><div class="ttdeci">void Remove(const ConstIterator &amp;pos)=delete</div><div class="ttdoc">Cannot remove an element with just a plHashTableBaseConstIterator.</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a301f4fa645010a5852d88abea52543d9"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a301f4fa645010a5852d88abea52543d9">plHashTableBase::GetHeapMemoryUsage</a></div><div class="ttdeci">plUInt64 GetHeapMemoryUsage() const</div><div class="ttdoc">Returns the amount of bytes that are currently allocated on the heap.</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:663</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a3a4a8b87717eee0a9d12e7f39323a8e2"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a3a4a8b87717eee0a9d12e7f39323a8e2">plHashTableBase::operator=</a></div><div class="ttdeci">void operator=(const plHashTableBase&lt; KeyType, ValueType, Hasher &gt; &amp;rhs)</div><div class="ttdoc">Copies the data from another hashtable into this one.</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a3c2a07024da01255c3c0503e6d82ffcd"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a3c2a07024da01255c3c0503e6d82ffcd">plHashTableBase::GetCount</a></div><div class="ttdeci">plUInt32 GetCount() const</div><div class="ttdoc">Returns the number of active entries in the table.</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:343</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a48353ae8728017bf107e01ba0b8b3841"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a48353ae8728017bf107e01ba0b8b3841">plHashTableBase::TryGetValue</a></div><div class="ttdeci">bool TryGetValue(const CompatibleKeyType &amp;key, ValueType &amp;out_value) const</div><div class="ttdoc">Returns whether an entry with the given key was found and if found writes out the corresponding value...</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a50c9809342771e08cdb1d89f451c78be"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a50c9809342771e08cdb1d89f451c78be">plHashTableBase::operator[]</a></div><div class="ttdeci">ValueType &amp; operator[](const KeyType &amp;key)</div><div class="ttdoc">Returns the value to the given key if found or creates a new entry with the given key and a default c...</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:577</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a548dfa76aefe2b718a6fbc4859e9395d"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a548dfa76aefe2b718a6fbc4859e9395d">plHashTableBase::GetValue</a></div><div class="ttdeci">const ValueType * GetValue(const CompatibleKeyType &amp;key) const</div><div class="ttdoc">Returns a pointer to the value of the entry with the given key if found, otherwise returns nullptr.</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a583c37867460a802d93c0b5fff6633ac"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a583c37867460a802d93c0b5fff6633ac">plHashTableBase::Find</a></div><div class="ttdeci">ConstIterator Find(const CompatibleKeyType &amp;key) const</div><div class="ttdoc">Searches for key, returns a plHashTableBaseConstIterator to it or an invalid iterator,...</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:528</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a5990d39d061691183bdad676e1e9636a"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a5990d39d061691183bdad676e1e9636a">plHashTableBase::Remove</a></div><div class="ttdeci">Iterator Remove(const Iterator &amp;pos)</div><div class="ttdoc">Erases the key/value pair at the given Iterator. Returns an iterator to the element after the given i...</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a5b07f15fd03d8afdca553fcaea84706d"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a5b07f15fd03d8afdca553fcaea84706d">plHashTableBase::~plHashTableBase</a></div><div class="ttdeci">~plHashTableBase()</div><div class="ttdoc">Destructor.</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:215</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a606266af037d66bb3cc32ef406e3e257"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a606266af037d66bb3cc32ef406e3e257">plHashTableBase::GetEndIterator</a></div><div class="ttdeci">Iterator GetEndIterator()</div><div class="ttdoc">Returns an Iterator to the first element that is not part of the hash-table. Needed to support range ...</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:633</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a74ac90be885466fb0773ad979afd6b28"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a74ac90be885466fb0773ad979afd6b28">plHashTableBase::Compact</a></div><div class="ttdeci">void Compact()</div><div class="ttdoc">Tries to compact the hashtable to avoid wasting memory.</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:325</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a8296996164544fe91759837172b18c36"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a8296996164544fe91759837172b18c36">plHashTableBase::plHashTableBase</a></div><div class="ttdeci">plHashTableBase(plHashTableBase&lt; KeyType, ValueType, Hasher &gt; &amp;&amp;rhs, plAllocator *pAllocator)</div><div class="ttdoc">Moves data from an existing hashtable into this one.</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a8838409dbd1dce42124bb74824c0d6b4"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a8838409dbd1dce42124bb74824c0d6b4">plHashTableBase::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns true, if the hashtable does not contain any elements.</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:349</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a907117a01c398b2cdb7e632406cd9652"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a907117a01c398b2cdb7e632406cd9652">plHashTableBase::Insert</a></div><div class="ttdeci">bool Insert(CompatibleKeyType &amp;&amp;key, CompatibleValueType &amp;&amp;value, ValueType *out_pOldValue=nullptr)</div><div class="ttdoc">Inserts the key value pair or replaces value if an entry with the given key already exists.</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a953b155c2f90e619f282d723089aceb4"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a953b155c2f90e619f282d723089aceb4">plHashTableBase::plHashTableBase</a></div><div class="ttdeci">plHashTableBase(const plHashTableBase&lt; KeyType, ValueType, Hasher &gt; &amp;rhs, plAllocator *pAllocator)</div><div class="ttdoc">Creates a copy of the given hashtable.</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a95c6a29c1fdd09be149dde078baa3b89"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a95c6a29c1fdd09be149dde078baa3b89">plHashTableBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Clears the table.</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:355</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a99fbca5d62f7ce498d8a89711ad0b6b4"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a99fbca5d62f7ce498d8a89711ad0b6b4">plHashTableBase::Reserve</a></div><div class="ttdeci">void Reserve(plUInt32 uiCapacity)</div><div class="ttdoc">Expands the hashtable by over-allocating the internal storage so that the load factor is lower or equ...</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:307</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a9b0a18a834a42eec0211e40e52990d17"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a9b0a18a834a42eec0211e40e52990d17">plHashTableBase::operator=</a></div><div class="ttdeci">void operator=(plHashTableBase&lt; KeyType, ValueType, Hasher &gt; &amp;&amp;rhs)</div><div class="ttdoc">Moves data from an existing hashtable into this one.</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_aa03f76a0cc178f84de2c32937c9ace5c"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#aa03f76a0cc178f84de2c32937c9ace5c">plHashTableBase::Remove</a></div><div class="ttdeci">bool Remove(const CompatibleKeyType &amp;key, ValueType *out_pOldValue=nullptr)</div><div class="ttdoc">Removes the entry with the given key. Returns whether an entry was removed and optionally writes out ...</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_aa37f0b3b8d47aac58e27c0b0a5926c7f"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#aa37f0b3b8d47aac58e27c0b0a5926c7f">plHashTableBase::TryGetValue</a></div><div class="ttdeci">bool TryGetValue(const CompatibleKeyType &amp;key, ValueType *&amp;out_pValue) const</div><div class="ttdoc">Returns whether an entry with the given key was found and if found writes out the pointer to the corr...</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_aad665625f4f7468ad658d5f3bf000f5e"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#aad665625f4f7468ad658d5f3bf000f5e">plHashTableBase::Swap</a></div><div class="ttdeci">void Swap(plHashTableBase&lt; KeyType, ValueType, Hasher &gt; &amp;other)</div><div class="ttdoc">Swaps this map with the other one.</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:867</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_ad6c5f5741011d0ef32a95275acd83b7a"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#ad6c5f5741011d0ef32a95275acd83b7a">plHashTableBase::plHashTableBase</a></div><div class="ttdeci">plHashTableBase(plAllocator *pAllocator)</div><div class="ttdoc">Creates an empty hashtable. Does not allocate any data yet.</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:181</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_aed8989fcf6f7b9536995482f6b00853c"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#aed8989fcf6f7b9536995482f6b00853c">plHashTableBase::GetValue</a></div><div class="ttdeci">ValueType * GetValue(const CompatibleKeyType &amp;key)</div><div class="ttdoc">Returns a pointer to the value of the entry with the given key if found, otherwise returns nullptr.</div></div>
<div class="ttc" id="aclasspl_hash_table_htm"><div class="ttname"><a href="../../dd/d55/classpl_hash_table.htm">plHashTable</a></div><div class="ttdef"><b>Definition</b> HashTable.h:333</div></div>
<div class="ttc" id="astructpl_hash_table_base_const_iterator_htm"><div class="ttname"><a href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">plHashTableBaseConstIterator</a></div><div class="ttdoc">Const iterator.</div><div class="ttdef"><b>Definition</b> HashTable.h:13</div></div>
<div class="ttc" id="astructpl_hash_table_base_const_iterator_htm_a3f4707368c12bb7c6474798346a9ace7"><div class="ttname"><a href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm#a3f4707368c12bb7c6474798346a9ace7">plHashTableBaseConstIterator::operator++</a></div><div class="ttdeci">void operator++()</div><div class="ttdoc">Shorthand for 'Next'.</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:88</div></div>
<div class="ttc" id="astructpl_hash_table_base_const_iterator_htm_a5264c7fbd8348c077844c9bf1b820c58"><div class="ttname"><a href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm#a5264c7fbd8348c077844c9bf1b820c58">plHashTableBaseConstIterator::Next</a></div><div class="ttdeci">void Next()</div><div class="ttdoc">Advances the iterator to the next element in the map. The iterator will not be valid anymore,...</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:62</div></div>
<div class="ttc" id="astructpl_hash_table_base_const_iterator_htm_a60041b58f920d863786ffa51958610c9"><div class="ttname"><a href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm#a60041b58f920d863786ffa51958610c9">plHashTableBaseConstIterator::operator*</a></div><div class="ttdeci">PL_ALWAYS_INLINE plHashTableBaseConstIterator &amp; operator*()</div><div class="ttdoc">Returns '*this' to enable foreach.</div><div class="ttdef"><b>Definition</b> HashTable.h:42</div></div>
<div class="ttc" id="astructpl_hash_table_base_const_iterator_htm_a73bd0fedb89487e5ff6c2341299a7c3a"><div class="ttname"><a href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm#a73bd0fedb89487e5ff6c2341299a7c3a">plHashTableBaseConstIterator::Value</a></div><div class="ttdeci">const ValueType &amp; Value() const</div><div class="ttdoc">Returns the 'value' of the element that this iterator points to.</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:56</div></div>
<div class="ttc" id="astructpl_hash_table_base_const_iterator_htm_a92e92c0851d4702fd7237e0ba68307dd"><div class="ttname"><a href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm#a92e92c0851d4702fd7237e0ba68307dd">plHashTableBaseConstIterator::Key</a></div><div class="ttdeci">const KeyType &amp; Key() const</div><div class="ttdoc">Returns the 'key' of the element that this iterator points to.</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:50</div></div>
<div class="ttc" id="astructpl_hash_table_base_const_iterator_htm_af465be6714afd19516ecb66243fe11a9"><div class="ttname"><a href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm#af465be6714afd19516ecb66243fe11a9">plHashTableBaseConstIterator::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdoc">Checks whether this iterator points to a valid element.</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:38</div></div>
<div class="ttc" id="astructpl_hash_table_base_const_iterator_htm_af7af83b383ad7f899859852d5ee5a950"><div class="ttname"><a href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm#af7af83b383ad7f899859852d5ee5a950">plHashTableBaseConstIterator::operator==</a></div><div class="ttdeci">bool operator==(const plHashTableBaseConstIterator &amp;rhs) const</div><div class="ttdoc">Checks whether the two iterators point to the same element.</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:44</div></div>
<div class="ttc" id="astructpl_hash_table_base_iterator_htm"><div class="ttname"><a href="../../d3/ddb/structpl_hash_table_base_iterator.htm">plHashTableBaseIterator</a></div><div class="ttdoc">Iterator with write access.</div><div class="ttdef"><b>Definition</b> HashTable.h:84</div></div>
<div class="ttc" id="astructpl_hash_table_base_iterator_htm_a1bd16eb6511d5fafaba671f3a9cbfa36"><div class="ttname"><a href="../../d3/ddb/structpl_hash_table_base_iterator.htm#a1bd16eb6511d5fafaba671f3a9cbfa36">plHashTableBaseIterator::operator*</a></div><div class="ttdeci">PL_ALWAYS_INLINE plHashTableBaseIterator &amp; operator*()</div><div class="ttdoc">Returns '*this' to enable foreach.</div><div class="ttdef"><b>Definition</b> HashTable.h:103</div></div>
<div class="ttc" id="astructpl_hash_table_base_iterator_htm_a1d748c226f6e729b9ad3e6169dcf205a"><div class="ttname"><a href="../../d3/ddb/structpl_hash_table_base_iterator.htm#a1d748c226f6e729b9ad3e6169dcf205a">plHashTableBaseIterator::plHashTableBaseIterator</a></div><div class="ttdeci">PL_ALWAYS_INLINE plHashTableBaseIterator(const plHashTableBaseIterator &amp;rhs)</div><div class="ttdoc">Creates a new iterator from another.</div></div>
<div class="ttc" id="astructpl_hash_table_base_iterator_htm_a8f42768b2a3003aa8ce3741865e69fe6"><div class="ttname"><a href="../../d3/ddb/structpl_hash_table_base_iterator.htm#a8f42768b2a3003aa8ce3741865e69fe6">plHashTableBaseIterator::operator=</a></div><div class="ttdeci">PL_ALWAYS_INLINE void operator=(const plHashTableBaseIterator &amp;rhs)</div><div class="ttdoc">Assigns one iterator no another.</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:134</div></div>
<div class="ttc" id="astructpl_hash_table_base_iterator_htm_aac851c20bb735c93e88aaab0f52b7767"><div class="ttname"><a href="../../d3/ddb/structpl_hash_table_base_iterator.htm#aac851c20bb735c93e88aaab0f52b7767">plHashTableBaseIterator::Value</a></div><div class="ttdeci">PL_FORCE_INLINE ValueType &amp; Value()</div><div class="ttdoc">Returns the 'value' of the element that this iterator points to.</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:142</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_3416883c1320ec68c4d0694befd114fc.htm">Containers</a></li><li class="navelem"><b>HashTable.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
