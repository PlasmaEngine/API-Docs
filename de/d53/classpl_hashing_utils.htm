<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Plasma Engine: plHashingUtils Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Plasma Engine<span id="projectnumber">&#160;2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('de/d53/classpl_hashing_utils.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="../../d1/d7b/classpl_hashing_utils-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plHashingUtils Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p>This class provides implementations of different hashing algorithms.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d8/df9/_hashing_utils_8h_source.htm">HashingUtils.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a554f8102d4111103212338e25ead14b8" id="r_a554f8102d4111103212338e25ead14b8"><td class="memTemplParams" colspan="2"><a id="a554f8102d4111103212338e25ead14b8" name="a554f8102d4111103212338e25ead14b8"></a>
template&lt;size_t N&gt; </td></tr>
<tr class="memitem:a554f8102d4111103212338e25ead14b8"><td class="memTemplItemLeft" align="right" valign="top">constexpr PL_ALWAYS_INLINE plUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MurmurHash32String</b> (const char(&amp;str)[N], plUInt32 uiSeed)</td></tr>
<tr class="separator:a554f8102d4111103212338e25ead14b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade59dc0f70798350854578e577e54981" id="r_ade59dc0f70798350854578e577e54981"><td class="memTemplParams" colspan="2"><a id="ade59dc0f70798350854578e577e54981" name="ade59dc0f70798350854578e577e54981"></a>
template&lt;size_t N&gt; </td></tr>
<tr class="memitem:ade59dc0f70798350854578e577e54981"><td class="memTemplItemLeft" align="right" valign="top">constexpr PL_ALWAYS_INLINE plUInt64&#160;</td><td class="memTemplItemRight" valign="bottom"><b>StringHash</b> (const char(&amp;str)[N], plUInt64 uiSeed)</td></tr>
<tr class="separator:ade59dc0f70798350854578e577e54981"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a991d989bead0bedc9d0fe090723e891a" id="r_a991d989bead0bedc9d0fe090723e891a"><td class="memTemplParams" colspan="2"><a id="a991d989bead0bedc9d0fe090723e891a" name="a991d989bead0bedc9d0fe090723e891a"></a>
template&lt;size_t N&gt; </td></tr>
<tr class="memitem:a991d989bead0bedc9d0fe090723e891a"><td class="memTemplItemLeft" align="right" valign="top">constexpr PL_ALWAYS_INLINE plUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>xxHash32String</b> (const char(&amp;str)[N], plUInt32 uiSeed)</td></tr>
<tr class="separator:a991d989bead0bedc9d0fe090723e891a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f4c819e7a0311753ae06cab40878bdc" id="r_a1f4c819e7a0311753ae06cab40878bdc"><td class="memTemplParams" colspan="2"><a id="a1f4c819e7a0311753ae06cab40878bdc" name="a1f4c819e7a0311753ae06cab40878bdc"></a>
template&lt;size_t N&gt; </td></tr>
<tr class="memitem:a1f4c819e7a0311753ae06cab40878bdc"><td class="memTemplItemLeft" align="right" valign="top">constexpr PL_ALWAYS_INLINE plUInt64&#160;</td><td class="memTemplItemRight" valign="bottom"><b>xxHash64String</b> (const char(&amp;str)[N], plUInt64 uiSeed)</td></tr>
<tr class="separator:a1f4c819e7a0311753ae06cab40878bdc"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-methods" name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a2ba6b2af970b65047e58b563525e1d73" id="r_a2ba6b2af970b65047e58b563525e1d73"><td class="memItemLeft" align="right" valign="top"><a id="a2ba6b2af970b65047e58b563525e1d73" name="a2ba6b2af970b65047e58b563525e1d73"></a>
static plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>CRC32Hash</b> (const void *pKey, size_t uiSizeInBytes)</td></tr>
<tr class="memdesc:a2ba6b2af970b65047e58b563525e1d73"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the CRC32 checksum of the given key. <br /></td></tr>
<tr class="separator:a2ba6b2af970b65047e58b563525e1d73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc1c0889a01c9c2ce59df3652803efe9" id="r_adc1c0889a01c9c2ce59df3652803efe9"><td class="memItemLeft" align="right" valign="top"><a id="adc1c0889a01c9c2ce59df3652803efe9" name="adc1c0889a01c9c2ce59df3652803efe9"></a>
static plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>MurmurHash32</b> (const void *pKey, size_t uiSizeInByte, plUInt32 uiSeed=0)</td></tr>
<tr class="memdesc:adc1c0889a01c9c2ce59df3652803efe9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the 32bit murmur hash of the given key. <br /></td></tr>
<tr class="separator:adc1c0889a01c9c2ce59df3652803efe9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1f976a72682c8c491fae04ed8fa41b5" id="r_ab1f976a72682c8c491fae04ed8fa41b5"><td class="memItemLeft" align="right" valign="top"><a id="ab1f976a72682c8c491fae04ed8fa41b5" name="ab1f976a72682c8c491fae04ed8fa41b5"></a>
static plUInt64&#160;</td><td class="memItemRight" valign="bottom"><b>MurmurHash64</b> (const void *pKey, size_t uiSizeInByte, plUInt64 uiSeed=0)</td></tr>
<tr class="memdesc:ab1f976a72682c8c491fae04ed8fa41b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the 64bit murmur hash of the given key. <br /></td></tr>
<tr class="separator:ab1f976a72682c8c491fae04ed8fa41b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9efbfa41c39eb71b1f98344276ee848" id="r_af9efbfa41c39eb71b1f98344276ee848"><td class="memTemplParams" colspan="2"><a id="af9efbfa41c39eb71b1f98344276ee848" name="af9efbfa41c39eb71b1f98344276ee848"></a>
template&lt;size_t N&gt; </td></tr>
<tr class="memitem:af9efbfa41c39eb71b1f98344276ee848"><td class="memTemplItemLeft" align="right" valign="top">static constexpr plUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MurmurHash32String</b> (const char(&amp;str)[N], plUInt32 uiSeed=0)</td></tr>
<tr class="memdesc:af9efbfa41c39eb71b1f98344276ee848"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the 32bit murmur hash of a string constant at compile time. Encoding does not matter here. <br /></td></tr>
<tr class="separator:af9efbfa41c39eb71b1f98344276ee848"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2971c2a07799583972890c852e47abaa" id="r_a2971c2a07799583972890c852e47abaa"><td class="memItemLeft" align="right" valign="top">static plUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2971c2a07799583972890c852e47abaa">MurmurHash32String</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStr, plUInt32 uiSeed=0)</td></tr>
<tr class="memdesc:a2971c2a07799583972890c852e47abaa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the 32bit murmur hash of a string pointer during runtime. Encoding does not matter here.  <br /></td></tr>
<tr class="separator:a2971c2a07799583972890c852e47abaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c0a580df763da8745e5fe430d6b8393" id="r_a7c0a580df763da8745e5fe430d6b8393"><td class="memItemLeft" align="right" valign="top"><a id="a7c0a580df763da8745e5fe430d6b8393" name="a7c0a580df763da8745e5fe430d6b8393"></a>
static plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>xxHash32</b> (const void *pKey, size_t uiSizeInByte, plUInt32 uiSeed=0)</td></tr>
<tr class="memdesc:a7c0a580df763da8745e5fe430d6b8393"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the 32bit xxHash of the given key. <br /></td></tr>
<tr class="separator:a7c0a580df763da8745e5fe430d6b8393"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc1d6b8ee61ef32f93fac4ae7ad6a048" id="r_afc1d6b8ee61ef32f93fac4ae7ad6a048"><td class="memItemLeft" align="right" valign="top"><a id="afc1d6b8ee61ef32f93fac4ae7ad6a048" name="afc1d6b8ee61ef32f93fac4ae7ad6a048"></a>
static plUInt64&#160;</td><td class="memItemRight" valign="bottom"><b>xxHash64</b> (const void *pKey, size_t uiSizeInByte, plUInt64 uiSeed=0)</td></tr>
<tr class="memdesc:afc1d6b8ee61ef32f93fac4ae7ad6a048"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the 64bit xxHash of the given key. <br /></td></tr>
<tr class="separator:afc1d6b8ee61ef32f93fac4ae7ad6a048"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3bf17fc699a6416ef105b6e95f32a4e" id="r_ab3bf17fc699a6416ef105b6e95f32a4e"><td class="memTemplParams" colspan="2"><a id="ab3bf17fc699a6416ef105b6e95f32a4e" name="ab3bf17fc699a6416ef105b6e95f32a4e"></a>
template&lt;size_t N&gt; </td></tr>
<tr class="memitem:ab3bf17fc699a6416ef105b6e95f32a4e"><td class="memTemplItemLeft" align="right" valign="top">static constexpr plUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>xxHash32String</b> (const char(&amp;str)[N], plUInt32 uiSeed=0)</td></tr>
<tr class="memdesc:ab3bf17fc699a6416ef105b6e95f32a4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the 32bit xxHash of the given string literal at compile time. <br /></td></tr>
<tr class="separator:ab3bf17fc699a6416ef105b6e95f32a4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51de524fd315b0f9c4cf8f827632a669" id="r_a51de524fd315b0f9c4cf8f827632a669"><td class="memTemplParams" colspan="2"><a id="a51de524fd315b0f9c4cf8f827632a669" name="a51de524fd315b0f9c4cf8f827632a669"></a>
template&lt;size_t N&gt; </td></tr>
<tr class="memitem:a51de524fd315b0f9c4cf8f827632a669"><td class="memTemplItemLeft" align="right" valign="top">static constexpr plUInt64&#160;</td><td class="memTemplItemRight" valign="bottom"><b>xxHash64String</b> (const char(&amp;str)[N], plUInt64 uiSeed=0)</td></tr>
<tr class="memdesc:a51de524fd315b0f9c4cf8f827632a669"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the 64bit xxHash of the given string literal at compile time. <br /></td></tr>
<tr class="separator:a51de524fd315b0f9c4cf8f827632a669"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af786319e461ff6151ed5f566f5a27814" id="r_af786319e461ff6151ed5f566f5a27814"><td class="memItemLeft" align="right" valign="top">static plUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af786319e461ff6151ed5f566f5a27814">xxHash32String</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStr, plUInt32 uiSeed=0)</td></tr>
<tr class="memdesc:af786319e461ff6151ed5f566f5a27814"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the 32bit xxHash of a string pointer during runtime.  <br /></td></tr>
<tr class="separator:af786319e461ff6151ed5f566f5a27814"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a964dacb71724515ecb86fd7c69826fe9" id="r_a964dacb71724515ecb86fd7c69826fe9"><td class="memItemLeft" align="right" valign="top">static plUInt64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a964dacb71724515ecb86fd7c69826fe9">xxHash64String</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStr, plUInt64 uiSeed=0)</td></tr>
<tr class="memdesc:a964dacb71724515ecb86fd7c69826fe9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the 64bit xxHash of a string pointer during runtime.  <br /></td></tr>
<tr class="separator:a964dacb71724515ecb86fd7c69826fe9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af10811571fa325d997fe1eafb8712781" id="r_af10811571fa325d997fe1eafb8712781"><td class="memTemplParams" colspan="2"><a id="af10811571fa325d997fe1eafb8712781" name="af10811571fa325d997fe1eafb8712781"></a>
template&lt;size_t N&gt; </td></tr>
<tr class="memitem:af10811571fa325d997fe1eafb8712781"><td class="memTemplItemLeft" align="right" valign="top">static constexpr plUInt64&#160;</td><td class="memTemplItemRight" valign="bottom"><b>StringHash</b> (const char(&amp;str)[N], plUInt64 uiSeed=0)</td></tr>
<tr class="memdesc:af10811571fa325d997fe1eafb8712781"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the hash of the given string literal at compile time. <br /></td></tr>
<tr class="separator:af10811571fa325d997fe1eafb8712781"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2288327faeb97018f9ece17007641f9" id="r_ad2288327faeb97018f9ece17007641f9"><td class="memItemLeft" align="right" valign="top">static plUInt64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad2288327faeb97018f9ece17007641f9">StringHash</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStr, plUInt64 uiSeed=0)</td></tr>
<tr class="memdesc:ad2288327faeb97018f9ece17007641f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the hash of a string pointer at runtime.  <br /></td></tr>
<tr class="separator:ad2288327faeb97018f9ece17007641f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa3ae342c00e6310bd844b09263a827d" id="r_aaa3ae342c00e6310bd844b09263a827d"><td class="memItemLeft" align="right" valign="top">static constexpr plUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aaa3ae342c00e6310bd844b09263a827d">StringHashTo32</a> (plUInt64 uiHash)</td></tr>
<tr class="memdesc:aaa3ae342c00e6310bd844b09263a827d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Truncates a 64 bit string hash to 32 bit.  <br /></td></tr>
<tr class="separator:aaa3ae342c00e6310bd844b09263a827d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49a2a757ce54d32b999283af169eba97" id="r_a49a2a757ce54d32b999283af169eba97"><td class="memItemLeft" align="right" valign="top"><a id="a49a2a757ce54d32b999283af169eba97" name="a49a2a757ce54d32b999283af169eba97"></a>
static constexpr plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>CombineHashValues32</b> (plUInt32 ui0, plUInt32 ui1)</td></tr>
<tr class="memdesc:a49a2a757ce54d32b999283af169eba97"><td class="mdescLeft">&#160;</td><td class="mdescRight">Combines two 32 bit hash values into one. <br /></td></tr>
<tr class="separator:a49a2a757ce54d32b999283af169eba97"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This class provides implementations of different hashing algorithms. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a2971c2a07799583972890c852e47abaa" name="a2971c2a07799583972890c852e47abaa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2971c2a07799583972890c852e47abaa">&#9670;&#160;</a></span>MurmurHash32String()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">PL_ALWAYS_INLINE plUInt32 plHashingUtils::MurmurHash32String </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sStr</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiSeed</em></span><span class="paramdefsep"> = </span><span class="paramdefval">0</span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculates the 32bit murmur hash of a string pointer during runtime. Encoding does not matter here. </p>
<p>We cannot pass a string pointer directly since a string constant would be treated as pointer as well. </p>

</div>
</div>
<a id="ad2288327faeb97018f9ece17007641f9" name="ad2288327faeb97018f9ece17007641f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2288327faeb97018f9ece17007641f9">&#9670;&#160;</a></span>StringHash()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">PL_ALWAYS_INLINE plUInt64 plHashingUtils::StringHash </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sStr</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt64</td>          <td class="paramname"><span class="paramname"><em>uiSeed</em></span><span class="paramdefsep"> = </span><span class="paramdefval">0</span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculates the hash of a string pointer at runtime. </p>
<p>We cannot pass a string pointer directly since a string constant would be treated as pointer as well. </p>

</div>
</div>
<a id="aaa3ae342c00e6310bd844b09263a827d" name="aaa3ae342c00e6310bd844b09263a827d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa3ae342c00e6310bd844b09263a827d">&#9670;&#160;</a></span>StringHashTo32()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">PL_ALWAYS_INLINE plUInt32 plHashingUtils::StringHashTo32 </td>
          <td>(</td>
          <td class="paramtype">plUInt64</td>          <td class="paramname"><span class="paramname"><em>uiHash</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Truncates a 64 bit string hash to 32 bit. </p>
<p>This is necessary when a 64 bit string hash is used in a hash table (which only uses 32 bit indices). </p>

</div>
</div>
<a id="af786319e461ff6151ed5f566f5a27814" name="af786319e461ff6151ed5f566f5a27814"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af786319e461ff6151ed5f566f5a27814">&#9670;&#160;</a></span>xxHash32String()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">PL_ALWAYS_INLINE plUInt32 plHashingUtils::xxHash32String </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sStr</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiSeed</em></span><span class="paramdefsep"> = </span><span class="paramdefval">0</span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculates the 32bit xxHash of a string pointer during runtime. </p>
<p>We cannot pass a string pointer directly since a string constant would be treated as pointer as well. </p>

</div>
</div>
<a id="a964dacb71724515ecb86fd7c69826fe9" name="a964dacb71724515ecb86fd7c69826fe9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a964dacb71724515ecb86fd7c69826fe9">&#9670;&#160;</a></span>xxHash64String()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">PL_ALWAYS_INLINE plUInt64 plHashingUtils::xxHash64String </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sStr</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt64</td>          <td class="paramname"><span class="paramname"><em>uiSeed</em></span><span class="paramdefsep"> = </span><span class="paramdefval">0</span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculates the 64bit xxHash of a string pointer during runtime. </p>
<p>We cannot pass a string pointer directly since a string constant would be treated as pointer as well. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/Engine/Foundation/Algorithm/<a class="el" href="../../d8/df9/_hashing_utils_8h_source.htm">HashingUtils.h</a></li>
<li>Code/Engine/Foundation/Algorithm/Implementation/<a class="el" href="../../d6/d19/_hashing_murmur__inl_8h_source.htm">HashingMurmur_inl.h</a></li>
<li>Code/Engine/Foundation/Algorithm/Implementation/<b>HashingUtils.cpp</b></li>
<li>Code/Engine/Foundation/Algorithm/Implementation/<a class="el" href="../../d0/d46/_hashing_utils__inl_8h_source.htm">HashingUtils_inl.h</a></li>
<li>Code/Engine/Foundation/Algorithm/Implementation/<a class="el" href="../../db/dfb/_hashing_xx_hash__inl_8h_source.htm">HashingXxHash_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../de/d53/classpl_hashing_utils.htm">plHashingUtils</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
