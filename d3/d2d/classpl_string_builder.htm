<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>plEngine: plStringBuilder Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only-darkmode-toggle.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">plEngine<span id="projectnumber">&#160;Release 2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d3/d2d/classpl_string_builder.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="../../dd/dcf/classpl_string_builder-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plStringBuilder Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="../../d3/d2d/classpl_string_builder.htm" title="plStringBuilder is a class that is meant for creating and modifying strings.">plStringBuilder</a> is a class that is meant for creating and modifying strings.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d5/df1/_string_builder_8h_source.htm">StringBuilder.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for plStringBuilder:</div>
<div class="dyncontent">
<div class="center"><img src="../../d0/dd0/classpl_string_builder__inherit__graph.png" border="0" usemap="#apl_string_builder_inherit__map" alt="Inheritance graph"/></div>
<map name="apl_string_builder_inherit__map" id="apl_string_builder_inherit__map">
<area shape="rect" title="plStringBuilder is a class that is meant for creating and modifying strings." alt="" coords="54,155,160,181"/>
<area shape="rect" href="../../de/d73/structpl_string_base.htm" title=" " alt="" coords="5,80,209,107"/>
<area shape="poly" title=" " alt="" coords="110,122,110,154,104,154,104,122"/>
<area shape="rect" href="../../da/d54/structpl_this_is_a_string.htm" title="Base class which marks a class as containing string data." alt="" coords="53,5,161,32"/>
<area shape="poly" title=" " alt="" coords="110,48,110,80,104,80,104,48"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a107a88ba85547554b2b2e1ceccbec431" id="r_a107a88ba85547554b2b2e1ceccbec431"><td class="memItemLeft" align="right" valign="top"><a id="a107a88ba85547554b2b2e1ceccbec431" name="a107a88ba85547554b2b2e1ceccbec431"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plStringBuilder</b> (<a class="el" href="../../da/df3/classpl_allocator.htm">plAllocator</a> *pAllocator=<a class="el" href="../../d8/d6f/classpl_foundation.htm#a2f9bc4a5e090e2d6173ff861d532b021">plFoundation::GetDefaultAllocator</a>())</td></tr>
<tr class="memdesc:a107a88ba85547554b2b2e1ceccbec431"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the string to be empty. No data is allocated, but the <a class="el" href="../../d3/d2d/classpl_string_builder.htm" title="plStringBuilder is a class that is meant for creating and modifying strings.">plStringBuilder</a> ALWAYS creates an array on the stack. <br /></td></tr>
<tr class="separator:a107a88ba85547554b2b2e1ceccbec431"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f4030d97079e15e4fdaa1ccc27355ec" id="r_a5f4030d97079e15e4fdaa1ccc27355ec"><td class="memItemLeft" align="right" valign="top"><a id="a5f4030d97079e15e4fdaa1ccc27355ec" name="a5f4030d97079e15e4fdaa1ccc27355ec"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plStringBuilder</b> (const <a class="el" href="../../d3/d2d/classpl_string_builder.htm">plStringBuilder</a> &amp;rhs)</td></tr>
<tr class="memdesc:a5f4030d97079e15e4fdaa1ccc27355ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:a5f4030d97079e15e4fdaa1ccc27355ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a885d1316c14692949ee50cf6598a8a5d" id="r_a885d1316c14692949ee50cf6598a8a5d"><td class="memItemLeft" align="right" valign="top"><a id="a885d1316c14692949ee50cf6598a8a5d" name="a885d1316c14692949ee50cf6598a8a5d"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plStringBuilder</b> (<a class="el" href="../../d3/d2d/classpl_string_builder.htm">plStringBuilder</a> &amp;&amp;rhs) noexcept</td></tr>
<tr class="memdesc:a885d1316c14692949ee50cf6598a8a5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:a885d1316c14692949ee50cf6598a8a5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c5d036483b34cd56f305e003f5d0a51" id="r_a6c5d036483b34cd56f305e003f5d0a51"><td class="memTemplParams" colspan="2"><a id="a6c5d036483b34cd56f305e003f5d0a51" name="a6c5d036483b34cd56f305e003f5d0a51"></a>
template&lt;plUInt16 Size&gt; </td></tr>
<tr class="memitem:a6c5d036483b34cd56f305e003f5d0a51"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><b>plStringBuilder</b> (const <a class="el" href="../../d1/db3/structpl_hybrid_string_base.htm">plHybridStringBase</a>&lt; Size &gt; &amp;rhs)</td></tr>
<tr class="memdesc:a6c5d036483b34cd56f305e003f5d0a51"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:a6c5d036483b34cd56f305e003f5d0a51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae08dbba46899662cba06fbc2b40dc599" id="r_ae08dbba46899662cba06fbc2b40dc599"><td class="memTemplParams" colspan="2"><a id="ae08dbba46899662cba06fbc2b40dc599" name="ae08dbba46899662cba06fbc2b40dc599"></a>
template&lt;plUInt16 Size, typename A &gt; </td></tr>
<tr class="memitem:ae08dbba46899662cba06fbc2b40dc599"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><b>plStringBuilder</b> (const <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plHybridString</a>&lt; Size, A &gt; &amp;rhs)</td></tr>
<tr class="memdesc:ae08dbba46899662cba06fbc2b40dc599"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:ae08dbba46899662cba06fbc2b40dc599"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade94bb5f0337259bd95d973a65d631e3" id="r_ade94bb5f0337259bd95d973a65d631e3"><td class="memTemplParams" colspan="2"><a id="ade94bb5f0337259bd95d973a65d631e3" name="ade94bb5f0337259bd95d973a65d631e3"></a>
template&lt;plUInt16 Size&gt; </td></tr>
<tr class="memitem:ade94bb5f0337259bd95d973a65d631e3"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><b>plStringBuilder</b> (<a class="el" href="../../d1/db3/structpl_hybrid_string_base.htm">plHybridStringBase</a>&lt; Size &gt; &amp;&amp;rhs)</td></tr>
<tr class="memdesc:ade94bb5f0337259bd95d973a65d631e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:ade94bb5f0337259bd95d973a65d631e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58152c1c5728d387f5b81883c7fab678" id="r_a58152c1c5728d387f5b81883c7fab678"><td class="memTemplParams" colspan="2"><a id="a58152c1c5728d387f5b81883c7fab678" name="a58152c1c5728d387f5b81883c7fab678"></a>
template&lt;plUInt16 Size, typename A &gt; </td></tr>
<tr class="memitem:a58152c1c5728d387f5b81883c7fab678"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><b>plStringBuilder</b> (<a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plHybridString</a>&lt; Size, A &gt; &amp;&amp;rhs)</td></tr>
<tr class="memdesc:a58152c1c5728d387f5b81883c7fab678"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:a58152c1c5728d387f5b81883c7fab678"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81aff0eaae363dc2e8dd18a02dbb6e9b" id="r_a81aff0eaae363dc2e8dd18a02dbb6e9b"><td class="memItemLeft" align="right" valign="top"><a id="a81aff0eaae363dc2e8dd18a02dbb6e9b" name="a81aff0eaae363dc2e8dd18a02dbb6e9b"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plStringBuilder</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData1, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData2, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData3={}, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData4={}, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData5={}, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData6={})</td></tr>
<tr class="memdesc:a81aff0eaae363dc2e8dd18a02dbb6e9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor that appends all the given strings. <br /></td></tr>
<tr class="separator:a81aff0eaae363dc2e8dd18a02dbb6e9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae543378265bd7df0a30554d85bc0144b" id="r_ae543378265bd7df0a30554d85bc0144b"><td class="memItemLeft" align="right" valign="top"><a id="ae543378265bd7df0a30554d85bc0144b" name="ae543378265bd7df0a30554d85bc0144b"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plStringBuilder</b> (const char *szUTF8, <a class="el" href="../../da/df3/classpl_allocator.htm">plAllocator</a> *pAllocator=<a class="el" href="../../d8/d6f/classpl_foundation.htm#a2f9bc4a5e090e2d6173ff861d532b021">plFoundation::GetDefaultAllocator</a>())</td></tr>
<tr class="memdesc:ae543378265bd7df0a30554d85bc0144b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given Utf8 string into this one. <br /></td></tr>
<tr class="separator:ae543378265bd7df0a30554d85bc0144b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adca8ee552025274a266b7dbcc4624f43" id="r_adca8ee552025274a266b7dbcc4624f43"><td class="memItemLeft" align="right" valign="top"><a id="adca8ee552025274a266b7dbcc4624f43" name="adca8ee552025274a266b7dbcc4624f43"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plStringBuilder</b> (const wchar_t *pWChar, <a class="el" href="../../da/df3/classpl_allocator.htm">plAllocator</a> *pAllocator=<a class="el" href="../../d8/d6f/classpl_foundation.htm#a2f9bc4a5e090e2d6173ff861d532b021">plFoundation::GetDefaultAllocator</a>())</td></tr>
<tr class="memdesc:adca8ee552025274a266b7dbcc4624f43"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given wchar_t string into this one. <br /></td></tr>
<tr class="separator:adca8ee552025274a266b7dbcc4624f43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d91cf295edf9eaef57d01a27bfc36b2" id="r_a2d91cf295edf9eaef57d01a27bfc36b2"><td class="memItemLeft" align="right" valign="top"><a id="a2d91cf295edf9eaef57d01a27bfc36b2" name="a2d91cf295edf9eaef57d01a27bfc36b2"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plStringBuilder</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> rhs, <a class="el" href="../../da/df3/classpl_allocator.htm">plAllocator</a> *pAllocator=<a class="el" href="../../d8/d6f/classpl_foundation.htm#a2f9bc4a5e090e2d6173ff861d532b021">plFoundation::GetDefaultAllocator</a>())</td></tr>
<tr class="memdesc:a2d91cf295edf9eaef57d01a27bfc36b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given substring into this one. The <a class="el" href="../../d6/d79/classpl_string_view.htm" title="plStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">plStringView</a> might actually be a substring of this very string. <br /></td></tr>
<tr class="separator:a2d91cf295edf9eaef57d01a27bfc36b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40eb7c51f4583a00a3c15f812d3c0df7" id="r_a40eb7c51f4583a00a3c15f812d3c0df7"><td class="memItemLeft" align="right" valign="top"><a id="a40eb7c51f4583a00a3c15f812d3c0df7" name="a40eb7c51f4583a00a3c15f812d3c0df7"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="../../d3/d2d/classpl_string_builder.htm">plStringBuilder</a> &amp;rhs)</td></tr>
<tr class="memdesc:a40eb7c51f4583a00a3c15f812d3c0df7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:a40eb7c51f4583a00a3c15f812d3c0df7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae647e439b4cfc0fec9255aa5b42945e9" id="r_ae647e439b4cfc0fec9255aa5b42945e9"><td class="memItemLeft" align="right" valign="top"><a id="ae647e439b4cfc0fec9255aa5b42945e9" name="ae647e439b4cfc0fec9255aa5b42945e9"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="../../d3/d2d/classpl_string_builder.htm">plStringBuilder</a> &amp;&amp;rhs) noexcept</td></tr>
<tr class="memdesc:ae647e439b4cfc0fec9255aa5b42945e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:ae647e439b4cfc0fec9255aa5b42945e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa066fdeaae380f774ce5cd81dbcece97" id="r_aa066fdeaae380f774ce5cd81dbcece97"><td class="memItemLeft" align="right" valign="top"><a id="aa066fdeaae380f774ce5cd81dbcece97" name="aa066fdeaae380f774ce5cd81dbcece97"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const char *szUTF8)</td></tr>
<tr class="memdesc:aa066fdeaae380f774ce5cd81dbcece97"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given Utf8 string into this one. <br /></td></tr>
<tr class="separator:aa066fdeaae380f774ce5cd81dbcece97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a401f72f9fa0a5f359354deace282edab" id="r_a401f72f9fa0a5f359354deace282edab"><td class="memItemLeft" align="right" valign="top"><a id="a401f72f9fa0a5f359354deace282edab" name="a401f72f9fa0a5f359354deace282edab"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const wchar_t *pWChar)</td></tr>
<tr class="memdesc:a401f72f9fa0a5f359354deace282edab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given wchar_t string into this one. <br /></td></tr>
<tr class="separator:a401f72f9fa0a5f359354deace282edab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f731043026cad906bd045532936d711" id="r_a2f731043026cad906bd045532936d711"><td class="memItemLeft" align="right" valign="top"><a id="a2f731043026cad906bd045532936d711" name="a2f731043026cad906bd045532936d711"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> rhs)</td></tr>
<tr class="memdesc:a2f731043026cad906bd045532936d711"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given substring into this one. The <a class="el" href="../../d6/d79/classpl_string_view.htm" title="plStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">plStringView</a> might actually be a substring of this very string. <br /></td></tr>
<tr class="separator:a2f731043026cad906bd045532936d711"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0e4310def5b31ca716026574e221ea8" id="r_ae0e4310def5b31ca716026574e221ea8"><td class="memTemplParams" colspan="2"><a id="ae0e4310def5b31ca716026574e221ea8" name="ae0e4310def5b31ca716026574e221ea8"></a>
template&lt;plUInt16 Size&gt; </td></tr>
<tr class="memitem:ae0e4310def5b31ca716026574e221ea8"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="../../d1/db3/structpl_hybrid_string_base.htm">plHybridStringBase</a>&lt; Size &gt; &amp;rhs)</td></tr>
<tr class="memdesc:ae0e4310def5b31ca716026574e221ea8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:ae0e4310def5b31ca716026574e221ea8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7c9fee23418a6dab9c554ff5aea4c47" id="r_ac7c9fee23418a6dab9c554ff5aea4c47"><td class="memTemplParams" colspan="2"><a id="ac7c9fee23418a6dab9c554ff5aea4c47" name="ac7c9fee23418a6dab9c554ff5aea4c47"></a>
template&lt;plUInt16 Size, typename A &gt; </td></tr>
<tr class="memitem:ac7c9fee23418a6dab9c554ff5aea4c47"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plHybridString</a>&lt; Size, A &gt; &amp;rhs)</td></tr>
<tr class="memdesc:ac7c9fee23418a6dab9c554ff5aea4c47"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:ac7c9fee23418a6dab9c554ff5aea4c47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a527367494d124b3d8d51fec271ce4351" id="r_a527367494d124b3d8d51fec271ce4351"><td class="memTemplParams" colspan="2"><a id="a527367494d124b3d8d51fec271ce4351" name="a527367494d124b3d8d51fec271ce4351"></a>
template&lt;plUInt16 Size&gt; </td></tr>
<tr class="memitem:a527367494d124b3d8d51fec271ce4351"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="../../d1/db3/structpl_hybrid_string_base.htm">plHybridStringBase</a>&lt; Size &gt; &amp;&amp;rhs)</td></tr>
<tr class="memdesc:a527367494d124b3d8d51fec271ce4351"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:a527367494d124b3d8d51fec271ce4351"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acdbc74b5f4c4354590787563c7464281" id="r_acdbc74b5f4c4354590787563c7464281"><td class="memTemplParams" colspan="2"><a id="acdbc74b5f4c4354590787563c7464281" name="acdbc74b5f4c4354590787563c7464281"></a>
template&lt;plUInt16 Size, typename A &gt; </td></tr>
<tr class="memitem:acdbc74b5f4c4354590787563c7464281"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plHybridString</a>&lt; Size, A &gt; &amp;&amp;rhs) noexcept</td></tr>
<tr class="memdesc:acdbc74b5f4c4354590787563c7464281"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:acdbc74b5f4c4354590787563c7464281"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f3754f7b55c07f871886605f64292e1" id="r_a0f3754f7b55c07f871886605f64292e1"><td class="memItemLeft" align="right" valign="top"><a id="a0f3754f7b55c07f871886605f64292e1" name="a0f3754f7b55c07f871886605f64292e1"></a>
<a class="el" href="../../da/df3/classpl_allocator.htm">plAllocator</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetAllocator</b> () const</td></tr>
<tr class="memdesc:a0f3754f7b55c07f871886605f64292e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the allocator that is used by this object. <br /></td></tr>
<tr class="separator:a0f3754f7b55c07f871886605f64292e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bf2e1b97d7c871a7cba08615bc82357" id="r_a0bf2e1b97d7c871a7cba08615bc82357"><td class="memItemLeft" align="right" valign="top"><a id="a0bf2e1b97d7c871a7cba08615bc82357" name="a0bf2e1b97d7c871a7cba08615bc82357"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Clear</b> ()</td></tr>
<tr class="memdesc:a0bf2e1b97d7c871a7cba08615bc82357"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resets this string to be empty. Does not deallocate any previously allocated data, as it might be reused later again. <br /></td></tr>
<tr class="separator:a0bf2e1b97d7c871a7cba08615bc82357"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11fe75866ee3add6ceaac9690549f908" id="r_a11fe75866ee3add6ceaac9690549f908"><td class="memItemLeft" align="right" valign="top"><a id="a11fe75866ee3add6ceaac9690549f908" name="a11fe75866ee3add6ceaac9690549f908"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><b>GetData</b> () const</td></tr>
<tr class="memdesc:a11fe75866ee3add6ceaac9690549f908"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a char pointer to the internal Utf8 data. <br /></td></tr>
<tr class="separator:a11fe75866ee3add6ceaac9690549f908"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1db6c0e59e3929a325acbc6deaa85ce9" id="r_a1db6c0e59e3929a325acbc6deaa85ce9"><td class="memItemLeft" align="right" valign="top"><a id="a1db6c0e59e3929a325acbc6deaa85ce9" name="a1db6c0e59e3929a325acbc6deaa85ce9"></a>
plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GetElementCount</b> () const</td></tr>
<tr class="memdesc:a1db6c0e59e3929a325acbc6deaa85ce9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of bytes that this string takes up. <br /></td></tr>
<tr class="separator:a1db6c0e59e3929a325acbc6deaa85ce9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50431616657824d4039932e5b5923882" id="r_a50431616657824d4039932e5b5923882"><td class="memItemLeft" align="right" valign="top">plUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a50431616657824d4039932e5b5923882">GetCharacterCount</a> () const</td></tr>
<tr class="memdesc:a50431616657824d4039932e5b5923882"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of characters of which this string consists. Might be less than GetElementCount, if it contains Utf8 multi-byte characters.  <br /></td></tr>
<tr class="separator:a50431616657824d4039932e5b5923882"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d35e2061079fb363565cd0a3ac59661" id="r_a3d35e2061079fb363565cd0a3ac59661"><td class="memItemLeft" align="right" valign="top"><a id="a3d35e2061079fb363565cd0a3ac59661" name="a3d35e2061079fb363565cd0a3ac59661"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>ToUpper</b> ()</td></tr>
<tr class="memdesc:a3d35e2061079fb363565cd0a3ac59661"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts all characters to upper case. Might move the string data around, so all iterators to the data will be invalid afterwards. <br /></td></tr>
<tr class="separator:a3d35e2061079fb363565cd0a3ac59661"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af67042b86e2f2977581fa6f41f738059" id="r_af67042b86e2f2977581fa6f41f738059"><td class="memItemLeft" align="right" valign="top"><a id="af67042b86e2f2977581fa6f41f738059" name="af67042b86e2f2977581fa6f41f738059"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>ToLower</b> ()</td></tr>
<tr class="memdesc:af67042b86e2f2977581fa6f41f738059"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts all characters to lower case. Might move the string data around, so all iterators to the data will be invalid afterwards. <br /></td></tr>
<tr class="separator:af67042b86e2f2977581fa6f41f738059"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad27e890445b6f6a5c0bcbb88026d19dd" id="r_ad27e890445b6f6a5c0bcbb88026d19dd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad27e890445b6f6a5c0bcbb88026d19dd">ChangeCharacter</a> (iterator &amp;ref_it, plUInt32 uiCharacter)</td></tr>
<tr class="memdesc:ad27e890445b6f6a5c0bcbb88026d19dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Changes the single character in this string, to which the iterator currently points.  <br /></td></tr>
<tr class="separator:ad27e890445b6f6a5c0bcbb88026d19dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c6ccfde7c01b833dc54892236eec2c9" id="r_a4c6ccfde7c01b833dc54892236eec2c9"><td class="memItemLeft" align="right" valign="top"><a id="a4c6ccfde7c01b833dc54892236eec2c9" name="a4c6ccfde7c01b833dc54892236eec2c9"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Set</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData1)</td></tr>
<tr class="memdesc:a4c6ccfde7c01b833dc54892236eec2c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the string to the given string. <br /></td></tr>
<tr class="separator:a4c6ccfde7c01b833dc54892236eec2c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d51d99d2b166d1f1e1e7a7fb7892083" id="r_a9d51d99d2b166d1f1e1e7a7fb7892083"><td class="memItemLeft" align="right" valign="top"><a id="a9d51d99d2b166d1f1e1e7a7fb7892083" name="a9d51d99d2b166d1f1e1e7a7fb7892083"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Set</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData1, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData2)</td></tr>
<tr class="memdesc:a9d51d99d2b166d1f1e1e7a7fb7892083"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the string by concatenating all given strings. <br /></td></tr>
<tr class="separator:a9d51d99d2b166d1f1e1e7a7fb7892083"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0d82b47e395243eb6d0b2b0a67aa8ce" id="r_aa0d82b47e395243eb6d0b2b0a67aa8ce"><td class="memItemLeft" align="right" valign="top"><a id="aa0d82b47e395243eb6d0b2b0a67aa8ce" name="aa0d82b47e395243eb6d0b2b0a67aa8ce"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Set</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData1, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData2, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData3)</td></tr>
<tr class="memdesc:aa0d82b47e395243eb6d0b2b0a67aa8ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the string by concatenating all given strings. <br /></td></tr>
<tr class="separator:aa0d82b47e395243eb6d0b2b0a67aa8ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9dc4746c1ce35f289609339c37a4737" id="r_ab9dc4746c1ce35f289609339c37a4737"><td class="memItemLeft" align="right" valign="top"><a id="ab9dc4746c1ce35f289609339c37a4737" name="ab9dc4746c1ce35f289609339c37a4737"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Set</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData1, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData2, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData3, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData4)</td></tr>
<tr class="memdesc:ab9dc4746c1ce35f289609339c37a4737"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the string by concatenating all given strings. <br /></td></tr>
<tr class="separator:ab9dc4746c1ce35f289609339c37a4737"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac32db9a8591c5fc794ed6e21bd58ed88" id="r_ac32db9a8591c5fc794ed6e21bd58ed88"><td class="memItemLeft" align="right" valign="top"><a id="ac32db9a8591c5fc794ed6e21bd58ed88" name="ac32db9a8591c5fc794ed6e21bd58ed88"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Set</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData1, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData2, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData3, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData4, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData5, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData6={})</td></tr>
<tr class="memdesc:ac32db9a8591c5fc794ed6e21bd58ed88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the string by concatenating all given strings. <br /></td></tr>
<tr class="separator:ac32db9a8591c5fc794ed6e21bd58ed88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc1f50da2e91f9f1285b8815f7573f9a" id="r_afc1f50da2e91f9f1285b8815f7573f9a"><td class="memItemLeft" align="right" valign="top"><a id="afc1f50da2e91f9f1285b8815f7573f9a" name="afc1f50da2e91f9f1285b8815f7573f9a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetPath</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData1, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData2, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData3={}, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData4={})</td></tr>
<tr class="memdesc:afc1f50da2e91f9f1285b8815f7573f9a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets several path pieces. Makes sure they are always properly separated by a slash. <br /></td></tr>
<tr class="separator:afc1f50da2e91f9f1285b8815f7573f9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a091d7cfea8183264ae837d423a0a8bd9" id="r_a091d7cfea8183264ae837d423a0a8bd9"><td class="memItemLeft" align="right" valign="top"><a id="a091d7cfea8183264ae837d423a0a8bd9" name="a091d7cfea8183264ae837d423a0a8bd9"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetSubString_FromTo</b> (const char *pStart, const char *pEnd)</td></tr>
<tr class="memdesc:a091d7cfea8183264ae837d423a0a8bd9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the string starting at <em>pStart</em> up to <em>pEnd</em> (exclusive). <br /></td></tr>
<tr class="separator:a091d7cfea8183264ae837d423a0a8bd9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a235f8c41bd7c32149080db4102551000" id="r_a235f8c41bd7c32149080db4102551000"><td class="memItemLeft" align="right" valign="top"><a id="a235f8c41bd7c32149080db4102551000" name="a235f8c41bd7c32149080db4102551000"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetSubString_ElementCount</b> (const char *pStart, plUInt32 uiElementCount)</td></tr>
<tr class="memdesc:a235f8c41bd7c32149080db4102551000"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the string starting at <em>pStart</em> with a length of <em>uiElementCount</em> bytes. <br /></td></tr>
<tr class="separator:a235f8c41bd7c32149080db4102551000"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acfe72065b5944de7c013182a168ccf72" id="r_acfe72065b5944de7c013182a168ccf72"><td class="memItemLeft" align="right" valign="top"><a id="acfe72065b5944de7c013182a168ccf72" name="acfe72065b5944de7c013182a168ccf72"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetSubString_CharacterCount</b> (const char *pStart, plUInt32 uiCharacterCount)</td></tr>
<tr class="memdesc:acfe72065b5944de7c013182a168ccf72"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the string starting at <em>pStart</em> with a length of <em>uiCharacterCount</em> characters. <br /></td></tr>
<tr class="separator:acfe72065b5944de7c013182a168ccf72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e8c97d8bcb6e24fbe61f79cfe2d90db" id="r_a1e8c97d8bcb6e24fbe61f79cfe2d90db"><td class="memItemLeft" align="right" valign="top"><a id="a1e8c97d8bcb6e24fbe61f79cfe2d90db" name="a1e8c97d8bcb6e24fbe61f79cfe2d90db"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Append</b> (plUInt32 uiChar)</td></tr>
<tr class="memdesc:a1e8c97d8bcb6e24fbe61f79cfe2d90db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends a single Utf32 character. <br /></td></tr>
<tr class="separator:a1e8c97d8bcb6e24fbe61f79cfe2d90db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16e5d8f18f95040deabb96572cd34025" id="r_a16e5d8f18f95040deabb96572cd34025"><td class="memItemLeft" align="right" valign="top"><a id="a16e5d8f18f95040deabb96572cd34025" name="a16e5d8f18f95040deabb96572cd34025"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Append</b> (const wchar_t *pData1, const wchar_t *pData2=nullptr, const wchar_t *pData3=nullptr, const wchar_t *pData4=nullptr, const wchar_t *pData5=nullptr, const wchar_t *pData6=nullptr)</td></tr>
<tr class="memdesc:a16e5d8f18f95040deabb96572cd34025"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends all the given strings at the back of this string in one operation. <br /></td></tr>
<tr class="separator:a16e5d8f18f95040deabb96572cd34025"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d3d1e5991296203650b5bdfa571df17" id="r_a6d3d1e5991296203650b5bdfa571df17"><td class="memItemLeft" align="right" valign="top"><a id="a6d3d1e5991296203650b5bdfa571df17" name="a6d3d1e5991296203650b5bdfa571df17"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Append</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData1)</td></tr>
<tr class="memdesc:a6d3d1e5991296203650b5bdfa571df17"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends all the given strings to the back of this string in one operation. <br /></td></tr>
<tr class="separator:a6d3d1e5991296203650b5bdfa571df17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89bb652f391e36da4591a0781d8ea96d" id="r_a89bb652f391e36da4591a0781d8ea96d"><td class="memItemLeft" align="right" valign="top"><a id="a89bb652f391e36da4591a0781d8ea96d" name="a89bb652f391e36da4591a0781d8ea96d"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Append</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData1, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData2)</td></tr>
<tr class="memdesc:a89bb652f391e36da4591a0781d8ea96d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends all the given strings to the back of this string in one operation. <br /></td></tr>
<tr class="separator:a89bb652f391e36da4591a0781d8ea96d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfdb536f27121e9186c13da5c211d513" id="r_adfdb536f27121e9186c13da5c211d513"><td class="memItemLeft" align="right" valign="top"><a id="adfdb536f27121e9186c13da5c211d513" name="adfdb536f27121e9186c13da5c211d513"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Append</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData1, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData2, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData3)</td></tr>
<tr class="memdesc:adfdb536f27121e9186c13da5c211d513"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends all the given strings to the back of this string in one operation. <br /></td></tr>
<tr class="separator:adfdb536f27121e9186c13da5c211d513"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5471f1250567bab2112c86cf3664eeae" id="r_a5471f1250567bab2112c86cf3664eeae"><td class="memItemLeft" align="right" valign="top"><a id="a5471f1250567bab2112c86cf3664eeae" name="a5471f1250567bab2112c86cf3664eeae"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Append</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData1, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData2, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData3, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData4)</td></tr>
<tr class="memdesc:a5471f1250567bab2112c86cf3664eeae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends all the given strings to the back of this string in one operation. <br /></td></tr>
<tr class="separator:a5471f1250567bab2112c86cf3664eeae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50341536d8bb6d78e0524d714d90d73a" id="r_a50341536d8bb6d78e0524d714d90d73a"><td class="memItemLeft" align="right" valign="top"><a id="a50341536d8bb6d78e0524d714d90d73a" name="a50341536d8bb6d78e0524d714d90d73a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Append</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData1, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData2, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData3, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData4, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData5, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData6={})</td></tr>
<tr class="memdesc:a50341536d8bb6d78e0524d714d90d73a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends all the given strings to the back of this string in one operation. <br /></td></tr>
<tr class="separator:a50341536d8bb6d78e0524d714d90d73a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f8180f9332f6e267dee6be0ccceff75" id="r_a3f8180f9332f6e267dee6be0ccceff75"><td class="memItemLeft" align="right" valign="top"><a id="a3f8180f9332f6e267dee6be0ccceff75" name="a3f8180f9332f6e267dee6be0ccceff75"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Prepend</b> (plUInt32 uiChar)</td></tr>
<tr class="memdesc:a3f8180f9332f6e267dee6be0ccceff75"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepends a single Utf32 character. <br /></td></tr>
<tr class="separator:a3f8180f9332f6e267dee6be0ccceff75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acafaa82e8b5b9f851fe20f18189d87e4" id="r_acafaa82e8b5b9f851fe20f18189d87e4"><td class="memItemLeft" align="right" valign="top"><a id="acafaa82e8b5b9f851fe20f18189d87e4" name="acafaa82e8b5b9f851fe20f18189d87e4"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Prepend</b> (const wchar_t *pData1, const wchar_t *pData2=nullptr, const wchar_t *pData3=nullptr, const wchar_t *pData4=nullptr, const wchar_t *pData5=nullptr, const wchar_t *pData6=nullptr)</td></tr>
<tr class="memdesc:acafaa82e8b5b9f851fe20f18189d87e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepends all the given strings to the front of this string in one operation. <br /></td></tr>
<tr class="separator:acafaa82e8b5b9f851fe20f18189d87e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afec82bb0cb5fc33c440df3879f45d74a" id="r_afec82bb0cb5fc33c440df3879f45d74a"><td class="memItemLeft" align="right" valign="top"><a id="afec82bb0cb5fc33c440df3879f45d74a" name="afec82bb0cb5fc33c440df3879f45d74a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Prepend</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData1, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData2={}, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData3={}, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData4={}, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData5={}, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sData6={})</td></tr>
<tr class="memdesc:afec82bb0cb5fc33c440df3879f45d74a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepends all the given strings to the front of this string in one operation. <br /></td></tr>
<tr class="separator:afec82bb0cb5fc33c440df3879f45d74a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a423869aeb4cfe798a57a734df49ba305" id="r_a423869aeb4cfe798a57a734df49ba305"><td class="memItemLeft" align="right" valign="top"><a id="a423869aeb4cfe798a57a734df49ba305" name="a423869aeb4cfe798a57a734df49ba305"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetPrintf</b> (const char *szUtf8Format,...)</td></tr>
<tr class="memdesc:a423869aeb4cfe798a57a734df49ba305"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets this string to the formatted string, uses printf-style formatting. <br /></td></tr>
<tr class="separator:a423869aeb4cfe798a57a734df49ba305"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8c9cd72533c566c7b19189fca9a7787" id="r_ad8c9cd72533c566c7b19189fca9a7787"><td class="memItemLeft" align="right" valign="top"><a id="ad8c9cd72533c566c7b19189fca9a7787" name="ad8c9cd72533c566c7b19189fca9a7787"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetPrintfArgs</b> (const char *szUtf8Format, va_list szArgs)</td></tr>
<tr class="memdesc:ad8c9cd72533c566c7b19189fca9a7787"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets this string to the formatted string, uses printf-style formatting. <br /></td></tr>
<tr class="separator:ad8c9cd72533c566c7b19189fca9a7787"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3ef7eac1cbf7ccad0d79ab027e74924" id="r_ac3ef7eac1cbf7ccad0d79ab027e74924"><td class="memItemLeft" align="right" valign="top"><a id="ac3ef7eac1cbf7ccad0d79ab027e74924" name="ac3ef7eac1cbf7ccad0d79ab027e74924"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetFormat</b> (const <a class="el" href="../../d6/d9a/classpl_format_string.htm">plFormatString</a> &amp;string)</td></tr>
<tr class="memdesc:ac3ef7eac1cbf7ccad0d79ab027e74924"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces this with a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../d6/d9a/classpl_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">plFormatString</a> for details. <br /></td></tr>
<tr class="separator:ac3ef7eac1cbf7ccad0d79ab027e74924"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93dbafe891d836256a1599be35a1c223" id="r_a93dbafe891d836256a1599be35a1c223"><td class="memTemplParams" colspan="2"><a id="a93dbafe891d836256a1599be35a1c223" name="a93dbafe891d836256a1599be35a1c223"></a>
template&lt;typename... ARGS&gt; </td></tr>
<tr class="memitem:a93dbafe891d836256a1599be35a1c223"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SetFormat</b> (const char *szFormat, ARGS &amp;&amp;... args)</td></tr>
<tr class="memdesc:a93dbafe891d836256a1599be35a1c223"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces this with a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../d6/d9a/classpl_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">plFormatString</a> for details. <br /></td></tr>
<tr class="separator:a93dbafe891d836256a1599be35a1c223"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d0f16df771c07f6578bf96e9a295b53" id="r_a9d0f16df771c07f6578bf96e9a295b53"><td class="memItemLeft" align="right" valign="top"><a id="a9d0f16df771c07f6578bf96e9a295b53" name="a9d0f16df771c07f6578bf96e9a295b53"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AppendFormat</b> (const <a class="el" href="../../d6/d9a/classpl_format_string.htm">plFormatString</a> &amp;string)</td></tr>
<tr class="memdesc:a9d0f16df771c07f6578bf96e9a295b53"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../d6/d9a/classpl_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">plFormatString</a> for details. <br /></td></tr>
<tr class="separator:a9d0f16df771c07f6578bf96e9a295b53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae554ecb996fda0112664ff7bfbede389" id="r_ae554ecb996fda0112664ff7bfbede389"><td class="memTemplParams" colspan="2"><a id="ae554ecb996fda0112664ff7bfbede389" name="ae554ecb996fda0112664ff7bfbede389"></a>
template&lt;typename... ARGS&gt; </td></tr>
<tr class="memitem:ae554ecb996fda0112664ff7bfbede389"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>AppendFormat</b> (const char *szFormat, ARGS &amp;&amp;... args)</td></tr>
<tr class="memdesc:ae554ecb996fda0112664ff7bfbede389"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../d6/d9a/classpl_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">plFormatString</a> for details. <br /></td></tr>
<tr class="separator:ae554ecb996fda0112664ff7bfbede389"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1df0d19ea812c491cbadf0e29da8e306" id="r_a1df0d19ea812c491cbadf0e29da8e306"><td class="memItemLeft" align="right" valign="top"><a id="a1df0d19ea812c491cbadf0e29da8e306" name="a1df0d19ea812c491cbadf0e29da8e306"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>PrependFormat</b> (const <a class="el" href="../../d6/d9a/classpl_format_string.htm">plFormatString</a> &amp;string)</td></tr>
<tr class="memdesc:a1df0d19ea812c491cbadf0e29da8e306"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepends a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../d6/d9a/classpl_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">plFormatString</a> for details. <br /></td></tr>
<tr class="separator:a1df0d19ea812c491cbadf0e29da8e306"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ab837704e6392c4e48250d9ed864f1f" id="r_a6ab837704e6392c4e48250d9ed864f1f"><td class="memTemplParams" colspan="2"><a id="a6ab837704e6392c4e48250d9ed864f1f" name="a6ab837704e6392c4e48250d9ed864f1f"></a>
template&lt;typename... ARGS&gt; </td></tr>
<tr class="memitem:a6ab837704e6392c4e48250d9ed864f1f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>PrependFormat</b> (const char *szFormat, ARGS &amp;&amp;... args)</td></tr>
<tr class="memdesc:a6ab837704e6392c4e48250d9ed864f1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepends a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../d6/d9a/classpl_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">plFormatString</a> for details. <br /></td></tr>
<tr class="separator:a6ab837704e6392c4e48250d9ed864f1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a398a0068a14d2405481c53194fc50d78" id="r_a398a0068a14d2405481c53194fc50d78"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a398a0068a14d2405481c53194fc50d78">Shrink</a> (plUInt32 uiShrinkCharsFront, plUInt32 uiShrinkCharsBack)</td></tr>
<tr class="memdesc:a398a0068a14d2405481c53194fc50d78"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes the first n and last m characters from this string.  <br /></td></tr>
<tr class="separator:a398a0068a14d2405481c53194fc50d78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b1c07522ac75c77af1198eb6644ffd5" id="r_a9b1c07522ac75c77af1198eb6644ffd5"><td class="memItemLeft" align="right" valign="top"><a id="a9b1c07522ac75c77af1198eb6644ffd5" name="a9b1c07522ac75c77af1198eb6644ffd5"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Reserve</b> (plUInt32 uiNumElements)</td></tr>
<tr class="memdesc:a9b1c07522ac75c77af1198eb6644ffd5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reserves uiNumElements bytes. <br /></td></tr>
<tr class="separator:a9b1c07522ac75c77af1198eb6644ffd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71ba6bfb35650f02bc06938b8a7d2572" id="r_a71ba6bfb35650f02bc06938b8a7d2572"><td class="memItemLeft" align="right" valign="top"><a id="a71ba6bfb35650f02bc06938b8a7d2572" name="a71ba6bfb35650f02bc06938b8a7d2572"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>ReplaceSubString</b> (const char *szStartPos, const char *szEndPos, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sReplaceWith)</td></tr>
<tr class="memdesc:a71ba6bfb35650f02bc06938b8a7d2572"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces the string that starts at szStartPos and ends at szEndPos with the string szReplaceWith. <br /></td></tr>
<tr class="separator:a71ba6bfb35650f02bc06938b8a7d2572"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35cccd046dac504634c2c4c96e509ff0" id="r_a35cccd046dac504634c2c4c96e509ff0"><td class="memItemLeft" align="right" valign="top"><a id="a35cccd046dac504634c2c4c96e509ff0" name="a35cccd046dac504634c2c4c96e509ff0"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Insert</b> (const char *szInsertAtPos, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sTextToInsert)</td></tr>
<tr class="memdesc:a35cccd046dac504634c2c4c96e509ff0"><td class="mdescLeft">&#160;</td><td class="mdescRight">A wrapper around ReplaceSubString. Will insert the given string at szInsertAtPos. <br /></td></tr>
<tr class="separator:a35cccd046dac504634c2c4c96e509ff0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa3ea6e5ace739bf2ac26ac6c3a67251" id="r_aaa3ea6e5ace739bf2ac26ac6c3a67251"><td class="memItemLeft" align="right" valign="top"><a id="aaa3ea6e5ace739bf2ac26ac6c3a67251" name="aaa3ea6e5ace739bf2ac26ac6c3a67251"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Remove</b> (const char *szRemoveFromPos, const char *szRemoveToPos)</td></tr>
<tr class="memdesc:aaa3ea6e5ace739bf2ac26ac6c3a67251"><td class="mdescLeft">&#160;</td><td class="mdescRight">A wrapper around ReplaceSubString. Will remove the substring which starts at szRemoveFromPos and ends at szRemoveToPos. <br /></td></tr>
<tr class="separator:aaa3ea6e5ace739bf2ac26ac6c3a67251"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3147f08a93e2f4086551604f7c8539ea" id="r_a3147f08a93e2f4086551604f7c8539ea"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3147f08a93e2f4086551604f7c8539ea">ReplaceFirst</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sSearchFor, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sReplacement, const char *szStartSearchAt=nullptr)</td></tr>
<tr class="memdesc:a3147f08a93e2f4086551604f7c8539ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces the first occurrence of szSearchFor by szReplacement. Optionally starts searching at szStartSearchAt (or the beginning).  <br /></td></tr>
<tr class="separator:a3147f08a93e2f4086551604f7c8539ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab93e6cfd61ebb0f7a0008d71c1d8a3ae" id="r_ab93e6cfd61ebb0f7a0008d71c1d8a3ae"><td class="memItemLeft" align="right" valign="top"><a id="ab93e6cfd61ebb0f7a0008d71c1d8a3ae" name="ab93e6cfd61ebb0f7a0008d71c1d8a3ae"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><b>ReplaceFirst_NoCase</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sSearchFor, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sReplacement, const char *szStartSearchAt=nullptr)</td></tr>
<tr class="memdesc:ab93e6cfd61ebb0f7a0008d71c1d8a3ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Case-insensitive version of ReplaceFirst. <br /></td></tr>
<tr class="separator:ab93e6cfd61ebb0f7a0008d71c1d8a3ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc79c2a2dd2ae2f6e0d56943bcd18c12" id="r_adc79c2a2dd2ae2f6e0d56943bcd18c12"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#adc79c2a2dd2ae2f6e0d56943bcd18c12">ReplaceLast</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sSearchFor, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sReplacement, const char *szStartSearchAt=nullptr)</td></tr>
<tr class="memdesc:adc79c2a2dd2ae2f6e0d56943bcd18c12"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces the last occurrence of szSearchFor by szReplacement. Optionally starts searching at szStartSearchAt (or the end).  <br /></td></tr>
<tr class="separator:adc79c2a2dd2ae2f6e0d56943bcd18c12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44de85d6cc4bc4caa1df575a80d708e1" id="r_a44de85d6cc4bc4caa1df575a80d708e1"><td class="memItemLeft" align="right" valign="top"><a id="a44de85d6cc4bc4caa1df575a80d708e1" name="a44de85d6cc4bc4caa1df575a80d708e1"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><b>ReplaceLast_NoCase</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sSearchFor, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sReplacement, const char *szStartSearchAt=nullptr)</td></tr>
<tr class="memdesc:a44de85d6cc4bc4caa1df575a80d708e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Case-insensitive version of ReplaceLast. <br /></td></tr>
<tr class="separator:a44de85d6cc4bc4caa1df575a80d708e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cee1528da1a0da4195752ddb77aff56" id="r_a9cee1528da1a0da4195752ddb77aff56"><td class="memItemLeft" align="right" valign="top"><a id="a9cee1528da1a0da4195752ddb77aff56" name="a9cee1528da1a0da4195752ddb77aff56"></a>
plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>ReplaceAll</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sSearchFor, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sReplacement)</td></tr>
<tr class="memdesc:a9cee1528da1a0da4195752ddb77aff56"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces all occurrences of szSearchFor by szReplacement. Returns the number of replacements. <br /></td></tr>
<tr class="separator:a9cee1528da1a0da4195752ddb77aff56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2736338fbd84578af6c514aa1cec9a3e" id="r_a2736338fbd84578af6c514aa1cec9a3e"><td class="memItemLeft" align="right" valign="top"><a id="a2736338fbd84578af6c514aa1cec9a3e" name="a2736338fbd84578af6c514aa1cec9a3e"></a>
plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>ReplaceAll_NoCase</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sSearchFor, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sReplacement)</td></tr>
<tr class="memdesc:a2736338fbd84578af6c514aa1cec9a3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Case-insensitive version of ReplaceAll. <br /></td></tr>
<tr class="separator:a2736338fbd84578af6c514aa1cec9a3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaab02db9ff5e2825f4bacf6afb0317aa" id="r_aaab02db9ff5e2825f4bacf6afb0317aa"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aaab02db9ff5e2825f4bacf6afb0317aa">ReplaceWholeWord</a> (const char *szSearchFor, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sReplaceWith, <a class="el" href="../../de/d4d/classpl_string_utils.htm#a8bc7e3a526fc09382eaa1276895f3266">plStringUtils::PL_CHARACTER_FILTER</a> isDelimiterCB)</td></tr>
<tr class="memdesc:aaab02db9ff5e2825f4bacf6afb0317aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces the first occurrence of szSearchFor by szReplaceWith, if szSearchFor was found to be a 'whole word', as indicated by the delimiter function IsDelimiterCB.  <br /></td></tr>
<tr class="separator:aaab02db9ff5e2825f4bacf6afb0317aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefd68cb6b42abe44bddd70fb7c5588b4" id="r_aefd68cb6b42abe44bddd70fb7c5588b4"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aefd68cb6b42abe44bddd70fb7c5588b4">ReplaceWholeWord_NoCase</a> (const char *szSearchFor, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sReplaceWith, <a class="el" href="../../de/d4d/classpl_string_utils.htm#a8bc7e3a526fc09382eaa1276895f3266">plStringUtils::PL_CHARACTER_FILTER</a> isDelimiterCB)</td></tr>
<tr class="memdesc:aefd68cb6b42abe44bddd70fb7c5588b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Case-insensitive version of ReplaceWholeWord.  <br /></td></tr>
<tr class="separator:aefd68cb6b42abe44bddd70fb7c5588b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b9fb7e16520dd0516f4ecfbef1e7d94" id="r_a2b9fb7e16520dd0516f4ecfbef1e7d94"><td class="memItemLeft" align="right" valign="top">plUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2b9fb7e16520dd0516f4ecfbef1e7d94">ReplaceWholeWordAll</a> (const char *szSearchFor, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sReplaceWith, <a class="el" href="../../de/d4d/classpl_string_utils.htm#a8bc7e3a526fc09382eaa1276895f3266">plStringUtils::PL_CHARACTER_FILTER</a> isDelimiterCB)</td></tr>
<tr class="memdesc:a2b9fb7e16520dd0516f4ecfbef1e7d94"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces all occurrences of szSearchFor by szReplaceWith, if szSearchFor was found to be a 'whole word', as indicated by the delimiter function IsDelimiterCB.  <br /></td></tr>
<tr class="separator:a2b9fb7e16520dd0516f4ecfbef1e7d94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b1480e584a619d41c077b1526631208" id="r_a7b1480e584a619d41c077b1526631208"><td class="memItemLeft" align="right" valign="top">plUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7b1480e584a619d41c077b1526631208">ReplaceWholeWordAll_NoCase</a> (const char *szSearchFor, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sReplaceWith, <a class="el" href="../../de/d4d/classpl_string_utils.htm#a8bc7e3a526fc09382eaa1276895f3266">plStringUtils::PL_CHARACTER_FILTER</a> isDelimiterCB)</td></tr>
<tr class="memdesc:a7b1480e584a619d41c077b1526631208"><td class="mdescLeft">&#160;</td><td class="mdescRight">Case-insensitive version of ReplaceWholeWordAll.  <br /></td></tr>
<tr class="separator:a7b1480e584a619d41c077b1526631208"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a093ec8453732d50213fe4b43536e8f44" id="r_a093ec8453732d50213fe4b43536e8f44"><td class="memItemLeft" align="right" valign="top"><a id="a093ec8453732d50213fe4b43536e8f44" name="a093ec8453732d50213fe4b43536e8f44"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>ReadAll</b> (<a class="el" href="../../df/d3d/classpl_stream_reader.htm">plStreamReader</a> &amp;inout_stream)</td></tr>
<tr class="memdesc:a093ec8453732d50213fe4b43536e8f44"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces the current string with the content from the stream. Reads the stream to its end. <br /></td></tr>
<tr class="separator:a093ec8453732d50213fe4b43536e8f44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a659a9fa17fb4388442d9ae9f6be54dab" id="r_a659a9fa17fb4388442d9ae9f6be54dab"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a659a9fa17fb4388442d9ae9f6be54dab">MakeCleanPath</a> ()</td></tr>
<tr class="memdesc:a659a9fa17fb4388442d9ae9f6be54dab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes "../" where possible, replaces all path separators with /, removes double slashes.  <br /></td></tr>
<tr class="separator:a659a9fa17fb4388442d9ae9f6be54dab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a73a871560047c41fa46accc9866a93" id="r_a2a73a871560047c41fa46accc9866a93"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2a73a871560047c41fa46accc9866a93">PathParentDirectory</a> (plUInt32 uiLevelsUp=1)</td></tr>
<tr class="memdesc:a2a73a871560047c41fa46accc9866a93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Modifies this string to point to the parent directory.  <br /></td></tr>
<tr class="separator:a2a73a871560047c41fa46accc9866a93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6bc29192dc95e2f45a5b310ea3b9e5f" id="r_ad6bc29192dc95e2f45a5b310ea3b9e5f"><td class="memItemLeft" align="right" valign="top"><a id="ad6bc29192dc95e2f45a5b310ea3b9e5f" name="ad6bc29192dc95e2f45a5b310ea3b9e5f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AppendPath</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sPath1, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sPath2={}, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sPath3={}, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sPath4={})</td></tr>
<tr class="memdesc:ad6bc29192dc95e2f45a5b310ea3b9e5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends several path pieces. Makes sure they are always properly separated by a slash. <br /></td></tr>
<tr class="separator:ad6bc29192dc95e2f45a5b310ea3b9e5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab021498c6c8447b67603b1b4982fb9a9" id="r_ab021498c6c8447b67603b1b4982fb9a9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab021498c6c8447b67603b1b4982fb9a9">AppendWithSeparator</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sSeparator, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sText1, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sText2=<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>(), <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sText3=<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>(), <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sText4=<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>(), <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sText5=<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>(), <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sText6=<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>())</td></tr>
<tr class="memdesc:ab021498c6c8447b67603b1b4982fb9a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="#a1e8c97d8bcb6e24fbe61f79cfe2d90db" title="Appends a single Utf32 character.">Append()</a> but the very first argument is a separator that is only appended (once) if the existing string is not empty and does not already end with the separator.  <br /></td></tr>
<tr class="separator:ab021498c6c8447b67603b1b4982fb9a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a799f2c2df1580587ba2a0da8c57913d2" id="r_a799f2c2df1580587ba2a0da8c57913d2"><td class="memItemLeft" align="right" valign="top"><a id="a799f2c2df1580587ba2a0da8c57913d2" name="a799f2c2df1580587ba2a0da8c57913d2"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>ChangeFileName</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sNewFileName)</td></tr>
<tr class="memdesc:a799f2c2df1580587ba2a0da8c57913d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Changes the file name part of the path, keeps the extension intact (if there is any). <br /></td></tr>
<tr class="separator:a799f2c2df1580587ba2a0da8c57913d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1478d7053c848aa2ccce92cc60d7e9b" id="r_ae1478d7053c848aa2ccce92cc60d7e9b"><td class="memItemLeft" align="right" valign="top"><a id="ae1478d7053c848aa2ccce92cc60d7e9b" name="ae1478d7053c848aa2ccce92cc60d7e9b"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>ChangeFileNameAndExtension</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sNewFileNameWithExtension)</td></tr>
<tr class="memdesc:ae1478d7053c848aa2ccce92cc60d7e9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Changes the file name and the extension part of the path. <br /></td></tr>
<tr class="separator:ae1478d7053c848aa2ccce92cc60d7e9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac96aba315d522ce55aa1d909e3288699" id="r_ac96aba315d522ce55aa1d909e3288699"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac96aba315d522ce55aa1d909e3288699">ChangeFileExtension</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sNewExtension, bool bFullExtension=false)</td></tr>
<tr class="memdesc:ac96aba315d522ce55aa1d909e3288699"><td class="mdescLeft">&#160;</td><td class="mdescRight">Only changes the file extension of the path. If there is no extension yet, one is appended (including a dot).  <br /></td></tr>
<tr class="separator:ac96aba315d522ce55aa1d909e3288699"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72f52c384b8d47e3bda6d717c11015a7" id="r_a72f52c384b8d47e3bda6d717c11015a7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a72f52c384b8d47e3bda6d717c11015a7">RemoveFileExtension</a> (bool bFullExtension=false)</td></tr>
<tr class="memdesc:a72f52c384b8d47e3bda6d717c11015a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">If any extension exists, it is removed, including the dot before it.  <br /></td></tr>
<tr class="separator:a72f52c384b8d47e3bda6d717c11015a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f117c2d0ac61531b43cbddc3309226d" id="r_a5f117c2d0ac61531b43cbddc3309226d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5f117c2d0ac61531b43cbddc3309226d">MakeRelativeTo</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sAbsolutePathToMakeThisRelativeTo)</td></tr>
<tr class="memdesc:a5f117c2d0ac61531b43cbddc3309226d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts this path into a relative path to the path with the awesome variable name 'szAbsolutePathToMakeThisRelativeTo'.  <br /></td></tr>
<tr class="separator:a5f117c2d0ac61531b43cbddc3309226d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbcba066878f513d27d33ea981010a5b" id="r_adbcba066878f513d27d33ea981010a5b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#adbcba066878f513d27d33ea981010a5b">MakePathSeparatorsNative</a> ()</td></tr>
<tr class="memdesc:adbcba066878f513d27d33ea981010a5b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Cleans this path up and replaces all path separators by the OS specific separator.  <br /></td></tr>
<tr class="separator:adbcba066878f513d27d33ea981010a5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e80384a0747cd10110804b721f337c2" id="r_a5e80384a0747cd10110804b721f337c2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5e80384a0747cd10110804b721f337c2">IsPathBelowFolder</a> (const char *szPathToFolder)</td></tr>
<tr class="memdesc:a5e80384a0747cd10110804b721f337c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether this path is a sub-path of the given path.  <br /></td></tr>
<tr class="separator:a5e80384a0747cd10110804b721f337c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5dd0d0d0031bb7bfe144c28a45db449" id="r_aa5dd0d0d0031bb7bfe144c28a45db449"><td class="memItemLeft" align="right" valign="top"><a id="aa5dd0d0d0031bb7bfe144c28a45db449" name="aa5dd0d0d0031bb7bfe144c28a45db449"></a>
plUInt64&#160;</td><td class="memItemRight" valign="bottom"><b>GetHeapMemoryUsage</b> () const</td></tr>
<tr class="memdesc:aa5dd0d0d0031bb7bfe144c28a45db449"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the amount of bytes that are currently allocated on the heap. <br /></td></tr>
<tr class="separator:aa5dd0d0d0031bb7bfe144c28a45db449"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8fde895a0b1d77c44fc852ec44f1fee1" id="r_a8fde895a0b1d77c44fc852ec44f1fee1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a8fde895a0b1d77c44fc852ec44f1fee1">Trim</a> (const char *szTrimChars=&quot; \f\n\r\t\v&quot;)</td></tr>
<tr class="memdesc:a8fde895a0b1d77c44fc852ec44f1fee1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all characters from the start and end that appear in the given strings.  <br /></td></tr>
<tr class="separator:a8fde895a0b1d77c44fc852ec44f1fee1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6abd9ed95752cccfb57c14e0ac84f343" id="r_a6abd9ed95752cccfb57c14e0ac84f343"><td class="memItemLeft" align="right" valign="top"><a id="a6abd9ed95752cccfb57c14e0ac84f343" name="a6abd9ed95752cccfb57c14e0ac84f343"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Trim</b> (const char *szTrimCharsStart, const char *szTrimCharsEnd)</td></tr>
<tr class="memdesc:a6abd9ed95752cccfb57c14e0ac84f343"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all characters from the start and/or end that appear in the given strings. <br /></td></tr>
<tr class="separator:a6abd9ed95752cccfb57c14e0ac84f343"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05551cc692087cf7a626b826aab8864b" id="r_a05551cc692087cf7a626b826aab8864b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a05551cc692087cf7a626b826aab8864b">TrimLeft</a> (const char *szTrimChars=&quot; \f\n\r\t\v&quot;)</td></tr>
<tr class="memdesc:a05551cc692087cf7a626b826aab8864b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all characters from the start that appear in the given strings.  <br /></td></tr>
<tr class="separator:a05551cc692087cf7a626b826aab8864b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76eba648c34057b63bc7e032c3ec31f7" id="r_a76eba648c34057b63bc7e032c3ec31f7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a76eba648c34057b63bc7e032c3ec31f7">TrimRight</a> (const char *szTrimChars=&quot; \f\n\r\t\v&quot;)</td></tr>
<tr class="memdesc:a76eba648c34057b63bc7e032c3ec31f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all characters from the end that appear in the given strings.  <br /></td></tr>
<tr class="separator:a76eba648c34057b63bc7e032c3ec31f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0604d89ea5198ce65eb54ab86f353882" id="r_a0604d89ea5198ce65eb54ab86f353882"><td class="memItemLeft" align="right" valign="top"><a id="a0604d89ea5198ce65eb54ab86f353882" name="a0604d89ea5198ce65eb54ab86f353882"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>TrimWordStart</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sWord)</td></tr>
<tr class="memdesc:a0604d89ea5198ce65eb54ab86f353882"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the string starts with the given word (case insensitive), it is removed and the function returns true. <br /></td></tr>
<tr class="separator:a0604d89ea5198ce65eb54ab86f353882"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7f7221e891ffee03bbb41e5743d9d6b" id="r_ae7f7221e891ffee03bbb41e5743d9d6b"><td class="memItemLeft" align="right" valign="top"><a id="ae7f7221e891ffee03bbb41e5743d9d6b" name="ae7f7221e891ffee03bbb41e5743d9d6b"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>TrimWordEnd</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sWord)</td></tr>
<tr class="memdesc:ae7f7221e891ffee03bbb41e5743d9d6b"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the string ends with the given word (case insensitive), it is removed and the function returns true. <br /></td></tr>
<tr class="separator:ae7f7221e891ffee03bbb41e5743d9d6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_structpl_string_base"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_structpl_string_base')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../de/d73/structpl_string_base.htm">plStringBase&lt; plStringBuilder &gt;</a></td></tr>
<tr class="memitem:a7ac3a243ee9ea1f99f7d82dd8e1d60b5 inherit pub_methods_structpl_string_base" id="r_a7ac3a243ee9ea1f99f7d82dd8e1d60b5"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEmpty</b> () const</td></tr>
<tr class="memdesc:a7ac3a243ee9ea1f99f7d82dd8e1d60b5 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the string is an empty string. <br /></td></tr>
<tr class="separator:a7ac3a243ee9ea1f99f7d82dd8e1d60b5 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ae403b4b3e534b94edd50edd888b4f0 inherit pub_methods_structpl_string_base" id="r_a6ae403b4b3e534b94edd50edd888b4f0"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>StartsWith</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStartsWith) const</td></tr>
<tr class="memdesc:a6ae403b4b3e534b94edd50edd888b4f0 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string starts with the given string. <br /></td></tr>
<tr class="separator:a6ae403b4b3e534b94edd50edd888b4f0 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4af994336831ee8ce7ea1aa392388ed6 inherit pub_methods_structpl_string_base" id="r_a4af994336831ee8ce7ea1aa392388ed6"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>StartsWith_NoCase</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStartsWith) const</td></tr>
<tr class="memdesc:a4af994336831ee8ce7ea1aa392388ed6 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string starts with the given string. Case insensitive. <br /></td></tr>
<tr class="separator:a4af994336831ee8ce7ea1aa392388ed6 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6961a7b6896b3b482b20df06de7c689 inherit pub_methods_structpl_string_base" id="r_ab6961a7b6896b3b482b20df06de7c689"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>EndsWith</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sEndsWith) const</td></tr>
<tr class="memdesc:ab6961a7b6896b3b482b20df06de7c689 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string ends with the given string. <br /></td></tr>
<tr class="separator:ab6961a7b6896b3b482b20df06de7c689 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8986dab73aa8d7095b79ddf761cf6b0d inherit pub_methods_structpl_string_base" id="r_a8986dab73aa8d7095b79ddf761cf6b0d"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>EndsWith_NoCase</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sEndsWith) const</td></tr>
<tr class="memdesc:a8986dab73aa8d7095b79ddf761cf6b0d inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string ends with the given string. Case insensitive. <br /></td></tr>
<tr class="separator:a8986dab73aa8d7095b79ddf761cf6b0d inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb80af12ae97555d0870359e86bd1a68 inherit pub_methods_structpl_string_base" id="r_afb80af12ae97555d0870359e86bd1a68"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#afb80af12ae97555d0870359e86bd1a68">FindSubString</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:afb80af12ae97555d0870359e86bd1a68 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8972e55722d17be6604b1df08082cf83 inherit pub_methods_structpl_string_base" id="r_a8972e55722d17be6604b1df08082cf83"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#a8972e55722d17be6604b1df08082cf83">FindSubString_NoCase</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a8972e55722d17be6604b1df08082cf83 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d116e5f43c0ae774c2346b5f94a992c inherit pub_methods_structpl_string_base" id="r_a2d116e5f43c0ae774c2346b5f94a992c"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#a2d116e5f43c0ae774c2346b5f94a992c">FindLastSubString</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a2d116e5f43c0ae774c2346b5f94a992c inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54c2b870afa5c0a2fb437e32219eb7d1 inherit pub_methods_structpl_string_base" id="r_a54c2b870afa5c0a2fb437e32219eb7d1"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#a54c2b870afa5c0a2fb437e32219eb7d1">FindLastSubString_NoCase</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a54c2b870afa5c0a2fb437e32219eb7d1 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af40ca95f7c2b77e18266ffe6ff7483a8 inherit pub_methods_structpl_string_base" id="r_af40ca95f7c2b77e18266ffe6ff7483a8"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#af40ca95f7c2b77e18266ffe6ff7483a8">FindWholeWord</a> (const char *szSearchFor, <a class="el" href="../../de/d4d/classpl_string_utils.htm#a8bc7e3a526fc09382eaa1276895f3266">plStringUtils::PL_CHARACTER_FILTER</a> isDelimiterCB, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:af40ca95f7c2b77e18266ffe6ff7483a8 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b6659ee0b76480c3ba534f74a4089fa inherit pub_methods_structpl_string_base" id="r_a8b6659ee0b76480c3ba534f74a4089fa"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#a8b6659ee0b76480c3ba534f74a4089fa">FindWholeWord_NoCase</a> (const char *szSearchFor, <a class="el" href="../../de/d4d/classpl_string_utils.htm#a8bc7e3a526fc09382eaa1276895f3266">plStringUtils::PL_CHARACTER_FILTER</a> isDelimiterCB, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a8b6659ee0b76480c3ba534f74a4089fa inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71ac29b18708a376ce3e9f03bb756a82 inherit pub_methods_structpl_string_base" id="r_a71ac29b18708a376ce3e9f03bb756a82"><td class="memItemLeft" align="right" valign="top">
plInt32&#160;</td><td class="memItemRight" valign="bottom"><b>Compare</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther) const</td></tr>
<tr class="memdesc:a71ac29b18708a376ce3e9f03bb756a82 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. <br /></td></tr>
<tr class="separator:a71ac29b18708a376ce3e9f03bb756a82 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a946009c071c70e5b2ad616a16213d113 inherit pub_methods_structpl_string_base" id="r_a946009c071c70e5b2ad616a16213d113"><td class="memItemLeft" align="right" valign="top">plInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#a946009c071c70e5b2ad616a16213d113">CompareN</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther, plUInt32 uiCharsToCompare) const</td></tr>
<tr class="separator:a946009c071c70e5b2ad616a16213d113 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91a71d7390204850be0e8fc9193e0f31 inherit pub_methods_structpl_string_base" id="r_a91a71d7390204850be0e8fc9193e0f31"><td class="memItemLeft" align="right" valign="top">
plInt32&#160;</td><td class="memItemRight" valign="bottom"><b>Compare_NoCase</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther) const</td></tr>
<tr class="memdesc:a91a71d7390204850be0e8fc9193e0f31 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. Case insensitive. <br /></td></tr>
<tr class="separator:a91a71d7390204850be0e8fc9193e0f31 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4af63c140fc4fe56e1a290df992cec7e inherit pub_methods_structpl_string_base" id="r_a4af63c140fc4fe56e1a290df992cec7e"><td class="memItemLeft" align="right" valign="top">plInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#a4af63c140fc4fe56e1a290df992cec7e">CompareN_NoCase</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther, plUInt32 uiCharsToCompare) const</td></tr>
<tr class="separator:a4af63c140fc4fe56e1a290df992cec7e inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a928260385c9a80109751fbdb1849b321 inherit pub_methods_structpl_string_base" id="r_a928260385c9a80109751fbdb1849b321"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEqual</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther) const</td></tr>
<tr class="memdesc:a928260385c9a80109751fbdb1849b321 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other string for equality. <br /></td></tr>
<tr class="separator:a928260385c9a80109751fbdb1849b321 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1854b21f65a086f15e164f739d53950d inherit pub_methods_structpl_string_base" id="r_a1854b21f65a086f15e164f739d53950d"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEqualN</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther, plUInt32 uiCharsToCompare) const</td></tr>
<tr class="memdesc:a1854b21f65a086f15e164f739d53950d inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares up to a given number of characters of this string with the other string for equality. Case insensitive. <br /></td></tr>
<tr class="separator:a1854b21f65a086f15e164f739d53950d inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0801b3fafc90b1beba38313c205e704 inherit pub_methods_structpl_string_base" id="r_ad0801b3fafc90b1beba38313c205e704"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEqual_NoCase</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther) const</td></tr>
<tr class="memdesc:ad0801b3fafc90b1beba38313c205e704 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other string for equality. <br /></td></tr>
<tr class="separator:ad0801b3fafc90b1beba38313c205e704 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a632d41fe7d33c9e42391ee905a361b06 inherit pub_methods_structpl_string_base" id="r_a632d41fe7d33c9e42391ee905a361b06"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEqualN_NoCase</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther, plUInt32 uiCharsToCompare) const</td></tr>
<tr class="memdesc:a632d41fe7d33c9e42391ee905a361b06 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares up to a given number of characters of this string with the other string for equality. Case insensitive. <br /></td></tr>
<tr class="separator:a632d41fe7d33c9e42391ee905a361b06 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5dc9b2300f37b7bb4a42999870e6092 inherit pub_methods_structpl_string_base" id="r_aa5dc9b2300f37b7bb4a42999870e6092"><td class="memItemLeft" align="right" valign="top">
const char *&#160;</td><td class="memItemRight" valign="bottom"><b>ComputeCharacterPosition</b> (plUInt32 uiCharacterIndex) const</td></tr>
<tr class="memdesc:aa5dc9b2300f37b7bb4a42999870e6092 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the pointer to the n-th character in the string. This is a linear search from the start. <br /></td></tr>
<tr class="separator:aa5dc9b2300f37b7bb4a42999870e6092 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5f533a25843450da719ad9c78827c29 inherit pub_methods_structpl_string_base" id="r_ac5f533a25843450da719ad9c78827c29"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d3/da5/structpl_string_iterator.htm">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#ac5f533a25843450da719ad9c78827c29">GetIteratorFront</a> () const</td></tr>
<tr class="memdesc:ac5f533a25843450da719ad9c78827c29 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to this string, which points to the very first character.  <br /></td></tr>
<tr class="separator:ac5f533a25843450da719ad9c78827c29 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97bd0de57b678794224901f970b864b7 inherit pub_methods_structpl_string_base" id="r_a97bd0de57b678794224901f970b864b7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d8/d32/structpl_string_reverse_iterator.htm">reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#a97bd0de57b678794224901f970b864b7">GetIteratorBack</a> () const</td></tr>
<tr class="memdesc:a97bd0de57b678794224901f970b864b7 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to this string, which points to the very last character (NOT the end).  <br /></td></tr>
<tr class="separator:a97bd0de57b678794224901f970b864b7 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8edc0eeb6a433a7397215106abd0f39f inherit pub_methods_structpl_string_base" id="r_a8edc0eeb6a433a7397215106abd0f39f"><td class="memItemLeft" align="right" valign="top">
&#160;</td><td class="memItemRight" valign="bottom"><b>operator plStringView</b> () const</td></tr>
<tr class="memdesc:a8edc0eeb6a433a7397215106abd0f39f inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string view to this string's data. <br /></td></tr>
<tr class="separator:a8edc0eeb6a433a7397215106abd0f39f inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae137b75721c90c6ca1b8aec2b9fa7653 inherit pub_methods_structpl_string_base" id="r_ae137b75721c90c6ca1b8aec2b9fa7653"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetView</b> () const</td></tr>
<tr class="memdesc:ae137b75721c90c6ca1b8aec2b9fa7653 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string view to this string's data. <br /></td></tr>
<tr class="separator:ae137b75721c90c6ca1b8aec2b9fa7653 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ac5057709ce4884266502eb53a12a2b inherit pub_methods_structpl_string_base" id="r_a7ac5057709ce4884266502eb53a12a2b"><td class="memItemLeft" align="right" valign="top">
PL_ALWAYS_INLINE&#160;</td><td class="memItemRight" valign="bottom"><b>operator const char *</b> () const</td></tr>
<tr class="memdesc:a7ac5057709ce4884266502eb53a12a2b inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the internal Utf8 string. <br /></td></tr>
<tr class="separator:a7ac5057709ce4884266502eb53a12a2b inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a9997394d0cbb4121601246cfd910c6 inherit pub_methods_structpl_string_base" id="r_a9a9997394d0cbb4121601246cfd910c6"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>Split</b> (bool bReturnEmptyStrings, Container &amp;ref_output, const char *szSeparator1, const char *szSeparator2=nullptr, const char *szSeparator3=nullptr, const char *szSeparator4=nullptr, const char *szSeparator5=nullptr, const char *szSeparator6=nullptr) const</td></tr>
<tr class="memdesc:a9a9997394d0cbb4121601246cfd910c6 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fills the given container with <a class="el" href="../../d6/d79/classpl_string_view.htm" title="plStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">plStringView</a>'s which represent each found substring. If bReturnEmptyStrings is true, even empty strings between separators are returned. Output must be a container that stores <a class="el" href="../../d6/d79/classpl_string_view.htm" title="plStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">plStringView</a>'s and provides the functions 'Clear' and 'Append'. szSeparator1 to szSeparator6 are strings which act as separators and indicate where to split the string. This string itself will not be modified. <br /></td></tr>
<tr class="separator:a9a9997394d0cbb4121601246cfd910c6 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99dd48e46918eea24a01ee4893f8301a inherit pub_methods_structpl_string_base" id="r_a99dd48e46918eea24a01ee4893f8301a"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>HasAnyExtension</b> () const</td></tr>
<tr class="memdesc:a99dd48e46918eea24a01ee4893f8301a inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given path has any file extension. <br /></td></tr>
<tr class="separator:a99dd48e46918eea24a01ee4893f8301a inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdbf19533811ec120710ad7caffe7ad0 inherit pub_methods_structpl_string_base" id="r_abdbf19533811ec120710ad7caffe7ad0"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>HasExtension</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sExtension) const</td></tr>
<tr class="memdesc:abdbf19533811ec120710ad7caffe7ad0 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given path ends with the given extension. szExtension should start with a '.' for performance reasons, but it will work without a '.' too. <br /></td></tr>
<tr class="separator:abdbf19533811ec120710ad7caffe7ad0 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0543d52d510868337e70f18ab4467a6 inherit pub_methods_structpl_string_base" id="r_ad0543d52d510868337e70f18ab4467a6"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetFileExtension</b> () const</td></tr>
<tr class="memdesc:ad0543d52d510868337e70f18ab4467a6 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the file extension of the given path. Will be empty, if the path does not end with a proper extension. <br /></td></tr>
<tr class="separator:ad0543d52d510868337e70f18ab4467a6 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b26dfed7384bb3264d3f134648396f9 inherit pub_methods_structpl_string_base" id="r_a8b26dfed7384bb3264d3f134648396f9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#a8b26dfed7384bb3264d3f134648396f9">GetFileName</a> () const</td></tr>
<tr class="memdesc:a8b26dfed7384bb3264d3f134648396f9 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the file name of a path, excluding the path and extension.  <br /></td></tr>
<tr class="separator:a8b26dfed7384bb3264d3f134648396f9 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5be3ebeaf3a8e57322061b6424ca25a8 inherit pub_methods_structpl_string_base" id="r_a5be3ebeaf3a8e57322061b6424ca25a8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#a5be3ebeaf3a8e57322061b6424ca25a8">GetFileNameAndExtension</a> () const</td></tr>
<tr class="memdesc:a5be3ebeaf3a8e57322061b6424ca25a8 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the substring that represents the file name including the file extension.  <br /></td></tr>
<tr class="separator:a5be3ebeaf3a8e57322061b6424ca25a8 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8352abf502483f0e4e10c6733bde642 inherit pub_methods_structpl_string_base" id="r_ad8352abf502483f0e4e10c6733bde642"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#ad8352abf502483f0e4e10c6733bde642">GetFileDirectory</a> () const</td></tr>
<tr class="memdesc:ad8352abf502483f0e4e10c6733bde642 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the directory of the given file, which is the substring up to the last path separator.  <br /></td></tr>
<tr class="separator:ad8352abf502483f0e4e10c6733bde642 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a275c7069b3e5ddd9daf7ea75352128a3 inherit pub_methods_structpl_string_base" id="r_a275c7069b3e5ddd9daf7ea75352128a3"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsAbsolutePath</b> () const</td></tr>
<tr class="memdesc:a275c7069b3e5ddd9daf7ea75352128a3 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the given path represents an absolute path on the current OS. <br /></td></tr>
<tr class="separator:a275c7069b3e5ddd9daf7ea75352128a3 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a340cb26613564b37461946d685215f inherit pub_methods_structpl_string_base" id="r_a4a340cb26613564b37461946d685215f"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsRelativePath</b> () const</td></tr>
<tr class="memdesc:a4a340cb26613564b37461946d685215f inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the given path represents a relative path on the current OS. <br /></td></tr>
<tr class="separator:a4a340cb26613564b37461946d685215f inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef9d9918c2d608eb5451b735057a272f inherit pub_methods_structpl_string_base" id="r_aef9d9918c2d608eb5451b735057a272f"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsRootedPath</b> () const</td></tr>
<tr class="memdesc:aef9d9918c2d608eb5451b735057a272f inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the given path represents a 'rooted' path. See <a class="el" href="../../d5/d08/classpl_file_system.htm" title="The plFileSystem provides high-level functionality to manage files in a virtual file system.">plFileSystem</a> for details. <br /></td></tr>
<tr class="separator:aef9d9918c2d608eb5451b735057a272f inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97a42649db4dba41449786ad43a237cf inherit pub_methods_structpl_string_base" id="r_a97a42649db4dba41449786ad43a237cf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#a97a42649db4dba41449786ad43a237cf">GetRootedPathRootName</a> () const</td></tr>
<tr class="memdesc:a97a42649db4dba41449786ad43a237cf inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extracts the root name from a rooted path.  <br /></td></tr>
<tr class="separator:a97a42649db4dba41449786ad43a237cf inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="friends" name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a40cb0d58474a48c361efec2a6e783045" id="r_a40cb0d58474a48c361efec2a6e783045"><td class="memTemplParams" colspan="2"><a id="a40cb0d58474a48c361efec2a6e783045" name="a40cb0d58474a48c361efec2a6e783045"></a>
template&lt;plUInt16 T&gt; </td></tr>
<tr class="memitem:a40cb0d58474a48c361efec2a6e783045"><td class="memTemplItemLeft" align="right" valign="top">struct&#160;</td><td class="memTemplItemRight" valign="bottom"><b>plHybridStringBase</b></td></tr>
<tr class="separator:a40cb0d58474a48c361efec2a6e783045"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="inherited" name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_structpl_string_base"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_types_structpl_string_base')"><img src="../../closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="../../de/d73/structpl_string_base.htm">plStringBase&lt; plStringBuilder &gt;</a></td></tr>
<tr class="memitem:af25a0f1818a027657bf933b2bb334cb5 inherit pub_types_structpl_string_base" id="r_af25a0f1818a027657bf933b2bb334cb5"><td class="memItemLeft" align="right" valign="top">
using&#160;</td><td class="memItemRight" valign="bottom"><b>iterator</b></td></tr>
<tr class="separator:af25a0f1818a027657bf933b2bb334cb5 inherit pub_types_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a218db55e130cefa8bbef146fb7d96b94 inherit pub_types_structpl_string_base" id="r_a218db55e130cefa8bbef146fb7d96b94"><td class="memItemLeft" align="right" valign="top">
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_iterator</b></td></tr>
<tr class="separator:a218db55e130cefa8bbef146fb7d96b94 inherit pub_types_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7d23dc3ab75161d8f82218db1251e3f inherit pub_types_structpl_string_base" id="r_ae7d23dc3ab75161d8f82218db1251e3f"><td class="memItemLeft" align="right" valign="top">
using&#160;</td><td class="memItemRight" valign="bottom"><b>reverse_iterator</b></td></tr>
<tr class="separator:ae7d23dc3ab75161d8f82218db1251e3f inherit pub_types_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0e2162084911821c55d0f7a429da78a inherit pub_types_structpl_string_base" id="r_aa0e2162084911821c55d0f7a429da78a"><td class="memItemLeft" align="right" valign="top">
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_reverse_iterator</b></td></tr>
<tr class="separator:aa0e2162084911821c55d0f7a429da78a inherit pub_types_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="../../d3/d2d/classpl_string_builder.htm" title="plStringBuilder is a class that is meant for creating and modifying strings.">plStringBuilder</a> is a class that is meant for creating and modifying strings. </p>
<p>It is not meant to store strings for a longer duration. Each <a class="el" href="../../d3/d2d/classpl_string_builder.htm" title="plStringBuilder is a class that is meant for creating and modifying strings.">plStringBuilder</a> uses an <a class="el" href="../../d8/dcc/classpl_hybrid_array.htm" title="A hybrid array uses in-place storage to handle the first few elements without any allocation....">plHybridArray</a> to allocate a large buffer on the stack, such that string manipulations are possible without memory allocations, unless the string is too large. No sharing of data happens between <a class="el" href="../../d3/d2d/classpl_string_builder.htm" title="plStringBuilder is a class that is meant for creating and modifying strings.">plStringBuilder</a> instances, as it is expected that they will be modified anyway. Instead all data is always copied, therefore instances should not be passed by copy. All string data is stored Utf8 encoded, just as all other string classes, too. That makes it difficult to modify individual characters. Instead you should prefer high-level functions such as 'ReplaceSubString'. If individual characters must be modified, it might make more sense to create a second <a class="el" href="../../d3/d2d/classpl_string_builder.htm" title="plStringBuilder is a class that is meant for creating and modifying strings.">plStringBuilder</a>, and iterate over the first while rebuilding the desired result in the second. Once a string is built and should only be stored for read access, it should be stored in an plString instance. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="ab021498c6c8447b67603b1b4982fb9a9" name="ab021498c6c8447b67603b1b4982fb9a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab021498c6c8447b67603b1b4982fb9a9">&#9670;&#160;</a></span>AppendWithSeparator()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void plStringBuilder::AppendWithSeparator </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sSeparator</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sText1</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sText2</em></span><span class="paramdefsep"> = </span><span class="paramdefval"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>()</span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sText3</em></span><span class="paramdefsep"> = </span><span class="paramdefval"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>()</span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sText4</em></span><span class="paramdefsep"> = </span><span class="paramdefval"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>()</span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sText5</em></span><span class="paramdefsep"> = </span><span class="paramdefval"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>()</span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sText6</em></span><span class="paramdefsep"> = </span><span class="paramdefval"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>()</span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="#a1e8c97d8bcb6e24fbe61f79cfe2d90db" title="Appends a single Utf32 character.">Append()</a> but the very first argument is a separator that is only appended (once) if the existing string is not empty and does not already end with the separator. </p>
<p>This is useful when one wants to append entries that require a separator like a comma in between items. E.g. calling AppendWithSeparator(", ", "a", "b"); AppendWithSeparator(", ", "c", "d"); results in the string "ab, cd" </p>

</div>
</div>
<a id="ad27e890445b6f6a5c0bcbb88026d19dd" name="ad27e890445b6f6a5c0bcbb88026d19dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad27e890445b6f6a5c0bcbb88026d19dd">&#9670;&#160;</a></span>ChangeCharacter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStringBuilder::ChangeCharacter </td>
          <td>(</td>
          <td class="paramtype">iterator &amp;</td>          <td class="paramname"><span class="paramname"><em>ref_it</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiCharacter</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Changes the single character in this string, to which the iterator currently points. </p>
<p>The string might need to be moved around, if its encoding size changes, however the given iterator will be adjusted so that it will always stay valid. </p><dl class="section note"><dt>Note</dt><dd>This can be a very costly operation (unless this string is pure ASCII). It is only provided for the few rare cases where it is more convenient and performance is not of concern. If possible, do not use this function, at all. </dd></dl>

</div>
</div>
<a id="ac96aba315d522ce55aa1d909e3288699" name="ac96aba315d522ce55aa1d909e3288699"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac96aba315d522ce55aa1d909e3288699">&#9670;&#160;</a></span>ChangeFileExtension()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void plStringBuilder::ChangeFileExtension </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sNewExtension</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bFullExtension</em></span><span class="paramdefsep"> = </span><span class="paramdefval">false</span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Only changes the file extension of the path. If there is no extension yet, one is appended (including a dot). </p>
<p>sNewExtension may or may not start with a dot. If sNewExtension is empty, the file extension is removed, but the dot remains. E.g. "file.txt" -&gt; "file." If you also want to remove the dot, use <a class="el" href="#a72f52c384b8d47e3bda6d717c11015a7" title="If any extension exists, it is removed, including the dot before it.">RemoveFileExtension()</a> instead.</p>
<p>If bFullExtension is false, a file named "file.a.b.c" will replace only "c". If bFullExtension is true, a file named "file.a.b.c" will replace all of "a.b.c". </p>

</div>
</div>
<a id="a50431616657824d4039932e5b5923882" name="a50431616657824d4039932e5b5923882"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50431616657824d4039932e5b5923882">&#9670;&#160;</a></span>GetCharacterCount()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">PL_ALWAYS_INLINE plUInt32 plStringBuilder::GetCharacterCount </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of characters of which this string consists. Might be less than GetElementCount, if it contains Utf8 multi-byte characters. </p>
<dl class="section note"><dt>Note</dt><dd>This is a slow operation, as it has to run through the entire string to count the Unicode characters. Only call this once and use the result as long as the string doesn't change. Don't call this in a loop. </dd></dl>

</div>
</div>
<a id="a5e80384a0747cd10110804b721f337c2" name="a5e80384a0747cd10110804b721f337c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e80384a0747cd10110804b721f337c2">&#9670;&#160;</a></span>IsPathBelowFolder()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool plStringBuilder::IsPathBelowFolder </td>
          <td>(</td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>szPathToFolder</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Checks whether this path is a sub-path of the given path. </p>
<p>This function will call 'MakeCleanPath' to be able to compare both paths, thus it might modify the data of this instance.</p>
<p>An empty folder (zero length) does not contain ANY files.<br  />
A non-existing file-name (zero length) is never in any folder.<br  />
Example:<br  />
IsFileBelowFolder ("", "XYZ") -&gt; always false<br  />
IsFileBelowFolder ("XYZ", "") -&gt; always false<br  />
IsFileBelowFolder ("", "") -&gt; always false<br  />
 </p>

</div>
</div>
<a id="a659a9fa17fb4388442d9ae9f6be54dab" name="a659a9fa17fb4388442d9ae9f6be54dab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a659a9fa17fb4388442d9ae9f6be54dab">&#9670;&#160;</a></span>MakeCleanPath()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void plStringBuilder::MakeCleanPath </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes "../" where possible, replaces all path separators with /, removes double slashes. </p>
<p>All paths use slashes on all platforms. If you need to convert a path to the OS specific representation, use 'MakePathSeparatorsNative' 'MakeCleanPath' will in rare circumstances grow the string by one character. That means it is quite safe to assume that it will not waste time on memory allocations. If it is repeatedly called on the same string, it has a minor overhead for computing the same string over and over, but no memory allocations will be done (everything is in-place).</p>
<p>Removes all double path separators (slashes and backslashes) in a path, except if the path starts with two (back-)slashes, those are kept, as they might indicate a UNC path. </p>

</div>
</div>
<a id="adbcba066878f513d27d33ea981010a5b" name="adbcba066878f513d27d33ea981010a5b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adbcba066878f513d27d33ea981010a5b">&#9670;&#160;</a></span>MakePathSeparatorsNative()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void plStringBuilder::MakePathSeparatorsNative </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Cleans this path up and replaces all path separators by the OS specific separator. </p>
<p>This can be used, if you want to present paths in the OS specific form to the user in the UI. In all other cases the internal representation uses slashes, no matter on which operating system. </p>

</div>
</div>
<a id="a5f117c2d0ac61531b43cbddc3309226d" name="a5f117c2d0ac61531b43cbddc3309226d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5f117c2d0ac61531b43cbddc3309226d">&#9670;&#160;</a></span>MakeRelativeTo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/dce/structpl_result.htm">plResult</a> plStringBuilder::MakeRelativeTo </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sAbsolutePathToMakeThisRelativeTo</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts this path into a relative path to the path with the awesome variable name 'szAbsolutePathToMakeThisRelativeTo'. </p>
<p>If the method succeeds the StringBuilder's contents are modified in place. </p>

</div>
</div>
<a id="a2a73a871560047c41fa46accc9866a93" name="a2a73a871560047c41fa46accc9866a93"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2a73a871560047c41fa46accc9866a93">&#9670;&#160;</a></span>PathParentDirectory()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void plStringBuilder::PathParentDirectory </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiLevelsUp</em></span><span class="paramdefsep"> = </span><span class="paramdefval">1</span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Modifies this string to point to the parent directory. </p>
<p>'uiLevelsUp' can be used to go several folders upwards. It has to be at least one. If there are no more folders to go up, "../" is appended as much as needed. </p>

</div>
</div>
<a id="a72f52c384b8d47e3bda6d717c11015a7" name="a72f52c384b8d47e3bda6d717c11015a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72f52c384b8d47e3bda6d717c11015a7">&#9670;&#160;</a></span>RemoveFileExtension()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void plStringBuilder::RemoveFileExtension </td>
          <td>(</td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bFullExtension</em></span><span class="paramdefsep"> = </span><span class="paramdefval">false</span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>If any extension exists, it is removed, including the dot before it. </p>
<p>If bFullExtension is false, a file named "file.a.b.c" will end up as "file.a.b" If bFullExtension is true, a file named "file.a.b.c" will end up as "file" </p>

</div>
</div>
<a id="a3147f08a93e2f4086551604f7c8539ea" name="a3147f08a93e2f4086551604f7c8539ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3147f08a93e2f4086551604f7c8539ea">&#9670;&#160;</a></span>ReplaceFirst()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * plStringBuilder::ReplaceFirst </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sSearchFor</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sReplacement</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>szStartSearchAt</em></span><span class="paramdefsep"> = </span><span class="paramdefval">nullptr</span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Replaces the first occurrence of szSearchFor by szReplacement. Optionally starts searching at szStartSearchAt (or the beginning). </p>
<p>Returns the first position where szSearchFor was found, or nullptr if nothing was found (and replaced). </p>

</div>
</div>
<a id="adc79c2a2dd2ae2f6e0d56943bcd18c12" name="adc79c2a2dd2ae2f6e0d56943bcd18c12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc79c2a2dd2ae2f6e0d56943bcd18c12">&#9670;&#160;</a></span>ReplaceLast()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * plStringBuilder::ReplaceLast </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sSearchFor</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sReplacement</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>szStartSearchAt</em></span><span class="paramdefsep"> = </span><span class="paramdefval">nullptr</span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Replaces the last occurrence of szSearchFor by szReplacement. Optionally starts searching at szStartSearchAt (or the end). </p>
<p>Returns the last position where szSearchFor was found, or nullptr if nothing was found (and replaced). </p>

</div>
</div>
<a id="aaab02db9ff5e2825f4bacf6afb0317aa" name="aaab02db9ff5e2825f4bacf6afb0317aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaab02db9ff5e2825f4bacf6afb0317aa">&#9670;&#160;</a></span>ReplaceWholeWord()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * plStringBuilder::ReplaceWholeWord </td>
          <td>(</td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>szSearchFor</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sReplaceWith</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/d4d/classpl_string_utils.htm#a8bc7e3a526fc09382eaa1276895f3266">plStringUtils::PL_CHARACTER_FILTER</a></td>          <td class="paramname"><span class="paramname"><em>isDelimiterCB</em></span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Replaces the first occurrence of szSearchFor by szReplaceWith, if szSearchFor was found to be a 'whole word', as indicated by the delimiter function IsDelimiterCB. </p>
<p>Returns the start position of where the word was replaced or nullptr if nothing got replaced. </p>

</div>
</div>
<a id="aefd68cb6b42abe44bddd70fb7c5588b4" name="aefd68cb6b42abe44bddd70fb7c5588b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aefd68cb6b42abe44bddd70fb7c5588b4">&#9670;&#160;</a></span>ReplaceWholeWord_NoCase()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * plStringBuilder::ReplaceWholeWord_NoCase </td>
          <td>(</td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>szSearchFor</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sReplaceWith</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/d4d/classpl_string_utils.htm#a8bc7e3a526fc09382eaa1276895f3266">plStringUtils::PL_CHARACTER_FILTER</a></td>          <td class="paramname"><span class="paramname"><em>isDelimiterCB</em></span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Case-insensitive version of ReplaceWholeWord. </p>
<p>Returns the start position of where the word was replaced or nullptr if nothing got replaced. </p>

</div>
</div>
<a id="a2b9fb7e16520dd0516f4ecfbef1e7d94" name="a2b9fb7e16520dd0516f4ecfbef1e7d94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b9fb7e16520dd0516f4ecfbef1e7d94">&#9670;&#160;</a></span>ReplaceWholeWordAll()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">plUInt32 plStringBuilder::ReplaceWholeWordAll </td>
          <td>(</td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>szSearchFor</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sReplaceWith</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/d4d/classpl_string_utils.htm#a8bc7e3a526fc09382eaa1276895f3266">plStringUtils::PL_CHARACTER_FILTER</a></td>          <td class="paramname"><span class="paramname"><em>isDelimiterCB</em></span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Replaces all occurrences of szSearchFor by szReplaceWith, if szSearchFor was found to be a 'whole word', as indicated by the delimiter function IsDelimiterCB. </p>
<p>Returns how many words got replaced. </p>

</div>
</div>
<a id="a7b1480e584a619d41c077b1526631208" name="a7b1480e584a619d41c077b1526631208"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b1480e584a619d41c077b1526631208">&#9670;&#160;</a></span>ReplaceWholeWordAll_NoCase()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">plUInt32 plStringBuilder::ReplaceWholeWordAll_NoCase </td>
          <td>(</td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>szSearchFor</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sReplaceWith</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/d4d/classpl_string_utils.htm#a8bc7e3a526fc09382eaa1276895f3266">plStringUtils::PL_CHARACTER_FILTER</a></td>          <td class="paramname"><span class="paramname"><em>isDelimiterCB</em></span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Case-insensitive version of ReplaceWholeWordAll. </p>
<p>Returns how many words got replaced. </p>

</div>
</div>
<a id="a398a0068a14d2405481c53194fc50d78" name="a398a0068a14d2405481c53194fc50d78"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a398a0068a14d2405481c53194fc50d78">&#9670;&#160;</a></span>Shrink()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void plStringBuilder::Shrink </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiShrinkCharsFront</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiShrinkCharsBack</em></span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes the first n and last m characters from this string. </p>
<p>This function will never reallocate data. Removing characters at the back is very cheap. Removing characters at the front needs to move data around, so can be quite costly. </p>

</div>
</div>
<a id="a8fde895a0b1d77c44fc852ec44f1fee1" name="a8fde895a0b1d77c44fc852ec44f1fee1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8fde895a0b1d77c44fc852ec44f1fee1">&#9670;&#160;</a></span>Trim()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void plStringBuilder::Trim </td>
          <td>(</td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>szTrimChars</em></span><span class="paramdefsep"> = </span><span class="paramdefval">&quot;&#160;\f\n\r\t\v&quot;</span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes all characters from the start and end that appear in the given strings. </p>
<p>The default string removes all standard whitespace characters. </p>

</div>
</div>
<a id="a05551cc692087cf7a626b826aab8864b" name="a05551cc692087cf7a626b826aab8864b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a05551cc692087cf7a626b826aab8864b">&#9670;&#160;</a></span>TrimLeft()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void plStringBuilder::TrimLeft </td>
          <td>(</td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>szTrimChars</em></span><span class="paramdefsep"> = </span><span class="paramdefval">&quot;&#160;\f\n\r\t\v&quot;</span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes all characters from the start that appear in the given strings. </p>
<p>The default string removes all standard whitespace characters. </p>

</div>
</div>
<a id="a76eba648c34057b63bc7e032c3ec31f7" name="a76eba648c34057b63bc7e032c3ec31f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a76eba648c34057b63bc7e032c3ec31f7">&#9670;&#160;</a></span>TrimRight()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void plStringBuilder::TrimRight </td>
          <td>(</td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>szTrimChars</em></span><span class="paramdefsep"> = </span><span class="paramdefval">&quot;&#160;\f\n\r\t\v&quot;</span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes all characters from the end that appear in the given strings. </p>
<p>The default string removes all standard whitespace characters. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/Engine/Foundation/Strings/<a class="el" href="../../d5/df1/_string_builder_8h_source.htm">StringBuilder.h</a></li>
<li>Code/Engine/Foundation/Strings/Implementation/<b>StringBuilder.cpp</b></li>
<li>Code/Engine/Foundation/Strings/Implementation/<a class="el" href="../../da/dbb/_string_builder__inl_8h_source.htm">StringBuilder_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d3/d2d/classpl_string_builder.htm">plStringBuilder</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
