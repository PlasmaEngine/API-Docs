<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<!-- BEGIN opengraph metadata -->
<meta property="og:title" content="Doxygen Awesome" />
<meta property="og:image" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta property="og:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<meta property="og:url" content="https://jothepro.github.io/doxygen-awesome-css/" />
<!-- END opengraph metadata -->
<!-- BEGIN twitter metadata -->
<meta name="twitter:image:src" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta name="twitter:title" content="Doxygen Awesome" />
<meta name="twitter:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<!-- END twitter metadata -->
<title>Plasma Engine: Code/Engine/Foundation/Containers/Map.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link rel="icon" type="image/svg+xml" href="logo.drawio.svg"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-paragraph-link.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-tabs.js"></script>
<script type="text/javascript" src="../../toggle-alternative-theme.js"></script>
<script type="text/javascript">
    DoxygenAwesomeFragmentCopyButton.init()
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeParagraphLink.init()
    DoxygenAwesomeInteractiveToc.init()
    DoxygenAwesomeTabs.init()
</script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Plasma Engine
   &#160;<span id="projectnumber">2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d3/d63/_map_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Map.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;Foundation/Containers/Deque.h&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span> </div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="keyword">class </span><a class="code hl_class" href="../../d9/dbe/classpl_map_base.htm">plMapBase</a>;</div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span> </div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer, <span class="keywordtype">bool</span> REVERSE&gt;</div>
<div class="foldopen" id="foldopen00010" data-start="{" data-end="};">
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno"><a class="line" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">   10</a></span><span class="keyword">struct </span><a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">plMapBaseConstIteratorBase</a></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span>{</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>  <span class="keyword">using </span>iterator_category = std::forward_iterator_tag;</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>  <span class="keyword">using </span><a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">value_type</a> = <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">plMapBaseConstIteratorBase&lt;KeyType, ValueType, Comparer, false&gt;</a>;</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>  <span class="keyword">using </span>difference_type = std::ptrdiff_t;</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span>  <span class="keyword">using </span><a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">pointer</a> = <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">plMapBaseConstIteratorBase&lt;KeyType, ValueType, Comparer, false&gt;</a>*;</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span>  <span class="keyword">using </span><a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">reference</a> = <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">plMapBaseConstIteratorBase&lt;KeyType, ValueType, Comparer, false&gt;</a>&amp;;</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span> </div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>  PL_DECLARE_POD_TYPE();</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span> </div>
<div class="foldopen" id="foldopen00021" data-start="{" data-end="}">
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno"><a class="line" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#adf9b6f67cacc9f8ad12ec51dfb95651c">   21</a></span>  PL_ALWAYS_INLINE <a class="code hl_function" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#adf9b6f67cacc9f8ad12ec51dfb95651c">plMapBaseConstIteratorBase</a>()</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>    : m_pElement(nullptr)</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>  {</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>  } <span class="comment">// [tested]</span></div>
</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span> </div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno"><a class="line" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a36468855199076bf69a567c64da9622e">   27</a></span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a36468855199076bf69a567c64da9622e">IsValid</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pElement != <span class="keyword">nullptr</span>); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span> </div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno"><a class="line" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a2aedce40c8229c1365f0815b1a3a80ab">   30</a></span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a2aedce40c8229c1365f0815b1a3a80ab">operator==</a>(<span class="keyword">const</span> <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">plMapBaseConstIteratorBase</a>&amp; it2)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pElement == it2.m_pElement); }</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>  PL_ADD_DEFAULT_OPERATOR_NOTEQUAL(<span class="keyword">const</span> <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">plMapBaseConstIteratorBase</a>&amp;);</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span> </div>
<div class="foldopen" id="foldopen00034" data-start="{" data-end="}">
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno"><a class="line" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a3f3349c21df2dc2b402a39a460ff451c">   34</a></span>  PL_FORCE_INLINE <span class="keyword">const</span> KeyType&amp; <a class="code hl_function" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a3f3349c21df2dc2b402a39a460ff451c">Key</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>    PL_ASSERT_DEBUG(<a class="code hl_function" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a36468855199076bf69a567c64da9622e">IsValid</a>(), <span class="stringliteral">&quot;Cannot access the &#39;key&#39; of an invalid iterator.&quot;</span>);</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>    <span class="keywordflow">return</span> m_pElement-&gt;m_Key;</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>  } <span class="comment">// [tested]</span></div>
</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span> </div>
<div class="foldopen" id="foldopen00041" data-start="{" data-end="}">
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno"><a class="line" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a88107606ab8d93405030f4fa3a9512d2">   41</a></span>  PL_FORCE_INLINE <span class="keyword">const</span> ValueType&amp; <a class="code hl_function" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a88107606ab8d93405030f4fa3a9512d2">Value</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>    PL_ASSERT_DEBUG(<a class="code hl_function" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a36468855199076bf69a567c64da9622e">IsValid</a>(), <span class="stringliteral">&quot;Cannot access the &#39;value&#39; of an invalid iterator.&quot;</span>);</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>    <span class="keywordflow">return</span> m_pElement-&gt;m_Value;</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>  } <span class="comment">// [tested]</span></div>
</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span> </div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno"><a class="line" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#aaf4697c800c1c2a53f502b66320ea501">   48</a></span>  PL_ALWAYS_INLINE <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">plMapBaseConstIteratorBase</a>&amp; <a class="code hl_function" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#aaf4697c800c1c2a53f502b66320ea501">operator*</a>() { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span> </div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#aef51325c470224170af4c0b49ac32eb2">Next</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span> </div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a7b9b7758dd1f6394a0b53c68cb7a865b">Prev</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span> </div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno"><a class="line" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#ac8ba8c1a61d22a51c6206c89d6bd7ebe">   57</a></span>  PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#ac8ba8c1a61d22a51c6206c89d6bd7ebe">operator++</a>() { <a class="code hl_function" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#aef51325c470224170af4c0b49ac32eb2">Next</a>(); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span> </div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno"><a class="line" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a9ddfeaeb853a78514f0c0df682c69491">   60</a></span>  PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a9ddfeaeb853a78514f0c0df682c69491">operator--</a>() { <a class="code hl_function" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a7b9b7758dd1f6394a0b53c68cb7a865b">Prev</a>(); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span> </div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span><span class="keyword">protected</span>:</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>  <span class="keywordtype">void</span> Advance(<span class="keyword">const</span> plInt32 dir0, <span class="keyword">const</span> plInt32 dir1);</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span> </div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>  <span class="keyword">friend</span> <span class="keyword">class </span><a class="code hl_class" href="../../d9/dbe/classpl_map_base.htm">plMapBase</a>&lt;KeyType, ValueType, Comparer&gt;;</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span> </div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>  PL_ALWAYS_INLINE <span class="keyword">explicit</span> <a class="code hl_function" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#adf9b6f67cacc9f8ad12ec51dfb95651c">plMapBaseConstIteratorBase</a>(<span class="keyword">typename</span> plMapBase&lt;KeyType, ValueType, Comparer&gt;::Node* pInit)</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>    : m_pElement(pInit)</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>  {</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>  }</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span> </div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>  <span class="keyword">typename</span> plMapBase&lt;KeyType, ValueType, Comparer&gt;::Node* m_pElement;</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span> </div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span><span class="preprocessor">#if PL_ENABLED(PL_USE_CPP20_OPERATORS)</span></div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>  <span class="keyword">struct </span>Pointer</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>  {</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>    std::pair&lt;const KeyType&amp;, const ValueType&amp;&gt; value;</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>    <span class="keyword">const</span> std::pair&lt;const KeyType&amp;, const ValueType&amp;&gt;* operator-&gt;()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> &amp;value; }</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>  };</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span> </div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>  PL_ALWAYS_INLINE Pointer operator-&gt;()<span class="keyword"> const</span></div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>    <span class="keywordflow">return</span> Pointer{.value = {<a class="code hl_function" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a3f3349c21df2dc2b402a39a460ff451c">Key</a>(), <a class="code hl_function" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a88107606ab8d93405030f4fa3a9512d2">Value</a>()}};</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>  }</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span> </div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>  <span class="comment">// This function is used to return the values for structured bindings.</span></div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>  <span class="comment">// The number and type of each slot are defined in the inl file.</span></div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>  <span class="keyword">template</span> &lt;std::<span class="keywordtype">size_t</span> Index&gt;</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>  std::tuple_element_t&lt;Index, plMapBaseConstIteratorBase&gt;&amp; get()<span class="keyword"> const</span></div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>    <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (Index == 0)</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>      <span class="keywordflow">return</span> <a class="code hl_function" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a3f3349c21df2dc2b402a39a460ff451c">Key</a>();</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>    <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (Index == 1)</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>      <span class="keywordflow">return</span> <a class="code hl_function" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a88107606ab8d93405030f4fa3a9512d2">Value</a>();</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>  }</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>};</div>
</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span> </div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer, <span class="keywordtype">bool</span> REVERSE&gt;</div>
<div class="foldopen" id="foldopen00102" data-start="{" data-end="};">
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno"><a class="line" href="../../d3/d91/structpl_map_base_iterator_base.htm">  102</a></span><span class="keyword">struct </span><a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">plMapBaseIteratorBase</a> : <span class="keyword">public</span> <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">plMapBaseConstIteratorBase</a>&lt;KeyType, ValueType, Comparer, REVERSE&gt;</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>{</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>  <span class="keyword">using </span>iterator_category = std::forward_iterator_tag;</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>  <span class="keyword">using </span><a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">value_type</a> = <a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">plMapBaseIteratorBase&lt;KeyType, ValueType, Comparer, REVERSE&gt;</a>;</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>  <span class="keyword">using </span>difference_type = std::ptrdiff_t;</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>  <span class="keyword">using </span><a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">pointer</a> = <a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">plMapBaseIteratorBase&lt;KeyType, ValueType, Comparer, REVERSE&gt;</a>*;</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>  <span class="keyword">using </span><a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">reference</a> = <a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">plMapBaseIteratorBase&lt;KeyType, ValueType, Comparer, REVERSE&gt;</a>&amp;;</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span> </div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>  PL_DECLARE_POD_TYPE();</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span> </div>
<div class="foldopen" id="foldopen00113" data-start="{" data-end="}">
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno"><a class="line" href="../../d3/d91/structpl_map_base_iterator_base.htm#a260b6aee46ca1622d97aa3f3d1147370">  113</a></span>  PL_ALWAYS_INLINE <a class="code hl_function" href="../../d3/d91/structpl_map_base_iterator_base.htm#a260b6aee46ca1622d97aa3f3d1147370">plMapBaseIteratorBase</a>()</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>    : <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">plMapBaseConstIteratorBase</a>&lt;KeyType, ValueType, Comparer, REVERSE&gt;()</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>  {</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>  }</div>
</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span> </div>
<div class="foldopen" id="foldopen00119" data-start="{" data-end="}">
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno"><a class="line" href="../../d3/d91/structpl_map_base_iterator_base.htm#ac5c5b9eaafa638ce83a1b21df77ac329">  119</a></span>  PL_FORCE_INLINE ValueType&amp; <a class="code hl_function" href="../../d3/d91/structpl_map_base_iterator_base.htm#ac5c5b9eaafa638ce83a1b21df77ac329">Value</a>()</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>  {</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>    PL_ASSERT_DEBUG(this-&gt;<a class="code hl_function" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a36468855199076bf69a567c64da9622e">IsValid</a>(), <span class="stringliteral">&quot;Cannot access the &#39;value&#39; of an invalid iterator.&quot;</span>);</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>    <span class="keywordflow">return</span> this-&gt;m_pElement-&gt;m_Value;</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>  }</div>
</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span> </div>
<div class="foldopen" id="foldopen00126" data-start="{" data-end="}">
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno"><a class="line" href="../../d3/d91/structpl_map_base_iterator_base.htm#a9333a4fbb0f1b33a2e1ec38150fc59aa">  126</a></span>  PL_FORCE_INLINE ValueType&amp; <a class="code hl_function" href="../../d3/d91/structpl_map_base_iterator_base.htm#a9333a4fbb0f1b33a2e1ec38150fc59aa">Value</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>    PL_ASSERT_DEBUG(this-&gt;<a class="code hl_function" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a36468855199076bf69a567c64da9622e">IsValid</a>(), <span class="stringliteral">&quot;Cannot access the &#39;value&#39; of an invalid iterator.&quot;</span>);</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>    <span class="keywordflow">return</span> this-&gt;m_pElement-&gt;m_Value;</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>  }</div>
</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span> </div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno"><a class="line" href="../../d3/d91/structpl_map_base_iterator_base.htm#a50f1d0493b7739ec5582de465db17930">  133</a></span>  PL_ALWAYS_INLINE <a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">plMapBaseIteratorBase</a>&amp; <a class="code hl_function" href="../../d3/d91/structpl_map_base_iterator_base.htm#a50f1d0493b7739ec5582de465db17930">operator*</a>() { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span> </div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>  <span class="keyword">friend</span> <span class="keyword">class </span><a class="code hl_class" href="../../d9/dbe/classpl_map_base.htm">plMapBase</a>&lt;KeyType, ValueType, Comparer&gt;;</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span> </div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>  PL_ALWAYS_INLINE <span class="keyword">explicit</span> <a class="code hl_function" href="../../d3/d91/structpl_map_base_iterator_base.htm#a260b6aee46ca1622d97aa3f3d1147370">plMapBaseIteratorBase</a>(<span class="keyword">typename</span> plMapBase&lt;KeyType, ValueType, Comparer&gt;::Node* pInit)</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>    : <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">plMapBaseConstIteratorBase</a>&lt;KeyType, ValueType, Comparer, REVERSE&gt;(pInit)</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>  {</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>  }</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span> </div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span><span class="preprocessor">#if PL_ENABLED(PL_USE_CPP20_OPERATORS)</span></div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>  <span class="keyword">struct </span>Pointer</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>  {</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>    std::pair&lt;const KeyType&amp;, ValueType&amp;&gt; value;</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>    <span class="keyword">const</span> std::pair&lt;const KeyType&amp;, ValueType&amp;&gt;* operator-&gt;()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> &amp;value; }</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>  };</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span> </div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>  PL_ALWAYS_INLINE Pointer operator-&gt;()<span class="keyword"> const</span></div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>    <span class="keywordflow">return</span> Pointer{.value = {<a class="code hl_function" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a3f3349c21df2dc2b402a39a460ff451c">plMapBaseConstIteratorBase&lt;KeyType, ValueType, Comparer, REVERSE&gt;::Key</a>(), <a class="code hl_function" href="../../d3/d91/structpl_map_base_iterator_base.htm#ac5c5b9eaafa638ce83a1b21df77ac329">Value</a>()}};</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>  }</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span> </div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span> </div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>  <span class="comment">// These functions are used to return the values for structured bindings.</span></div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>  <span class="comment">// The number and type of type of each slot are defined in the inl file.</span></div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span> </div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>  <span class="keyword">template</span> &lt;std::<span class="keywordtype">size_t</span> Index&gt;</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>  std::tuple_element_t&lt;Index, plMapBaseIteratorBase&gt;&amp; get()</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>  {</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>    <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (Index == 0)</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>      <span class="keywordflow">return</span> <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">plMapBaseConstIteratorBase&lt;KeyType, ValueType, Comparer, REVERSE&gt;::Key</a>();</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>    <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (Index == 1)</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>      <span class="keywordflow">return</span> <a class="code hl_function" href="../../d3/d91/structpl_map_base_iterator_base.htm#ac5c5b9eaafa638ce83a1b21df77ac329">Value</a>();</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>  }</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span> </div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>  <span class="keyword">template</span> &lt;std::<span class="keywordtype">size_t</span> Index&gt;</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>  std::tuple_element_t&lt;Index, plMapBaseIteratorBase&gt;&amp; get()<span class="keyword"> const</span></div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>    <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (Index == 0)</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>      <span class="keywordflow">return</span> <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">plMapBaseConstIteratorBase&lt;KeyType, ValueType, Comparer, REVERSE&gt;::Key</a>();</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>    <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (Index == 1)</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>      <span class="keywordflow">return</span> <a class="code hl_function" href="../../d3/d91/structpl_map_base_iterator_base.htm#ac5c5b9eaafa638ce83a1b21df77ac329">Value</a>();</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>  }</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>};</div>
</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span> </div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="foldopen" id="foldopen00192" data-start="{" data-end="};">
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno"><a class="line" href="../../d9/dbe/classpl_map_base.htm">  192</a></span><span class="keyword">class </span><a class="code hl_class" href="../../d9/dbe/classpl_map_base.htm">plMapBase</a></div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>{</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span> </div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>  <span class="keyword">using </span><a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">ConstIterator</a> = <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">plMapBaseConstIteratorBase&lt;KeyType, ValueType, Comparer, false&gt;</a>;</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>  <span class="keyword">using </span><a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">ConstReverseIterator</a> = <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">plMapBaseConstIteratorBase&lt;KeyType, ValueType, Comparer, true&gt;</a>;</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span> </div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>  <span class="keyword">using </span><a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">Iterator</a> = <a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">plMapBaseIteratorBase&lt;KeyType, ValueType, Comparer, false&gt;</a>;</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>  <span class="keyword">using </span><a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">ReverseIterator</a> = <a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">plMapBaseIteratorBase&lt;KeyType, ValueType, Comparer, true&gt;</a>;</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span> </div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>  <span class="keyword">friend</span> <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">ConstIterator</a>;</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>  <span class="keyword">friend</span> <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">ConstReverseIterator</a>;</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>  <span class="keyword">friend</span> <a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">Iterator</a>;</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>  <span class="keyword">friend</span> <a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">ReverseIterator</a>;</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>  <span class="keyword">struct </span>Node;</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span> </div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>  <span class="keyword">struct </span>NilNode</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span>  {</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>    Node* m_pParent = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>    Node* m_pLink[2] = {<span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>};</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>    plUInt8 m_uiLevel = 0;</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>  };</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span> </div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>  <span class="keyword">struct </span>Node : <span class="keyword">public</span> NilNode</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>  {</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>    KeyType m_Key;</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>    ValueType m_Value;</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>  };</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span> </div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span><span class="keyword">protected</span>:</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>  <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#ac24bfa33be79545a3745c3bb5c219967">plMapBase</a>(<span class="keyword">const</span> Comparer&amp; comparer, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span> </div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>  <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#ac24bfa33be79545a3745c3bb5c219967">plMapBase</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d9/dbe/classpl_map_base.htm">plMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; cc, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span> </div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>  <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a48616ebe02686a94d9ac03eeb07d33e2">~plMapBase</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span> </div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a9809e273e5ba5c48b7be9ac4f2e06013">operator=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d9/dbe/classpl_map_base.htm">plMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; rhs);</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span> </div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a5bee4eaab7d49005eba4c3387d37541d">IsEmpty</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span> </div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>  plUInt32 <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a7836b1f7942107dbda516f8ab84acc3c">GetCount</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span> </div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a4781441e042445a110a5f31fe570a639">Clear</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span> </div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>  <a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">Iterator</a> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a8f38cc470721aee5fd73ceddfbd79064">GetIterator</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span> </div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>  <a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">ReverseIterator</a> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a6ac11bae58d9463d029b4f55e2057ad5">GetReverseIterator</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span> </div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span>  <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">ConstIterator</a> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a8f38cc470721aee5fd73ceddfbd79064">GetIterator</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span> </div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span>  <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">ConstReverseIterator</a> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a6ac11bae58d9463d029b4f55e2057ad5">GetReverseIterator</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span> </div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType, <span class="keyword">typename</span> CompatibleValueType&gt;</div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span>  <a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">Iterator</a> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a6c58266978a54ec4697ba4a981c1b80b">Insert</a>(CompatibleKeyType&amp;&amp; key, CompatibleValueType&amp;&amp; value); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span> </div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a70634f90fcf604ed5e48d867cabd532e">Remove</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span> </div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>  <a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">Iterator</a> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a70634f90fcf604ed5e48d867cabd532e">Remove</a>(<span class="keyword">const</span> <a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">Iterator</a>&amp; pos); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span> </div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span>  <a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">Iterator</a> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a7b122c28aeba0192fbfba01001d61b75">FindOrAdd</a>(CompatibleKeyType&amp;&amp; key, <span class="keywordtype">bool</span>* out_pExisted = <span class="keyword">nullptr</span>); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span> </div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span>  ValueType&amp; <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a632300492d4f3c9390a61d58f6cb4758">operator[]</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span> </div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno"><a class="line" href="../../d9/dbe/classpl_map_base.htm#a5a1ffdef36aac6973903da9b8de0ec2a">  283</a></span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a5a1ffdef36aac6973903da9b8de0ec2a">TryGetValue</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key, ValueType&amp; out_value) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span> </div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno"><a class="line" href="../../d9/dbe/classpl_map_base.htm#af7b2140fd6c972a8b1b282686cfa300c">  287</a></span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#af7b2140fd6c972a8b1b282686cfa300c">TryGetValue</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key, <span class="keyword">const</span> ValueType*&amp; out_pValue) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span> </div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno"><a class="line" href="../../d9/dbe/classpl_map_base.htm#a8d8bf9ca79ff5233bb09054f3a4d9d7c">  291</a></span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a8d8bf9ca79ff5233bb09054f3a4d9d7c">TryGetValue</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key, ValueType*&amp; out_pValue) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span> </div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno"><a class="line" href="../../d9/dbe/classpl_map_base.htm#a7be4a03b4d477d14abfcdf06727e06fc">  295</a></span>  <span class="keyword">const</span> ValueType* <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a7be4a03b4d477d14abfcdf06727e06fc">GetValue</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span> </div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno"><a class="line" href="../../d9/dbe/classpl_map_base.htm#abf459d880c010ca7d61808bff8b3afd2">  299</a></span>  ValueType* <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#abf459d880c010ca7d61808bff8b3afd2">GetValue</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span> </div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno"><a class="line" href="../../d9/dbe/classpl_map_base.htm#ac6a86c64b4c9288757b309bccf89dc1b">  303</a></span>  <span class="keyword">const</span> ValueType&amp; <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#ac6a86c64b4c9288757b309bccf89dc1b">GetValueOrDefault</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key, <span class="keyword">const</span> ValueType&amp; defaultValue) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span> </div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno"><a class="line" href="../../d9/dbe/classpl_map_base.htm#a279536d38132faa38825432d5e37ae21">  307</a></span>  <a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">Iterator</a> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a279536d38132faa38825432d5e37ae21">Find</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span> </div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno"><a class="line" href="../../d9/dbe/classpl_map_base.htm#a5d1160f85c4c9e36666c1efd2c9d7f73">  312</a></span>  <a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">Iterator</a> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a5d1160f85c4c9e36666c1efd2c9d7f73">LowerBound</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span> </div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno"><a class="line" href="../../d9/dbe/classpl_map_base.htm#accd65f874df0ae04c6273323dba8cb23">  317</a></span>  <a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">Iterator</a> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#accd65f874df0ae04c6273323dba8cb23">UpperBound</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span> </div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno"><a class="line" href="../../d9/dbe/classpl_map_base.htm#a41a4177e7e2b472c746227615fd1b3b7">  321</a></span>  <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">ConstIterator</a> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a41a4177e7e2b472c746227615fd1b3b7">Find</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span> </div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno"><a class="line" href="../../d9/dbe/classpl_map_base.htm#a038ae61aac3d268ee637b8069fff8b79">  325</a></span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a038ae61aac3d268ee637b8069fff8b79">Contains</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span> </div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno"><a class="line" href="../../d9/dbe/classpl_map_base.htm#ac5d444d275fdfd9531961373cc0df257">  330</a></span>  <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">ConstIterator</a> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#ac5d444d275fdfd9531961373cc0df257">LowerBound</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span> </div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno"><a class="line" href="../../d9/dbe/classpl_map_base.htm#a1c8ae402009ca98a62b7e57fce8da46d">  335</a></span>  <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">ConstIterator</a> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a1c8ae402009ca98a62b7e57fce8da46d">UpperBound</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span> </div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno"><a class="line" href="../../d9/dbe/classpl_map_base.htm#a08587ef06af6915d4493add683eb390c">  338</a></span>  <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a08587ef06af6915d4493add683eb390c">GetAllocator</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Elements.<a class="code hl_function" href="../../d9/d4c/classpl_deque_base.htm#aa5fe7a8f8bb9e0ef2719ca74eb6d1eb5">GetAllocator</a>(); }</div>
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno">  339</span> </div>
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno">  341</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a4b629b43b77f5f089d2bb963947343f2">operator==</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d9/dbe/classpl_map_base.htm">plMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno">  342</span>  PL_ADD_DEFAULT_OPERATOR_NOTEQUAL(<span class="keyword">const</span> <a class="code hl_class" href="../../d9/dbe/classpl_map_base.htm">plMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp;);</div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span> </div>
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno"><a class="line" href="../../d9/dbe/classpl_map_base.htm#a535d608aaab6cdeca2628c88841691dd">  345</a></span>  plUInt64 <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a535d608aaab6cdeca2628c88841691dd">GetHeapMemoryUsage</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Elements.<a class="code hl_function" href="../../d9/d4c/classpl_deque_base.htm#a57681ba27c144e88b9677a5d44f15947">GetHeapMemoryUsage</a>(); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span> </div>
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno">  348</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a9a311f73ffbb7f917ad665d57c961248">Swap</a>(<a class="code hl_class" href="../../d9/dbe/classpl_map_base.htm">plMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; other); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno">  349</span> </div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span>  Node* Internal_Find(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>;</div>
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno">  353</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno">  354</span>  Node* Internal_LowerBound(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>;</div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno">  355</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span>  Node* Internal_UpperBound(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>;</div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span> </div>
<div class="line"><a id="l00358" name="l00358"></a><span class="lineno">  358</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span>  <span class="keywordtype">void</span> Constructor();</div>
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno">  360</span> </div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno">  362</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno">  363</span>  Node* AcquireNode(CompatibleKeyType&amp;&amp; key, ValueType&amp;&amp; value, plUInt8 uiLevel, Node* pParent);</div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span> </div>
<div class="line"><a id="l00366" name="l00366"></a><span class="lineno">  366</span>  <span class="keywordtype">void</span> ReleaseNode(Node* pNode);</div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span> </div>
<div class="line"><a id="l00368" name="l00368"></a><span class="lineno">  368</span>  <span class="comment">// \brief Red-Black Tree stuff(Anderson Tree to be exact).</span></div>
<div class="line"><a id="l00369" name="l00369"></a><span class="lineno">  369</span>  <span class="comment">// Code taken from here: http://eternallyconfuzzled.com/tuts/datastructures/jsw_tut_andersson.aspx</span></div>
<div class="line"><a id="l00370" name="l00370"></a><span class="lineno">  370</span>  Node* SkewNode(Node* root);</div>
<div class="line"><a id="l00371" name="l00371"></a><span class="lineno">  371</span>  Node* SplitNode(Node* root);</div>
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno">  372</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a6c58266978a54ec4697ba4a981c1b80b">Insert</a>(<span class="keyword">const</span> KeyType&amp; key, <span class="keyword">const</span> ValueType&amp; value, Node*&amp; pInsertedNode);</div>
<div class="line"><a id="l00373" name="l00373"></a><span class="lineno">  373</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno">  374</span>  Node* <a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a70634f90fcf604ed5e48d867cabd532e">Remove</a>(Node* root, <span class="keyword">const</span> CompatibleKeyType&amp; key, <span class="keywordtype">bool</span>&amp; bRemoved);</div>
<div class="line"><a id="l00375" name="l00375"></a><span class="lineno">  375</span> </div>
<div class="line"><a id="l00377" name="l00377"></a><span class="lineno">  377</span>  Node* GetLeftMost() <span class="keyword">const</span>;</div>
<div class="line"><a id="l00378" name="l00378"></a><span class="lineno">  378</span> </div>
<div class="line"><a id="l00380" name="l00380"></a><span class="lineno">  380</span>  Node* GetRightMost() <span class="keyword">const</span>;</div>
<div class="line"><a id="l00381" name="l00381"></a><span class="lineno">  381</span> </div>
<div class="line"><a id="l00383" name="l00383"></a><span class="lineno">  383</span>  <span class="keywordtype">void</span> SwapNilNode(Node*&amp; pCurNode, NilNode* pOld, NilNode* pNew);</div>
<div class="line"><a id="l00384" name="l00384"></a><span class="lineno">  384</span> </div>
<div class="line"><a id="l00386" name="l00386"></a><span class="lineno">  386</span>  Node* m_pRoot;</div>
<div class="line"><a id="l00387" name="l00387"></a><span class="lineno">  387</span> </div>
<div class="line"><a id="l00389" name="l00389"></a><span class="lineno">  389</span>  Node* m_pFreeElementStack;</div>
<div class="line"><a id="l00390" name="l00390"></a><span class="lineno">  390</span> </div>
<div class="line"><a id="l00392" name="l00392"></a><span class="lineno">  392</span>  NilNode m_NilNode;</div>
<div class="line"><a id="l00393" name="l00393"></a><span class="lineno">  393</span> </div>
<div class="line"><a id="l00395" name="l00395"></a><span class="lineno">  395</span>  <a class="code hl_class" href="../../d7/de8/classpl_deque.htm">plDeque&lt;Node, plNullAllocatorWrapper, false&gt;</a> m_Elements;</div>
<div class="line"><a id="l00396" name="l00396"></a><span class="lineno">  396</span> </div>
<div class="line"><a id="l00398" name="l00398"></a><span class="lineno">  398</span>  plUInt32 m_uiCount;</div>
<div class="line"><a id="l00399" name="l00399"></a><span class="lineno">  399</span> </div>
<div class="line"><a id="l00401" name="l00401"></a><span class="lineno">  401</span>  Comparer m_Comparer;</div>
<div class="line"><a id="l00402" name="l00402"></a><span class="lineno">  402</span>};</div>
</div>
<div class="line"><a id="l00403" name="l00403"></a><span class="lineno">  403</span> </div>
<div class="line"><a id="l00404" name="l00404"></a><span class="lineno">  404</span> </div>
<div class="line"><a id="l00406" name="l00406"></a><span class="lineno">  406</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer = plCompareHelper&lt;KeyType&gt;, <span class="keyword">typename</span> AllocatorWrapper = plDefaultAllocatorWrapper&gt;</div>
<div class="foldopen" id="foldopen00407" data-start="{" data-end="};">
<div class="line"><a id="l00407" name="l00407"></a><span class="lineno"><a class="line" href="../../d9/d50/classpl_map.htm">  407</a></span><span class="keyword">class </span><a class="code hl_class" href="../../d9/d50/classpl_map.htm">plMap</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../d9/dbe/classpl_map_base.htm">plMapBase</a>&lt;KeyType, ValueType, Comparer&gt;</div>
<div class="line"><a id="l00408" name="l00408"></a><span class="lineno">  408</span>{</div>
<div class="line"><a id="l00409" name="l00409"></a><span class="lineno">  409</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00410" name="l00410"></a><span class="lineno">  410</span>  <a class="code hl_class" href="../../d9/d50/classpl_map.htm">plMap</a>();</div>
<div class="line"><a id="l00411" name="l00411"></a><span class="lineno">  411</span>  <span class="keyword">explicit</span> <a class="code hl_class" href="../../d9/d50/classpl_map.htm">plMap</a>(<a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator);</div>
<div class="line"><a id="l00412" name="l00412"></a><span class="lineno">  412</span>  <a class="code hl_class" href="../../d9/d50/classpl_map.htm">plMap</a>(<span class="keyword">const</span> Comparer&amp; comparer, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator);</div>
<div class="line"><a id="l00413" name="l00413"></a><span class="lineno">  413</span> </div>
<div class="line"><a id="l00414" name="l00414"></a><span class="lineno">  414</span>  <a class="code hl_class" href="../../d9/d50/classpl_map.htm">plMap</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d9/d50/classpl_map.htm">plMap&lt;KeyType, ValueType, Comparer, AllocatorWrapper&gt;</a>&amp; other);</div>
<div class="line"><a id="l00415" name="l00415"></a><span class="lineno">  415</span>  <a class="code hl_class" href="../../d9/d50/classpl_map.htm">plMap</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d9/dbe/classpl_map_base.htm">plMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; other);</div>
<div class="line"><a id="l00416" name="l00416"></a><span class="lineno">  416</span> </div>
<div class="line"><a id="l00417" name="l00417"></a><span class="lineno">  417</span>  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code hl_class" href="../../d9/d50/classpl_map.htm">plMap&lt;KeyType, ValueType, Comparer, AllocatorWrapper&gt;</a>&amp; rhs);</div>
<div class="line"><a id="l00418" name="l00418"></a><span class="lineno">  418</span>  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code hl_class" href="../../d9/dbe/classpl_map_base.htm">plMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; rhs);</div>
<div class="line"><a id="l00419" name="l00419"></a><span class="lineno">  419</span>};</div>
</div>
<div class="line"><a id="l00420" name="l00420"></a><span class="lineno">  420</span> </div>
<div class="line"><a id="l00421" name="l00421"></a><span class="lineno">  421</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a id="l00422" name="l00422"></a><span class="lineno">  422</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">plMapBase&lt;KeyType, ValueType, Comparer&gt;::Iterator</a> begin(<a class="code hl_class" href="../../d9/dbe/classpl_map_base.htm">plMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; ref_container)</div>
<div class="line"><a id="l00423" name="l00423"></a><span class="lineno">  423</span>{</div>
<div class="line"><a id="l00424" name="l00424"></a><span class="lineno">  424</span>  <span class="keywordflow">return</span> ref_container.<a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a8f38cc470721aee5fd73ceddfbd79064">GetIterator</a>();</div>
<div class="line"><a id="l00425" name="l00425"></a><span class="lineno">  425</span>}</div>
<div class="line"><a id="l00426" name="l00426"></a><span class="lineno">  426</span> </div>
<div class="line"><a id="l00427" name="l00427"></a><span class="lineno">  427</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a id="l00428" name="l00428"></a><span class="lineno">  428</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">plMapBase&lt;KeyType, ValueType, Comparer&gt;::ConstIterator</a> begin(<span class="keyword">const</span> <a class="code hl_class" href="../../d9/dbe/classpl_map_base.htm">plMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; container)</div>
<div class="line"><a id="l00429" name="l00429"></a><span class="lineno">  429</span>{</div>
<div class="line"><a id="l00430" name="l00430"></a><span class="lineno">  430</span>  <span class="keywordflow">return</span> container.<a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a8f38cc470721aee5fd73ceddfbd79064">GetIterator</a>();</div>
<div class="line"><a id="l00431" name="l00431"></a><span class="lineno">  431</span>}</div>
<div class="line"><a id="l00432" name="l00432"></a><span class="lineno">  432</span> </div>
<div class="line"><a id="l00433" name="l00433"></a><span class="lineno">  433</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a id="l00434" name="l00434"></a><span class="lineno">  434</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">plMapBase&lt;KeyType, ValueType, Comparer&gt;::ConstIterator</a> cbegin(<span class="keyword">const</span> <a class="code hl_class" href="../../d9/dbe/classpl_map_base.htm">plMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; container)</div>
<div class="line"><a id="l00435" name="l00435"></a><span class="lineno">  435</span>{</div>
<div class="line"><a id="l00436" name="l00436"></a><span class="lineno">  436</span>  <span class="keywordflow">return</span> container.<a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a8f38cc470721aee5fd73ceddfbd79064">GetIterator</a>();</div>
<div class="line"><a id="l00437" name="l00437"></a><span class="lineno">  437</span>}</div>
<div class="line"><a id="l00438" name="l00438"></a><span class="lineno">  438</span> </div>
<div class="line"><a id="l00439" name="l00439"></a><span class="lineno">  439</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a id="l00440" name="l00440"></a><span class="lineno">  440</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">plMapBase&lt;KeyType, ValueType, Comparer&gt;::Iterator</a> end(<a class="code hl_class" href="../../d9/dbe/classpl_map_base.htm">plMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; ref_container)</div>
<div class="line"><a id="l00441" name="l00441"></a><span class="lineno">  441</span>{</div>
<div class="line"><a id="l00442" name="l00442"></a><span class="lineno">  442</span>  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">plMapBase&lt;KeyType, ValueType, Comparer&gt;::Iterator</a>();</div>
<div class="line"><a id="l00443" name="l00443"></a><span class="lineno">  443</span>}</div>
<div class="line"><a id="l00444" name="l00444"></a><span class="lineno">  444</span> </div>
<div class="line"><a id="l00445" name="l00445"></a><span class="lineno">  445</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a id="l00446" name="l00446"></a><span class="lineno">  446</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">plMapBase&lt;KeyType, ValueType, Comparer&gt;::ConstIterator</a> end(<span class="keyword">const</span> <a class="code hl_class" href="../../d9/dbe/classpl_map_base.htm">plMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; container)</div>
<div class="line"><a id="l00447" name="l00447"></a><span class="lineno">  447</span>{</div>
<div class="line"><a id="l00448" name="l00448"></a><span class="lineno">  448</span>  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">plMapBase&lt;KeyType, ValueType, Comparer&gt;::ConstIterator</a>();</div>
<div class="line"><a id="l00449" name="l00449"></a><span class="lineno">  449</span>}</div>
<div class="line"><a id="l00450" name="l00450"></a><span class="lineno">  450</span> </div>
<div class="line"><a id="l00451" name="l00451"></a><span class="lineno">  451</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a id="l00452" name="l00452"></a><span class="lineno">  452</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">plMapBase&lt;KeyType, ValueType, Comparer&gt;::ConstIterator</a> cend(<span class="keyword">const</span> <a class="code hl_class" href="../../d9/dbe/classpl_map_base.htm">plMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; container)</div>
<div class="line"><a id="l00453" name="l00453"></a><span class="lineno">  453</span>{</div>
<div class="line"><a id="l00454" name="l00454"></a><span class="lineno">  454</span>  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">plMapBase&lt;KeyType, ValueType, Comparer&gt;::ConstIterator</a>();</div>
<div class="line"><a id="l00455" name="l00455"></a><span class="lineno">  455</span>}</div>
<div class="line"><a id="l00456" name="l00456"></a><span class="lineno">  456</span> </div>
<div class="line"><a id="l00457" name="l00457"></a><span class="lineno">  457</span><span class="preprocessor">#include &lt;Foundation/Containers/Implementation/Map_inl.h&gt;</span></div>
<div class="ttc" id="aclasspl_allocator_htm"><div class="ttname"><a href="../../da/df3/classpl_allocator.htm">plAllocator</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition</b> Allocator.h:23</div></div>
<div class="ttc" id="aclasspl_deque_base_htm_a57681ba27c144e88b9677a5d44f15947"><div class="ttname"><a href="../../d9/d4c/classpl_deque_base.htm#a57681ba27c144e88b9677a5d44f15947">plDequeBase::GetHeapMemoryUsage</a></div><div class="ttdeci">plUInt64 GetHeapMemoryUsage() const</div><div class="ttdoc">Returns the amount of bytes that are currently allocated on the heap.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:970</div></div>
<div class="ttc" id="aclasspl_deque_base_htm_aa5fe7a8f8bb9e0ef2719ca74eb6d1eb5"><div class="ttname"><a href="../../d9/d4c/classpl_deque_base.htm#aa5fe7a8f8bb9e0ef2719ca74eb6d1eb5">plDequeBase::GetAllocator</a></div><div class="ttdeci">plAllocator * GetAllocator() const</div><div class="ttdoc">Returns the allocator that is used by this instance.</div><div class="ttdef"><b>Definition</b> Deque.h:168</div></div>
<div class="ttc" id="aclasspl_deque_htm"><div class="ttname"><a href="../../d7/de8/classpl_deque.htm">plDeque</a></div><div class="ttdef"><b>Definition</b> Deque.h:270</div></div>
<div class="ttc" id="aclasspl_map_base_htm"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm">plMapBase</a></div><div class="ttdoc">An associative container. Similar to STL::map.</div><div class="ttdef"><b>Definition</b> Map.h:193</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a038ae61aac3d268ee637b8069fff8b79"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a038ae61aac3d268ee637b8069fff8b79">plMapBase::Contains</a></div><div class="ttdeci">bool Contains(const CompatibleKeyType &amp;key) const</div><div class="ttdoc">Checks whether the given key is in the container.</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a08587ef06af6915d4493add683eb390c"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a08587ef06af6915d4493add683eb390c">plMapBase::GetAllocator</a></div><div class="ttdeci">plAllocator * GetAllocator() const</div><div class="ttdoc">Returns the allocator that is used by this instance.</div><div class="ttdef"><b>Definition</b> Map.h:338</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a1c8ae402009ca98a62b7e57fce8da46d"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a1c8ae402009ca98a62b7e57fce8da46d">plMapBase::UpperBound</a></div><div class="ttdeci">ConstIterator UpperBound(const CompatibleKeyType &amp;key) const</div><div class="ttdoc">Returns an Iterator to the element with a key that is LARGER than the given key. Returns an invalid i...</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a279536d38132faa38825432d5e37ae21"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a279536d38132faa38825432d5e37ae21">plMapBase::Find</a></div><div class="ttdeci">Iterator Find(const CompatibleKeyType &amp;key)</div><div class="ttdoc">Searches for key, returns an Iterator to it or an invalid iterator, if no such key is found....</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a41a4177e7e2b472c746227615fd1b3b7"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a41a4177e7e2b472c746227615fd1b3b7">plMapBase::Find</a></div><div class="ttdeci">ConstIterator Find(const CompatibleKeyType &amp;key) const</div><div class="ttdoc">Searches for key, returns an Iterator to it or an invalid iterator, if no such key is found....</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a4781441e042445a110a5f31fe570a639"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a4781441e042445a110a5f31fe570a639">plMapBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Destroys all elements in the map and resets its size to zero.</div><div class="ttdef"><b>Definition</b> Map_inl.h:175</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a48616ebe02686a94d9ac03eeb07d33e2"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a48616ebe02686a94d9ac03eeb07d33e2">plMapBase::~plMapBase</a></div><div class="ttdeci">~plMapBase()</div><div class="ttdoc">Destroys all elements from the map.</div><div class="ttdef"><b>Definition</b> Map_inl.h:160</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a4b629b43b77f5f089d2bb963947343f2"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a4b629b43b77f5f089d2bb963947343f2">plMapBase::operator==</a></div><div class="ttdeci">bool operator==(const plMapBase&lt; KeyType, ValueType, Comparer &gt; &amp;rhs) const</div><div class="ttdoc">Comparison operator.</div><div class="ttdef"><b>Definition</b> Map_inl.h:804</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a535d608aaab6cdeca2628c88841691dd"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a535d608aaab6cdeca2628c88841691dd">plMapBase::GetHeapMemoryUsage</a></div><div class="ttdeci">plUInt64 GetHeapMemoryUsage() const</div><div class="ttdoc">Returns the amount of bytes that are currently allocated on the heap.</div><div class="ttdef"><b>Definition</b> Map.h:345</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a5a1ffdef36aac6973903da9b8de0ec2a"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a5a1ffdef36aac6973903da9b8de0ec2a">plMapBase::TryGetValue</a></div><div class="ttdeci">bool TryGetValue(const CompatibleKeyType &amp;key, ValueType &amp;out_value) const</div><div class="ttdoc">Returns whether an entry with the given key was found and if found writes out the corresponding value...</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a5bee4eaab7d49005eba4c3387d37541d"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a5bee4eaab7d49005eba4c3387d37541d">plMapBase::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns whether there are no elements in the map. O(1) operation.</div><div class="ttdef"><b>Definition</b> Map_inl.h:194</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a5d1160f85c4c9e36666c1efd2c9d7f73"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a5d1160f85c4c9e36666c1efd2c9d7f73">plMapBase::LowerBound</a></div><div class="ttdeci">Iterator LowerBound(const CompatibleKeyType &amp;key)</div><div class="ttdoc">Returns an Iterator to the element with a key equal or larger than the given key. Returns an invalid ...</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a632300492d4f3c9390a61d58f6cb4758"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a632300492d4f3c9390a61d58f6cb4758">plMapBase::operator[]</a></div><div class="ttdeci">ValueType &amp; operator[](const CompatibleKeyType &amp;key)</div><div class="ttdoc">Allows read/write access to the value stored under the given key. If there is no such key,...</div><div class="ttdef"><b>Definition</b> Map_inl.h:450</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a6ac11bae58d9463d029b4f55e2057ad5"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a6ac11bae58d9463d029b4f55e2057ad5">plMapBase::GetReverseIterator</a></div><div class="ttdeci">ReverseIterator GetReverseIterator()</div><div class="ttdoc">Returns a ReverseIterator to the very last element.</div><div class="ttdef"><b>Definition</b> Map_inl.h:219</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a6c58266978a54ec4697ba4a981c1b80b"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a6c58266978a54ec4697ba4a981c1b80b">plMapBase::Insert</a></div><div class="ttdeci">Iterator Insert(CompatibleKeyType &amp;&amp;key, CompatibleValueType &amp;&amp;value)</div><div class="ttdoc">Inserts the key/value pair into the tree and returns an Iterator to it. O(log n) operation.</div><div class="ttdef"><b>Definition</b> Map_inl.h:535</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a70634f90fcf604ed5e48d867cabd532e"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a70634f90fcf604ed5e48d867cabd532e">plMapBase::Remove</a></div><div class="ttdeci">bool Remove(const CompatibleKeyType &amp;key)</div><div class="ttdoc">Erases the key/value pair with the given key, if it exists. O(log n) operation.</div><div class="ttdef"><b>Definition</b> Map_inl.h:545</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a7836b1f7942107dbda516f8ab84acc3c"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a7836b1f7942107dbda516f8ab84acc3c">plMapBase::GetCount</a></div><div class="ttdeci">plUInt32 GetCount() const</div><div class="ttdoc">Returns the number of elements currently stored in the map. O(1) operation.</div><div class="ttdef"><b>Definition</b> Map_inl.h:200</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a7b122c28aeba0192fbfba01001d61b75"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a7b122c28aeba0192fbfba01001d61b75">plMapBase::FindOrAdd</a></div><div class="ttdeci">Iterator FindOrAdd(CompatibleKeyType &amp;&amp;key, bool *out_pExisted=nullptr)</div><div class="ttdoc">Searches for the given key and returns an iterator to it. If it did not exist yet,...</div><div class="ttdef"><b>Definition</b> Map_inl.h:457</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a7be4a03b4d477d14abfcdf06727e06fc"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a7be4a03b4d477d14abfcdf06727e06fc">plMapBase::GetValue</a></div><div class="ttdeci">const ValueType * GetValue(const CompatibleKeyType &amp;key) const</div><div class="ttdoc">Returns a pointer to the value of the entry with the given key if found, otherwise returns nullptr.</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a8d8bf9ca79ff5233bb09054f3a4d9d7c"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a8d8bf9ca79ff5233bb09054f3a4d9d7c">plMapBase::TryGetValue</a></div><div class="ttdeci">bool TryGetValue(const CompatibleKeyType &amp;key, ValueType *&amp;out_pValue) const</div><div class="ttdoc">Returns whether an entry with the given key was found and if found writes out the pointer to the corr...</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a8f38cc470721aee5fd73ceddfbd79064"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a8f38cc470721aee5fd73ceddfbd79064">plMapBase::GetIterator</a></div><div class="ttdeci">Iterator GetIterator()</div><div class="ttdoc">Returns an Iterator to the very first element.</div><div class="ttdef"><b>Definition</b> Map_inl.h:207</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a9809e273e5ba5c48b7be9ac4f2e06013"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a9809e273e5ba5c48b7be9ac4f2e06013">plMapBase::operator=</a></div><div class="ttdeci">void operator=(const plMapBase&lt; KeyType, ValueType, Comparer &gt; &amp;rhs)</div><div class="ttdoc">Copies all key/value pairs from the given map into this one.</div><div class="ttdef"><b>Definition</b> Map_inl.h:166</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a9a311f73ffbb7f917ad665d57c961248"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a9a311f73ffbb7f917ad665d57c961248">plMapBase::Swap</a></div><div class="ttdeci">void Swap(plMapBase&lt; KeyType, ValueType, Comparer &gt; &amp;other)</div><div class="ttdoc">Swaps this map with the other one.</div><div class="ttdef"><b>Definition</b> Map_inl.h:873</div></div>
<div class="ttc" id="aclasspl_map_base_htm_abf459d880c010ca7d61808bff8b3afd2"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#abf459d880c010ca7d61808bff8b3afd2">plMapBase::GetValue</a></div><div class="ttdeci">ValueType * GetValue(const CompatibleKeyType &amp;key)</div><div class="ttdoc">Returns a pointer to the value of the entry with the given key if found, otherwise returns nullptr.</div></div>
<div class="ttc" id="aclasspl_map_base_htm_ac24bfa33be79545a3745c3bb5c219967"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#ac24bfa33be79545a3745c3bb5c219967">plMapBase::plMapBase</a></div><div class="ttdeci">plMapBase(const Comparer &amp;comparer, plAllocator *pAllocator)</div><div class="ttdoc">Initializes the map to be empty.</div><div class="ttdef"><b>Definition</b> Map_inl.h:143</div></div>
<div class="ttc" id="aclasspl_map_base_htm_ac5d444d275fdfd9531961373cc0df257"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#ac5d444d275fdfd9531961373cc0df257">plMapBase::LowerBound</a></div><div class="ttdeci">ConstIterator LowerBound(const CompatibleKeyType &amp;key) const</div><div class="ttdoc">Returns an Iterator to the element with a key equal or larger than the given key. Returns an invalid ...</div></div>
<div class="ttc" id="aclasspl_map_base_htm_ac6a86c64b4c9288757b309bccf89dc1b"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#ac6a86c64b4c9288757b309bccf89dc1b">plMapBase::GetValueOrDefault</a></div><div class="ttdeci">const ValueType &amp; GetValueOrDefault(const CompatibleKeyType &amp;key, const ValueType &amp;defaultValue) const</div><div class="ttdoc">Either returns the value of the entry with the given key, if found, or the provided default value.</div></div>
<div class="ttc" id="aclasspl_map_base_htm_accd65f874df0ae04c6273323dba8cb23"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#accd65f874df0ae04c6273323dba8cb23">plMapBase::UpperBound</a></div><div class="ttdeci">Iterator UpperBound(const CompatibleKeyType &amp;key)</div><div class="ttdoc">Returns an Iterator to the element with a key that is LARGER than the given key. Returns an invalid i...</div></div>
<div class="ttc" id="aclasspl_map_base_htm_af7b2140fd6c972a8b1b282686cfa300c"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#af7b2140fd6c972a8b1b282686cfa300c">plMapBase::TryGetValue</a></div><div class="ttdeci">bool TryGetValue(const CompatibleKeyType &amp;key, const ValueType *&amp;out_pValue) const</div><div class="ttdoc">Returns whether an entry with the given key was found and if found writes out the pointer to the corr...</div></div>
<div class="ttc" id="aclasspl_map_htm"><div class="ttname"><a href="../../d9/d50/classpl_map.htm">plMap</a></div><div class="ttdef"><b>Definition</b> Map.h:408</div></div>
<div class="ttc" id="astructpl_map_base_const_iterator_base_htm"><div class="ttname"><a href="../../d9/dad/structpl_map_base_const_iterator_base.htm">plMapBaseConstIteratorBase</a></div><div class="ttdoc">Base class for all iterators.</div><div class="ttdef"><b>Definition</b> Map.h:11</div></div>
<div class="ttc" id="astructpl_map_base_const_iterator_base_htm_a2aedce40c8229c1365f0815b1a3a80ab"><div class="ttname"><a href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a2aedce40c8229c1365f0815b1a3a80ab">plMapBaseConstIteratorBase::operator==</a></div><div class="ttdeci">PL_ALWAYS_INLINE bool operator==(const plMapBaseConstIteratorBase &amp;it2) const</div><div class="ttdoc">Checks whether the two iterators point to the same element.</div><div class="ttdef"><b>Definition</b> Map.h:30</div></div>
<div class="ttc" id="astructpl_map_base_const_iterator_base_htm_a36468855199076bf69a567c64da9622e"><div class="ttname"><a href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a36468855199076bf69a567c64da9622e">plMapBaseConstIteratorBase::IsValid</a></div><div class="ttdeci">PL_ALWAYS_INLINE bool IsValid() const</div><div class="ttdoc">Checks whether this iterator points to a valid element.</div><div class="ttdef"><b>Definition</b> Map.h:27</div></div>
<div class="ttc" id="astructpl_map_base_const_iterator_base_htm_a3f3349c21df2dc2b402a39a460ff451c"><div class="ttname"><a href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a3f3349c21df2dc2b402a39a460ff451c">plMapBaseConstIteratorBase::Key</a></div><div class="ttdeci">PL_FORCE_INLINE const KeyType &amp; Key() const</div><div class="ttdoc">Returns the 'key' of the element that this iterator points to.</div><div class="ttdef"><b>Definition</b> Map.h:34</div></div>
<div class="ttc" id="astructpl_map_base_const_iterator_base_htm_a7b9b7758dd1f6394a0b53c68cb7a865b"><div class="ttname"><a href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a7b9b7758dd1f6394a0b53c68cb7a865b">plMapBaseConstIteratorBase::Prev</a></div><div class="ttdeci">void Prev()</div><div class="ttdoc">Advances the iterator to the previous element in the map. The iterator will not be valid anymore,...</div><div class="ttdef"><b>Definition</b> Map_inl.h:71</div></div>
<div class="ttc" id="astructpl_map_base_const_iterator_base_htm_a88107606ab8d93405030f4fa3a9512d2"><div class="ttname"><a href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a88107606ab8d93405030f4fa3a9512d2">plMapBaseConstIteratorBase::Value</a></div><div class="ttdeci">PL_FORCE_INLINE const ValueType &amp; Value() const</div><div class="ttdoc">Returns the 'value' of the element that this iterator points to.</div><div class="ttdef"><b>Definition</b> Map.h:41</div></div>
<div class="ttc" id="astructpl_map_base_const_iterator_base_htm_a9ddfeaeb853a78514f0c0df682c69491"><div class="ttname"><a href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a9ddfeaeb853a78514f0c0df682c69491">plMapBaseConstIteratorBase::operator--</a></div><div class="ttdeci">PL_ALWAYS_INLINE void operator--()</div><div class="ttdoc">Shorthand for 'Prev'.</div><div class="ttdef"><b>Definition</b> Map.h:60</div></div>
<div class="ttc" id="astructpl_map_base_const_iterator_base_htm_aaf4697c800c1c2a53f502b66320ea501"><div class="ttname"><a href="../../d9/dad/structpl_map_base_const_iterator_base.htm#aaf4697c800c1c2a53f502b66320ea501">plMapBaseConstIteratorBase::operator*</a></div><div class="ttdeci">PL_ALWAYS_INLINE plMapBaseConstIteratorBase &amp; operator*()</div><div class="ttdoc">Returns '*this' to enable foreach.</div><div class="ttdef"><b>Definition</b> Map.h:48</div></div>
<div class="ttc" id="astructpl_map_base_const_iterator_base_htm_ac8ba8c1a61d22a51c6206c89d6bd7ebe"><div class="ttname"><a href="../../d9/dad/structpl_map_base_const_iterator_base.htm#ac8ba8c1a61d22a51c6206c89d6bd7ebe">plMapBaseConstIteratorBase::operator++</a></div><div class="ttdeci">PL_ALWAYS_INLINE void operator++()</div><div class="ttdoc">Shorthand for 'Next'.</div><div class="ttdef"><b>Definition</b> Map.h:57</div></div>
<div class="ttc" id="astructpl_map_base_const_iterator_base_htm_adf9b6f67cacc9f8ad12ec51dfb95651c"><div class="ttname"><a href="../../d9/dad/structpl_map_base_const_iterator_base.htm#adf9b6f67cacc9f8ad12ec51dfb95651c">plMapBaseConstIteratorBase::plMapBaseConstIteratorBase</a></div><div class="ttdeci">PL_ALWAYS_INLINE plMapBaseConstIteratorBase()</div><div class="ttdoc">Constructs an invalid iterator.</div><div class="ttdef"><b>Definition</b> Map.h:21</div></div>
<div class="ttc" id="astructpl_map_base_const_iterator_base_htm_aef51325c470224170af4c0b49ac32eb2"><div class="ttname"><a href="../../d9/dad/structpl_map_base_const_iterator_base.htm#aef51325c470224170af4c0b49ac32eb2">plMapBaseConstIteratorBase::Next</a></div><div class="ttdeci">void Next()</div><div class="ttdoc">Advances the iterator to the next element in the map. The iterator will not be valid anymore,...</div><div class="ttdef"><b>Definition</b> Map_inl.h:58</div></div>
<div class="ttc" id="astructpl_map_base_iterator_base_htm"><div class="ttname"><a href="../../d3/d91/structpl_map_base_iterator_base.htm">plMapBaseIteratorBase</a></div><div class="ttdoc">Forward Iterator to iterate over all elements in sorted order.</div><div class="ttdef"><b>Definition</b> Map.h:103</div></div>
<div class="ttc" id="astructpl_map_base_iterator_base_htm_a260b6aee46ca1622d97aa3f3d1147370"><div class="ttname"><a href="../../d3/d91/structpl_map_base_iterator_base.htm#a260b6aee46ca1622d97aa3f3d1147370">plMapBaseIteratorBase::plMapBaseIteratorBase</a></div><div class="ttdeci">PL_ALWAYS_INLINE plMapBaseIteratorBase()</div><div class="ttdoc">Constructs an invalid iterator.</div><div class="ttdef"><b>Definition</b> Map.h:113</div></div>
<div class="ttc" id="astructpl_map_base_iterator_base_htm_a50f1d0493b7739ec5582de465db17930"><div class="ttname"><a href="../../d3/d91/structpl_map_base_iterator_base.htm#a50f1d0493b7739ec5582de465db17930">plMapBaseIteratorBase::operator*</a></div><div class="ttdeci">PL_ALWAYS_INLINE plMapBaseIteratorBase &amp; operator*()</div><div class="ttdoc">Returns '*this' to enable foreach.</div><div class="ttdef"><b>Definition</b> Map.h:133</div></div>
<div class="ttc" id="astructpl_map_base_iterator_base_htm_a9333a4fbb0f1b33a2e1ec38150fc59aa"><div class="ttname"><a href="../../d3/d91/structpl_map_base_iterator_base.htm#a9333a4fbb0f1b33a2e1ec38150fc59aa">plMapBaseIteratorBase::Value</a></div><div class="ttdeci">PL_FORCE_INLINE ValueType &amp; Value() const</div><div class="ttdoc">Returns the 'value' of the element that this iterator points to.</div><div class="ttdef"><b>Definition</b> Map.h:126</div></div>
<div class="ttc" id="astructpl_map_base_iterator_base_htm_ac5c5b9eaafa638ce83a1b21df77ac329"><div class="ttname"><a href="../../d3/d91/structpl_map_base_iterator_base.htm#ac5c5b9eaafa638ce83a1b21df77ac329">plMapBaseIteratorBase::Value</a></div><div class="ttdeci">PL_FORCE_INLINE ValueType &amp; Value()</div><div class="ttdoc">Returns the 'value' of the element that this iterator points to.</div><div class="ttdef"><b>Definition</b> Map.h:119</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_3416883c1320ec68c4d0694befd114fc.htm">Containers</a></li><li class="navelem"><b>Map.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
