<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<!-- BEGIN opengraph metadata -->
<meta property="og:title" content="Doxygen Awesome" />
<meta property="og:image" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta property="og:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<meta property="og:url" content="https://jothepro.github.io/doxygen-awesome-css/" />
<!-- END opengraph metadata -->
<!-- BEGIN twitter metadata -->
<meta name="twitter:image:src" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta name="twitter:title" content="Doxygen Awesome" />
<meta name="twitter:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<!-- END twitter metadata -->
<title>Plasma Engine: Code/Engine/Foundation/Containers/Blob.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link rel="icon" type="image/svg+xml" href="logo.drawio.svg"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-paragraph-link.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-tabs.js"></script>
<script type="text/javascript" src="../../toggle-alternative-theme.js"></script>
<script type="text/javascript">
    DoxygenAwesomeFragmentCopyButton.init()
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeParagraphLink.init()
    DoxygenAwesomeInteractiveToc.init()
    DoxygenAwesomeTabs.init()
</script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Plasma Engine
   &#160;<span id="projectnumber">2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d3/da9/_blob_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Blob.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span> </div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span> </div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="preprocessor">#include &lt;Foundation/Basics.h&gt;</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#include &lt;Foundation/Types/ArrayPtr.h&gt;</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span> </div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00012" data-start="{" data-end="};">
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm">   12</a></span><span class="keyword">class </span><a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr</a></div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>{</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span>  PL_DECLARE_POD_TYPE();</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span> </div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>  <span class="keyword">static_assert</span>(!std::is_same_v&lt;T, void&gt;, <span class="stringliteral">&quot;plBlobPtr&lt;void&gt; is not allowed (anymore)&quot;</span>);</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>  <span class="keyword">static_assert</span>(!std::is_same_v&lt;T, const void&gt;, <span class="stringliteral">&quot;plBlobPtr&lt;void&gt; is not allowed (anymore)&quot;</span>);</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span> </div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>  <span class="keyword">using </span>ByteType = <span class="keyword">typename</span> plArrayPtrDetail::ByteTypeHelper&lt;T&gt;::type;</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>  <span class="keyword">using </span>ValueType = T;</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>  <span class="keyword">using </span>PointerType = T*;</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span> </div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#afe46fe80e88646a92fa5cac2067e018d">   25</a></span>  <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afe46fe80e88646a92fa5cac2067e018d">plBlobPtr</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span> </div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div>
<div class="foldopen" id="foldopen00029" data-start="{" data-end="}">
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#aed465fa2b13a791836eb1f31378e4fc3">   29</a></span>  <span class="keyword">inline</span> <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#aed465fa2b13a791836eb1f31378e4fc3">plBlobPtr</a>(U* pPtr, plUInt64 uiCount)</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>    : m_pPtr(pPtr)</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>    , m_uiCount(uiCount)</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span>  {</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>    <span class="comment">// If any of the arguments is invalid, we invalidate ourself.</span></div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>    <span class="keywordflow">if</span> (m_pPtr == <span class="keyword">nullptr</span> || m_uiCount == 0)</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span>    {</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>      m_pPtr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>      m_uiCount = 0;</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>    }</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>  }</div>
</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span> </div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>  <span class="keyword">template</span> &lt;<span class="keywordtype">size_t</span> N&gt;</div>
<div class="foldopen" id="foldopen00043" data-start="{" data-end="}">
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#a206c83c6aad1faa9339b97ea9c0fc6aa">   43</a></span>  PL_ALWAYS_INLINE <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#a206c83c6aad1faa9339b97ea9c0fc6aa">plBlobPtr</a>(ValueType (&amp;staticArray)[N])</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>    : m_pPtr(staticArray)</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>    , m_uiCount(static_cast&lt;plUInt64&gt;(N))</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>  {</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>  }</div>
</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span> </div>
<div class="foldopen" id="foldopen00050" data-start="{" data-end="}">
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#aa6f6ac0bc68d05851ff67eb0fa803b33">   50</a></span>  PL_ALWAYS_INLINE <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#aa6f6ac0bc68d05851ff67eb0fa803b33">plBlobPtr</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;T&gt;</a>&amp; other)</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>    : m_pPtr(other.m_pPtr)</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>    , m_uiCount(other.m_uiCount)</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span>  {</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>  }</div>
</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span> </div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#a1c6b9a0be65270417c4558b96d46022f">   57</a></span>  <span class="keyword">operator</span> <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afe46fe80e88646a92fa5cac2067e018d">plBlobPtr&lt;const T&gt;</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afe46fe80e88646a92fa5cac2067e018d">plBlobPtr&lt;const T&gt;</a>(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>T*<span class="keyword">&gt;</span>(<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>()), <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>()); }</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span> </div>
<div class="foldopen" id="foldopen00060" data-start="{" data-end="}">
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#a52c7c2be025f7d51bb42d5299df9f5f0">   60</a></span>  PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#a52c7c2be025f7d51bb42d5299df9f5f0">operator=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;T&gt;</a>&amp; other)</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>  {</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>    m_pPtr = other.m_pPtr;</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>    m_uiCount = other.m_uiCount;</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>  }</div>
</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span> </div>
<div class="foldopen" id="foldopen00067" data-start="{" data-end="}">
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#a3f0dd6cb4e640bf2337639da55c2e089">   67</a></span>  PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#a3f0dd6cb4e640bf2337639da55c2e089">Clear</a>()</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>  {</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>    m_pPtr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>    m_uiCount = 0;</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>  }</div>
</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span> </div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>  PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#a52c7c2be025f7d51bb42d5299df9f5f0">operator=</a>(std::nullptr_t)</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>  {</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>    m_pPtr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>    m_uiCount = 0;</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>  }</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span> </div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">   80</a></span>  PL_ALWAYS_INLINE PointerType <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pPtr; }</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span> </div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#ae069d876fd8a643d5923c0ad824e6c65">   83</a></span>  PL_ALWAYS_INLINE PointerType <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae069d876fd8a643d5923c0ad824e6c65">GetPtr</a>() { <span class="keywordflow">return</span> m_pPtr; }</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span> </div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#a9fd9d28329b47e424d4632472f714397">   86</a></span>  PL_ALWAYS_INLINE PointerType <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#a9fd9d28329b47e424d4632472f714397">GetEndPtr</a>() { <span class="keywordflow">return</span> m_pPtr + m_uiCount; }</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span> </div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#aaac51c404d02b0d8dcb39c88c37778c5">   89</a></span>  PL_ALWAYS_INLINE PointerType <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#aaac51c404d02b0d8dcb39c88c37778c5">GetEndPtr</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pPtr + m_uiCount; }</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span> </div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#af2e731f81087babac8c919d22f7ba210">   92</a></span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#af2e731f81087babac8c919d22f7ba210">IsEmpty</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>() == 0; }</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span> </div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">   95</a></span>  PL_ALWAYS_INLINE plUInt64 <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_uiCount; }</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span> </div>
<div class="foldopen" id="foldopen00098" data-start="{" data-end="}">
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#ad8b1fc0bef042c1cdd857ddc7ba5f0ad">   98</a></span>  PL_FORCE_INLINE <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;T&gt;</a> <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ad8b1fc0bef042c1cdd857ddc7ba5f0ad">GetSubArray</a>(plUInt64 uiStart, plUInt64 uiCount) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>  {</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>    PL_ASSERT_DEV(</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>      uiStart + uiCount &lt;= <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>(), <span class="stringliteral">&quot;uiStart+uiCount ({0}) has to be smaller or equal than the count ({1}).&quot;</span>, uiStart + uiCount, <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>());</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>    <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afe46fe80e88646a92fa5cac2067e018d">plBlobPtr&lt;T&gt;</a>(<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>() + uiStart, uiCount);</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>  }</div>
</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span> </div>
<div class="foldopen" id="foldopen00107" data-start="{" data-end="}">
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#a8caeb6e10f64409a01261489edad13c0">  107</a></span>  PL_FORCE_INLINE <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;T&gt;</a> <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#a8caeb6e10f64409a01261489edad13c0">GetSubArray</a>(plUInt64 uiStart) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>  {</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>    PL_ASSERT_DEV(uiStart &lt;= <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>(), <span class="stringliteral">&quot;uiStart ({0}) has to be smaller or equal than the count ({1}).&quot;</span>, uiStart, <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>());</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>    <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afe46fe80e88646a92fa5cac2067e018d">plBlobPtr&lt;T&gt;</a>(<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>() + uiStart, <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>() - uiStart);</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>  }</div>
</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span> </div>
<div class="foldopen" id="foldopen00114" data-start="{" data-end="}">
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#aa60c0bdc885357e8f9aa2fd2a1e1fb49">  114</a></span>  PL_ALWAYS_INLINE <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;const ByteType&gt;</a> <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#aa60c0bdc885357e8f9aa2fd2a1e1fb49">ToByteBlob</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>    <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afe46fe80e88646a92fa5cac2067e018d">plBlobPtr&lt;const ByteType&gt;</a>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>ByteType*<span class="keyword">&gt;</span>(<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>()), <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>() * <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>  }</div>
</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span> </div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#a9c0c3e72f6a8c631d9e8fc6bde68df60">  120</a></span>  PL_ALWAYS_INLINE <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;ByteType&gt;</a> <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#a9c0c3e72f6a8c631d9e8fc6bde68df60">ToByteBlob</a>() { <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afe46fe80e88646a92fa5cac2067e018d">plBlobPtr&lt;ByteType&gt;</a>(<span class="keyword">reinterpret_cast&lt;</span>ByteType*<span class="keyword">&gt;</span>(<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>()), <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>() * <span class="keyword">sizeof</span>(T)); }</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span> </div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div>
<div class="foldopen" id="foldopen00124" data-start="{" data-end="}">
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#af8e3c7e4f60c80eb427c53d299764ad5">  124</a></span>  PL_ALWAYS_INLINE <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;U&gt;</a> <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#af8e3c7e4f60c80eb427c53d299764ad5">Cast</a>()</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>  {</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>    <span class="keyword">static_assert</span>(<span class="keyword">sizeof</span>(T) == <span class="keyword">sizeof</span>(U), <span class="stringliteral">&quot;Can only cast with equivalent element size.&quot;</span>);</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>    <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afe46fe80e88646a92fa5cac2067e018d">plBlobPtr&lt;U&gt;</a>(<span class="keyword">reinterpret_cast&lt;</span>U*<span class="keyword">&gt;</span>(<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>()), <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>());</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>  }</div>
</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span> </div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div>
<div class="foldopen" id="foldopen00132" data-start="{" data-end="}">
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#ab7211baec49e09cc4124594505c1752c">  132</a></span>  PL_ALWAYS_INLINE <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;const U&gt;</a> <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ab7211baec49e09cc4124594505c1752c">Cast</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>    <span class="keyword">static_assert</span>(<span class="keyword">sizeof</span>(T) == <span class="keyword">sizeof</span>(U), <span class="stringliteral">&quot;Can only cast with equivalent element size.&quot;</span>);</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>    <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afe46fe80e88646a92fa5cac2067e018d">plBlobPtr&lt;const U&gt;</a>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>U*<span class="keyword">&gt;</span>(<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>()), <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>());</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>  }</div>
</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span> </div>
<div class="foldopen" id="foldopen00139" data-start="{" data-end="}">
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#a44ff00984d8dc02dcc3d896c854be72c">  139</a></span>  PL_FORCE_INLINE <span class="keyword">const</span> ValueType&amp; <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#a44ff00984d8dc02dcc3d896c854be72c">operator[]</a>(plUInt64 uiIndex) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>  {</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>    PL_ASSERT_DEBUG(uiIndex &lt; <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>(), <span class="stringliteral">&quot;Cannot access element {0}, the array only holds {1} elements.&quot;</span>, uiIndex, <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>());</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>    <span class="keywordflow">return</span> *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>ValueType*<span class="keyword">&gt;</span>(<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>() + uiIndex);</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>  }</div>
</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span> </div>
<div class="foldopen" id="foldopen00146" data-start="{" data-end="}">
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#a1d60a95452ad7619c9573bbf90391f8f">  146</a></span>  PL_FORCE_INLINE ValueType&amp; <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#a1d60a95452ad7619c9573bbf90391f8f">operator[]</a>(plUInt64 uiIndex) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>  {</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>    PL_ASSERT_DEBUG(uiIndex &lt; <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>(), <span class="stringliteral">&quot;Cannot access element {0}, the array only holds {1} elements.&quot;</span>, uiIndex, <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>());</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>    <span class="keywordflow">return</span> *<span class="keyword">static_cast&lt;</span>ValueType*<span class="keyword">&gt;</span>(<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>() + uiIndex);</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>  }</div>
</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span> </div>
<div class="foldopen" id="foldopen00153" data-start="{" data-end="}">
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#a05e1b0f4cc1891c560f280e29ba48f9d">  153</a></span>  <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#a05e1b0f4cc1891c560f280e29ba48f9d">operator==</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;const T&gt;</a>&amp; other) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>  {</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>    <span class="keywordflow">if</span> (<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>() != other.GetCount())</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span> </div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>    <span class="keywordflow">if</span> (<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>() == other.GetPtr())</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span> </div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>    <span class="keywordflow">return</span> <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a4164db412280d367dd4aa34e7c4787e8">plMemoryUtils::IsEqual</a>(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>ValueType*<span class="keyword">&gt;</span>(<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>()), <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>ValueType*<span class="keyword">&gt;</span>(other.GetPtr()), <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>()));</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>  }</div>
</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span> </div>
<div class="foldopen" id="foldopen00165" data-start="{" data-end="}">
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#aa9f0bd7f8cb25d3e5f7c68ef5b7cb357">  165</a></span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#aa9f0bd7f8cb25d3e5f7c68ef5b7cb357">operator!=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;const T&gt;</a>&amp; other) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>  {</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>    <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == other);</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>  }</div>
</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span> </div>
<div class="foldopen" id="foldopen00171" data-start="{" data-end="}">
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno"><a class="line" href="../../de/d9f/classpl_blob_ptr.htm#a9e3b9c9635095a88432a9f81134559cc">  171</a></span>  <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#a9e3b9c9635095a88432a9f81134559cc">CopyFrom</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;const T&gt;</a>&amp; other) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>  {</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>    PL_ASSERT_DEV(<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>() == other.<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>(), <span class="stringliteral">&quot;Count for copy does not match. Target has {0} elements, source {1} elements&quot;</span>, <a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>(), other.<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>());</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span> </div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>    <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a9a74df0cde5a8c8012d7b6c48d3d8729">plMemoryUtils::Copy</a>(<span class="keyword">static_cast&lt;</span>ValueType*<span class="keyword">&gt;</span>(<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>()), <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>ValueType*<span class="keyword">&gt;</span>(other.<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>()), <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>()));</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>  }</div>
</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span> </div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>  PL_ALWAYS_INLINE <span class="keywordtype">void</span> Swap(<a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;T&gt;</a>&amp; other)</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>  {</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>    <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#abcac254119b9da320b0617b93e40ec9f">plMath::Swap</a>(m_pPtr, other.m_pPtr);</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>    <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#abcac254119b9da320b0617b93e40ec9f">plMath::Swap</a>(m_uiCount, other.m_uiCount);</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>  }</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span> </div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>  <span class="keyword">using </span>const_iterator = <span class="keyword">const</span> T*;</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>  <span class="keyword">using </span>const_reverse_iterator = <a class="code hl_struct" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">const_reverse_pointer_iterator&lt;T&gt;</a>;</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>  <span class="keyword">using </span>iterator = T*;</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>  <span class="keyword">using </span>reverse_iterator = <a class="code hl_struct" href="../../d3/df2/structreverse__pointer__iterator.htm">reverse_pointer_iterator&lt;T&gt;</a>;</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span> </div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>  PointerType m_pPtr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>  plUInt64 m_uiCount = 0u;</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>};</div>
</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span> </div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span> </div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span><span class="keyword">using </span><a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plByteBlobPtr</a> = <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;plUInt8&gt;</a>;</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span><span class="keyword">using </span><a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plConstByteBlobPtr</a> = <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;const plUInt8&gt;</a>;</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span> </div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span> </div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;T&gt;</a> plMakeBlobPtr(T* pPtr, plUInt64 uiCount)</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>{</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;T&gt;</a>(pPtr, uiCount);</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>}</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span> </div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt64 N&gt;</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;T&gt;</a> plMakeBlobPtr(T (&amp;staticArray)[N])</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span>{</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;T&gt;</a>(staticArray);</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>}</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span> </div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plConstByteBlobPtr</a> plMakeByteBlobPtr(<span class="keyword">const</span> T* pPtr, plUInt32 uiCount)</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>{</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plConstByteBlobPtr</a>(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>plUInt8*<span class="keyword">&gt;</span>(pPtr), uiCount * <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>}</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span> </div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plByteBlobPtr</a> plMakeByteBlobPtr(T* pPtr, plUInt32 uiCount)</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>{</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plByteBlobPtr</a>(<span class="keyword">reinterpret_cast&lt;</span>plUInt8*<span class="keyword">&gt;</span>(pPtr), uiCount * <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>}</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span> </div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plByteBlobPtr</a> plMakeByteBlobPtr(<span class="keywordtype">void</span>* pPtr, plUInt32 uiBytes)</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>{</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plByteBlobPtr</a>(<span class="keyword">reinterpret_cast&lt;</span>plUInt8*<span class="keyword">&gt;</span>(pPtr), uiBytes);</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>}</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span> </div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plConstByteBlobPtr</a> plMakeByteBlobPtr(<span class="keyword">const</span> <span class="keywordtype">void</span>* pPtr, plUInt32 uiBytes)</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>{</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plConstByteBlobPtr</a>(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>plUInt8*<span class="keyword">&gt;</span>(pPtr), uiBytes);</div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>}</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span> </div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span> </div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span><span class="keyword">typename</span> plBlobPtr&lt;T&gt;::iterator begin(<a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;T&gt;</a>&amp; in_container)</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>{</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span>  <span class="keywordflow">return</span> in_container.<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>();</div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>}</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span> </div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span><span class="keyword">typename</span> plBlobPtr&lt;T&gt;::const_iterator begin(<span class="keyword">const</span> <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;T&gt;</a>&amp; container)</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>{</div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>  <span class="keywordflow">return</span> container.<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>();</div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span>}</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span> </div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span><span class="keyword">typename</span> plBlobPtr&lt;T&gt;::const_iterator cbegin(<span class="keyword">const</span> <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;T&gt;</a>&amp; container)</div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span>{</div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span>  <span class="keywordflow">return</span> container.<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>();</div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span>}</div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span> </div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/df2/structreverse__pointer__iterator.htm">plBlobPtr&lt;T&gt;::reverse_iterator</a> rbegin(<a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;T&gt;</a>&amp; in_container)</div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span>{</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/df2/structreverse__pointer__iterator.htm">plBlobPtr&lt;T&gt;::reverse_iterator</a>(in_container.<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>() + in_container.<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>() - 1);</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span>}</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span> </div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">plBlobPtr&lt;T&gt;::const_reverse_iterator</a> rbegin(<span class="keyword">const</span> <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;T&gt;</a>&amp; container)</div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>{</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span>  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">plBlobPtr&lt;T&gt;::const_reverse_iterator</a>(container.<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>() + container.<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>() - 1);</div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span>}</div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span> </div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">plBlobPtr&lt;T&gt;::const_reverse_iterator</a> crbegin(<span class="keyword">const</span> <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;T&gt;</a>&amp; container)</div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span>{</div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span>  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">plBlobPtr&lt;T&gt;::const_reverse_iterator</a>(container.<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>() + container.<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>() - 1);</div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span>}</div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span> </div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span><span class="keyword">typename</span> plBlobPtr&lt;T&gt;::iterator end(<a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;T&gt;</a>&amp; in_container)</div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span>{</div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span>  <span class="keywordflow">return</span> in_container.<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>() + in_container.<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>();</div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span>}</div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span> </div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span><span class="keyword">typename</span> plBlobPtr&lt;T&gt;::const_iterator end(<span class="keyword">const</span> <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;T&gt;</a>&amp; container)</div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span>{</div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span>  <span class="keywordflow">return</span> container.<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>() + container.<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>();</div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span>}</div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span> </div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span><span class="keyword">typename</span> plBlobPtr&lt;T&gt;::const_iterator cend(<span class="keyword">const</span> <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;T&gt;</a>&amp; container)</div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span>{</div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span>  <span class="keywordflow">return</span> container.<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>() + container.<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">GetCount</a>();</div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span>}</div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span> </div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/df2/structreverse__pointer__iterator.htm">plBlobPtr&lt;T&gt;::reverse_iterator</a> rend(<a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;T&gt;</a>&amp; in_container)</div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span>{</div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span>  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/df2/structreverse__pointer__iterator.htm">plBlobPtr&lt;T&gt;::reverse_iterator</a>(in_container.<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>() - 1);</div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span>}</div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span> </div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">plBlobPtr&lt;T&gt;::const_reverse_iterator</a> rend(<span class="keyword">const</span> <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;T&gt;</a>&amp; container)</div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span>{</div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span>  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">plBlobPtr&lt;T&gt;::const_reverse_iterator</a>(container.<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>() - 1);</div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span>}</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span> </div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">plBlobPtr&lt;T&gt;::const_reverse_iterator</a> crend(<span class="keyword">const</span> <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;T&gt;</a>&amp; container)</div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span>{</div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span>  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">plBlobPtr&lt;T&gt;::const_reverse_iterator</a>(container.<a class="code hl_function" href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">GetPtr</a>() - 1);</div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span>}</div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span> </div>
<div class="foldopen" id="foldopen00318" data-start="{" data-end="};">
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno"><a class="line" href="../../d3/d7c/classpl_blob.htm">  318</a></span><span class="keyword">class </span>PL_FOUNDATION_DLL <a class="code hl_class" href="../../d3/d7c/classpl_blob.htm">plBlob</a></div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span>{</div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span>  PL_DECLARE_MEM_RELOCATABLE_TYPE();</div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span> </div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno"><a class="line" href="../../d3/d7c/classpl_blob.htm#ae621ffa158fe98f243cdb86fe97eeedb">  324</a></span>  <a class="code hl_function" href="../../d3/d7c/classpl_blob.htm#ae621ffa158fe98f243cdb86fe97eeedb">plBlob</a>();</div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span> </div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span>  <a class="code hl_class" href="../../d3/d7c/classpl_blob.htm">plBlob</a>(<a class="code hl_class" href="../../d3/d7c/classpl_blob.htm">plBlob</a>&amp;&amp; other);</div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span> </div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span>  <span class="keywordtype">void</span> operator=(<a class="code hl_class" href="../../d3/d7c/classpl_blob.htm">plBlob</a>&amp;&amp; rhs);</div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span> </div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span>  <a class="code hl_class" href="../../d3/d7c/classpl_blob.htm">~plBlob</a>();</div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span> </div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span>  <span class="keywordtype">void</span> SetFrom(<span class="keyword">const</span> <span class="keywordtype">void</span>* pSource, plUInt64 uiSize);</div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span> </div>
<div class="line"><a id="l00340" name="l00340"></a><span class="lineno">  340</span>  <span class="keywordtype">void</span> Clear();</div>
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno">  341</span> </div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span>  <span class="keywordtype">bool</span> IsEmpty() <span class="keyword">const</span>;</div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span> </div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span>  <span class="keywordtype">void</span> SetCountUninitialized(plUInt64 uiCount);</div>
<div class="line"><a id="l00347" name="l00347"></a><span class="lineno">  347</span> </div>
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno">  349</span>  <span class="keywordtype">void</span> ZeroFill();</div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span> </div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00353" data-start="{" data-end="}">
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno"><a class="line" href="../../d3/d7c/classpl_blob.htm#ac0d64e102236cee3954f3f214edaeb1a">  353</a></span>  <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;T&gt;</a> <a class="code hl_function" href="../../d3/d7c/classpl_blob.htm#ac0d64e102236cee3954f3f214edaeb1a">GetBlobPtr</a>()</div>
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno">  354</span>  {</div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno">  355</span>    <span class="keywordflow">return</span> <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;T&gt;</a>(<span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(m_pStorage), m_uiSize);</div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span>  }</div>
</div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span> </div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00360" data-start="{" data-end="}">
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno"><a class="line" href="../../d3/d7c/classpl_blob.htm#ae1abbb7ba752546e95b6df4eacb7ed55">  360</a></span>  <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;const T&gt;</a> <a class="code hl_function" href="../../d3/d7c/classpl_blob.htm#ae1abbb7ba752546e95b6df4eacb7ed55">GetBlobPtr</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno">  361</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno">  362</span>    <span class="keywordflow">return</span> <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr&lt;const T&gt;</a>(<span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(m_pStorage), m_uiSize);</div>
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno">  363</span>  }</div>
</div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span> </div>
<div class="line"><a id="l00366" name="l00366"></a><span class="lineno"><a class="line" href="../../d3/d7c/classpl_blob.htm#aaf25700c2ad27fa69d3aec3dadf7b844">  366</a></span>  <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plByteBlobPtr</a> <a class="code hl_function" href="../../d3/d7c/classpl_blob.htm#aaf25700c2ad27fa69d3aec3dadf7b844">GetByteBlobPtr</a>() { <span class="keywordflow">return</span> <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plByteBlobPtr</a>(<span class="keyword">reinterpret_cast&lt;</span>plUInt8*<span class="keyword">&gt;</span>(m_pStorage), m_uiSize); }</div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span> </div>
<div class="line"><a id="l00369" name="l00369"></a><span class="lineno"><a class="line" href="../../d3/d7c/classpl_blob.htm#a6df307bd0a696def64a7397d649a4bf2">  369</a></span>  <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plConstByteBlobPtr</a> <a class="code hl_function" href="../../d3/d7c/classpl_blob.htm#a6df307bd0a696def64a7397d649a4bf2">GetByteBlobPtr</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code hl_class" href="../../de/d9f/classpl_blob_ptr.htm">plConstByteBlobPtr</a>(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>plUInt8*<span class="keyword">&gt;</span>(m_pStorage), m_uiSize); }</div>
<div class="line"><a id="l00370" name="l00370"></a><span class="lineno">  370</span> </div>
<div class="line"><a id="l00371" name="l00371"></a><span class="lineno">  371</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno">  372</span>  <span class="keywordtype">void</span>* m_pStorage = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00373" name="l00373"></a><span class="lineno">  373</span>  plUInt64 m_uiSize = 0;</div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno">  374</span>};</div>
</div>
<div class="ttc" id="aclasspl_blob_htm"><div class="ttname"><a href="../../d3/d7c/classpl_blob.htm">plBlob</a></div><div class="ttdoc">plBlob allows to store simple binary data larger than 4GB. This storage class is used by plImage to a...</div><div class="ttdef"><b>Definition</b> Blob.h:319</div></div>
<div class="ttc" id="aclasspl_blob_htm_a6df307bd0a696def64a7397d649a4bf2"><div class="ttname"><a href="../../d3/d7c/classpl_blob.htm#a6df307bd0a696def64a7397d649a4bf2">plBlob::GetByteBlobPtr</a></div><div class="ttdeci">plConstByteBlobPtr GetByteBlobPtr() const</div><div class="ttdoc">Returns a blob pointer to the blob data, or an empty blob pointer if the blob is empty.</div><div class="ttdef"><b>Definition</b> Blob.h:369</div></div>
<div class="ttc" id="aclasspl_blob_htm_aaf25700c2ad27fa69d3aec3dadf7b844"><div class="ttname"><a href="../../d3/d7c/classpl_blob.htm#aaf25700c2ad27fa69d3aec3dadf7b844">plBlob::GetByteBlobPtr</a></div><div class="ttdeci">plByteBlobPtr GetByteBlobPtr()</div><div class="ttdoc">Returns a blob pointer to the blob data, or an empty blob pointer if the blob is empty.</div><div class="ttdef"><b>Definition</b> Blob.h:366</div></div>
<div class="ttc" id="aclasspl_blob_htm_ac0d64e102236cee3954f3f214edaeb1a"><div class="ttname"><a href="../../d3/d7c/classpl_blob.htm#ac0d64e102236cee3954f3f214edaeb1a">plBlob::GetBlobPtr</a></div><div class="ttdeci">plBlobPtr&lt; T &gt; GetBlobPtr()</div><div class="ttdoc">Returns a blob pointer to the blob data, or an empty blob pointer if the blob is empty.</div><div class="ttdef"><b>Definition</b> Blob.h:353</div></div>
<div class="ttc" id="aclasspl_blob_htm_ae1abbb7ba752546e95b6df4eacb7ed55"><div class="ttname"><a href="../../d3/d7c/classpl_blob.htm#ae1abbb7ba752546e95b6df4eacb7ed55">plBlob::GetBlobPtr</a></div><div class="ttdeci">plBlobPtr&lt; const T &gt; GetBlobPtr() const</div><div class="ttdoc">Returns a blob pointer to the blob data, or an empty blob pointer if the blob is empty.</div><div class="ttdef"><b>Definition</b> Blob.h:360</div></div>
<div class="ttc" id="aclasspl_blob_htm_ae621ffa158fe98f243cdb86fe97eeedb"><div class="ttname"><a href="../../d3/d7c/classpl_blob.htm#ae621ffa158fe98f243cdb86fe97eeedb">plBlob::plBlob</a></div><div class="ttdeci">plBlob()</div><div class="ttdoc">Default constructor. Does not allocate any memory.</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm">plBlobPtr</a></div><div class="ttdoc">This class encapsulates a blob's storage and it's size. It is recommended to use this class instead o...</div><div class="ttdef"><b>Definition</b> Blob.h:13</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm_a05e1b0f4cc1891c560f280e29ba48f9d"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm#a05e1b0f4cc1891c560f280e29ba48f9d">plBlobPtr::operator==</a></div><div class="ttdeci">bool operator==(const plBlobPtr&lt; const T &gt; &amp;other) const</div><div class="ttdoc">Compares the two arrays for equality.</div><div class="ttdef"><b>Definition</b> Blob.h:153</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm_a1d60a95452ad7619c9573bbf90391f8f"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm#a1d60a95452ad7619c9573bbf90391f8f">plBlobPtr::operator[]</a></div><div class="ttdeci">PL_FORCE_INLINE ValueType &amp; operator[](plUInt64 uiIndex)</div><div class="ttdoc">Index access.</div><div class="ttdef"><b>Definition</b> Blob.h:146</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm_a206c83c6aad1faa9339b97ea9c0fc6aa"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm#a206c83c6aad1faa9339b97ea9c0fc6aa">plBlobPtr::plBlobPtr</a></div><div class="ttdeci">PL_ALWAYS_INLINE plBlobPtr(ValueType(&amp;staticArray)[N])</div><div class="ttdoc">Initializes the plBlobPtr to encapsulate the given array.</div><div class="ttdef"><b>Definition</b> Blob.h:43</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm_a3f0dd6cb4e640bf2337639da55c2e089"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm#a3f0dd6cb4e640bf2337639da55c2e089">plBlobPtr::Clear</a></div><div class="ttdeci">PL_ALWAYS_INLINE void Clear()</div><div class="ttdoc">Clears the array.</div><div class="ttdef"><b>Definition</b> Blob.h:67</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm_a44ff00984d8dc02dcc3d896c854be72c"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm#a44ff00984d8dc02dcc3d896c854be72c">plBlobPtr::operator[]</a></div><div class="ttdeci">PL_FORCE_INLINE const ValueType &amp; operator[](plUInt64 uiIndex) const</div><div class="ttdoc">Index access.</div><div class="ttdef"><b>Definition</b> Blob.h:139</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm_a52c7c2be025f7d51bb42d5299df9f5f0"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm#a52c7c2be025f7d51bb42d5299df9f5f0">plBlobPtr::operator=</a></div><div class="ttdeci">PL_ALWAYS_INLINE void operator=(const plBlobPtr&lt; T &gt; &amp;other)</div><div class="ttdoc">Copies the pointer and size of /a other. Does not allocate any data.</div><div class="ttdef"><b>Definition</b> Blob.h:60</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm_a8caeb6e10f64409a01261489edad13c0"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm#a8caeb6e10f64409a01261489edad13c0">plBlobPtr::GetSubArray</a></div><div class="ttdeci">PL_FORCE_INLINE plBlobPtr&lt; T &gt; GetSubArray(plUInt64 uiStart) const</div><div class="ttdoc">Creates a sub-array from this array.</div><div class="ttdef"><b>Definition</b> Blob.h:107</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm_a9c0c3e72f6a8c631d9e8fc6bde68df60"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm#a9c0c3e72f6a8c631d9e8fc6bde68df60">plBlobPtr::ToByteBlob</a></div><div class="ttdeci">PL_ALWAYS_INLINE plBlobPtr&lt; ByteType &gt; ToByteBlob()</div><div class="ttdoc">Reinterprets this array as a byte array.</div><div class="ttdef"><b>Definition</b> Blob.h:120</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm_a9e3b9c9635095a88432a9f81134559cc"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm#a9e3b9c9635095a88432a9f81134559cc">plBlobPtr::CopyFrom</a></div><div class="ttdeci">void CopyFrom(const plBlobPtr&lt; const T &gt; &amp;other)</div><div class="ttdoc">Copies the data from other into this array. The arrays must have the exact same size.</div><div class="ttdef"><b>Definition</b> Blob.h:171</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm_a9fd9d28329b47e424d4632472f714397"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm#a9fd9d28329b47e424d4632472f714397">plBlobPtr::GetEndPtr</a></div><div class="ttdeci">PL_ALWAYS_INLINE PointerType GetEndPtr()</div><div class="ttdoc">Returns the pointer behind the last element of the array.</div><div class="ttdef"><b>Definition</b> Blob.h:86</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm_aa60c0bdc885357e8f9aa2fd2a1e1fb49"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm#aa60c0bdc885357e8f9aa2fd2a1e1fb49">plBlobPtr::ToByteBlob</a></div><div class="ttdeci">PL_ALWAYS_INLINE plBlobPtr&lt; const ByteType &gt; ToByteBlob() const</div><div class="ttdoc">Reinterprets this array as a byte array.</div><div class="ttdef"><b>Definition</b> Blob.h:114</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm_aa6f6ac0bc68d05851ff67eb0fa803b33"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm#aa6f6ac0bc68d05851ff67eb0fa803b33">plBlobPtr::plBlobPtr</a></div><div class="ttdeci">PL_ALWAYS_INLINE plBlobPtr(const plBlobPtr&lt; T &gt; &amp;other)</div><div class="ttdoc">Initializes the plBlobPtr to be a copy of other. No memory is allocated or copied.</div><div class="ttdef"><b>Definition</b> Blob.h:50</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm_aa9f0bd7f8cb25d3e5f7c68ef5b7cb357"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm#aa9f0bd7f8cb25d3e5f7c68ef5b7cb357">plBlobPtr::operator!=</a></div><div class="ttdeci">PL_ALWAYS_INLINE bool operator!=(const plBlobPtr&lt; const T &gt; &amp;other) const</div><div class="ttdoc">Compares the two arrays for inequality.</div><div class="ttdef"><b>Definition</b> Blob.h:165</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm_aaac51c404d02b0d8dcb39c88c37778c5"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm#aaac51c404d02b0d8dcb39c88c37778c5">plBlobPtr::GetEndPtr</a></div><div class="ttdeci">PL_ALWAYS_INLINE PointerType GetEndPtr() const</div><div class="ttdoc">Returns the pointer behind the last element of the array.</div><div class="ttdef"><b>Definition</b> Blob.h:89</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm_ab7211baec49e09cc4124594505c1752c"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm#ab7211baec49e09cc4124594505c1752c">plBlobPtr::Cast</a></div><div class="ttdeci">PL_ALWAYS_INLINE plBlobPtr&lt; const U &gt; Cast() const</div><div class="ttdoc">Cast an BlobPtr to an BlobPtr to a different, but same size, type.</div><div class="ttdef"><b>Definition</b> Blob.h:132</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm_ad8b1fc0bef042c1cdd857ddc7ba5f0ad"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm#ad8b1fc0bef042c1cdd857ddc7ba5f0ad">plBlobPtr::GetSubArray</a></div><div class="ttdeci">PL_FORCE_INLINE plBlobPtr&lt; T &gt; GetSubArray(plUInt64 uiStart, plUInt64 uiCount) const</div><div class="ttdoc">Creates a sub-array from this array.</div><div class="ttdef"><b>Definition</b> Blob.h:98</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm_ae00d7e381c57855d878e0c92d896e8f3"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm#ae00d7e381c57855d878e0c92d896e8f3">plBlobPtr::GetPtr</a></div><div class="ttdeci">PL_ALWAYS_INLINE PointerType GetPtr() const</div><div class="ttdoc">Returns the pointer to the array.</div><div class="ttdef"><b>Definition</b> Blob.h:80</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm_ae069d876fd8a643d5923c0ad824e6c65"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm#ae069d876fd8a643d5923c0ad824e6c65">plBlobPtr::GetPtr</a></div><div class="ttdeci">PL_ALWAYS_INLINE PointerType GetPtr()</div><div class="ttdoc">Returns the pointer to the array.</div><div class="ttdef"><b>Definition</b> Blob.h:83</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm_aed465fa2b13a791836eb1f31378e4fc3"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm#aed465fa2b13a791836eb1f31378e4fc3">plBlobPtr::plBlobPtr</a></div><div class="ttdeci">plBlobPtr(U *pPtr, plUInt64 uiCount)</div><div class="ttdoc">Initializes the plBlobPtr with the given pointer and number of elements. No memory is allocated or co...</div><div class="ttdef"><b>Definition</b> Blob.h:29</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm_af2e731f81087babac8c919d22f7ba210"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm#af2e731f81087babac8c919d22f7ba210">plBlobPtr::IsEmpty</a></div><div class="ttdeci">PL_ALWAYS_INLINE bool IsEmpty() const</div><div class="ttdoc">Returns whether the array is empty.</div><div class="ttdef"><b>Definition</b> Blob.h:92</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm_af8e3c7e4f60c80eb427c53d299764ad5"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm#af8e3c7e4f60c80eb427c53d299764ad5">plBlobPtr::Cast</a></div><div class="ttdeci">PL_ALWAYS_INLINE plBlobPtr&lt; U &gt; Cast()</div><div class="ttdoc">Cast an BlobPtr to an BlobPtr to a different, but same size, type.</div><div class="ttdef"><b>Definition</b> Blob.h:124</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm_afbf81f461ce2476173f1b68f8a7ac423"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm#afbf81f461ce2476173f1b68f8a7ac423">plBlobPtr::GetCount</a></div><div class="ttdeci">PL_ALWAYS_INLINE plUInt64 GetCount() const</div><div class="ttdoc">Returns the number of elements in the array.</div><div class="ttdef"><b>Definition</b> Blob.h:95</div></div>
<div class="ttc" id="aclasspl_blob_ptr_htm_afe46fe80e88646a92fa5cac2067e018d"><div class="ttname"><a href="../../de/d9f/classpl_blob_ptr.htm#afe46fe80e88646a92fa5cac2067e018d">plBlobPtr::plBlobPtr</a></div><div class="ttdeci">plBlobPtr()=default</div><div class="ttdoc">Initializes the plBlobPtr to be empty.</div></div>
<div class="ttc" id="aclasspl_memory_utils_htm_a4164db412280d367dd4aa34e7c4787e8"><div class="ttname"><a href="../../df/d4d/classpl_memory_utils.htm#a4164db412280d367dd4aa34e7c4787e8">plMemoryUtils::IsEqual</a></div><div class="ttdeci">static bool IsEqual(const T *a, const T *b, size_t uiCount=1)</div><div class="ttdoc">Tests if objects of type T from pSource and pDestination are equal.</div></div>
<div class="ttc" id="aclasspl_memory_utils_htm_a9a74df0cde5a8c8012d7b6c48d3d8729"><div class="ttname"><a href="../../df/d4d/classpl_memory_utils.htm#a9a74df0cde5a8c8012d7b6c48d3d8729">plMemoryUtils::Copy</a></div><div class="ttdeci">static void Copy(T *pDestination, const T *pSource, size_t uiCount=1)</div><div class="ttdoc">Copies objects of type T from pSource to pDestination.</div></div>
<div class="ttc" id="anamespacepl_math_htm_abcac254119b9da320b0617b93e40ec9f"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#abcac254119b9da320b0617b93e40ec9f">plMath::Swap</a></div><div class="ttdeci">PL_ALWAYS_INLINE void Swap(T &amp;ref_f1, T &amp;ref_f2)</div><div class="ttdoc">Swaps the values in the two variables f1 and f2.</div><div class="ttdef"><b>Definition</b> Math_inl.h:224</div></div>
<div class="ttc" id="astructconst__reverse__pointer__iterator_htm"><div class="ttname"><a href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">const_reverse_pointer_iterator</a></div><div class="ttdoc">Base class for Pointer like reverse iterators.</div><div class="ttdef"><b>Definition</b> ArrayIterator.h:152</div></div>
<div class="ttc" id="astructreverse__pointer__iterator_htm"><div class="ttname"><a href="../../d3/df2/structreverse__pointer__iterator.htm">reverse_pointer_iterator</a></div><div class="ttdoc">Non-Const class for Pointer like reverse iterators.</div><div class="ttdef"><b>Definition</b> ArrayIterator.h:216</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_3416883c1320ec68c4d0694befd114fc.htm">Containers</a></li><li class="navelem"><b>Blob.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
