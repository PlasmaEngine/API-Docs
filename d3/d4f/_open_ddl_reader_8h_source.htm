<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>plEngine: Code/Engine/Foundation/IO/OpenDdlReader.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only-darkmode-toggle.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">plEngine<span id="projectnumber">&#160;Release 2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d3/d4f/_open_ddl_reader_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">OpenDdlReader.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;Foundation/Basics.h&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="preprocessor">#include &lt;Foundation/Containers/Deque.h&gt;</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#include &lt;Foundation/Containers/Map.h&gt;</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">#include &lt;Foundation/IO/OpenDdlParser.h&gt;</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="preprocessor">#include &lt;Foundation/Logging/Log.h&gt;</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span> </div>
<div class="foldopen" id="foldopen00010" data-start="{" data-end="};">
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno"><a class="line" href="../../d2/d5d/classpl_open_ddl_reader_element.htm">   10</a></span><span class="keyword">class </span>PL_FOUNDATION_DLL <a class="code hl_class" href="../../d2/d5d/classpl_open_ddl_reader_element.htm">plOpenDdlReaderElement</a></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span>{</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>  PL_DECLARE_POD_TYPE();</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span> </div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno"><a class="line" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a80117be242970f0cdf2cc5f1ca164b51">   16</a></span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a80117be242970f0cdf2cc5f1ca164b51">IsCustomType</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_PrimitiveType == plOpenDdlPrimitiveType::Custom; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span> </div>
<div class="foldopen" id="foldopen00019" data-start="{" data-end="}">
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno"><a class="line" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#ac6f23ced863a7865351b78c11de056ec">   19</a></span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#ac6f23ced863a7865351b78c11de056ec">IsCustomType</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sTypeName)<span class="keyword"> const</span></div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>    <span class="keywordflow">return</span> m_PrimitiveType == plOpenDdlPrimitiveType::Custom &amp;&amp; m_sCustomType == sTypeName;</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>  }</div>
</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span> </div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno"><a class="line" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#aac6d1e69c96e7edc1d42d6d43103d4d6">   25</a></span>  PL_ALWAYS_INLINE <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> <a class="code hl_function" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#aac6d1e69c96e7edc1d42d6d43103d4d6">GetCustomType</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_sCustomType; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span> </div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno"><a class="line" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a90dd204025c5e61087b718bf20d86681">   28</a></span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a90dd204025c5e61087b718bf20d86681">HasName</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> !m_sName.IsEmpty(); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span> </div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno"><a class="line" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a8f297f2f134438340952c2f3033ec1b6">   31</a></span>  PL_ALWAYS_INLINE <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> <a class="code hl_function" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a8f297f2f134438340952c2f3033ec1b6">GetName</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_sName; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span> </div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno"><a class="line" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a9d84bb472cb52a91976fa2fc95df0484">   34</a></span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a9d84bb472cb52a91976fa2fc95df0484">IsNameGlobal</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_uiNumChildElements &amp; PL_BIT(31)) != 0; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span> </div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>  plUInt32 GetNumChildObjects() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span> </div>
<div class="foldopen" id="foldopen00040" data-start="{" data-end="}">
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno"><a class="line" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a9279c7187591c90498342f49d3afd344">   40</a></span>  PL_ALWAYS_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../d2/d5d/classpl_open_ddl_reader_element.htm">plOpenDdlReaderElement</a>* <a class="code hl_function" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a9279c7187591c90498342f49d3afd344">GetFirstChild</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>    <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code hl_class" href="../../d2/d5d/classpl_open_ddl_reader_element.htm">plOpenDdlReaderElement</a>*<span class="keyword">&gt;</span>(m_pFirstChild);</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>  } <span class="comment">// [tested]</span></div>
</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span> </div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno"><a class="line" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a07a77f9450e44dd0af968964d548b653">   46</a></span>  PL_ALWAYS_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../d2/d5d/classpl_open_ddl_reader_element.htm">plOpenDdlReaderElement</a>* <a class="code hl_function" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a07a77f9450e44dd0af968964d548b653">GetSibling</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pSiblingElement; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span> </div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>  plUInt32 GetNumPrimitives() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span> </div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno"><a class="line" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#aad05ccaff1d45a3e5b5874f40052abfe">   52</a></span>  PL_ALWAYS_INLINE plOpenDdlPrimitiveType <a class="code hl_function" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#aad05ccaff1d45a3e5b5874f40052abfe">GetPrimitivesType</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_PrimitiveType; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span> </div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>  <span class="keywordtype">bool</span> HasPrimitives(plOpenDdlPrimitiveType type, plUInt32 uiMinNumberOfPrimitives = 1) <span class="keyword">const</span>;</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span> </div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno"><a class="line" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a8246dea10c002cd0e6ab9cf9c54a2d45">   59</a></span>  PL_ALWAYS_INLINE <span class="keyword">const</span> <span class="keywordtype">bool</span>* <a class="code hl_function" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a8246dea10c002cd0e6ab9cf9c54a2d45">GetPrimitivesBool</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">bool</span>*<span class="keyword">&gt;</span>(m_pFirstChild); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span> </div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno"><a class="line" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a220f01206c02fb3068c550159baa111d">   62</a></span>  PL_ALWAYS_INLINE <span class="keyword">const</span> plInt8* <a class="code hl_function" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a220f01206c02fb3068c550159baa111d">GetPrimitivesInt8</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>plInt8*<span class="keyword">&gt;</span>(m_pFirstChild); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span> </div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno"><a class="line" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#ab39e7c02c7af9d508844ccabc3fa3fa3">   65</a></span>  PL_ALWAYS_INLINE <span class="keyword">const</span> plInt16* <a class="code hl_function" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#ab39e7c02c7af9d508844ccabc3fa3fa3">GetPrimitivesInt16</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>plInt16*<span class="keyword">&gt;</span>(m_pFirstChild); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span> </div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno"><a class="line" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#ae52d22f7565616bde75db18174314cb0">   68</a></span>  PL_ALWAYS_INLINE <span class="keyword">const</span> plInt32* <a class="code hl_function" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#ae52d22f7565616bde75db18174314cb0">GetPrimitivesInt32</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>plInt32*<span class="keyword">&gt;</span>(m_pFirstChild); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span> </div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno"><a class="line" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a21a38a22a352e7482dcbd63ffd2c9961">   71</a></span>  PL_ALWAYS_INLINE <span class="keyword">const</span> plInt64* <a class="code hl_function" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a21a38a22a352e7482dcbd63ffd2c9961">GetPrimitivesInt64</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>plInt64*<span class="keyword">&gt;</span>(m_pFirstChild); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span> </div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno"><a class="line" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a4543c6cfdfb42b03f75888fb6d41b030">   74</a></span>  PL_ALWAYS_INLINE <span class="keyword">const</span> plUInt8* <a class="code hl_function" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a4543c6cfdfb42b03f75888fb6d41b030">GetPrimitivesUInt8</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>plUInt8*<span class="keyword">&gt;</span>(m_pFirstChild); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span> </div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno"><a class="line" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a82dbbb2f87ac740a3f2eb9cc0fe1ca2a">   77</a></span>  PL_ALWAYS_INLINE <span class="keyword">const</span> plUInt16* <a class="code hl_function" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a82dbbb2f87ac740a3f2eb9cc0fe1ca2a">GetPrimitivesUInt16</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>plUInt16*<span class="keyword">&gt;</span>(m_pFirstChild); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span> </div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno"><a class="line" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a51d62bcd7043c297476d950449116b37">   80</a></span>  PL_ALWAYS_INLINE <span class="keyword">const</span> plUInt32* <a class="code hl_function" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a51d62bcd7043c297476d950449116b37">GetPrimitivesUInt32</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>plUInt32*<span class="keyword">&gt;</span>(m_pFirstChild); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span> </div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno"><a class="line" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a8858a4b121322626a19a9e47755921cf">   83</a></span>  PL_ALWAYS_INLINE <span class="keyword">const</span> plUInt64* <a class="code hl_function" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a8858a4b121322626a19a9e47755921cf">GetPrimitivesUInt64</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>plUInt64*<span class="keyword">&gt;</span>(m_pFirstChild); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span> </div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno"><a class="line" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#abc4cf1c9f3f609d2e7c1ff1283bdb5cf">   86</a></span>  PL_ALWAYS_INLINE <span class="keyword">const</span> <span class="keywordtype">float</span>* <a class="code hl_function" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#abc4cf1c9f3f609d2e7c1ff1283bdb5cf">GetPrimitivesFloat</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">float</span>*<span class="keyword">&gt;</span>(m_pFirstChild); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span> </div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno"><a class="line" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a5774d3aa95414752c55243347e408341">   89</a></span>  PL_ALWAYS_INLINE <span class="keyword">const</span> <span class="keywordtype">double</span>* <a class="code hl_function" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a5774d3aa95414752c55243347e408341">GetPrimitivesDouble</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">double</span>*<span class="keyword">&gt;</span>(m_pFirstChild); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span> </div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno"><a class="line" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a22b4fc45c0a1172f1ab76ce2c9be9a3d">   92</a></span>  PL_ALWAYS_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a>* <a class="code hl_function" href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a22b4fc45c0a1172f1ab76ce2c9be9a3d">GetPrimitivesString</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a>*<span class="keyword">&gt;</span>(m_pFirstChild); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span> </div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d2/d5d/classpl_open_ddl_reader_element.htm">plOpenDdlReaderElement</a>* FindChild(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span> </div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d2/d5d/classpl_open_ddl_reader_element.htm">plOpenDdlReaderElement</a>* FindChildOfType(plOpenDdlPrimitiveType type, <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, plUInt32 uiMinNumberOfPrimitives = 1) <span class="keyword">const</span>;</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span> </div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d2/d5d/classpl_open_ddl_reader_element.htm">plOpenDdlReaderElement</a>* FindChildOfType(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sType, <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName = <span class="keyword">nullptr</span>) <span class="keyword">const</span>;</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span> </div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>  <span class="keyword">friend</span> <span class="keyword">class </span><a class="code hl_class" href="../../d0/d83/classpl_open_ddl_reader.htm">plOpenDdlReader</a>;</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span> </div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>  plOpenDdlPrimitiveType m_PrimitiveType = plOpenDdlPrimitiveType::Custom;</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>  plUInt32 m_uiNumChildElements = 0;</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>  <span class="keyword">const</span> <span class="keywordtype">void</span>* m_pFirstChild = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d2/d5d/classpl_open_ddl_reader_element.htm">plOpenDdlReaderElement</a>* m_pLastChild = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>  <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> m_sCustomType;</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>  <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> m_sName;</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d2/d5d/classpl_open_ddl_reader_element.htm">plOpenDdlReaderElement</a>* m_pSiblingElement = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>};</div>
</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span> </div>
<div class="foldopen" id="foldopen00117" data-start="{" data-end="};">
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno"><a class="line" href="../../d0/d83/classpl_open_ddl_reader.htm">  117</a></span><span class="keyword">class </span>PL_FOUNDATION_DLL <a class="code hl_class" href="../../d0/d83/classpl_open_ddl_reader.htm">plOpenDdlReader</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../d4/dc9/classpl_open_ddl_parser.htm">plOpenDdlParser</a></div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>{</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>  <a class="code hl_class" href="../../d0/d83/classpl_open_ddl_reader.htm">plOpenDdlReader</a>();</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>  <a class="code hl_class" href="../../d0/d83/classpl_open_ddl_reader.htm">~plOpenDdlReader</a>();</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span> </div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>  <a class="code hl_struct" href="../../da/dce/structpl_result.htm">plResult</a> ParseDocument(<a class="code hl_class" href="../../df/d3d/classpl_stream_reader.htm">plStreamReader</a>&amp; inout_stream, plUInt32 uiFirstLineOffset = 0, <a class="code hl_class" href="../../d5/d6c/classpl_log_interface.htm">plLogInterface</a>* pLog = <a class="code hl_function" href="../../dc/d24/classpl_log.htm#afe6864f18010d65027c9678ce96d8b77">plLog::GetThreadLocalLogSystem</a>(),</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>    plUInt32 uiCacheSizeInKB = 4); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span> </div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d2/d5d/classpl_open_ddl_reader_element.htm">plOpenDdlReaderElement</a>* GetRootElement() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span> </div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d2/d5d/classpl_open_ddl_reader_element.htm">plOpenDdlReaderElement</a>* FindElement(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sGlobalName) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span> </div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span><span class="keyword">protected</span>:</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnBeginObject(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sType, <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, <span class="keywordtype">bool</span> bGlobalName) <span class="keyword">override</span>;</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnEndObject() <span class="keyword">override</span>;</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span> </div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnBeginPrimitiveList(plOpenDdlPrimitiveType type, <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, <span class="keywordtype">bool</span> bGlobalName) <span class="keyword">override</span>;</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnEndPrimitiveList() <span class="keyword">override</span>;</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span> </div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnPrimitiveBool(plUInt32 count, <span class="keyword">const</span> <span class="keywordtype">bool</span>* pData, <span class="keywordtype">bool</span> bThisIsAll) <span class="keyword">override</span>;</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span> </div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnPrimitiveInt8(plUInt32 count, <span class="keyword">const</span> plInt8* pData, <span class="keywordtype">bool</span> bThisIsAll) <span class="keyword">override</span>;</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnPrimitiveInt16(plUInt32 count, <span class="keyword">const</span> plInt16* pData, <span class="keywordtype">bool</span> bThisIsAll) <span class="keyword">override</span>;</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnPrimitiveInt32(plUInt32 count, <span class="keyword">const</span> plInt32* pData, <span class="keywordtype">bool</span> bThisIsAll) <span class="keyword">override</span>;</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnPrimitiveInt64(plUInt32 count, <span class="keyword">const</span> plInt64* pData, <span class="keywordtype">bool</span> bThisIsAll) <span class="keyword">override</span>;</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span> </div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnPrimitiveUInt8(plUInt32 count, <span class="keyword">const</span> plUInt8* pData, <span class="keywordtype">bool</span> bThisIsAll) <span class="keyword">override</span>;</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnPrimitiveUInt16(plUInt32 count, <span class="keyword">const</span> plUInt16* pData, <span class="keywordtype">bool</span> bThisIsAll) <span class="keyword">override</span>;</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnPrimitiveUInt32(plUInt32 count, <span class="keyword">const</span> plUInt32* pData, <span class="keywordtype">bool</span> bThisIsAll) <span class="keyword">override</span>;</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnPrimitiveUInt64(plUInt32 count, <span class="keyword">const</span> plUInt64* pData, <span class="keywordtype">bool</span> bThisIsAll) <span class="keyword">override</span>;</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span> </div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnPrimitiveFloat(plUInt32 count, <span class="keyword">const</span> <span class="keywordtype">float</span>* pData, <span class="keywordtype">bool</span> bThisIsAll) <span class="keyword">override</span>;</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnPrimitiveDouble(plUInt32 count, <span class="keyword">const</span> <span class="keywordtype">double</span>* pData, <span class="keywordtype">bool</span> bThisIsAll) <span class="keyword">override</span>;</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span> </div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnPrimitiveString(plUInt32 count, <span class="keyword">const</span> <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a>* pData, <span class="keywordtype">bool</span> bThisIsAll) <span class="keyword">override</span>;</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span> </div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> OnParsingError(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sMessage, <span class="keywordtype">bool</span> bFatal, plUInt32 uiLine, plUInt32 uiColumn) <span class="keyword">override</span>;</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span> </div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span><span class="keyword">protected</span>:</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>  <a class="code hl_class" href="../../d2/d5d/classpl_open_ddl_reader_element.htm">plOpenDdlReaderElement</a>* CreateElement(plOpenDdlPrimitiveType type, <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sType, <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, <span class="keywordtype">bool</span> bGlobalName);</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>  <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> CopyString(<span class="keyword">const</span> <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a>&amp; <span class="keywordtype">string</span>);</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>  <span class="keywordtype">void</span> StorePrimitiveData(<span class="keywordtype">bool</span> bThisIsAll, plUInt32 bytecount, <span class="keyword">const</span> plUInt8* pData);</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span> </div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>  <span class="keywordtype">void</span> ClearDataChunks();</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>  plUInt8* AllocateBytes(plUInt32 uiNumBytes);</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span> </div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>  <span class="keyword">static</span> <span class="keyword">constexpr</span> plUInt32 s_uiChunkSize = 1000 * 4; <span class="comment">// 4 KiB</span></div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span> </div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>  <a class="code hl_class" href="../../d8/dcc/classpl_hybrid_array.htm">plHybridArray&lt;plUInt8*, 16&gt;</a> m_DataChunks;</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>  plUInt8* m_pCurrentChunk;</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>  plUInt32 m_uiBytesInChunkLeft;</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span> </div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>  <a class="code hl_class" href="../../d0/d4e/classpl_dynamic_array.htm">plDynamicArray&lt;plUInt8&gt;</a> m_TempCache;</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span> </div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>  <a class="code hl_class" href="../../d7/de8/classpl_deque.htm">plDeque&lt;plOpenDdlReaderElement&gt;</a> m_Elements;</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>  <a class="code hl_class" href="../../d8/dcc/classpl_hybrid_array.htm">plHybridArray&lt;plOpenDdlReaderElement*, 16&gt;</a> m_ObjectStack;</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span> </div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>  <a class="code hl_class" href="../../d7/de8/classpl_deque.htm">plDeque&lt;plString&gt;</a> m_Strings;</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span> </div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>  <a class="code hl_class" href="../../d9/d50/classpl_map.htm">plMap&lt;plString, plOpenDdlReaderElement*&gt;</a> m_GlobalNames;</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>};</div>
</div>
<div class="ttc" id="aclasspl_deque_htm"><div class="ttname"><a href="../../d7/de8/classpl_deque.htm">plDeque</a></div><div class="ttdef"><b>Definition</b> Deque.h:270</div></div>
<div class="ttc" id="aclasspl_dynamic_array_htm"><div class="ttname"><a href="../../d0/d4e/classpl_dynamic_array.htm">plDynamicArray</a></div><div class="ttdef"><b>Definition</b> DynamicArray.h:81</div></div>
<div class="ttc" id="aclasspl_hybrid_array_htm"><div class="ttname"><a href="../../d8/dcc/classpl_hybrid_array.htm">plHybridArray</a></div><div class="ttdoc">A hybrid array uses in-place storage to handle the first few elements without any allocation....</div><div class="ttdef"><b>Definition</b> HybridArray.h:12</div></div>
<div class="ttc" id="aclasspl_log_htm_afe6864f18010d65027c9678ce96d8b77"><div class="ttname"><a href="../../dc/d24/classpl_log.htm#afe6864f18010d65027c9678ce96d8b77">plLog::GetThreadLocalLogSystem</a></div><div class="ttdeci">static plLogInterface * GetThreadLocalLogSystem()</div><div class="ttdoc">Returns the currently set default logging system, or a thread local instance of plGlobalLog,...</div><div class="ttdef"><b>Definition</b> Log.cpp:345</div></div>
<div class="ttc" id="aclasspl_log_interface_htm"><div class="ttname"><a href="../../d5/d6c/classpl_log_interface.htm">plLogInterface</a></div><div class="ttdoc">Base class for all logging classes.</div><div class="ttdef"><b>Definition</b> Log.h:77</div></div>
<div class="ttc" id="aclasspl_map_htm"><div class="ttname"><a href="../../d9/d50/classpl_map.htm">plMap</a></div><div class="ttdef"><b>Definition</b> Map.h:408</div></div>
<div class="ttc" id="aclasspl_open_ddl_parser_htm"><div class="ttname"><a href="../../d4/dc9/classpl_open_ddl_parser.htm">plOpenDdlParser</a></div><div class="ttdoc">A low level parser for the OpenDDL format. It can incrementally parse the structure,...</div><div class="ttdef"><b>Definition</b> OpenDdlParser.h:35</div></div>
<div class="ttc" id="aclasspl_open_ddl_reader_element_htm"><div class="ttname"><a href="../../d2/d5d/classpl_open_ddl_reader_element.htm">plOpenDdlReaderElement</a></div><div class="ttdoc">Represents a single 'object' in a DDL document, e.g. either a custom type or a primitives list.</div><div class="ttdef"><b>Definition</b> OpenDdlReader.h:11</div></div>
<div class="ttc" id="aclasspl_open_ddl_reader_element_htm_a07a77f9450e44dd0af968964d548b653"><div class="ttname"><a href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a07a77f9450e44dd0af968964d548b653">plOpenDdlReaderElement::GetSibling</a></div><div class="ttdeci">PL_ALWAYS_INLINE const plOpenDdlReaderElement * GetSibling() const</div><div class="ttdoc">If the parent is a custom type element, the next child after this is returned.</div><div class="ttdef"><b>Definition</b> OpenDdlReader.h:46</div></div>
<div class="ttc" id="aclasspl_open_ddl_reader_element_htm_a21a38a22a352e7482dcbd63ffd2c9961"><div class="ttname"><a href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a21a38a22a352e7482dcbd63ffd2c9961">plOpenDdlReaderElement::GetPrimitivesInt64</a></div><div class="ttdeci">PL_ALWAYS_INLINE const plInt64 * GetPrimitivesInt64() const</div><div class="ttdoc">Returns a pointer to the primitive data cast to a specific type. Only valid if GetPrimitivesType() ac...</div><div class="ttdef"><b>Definition</b> OpenDdlReader.h:71</div></div>
<div class="ttc" id="aclasspl_open_ddl_reader_element_htm_a220f01206c02fb3068c550159baa111d"><div class="ttname"><a href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a220f01206c02fb3068c550159baa111d">plOpenDdlReaderElement::GetPrimitivesInt8</a></div><div class="ttdeci">PL_ALWAYS_INLINE const plInt8 * GetPrimitivesInt8() const</div><div class="ttdoc">Returns a pointer to the primitive data cast to a specific type. Only valid if GetPrimitivesType() ac...</div><div class="ttdef"><b>Definition</b> OpenDdlReader.h:62</div></div>
<div class="ttc" id="aclasspl_open_ddl_reader_element_htm_a22b4fc45c0a1172f1ab76ce2c9be9a3d"><div class="ttname"><a href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a22b4fc45c0a1172f1ab76ce2c9be9a3d">plOpenDdlReaderElement::GetPrimitivesString</a></div><div class="ttdeci">PL_ALWAYS_INLINE const plStringView * GetPrimitivesString() const</div><div class="ttdoc">Returns a pointer to the primitive data cast to a specific type. Only valid if GetPrimitivesType() ac...</div><div class="ttdef"><b>Definition</b> OpenDdlReader.h:92</div></div>
<div class="ttc" id="aclasspl_open_ddl_reader_element_htm_a4543c6cfdfb42b03f75888fb6d41b030"><div class="ttname"><a href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a4543c6cfdfb42b03f75888fb6d41b030">plOpenDdlReaderElement::GetPrimitivesUInt8</a></div><div class="ttdeci">PL_ALWAYS_INLINE const plUInt8 * GetPrimitivesUInt8() const</div><div class="ttdoc">Returns a pointer to the primitive data cast to a specific type. Only valid if GetPrimitivesType() ac...</div><div class="ttdef"><b>Definition</b> OpenDdlReader.h:74</div></div>
<div class="ttc" id="aclasspl_open_ddl_reader_element_htm_a51d62bcd7043c297476d950449116b37"><div class="ttname"><a href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a51d62bcd7043c297476d950449116b37">plOpenDdlReaderElement::GetPrimitivesUInt32</a></div><div class="ttdeci">PL_ALWAYS_INLINE const plUInt32 * GetPrimitivesUInt32() const</div><div class="ttdoc">Returns a pointer to the primitive data cast to a specific type. Only valid if GetPrimitivesType() ac...</div><div class="ttdef"><b>Definition</b> OpenDdlReader.h:80</div></div>
<div class="ttc" id="aclasspl_open_ddl_reader_element_htm_a5774d3aa95414752c55243347e408341"><div class="ttname"><a href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a5774d3aa95414752c55243347e408341">plOpenDdlReaderElement::GetPrimitivesDouble</a></div><div class="ttdeci">PL_ALWAYS_INLINE const double * GetPrimitivesDouble() const</div><div class="ttdoc">Returns a pointer to the primitive data cast to a specific type. Only valid if GetPrimitivesType() ac...</div><div class="ttdef"><b>Definition</b> OpenDdlReader.h:89</div></div>
<div class="ttc" id="aclasspl_open_ddl_reader_element_htm_a80117be242970f0cdf2cc5f1ca164b51"><div class="ttname"><a href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a80117be242970f0cdf2cc5f1ca164b51">plOpenDdlReaderElement::IsCustomType</a></div><div class="ttdeci">PL_ALWAYS_INLINE bool IsCustomType() const</div><div class="ttdoc">Whether this is a custom object type that typically contains sub-elements.</div><div class="ttdef"><b>Definition</b> OpenDdlReader.h:16</div></div>
<div class="ttc" id="aclasspl_open_ddl_reader_element_htm_a8246dea10c002cd0e6ab9cf9c54a2d45"><div class="ttname"><a href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a8246dea10c002cd0e6ab9cf9c54a2d45">plOpenDdlReaderElement::GetPrimitivesBool</a></div><div class="ttdeci">PL_ALWAYS_INLINE const bool * GetPrimitivesBool() const</div><div class="ttdoc">Returns a pointer to the primitive data cast to a specific type. Only valid if GetPrimitivesType() ac...</div><div class="ttdef"><b>Definition</b> OpenDdlReader.h:59</div></div>
<div class="ttc" id="aclasspl_open_ddl_reader_element_htm_a82dbbb2f87ac740a3f2eb9cc0fe1ca2a"><div class="ttname"><a href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a82dbbb2f87ac740a3f2eb9cc0fe1ca2a">plOpenDdlReaderElement::GetPrimitivesUInt16</a></div><div class="ttdeci">PL_ALWAYS_INLINE const plUInt16 * GetPrimitivesUInt16() const</div><div class="ttdoc">Returns a pointer to the primitive data cast to a specific type. Only valid if GetPrimitivesType() ac...</div><div class="ttdef"><b>Definition</b> OpenDdlReader.h:77</div></div>
<div class="ttc" id="aclasspl_open_ddl_reader_element_htm_a8858a4b121322626a19a9e47755921cf"><div class="ttname"><a href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a8858a4b121322626a19a9e47755921cf">plOpenDdlReaderElement::GetPrimitivesUInt64</a></div><div class="ttdeci">PL_ALWAYS_INLINE const plUInt64 * GetPrimitivesUInt64() const</div><div class="ttdoc">Returns a pointer to the primitive data cast to a specific type. Only valid if GetPrimitivesType() ac...</div><div class="ttdef"><b>Definition</b> OpenDdlReader.h:83</div></div>
<div class="ttc" id="aclasspl_open_ddl_reader_element_htm_a8f297f2f134438340952c2f3033ec1b6"><div class="ttname"><a href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a8f297f2f134438340952c2f3033ec1b6">plOpenDdlReaderElement::GetName</a></div><div class="ttdeci">PL_ALWAYS_INLINE plStringView GetName() const</div><div class="ttdoc">Returns the name of the object.</div><div class="ttdef"><b>Definition</b> OpenDdlReader.h:31</div></div>
<div class="ttc" id="aclasspl_open_ddl_reader_element_htm_a90dd204025c5e61087b718bf20d86681"><div class="ttname"><a href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a90dd204025c5e61087b718bf20d86681">plOpenDdlReaderElement::HasName</a></div><div class="ttdeci">PL_ALWAYS_INLINE bool HasName() const</div><div class="ttdoc">Whether the name of the object is non-empty.</div><div class="ttdef"><b>Definition</b> OpenDdlReader.h:28</div></div>
<div class="ttc" id="aclasspl_open_ddl_reader_element_htm_a9279c7187591c90498342f49d3afd344"><div class="ttname"><a href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a9279c7187591c90498342f49d3afd344">plOpenDdlReaderElement::GetFirstChild</a></div><div class="ttdeci">PL_ALWAYS_INLINE const plOpenDdlReaderElement * GetFirstChild() const</div><div class="ttdoc">If this is a custom type element, the returned pointer is to the first child element.</div><div class="ttdef"><b>Definition</b> OpenDdlReader.h:40</div></div>
<div class="ttc" id="aclasspl_open_ddl_reader_element_htm_a9d84bb472cb52a91976fa2fc95df0484"><div class="ttname"><a href="../../d2/d5d/classpl_open_ddl_reader_element.htm#a9d84bb472cb52a91976fa2fc95df0484">plOpenDdlReaderElement::IsNameGlobal</a></div><div class="ttdeci">PL_ALWAYS_INLINE bool IsNameGlobal() const</div><div class="ttdoc">Returns whether the element name is a global or a local name.</div><div class="ttdef"><b>Definition</b> OpenDdlReader.h:34</div></div>
<div class="ttc" id="aclasspl_open_ddl_reader_element_htm_aac6d1e69c96e7edc1d42d6d43103d4d6"><div class="ttname"><a href="../../d2/d5d/classpl_open_ddl_reader_element.htm#aac6d1e69c96e7edc1d42d6d43103d4d6">plOpenDdlReaderElement::GetCustomType</a></div><div class="ttdeci">PL_ALWAYS_INLINE plStringView GetCustomType() const</div><div class="ttdoc">Returns the string for the custom type name.</div><div class="ttdef"><b>Definition</b> OpenDdlReader.h:25</div></div>
<div class="ttc" id="aclasspl_open_ddl_reader_element_htm_aad05ccaff1d45a3e5b5874f40052abfe"><div class="ttname"><a href="../../d2/d5d/classpl_open_ddl_reader_element.htm#aad05ccaff1d45a3e5b5874f40052abfe">plOpenDdlReaderElement::GetPrimitivesType</a></div><div class="ttdeci">PL_ALWAYS_INLINE plOpenDdlPrimitiveType GetPrimitivesType() const</div><div class="ttdoc">For non-custom types this returns the type of primitive that is stored at this element.</div><div class="ttdef"><b>Definition</b> OpenDdlReader.h:52</div></div>
<div class="ttc" id="aclasspl_open_ddl_reader_element_htm_ab39e7c02c7af9d508844ccabc3fa3fa3"><div class="ttname"><a href="../../d2/d5d/classpl_open_ddl_reader_element.htm#ab39e7c02c7af9d508844ccabc3fa3fa3">plOpenDdlReaderElement::GetPrimitivesInt16</a></div><div class="ttdeci">PL_ALWAYS_INLINE const plInt16 * GetPrimitivesInt16() const</div><div class="ttdoc">Returns a pointer to the primitive data cast to a specific type. Only valid if GetPrimitivesType() ac...</div><div class="ttdef"><b>Definition</b> OpenDdlReader.h:65</div></div>
<div class="ttc" id="aclasspl_open_ddl_reader_element_htm_abc4cf1c9f3f609d2e7c1ff1283bdb5cf"><div class="ttname"><a href="../../d2/d5d/classpl_open_ddl_reader_element.htm#abc4cf1c9f3f609d2e7c1ff1283bdb5cf">plOpenDdlReaderElement::GetPrimitivesFloat</a></div><div class="ttdeci">PL_ALWAYS_INLINE const float * GetPrimitivesFloat() const</div><div class="ttdoc">Returns a pointer to the primitive data cast to a specific type. Only valid if GetPrimitivesType() ac...</div><div class="ttdef"><b>Definition</b> OpenDdlReader.h:86</div></div>
<div class="ttc" id="aclasspl_open_ddl_reader_element_htm_ac6f23ced863a7865351b78c11de056ec"><div class="ttname"><a href="../../d2/d5d/classpl_open_ddl_reader_element.htm#ac6f23ced863a7865351b78c11de056ec">plOpenDdlReaderElement::IsCustomType</a></div><div class="ttdeci">PL_ALWAYS_INLINE bool IsCustomType(plStringView sTypeName) const</div><div class="ttdoc">Whether this is a custom object type of the requested type.</div><div class="ttdef"><b>Definition</b> OpenDdlReader.h:19</div></div>
<div class="ttc" id="aclasspl_open_ddl_reader_element_htm_ae52d22f7565616bde75db18174314cb0"><div class="ttname"><a href="../../d2/d5d/classpl_open_ddl_reader_element.htm#ae52d22f7565616bde75db18174314cb0">plOpenDdlReaderElement::GetPrimitivesInt32</a></div><div class="ttdeci">PL_ALWAYS_INLINE const plInt32 * GetPrimitivesInt32() const</div><div class="ttdoc">Returns a pointer to the primitive data cast to a specific type. Only valid if GetPrimitivesType() ac...</div><div class="ttdef"><b>Definition</b> OpenDdlReader.h:68</div></div>
<div class="ttc" id="aclasspl_open_ddl_reader_htm"><div class="ttname"><a href="../../d0/d83/classpl_open_ddl_reader.htm">plOpenDdlReader</a></div><div class="ttdoc">An OpenDDL reader parses an entire DDL document and creates an in-memory representation of the docume...</div><div class="ttdef"><b>Definition</b> OpenDdlReader.h:118</div></div>
<div class="ttc" id="aclasspl_stream_reader_htm"><div class="ttname"><a href="../../df/d3d/classpl_stream_reader.htm">plStreamReader</a></div><div class="ttdoc">Interface for binary in (read) streams.</div><div class="ttdef"><b>Definition</b> Stream.h:22</div></div>
<div class="ttc" id="aclasspl_string_view_htm"><div class="ttname"><a href="../../d6/d79/classpl_string_view.htm">plStringView</a></div><div class="ttdoc">plStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...</div><div class="ttdef"><b>Definition</b> StringView.h:34</div></div>
<div class="ttc" id="astructpl_result_htm"><div class="ttname"><a href="../../da/dce/structpl_result.htm">plResult</a></div><div class="ttdoc">Default enum for returning failure or success, instead of using a bool.</div><div class="ttdef"><b>Definition</b> Types.h:54</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_53c6c6fb8a816921716f372d87aabbab.htm">IO</a></li><li class="navelem"><b>OpenDdlReader.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
