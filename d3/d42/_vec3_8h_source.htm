<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Plasma Engine: Code/Engine/Foundation/Math/Vec3.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Plasma Engine<span id="projectnumber">&#160;2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d3/d42/_vec3_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Vec3.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;Foundation/Math/Math.h&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="preprocessor">#include &lt;Foundation/Math/Vec2.h&gt;</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span> </div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00008" data-start="{" data-end="};">
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno"><a class="line" href="../../df/d1f/classpl_vec3_template.htm">    8</a></span><span class="keyword">class </span><a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template</a></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span>{</div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span>  <span class="comment">// Means that vectors can be copied using memcpy instead of copy construction.</span></div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>  PL_DECLARE_POD_TYPE();</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span> </div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>  <span class="keyword">using </span>ComponentType = Type;</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span> </div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span>  <span class="comment">// *** Data ***</span></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>  Type x, y, z;</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span> </div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>  <span class="comment">// *** Constructors ***</span></div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>  <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#aa91ace60bacce46e3f1996dc988fdd6a">plVec3Template&lt;Type&gt;</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span> </div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>  <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#aa91ace60bacce46e3f1996dc988fdd6a">plVec3Template&lt;Type&gt;</a>(Type x, Type y, Type z); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span> </div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>  <span class="keyword">explicit</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#aa91ace60bacce46e3f1996dc988fdd6a">plVec3Template&lt;Type&gt;</a>(Type v); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span> </div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>  <span class="comment">// no copy-constructor and operator= since the default-generated ones will be faster</span></div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span> </div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno"><a class="line" href="../../df/d1f/classpl_vec3_template.htm#a57e6c3f630a7f7ad5adb88b6f350a8ac">   35</a></span>  [[nodiscard]] <span class="keyword">static</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a57e6c3f630a7f7ad5adb88b6f350a8ac">MakeNaN</a>() { <span class="keywordflow">return</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#aa91ace60bacce46e3f1996dc988fdd6a">plVec3Template&lt;Type&gt;</a>(<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a7452a7f2b15201705625a7cb78723a98">plMath::NaN&lt;Type&gt;</a>()); }</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span> </div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno"><a class="line" href="../../df/d1f/classpl_vec3_template.htm#a05620d472397f6aa16dbebab1dceeb48">   38</a></span>  [[nodiscard]] <span class="keyword">static</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a05620d472397f6aa16dbebab1dceeb48">MakeZero</a>() { <span class="keywordflow">return</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#aa91ace60bacce46e3f1996dc988fdd6a">plVec3Template&lt;Type&gt;</a>(0); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span> </div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno"><a class="line" href="../../df/d1f/classpl_vec3_template.htm#ac7154a3e7cc129680c5caee15902f655">   41</a></span>  [[nodiscard]] <span class="keyword">static</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#ac7154a3e7cc129680c5caee15902f655">MakeAxisX</a>() { <span class="keywordflow">return</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#aa91ace60bacce46e3f1996dc988fdd6a">plVec3Template&lt;Type&gt;</a>(1, 0, 0); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span> </div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno"><a class="line" href="../../df/d1f/classpl_vec3_template.htm#af01e41db672adf5d6f76c49b6232eff0">   44</a></span>  [[nodiscard]] <span class="keyword">static</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#af01e41db672adf5d6f76c49b6232eff0">MakeAxisY</a>() { <span class="keywordflow">return</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#aa91ace60bacce46e3f1996dc988fdd6a">plVec3Template&lt;Type&gt;</a>(0, 1, 0); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span> </div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno"><a class="line" href="../../df/d1f/classpl_vec3_template.htm#af32765484522b3c7dd65ad2e78e591d8">   47</a></span>  [[nodiscard]] <span class="keyword">static</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#af32765484522b3c7dd65ad2e78e591d8">MakeAxisZ</a>() { <span class="keywordflow">return</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#aa91ace60bacce46e3f1996dc988fdd6a">plVec3Template&lt;Type&gt;</a>(0, 0, 1); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span> </div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno"><a class="line" href="../../df/d1f/classpl_vec3_template.htm#a75cd6114dac89754d705313b753b3664">   50</a></span>  [[nodiscard]] <span class="keyword">static</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a75cd6114dac89754d705313b753b3664">Make</a>(Type x, Type y, Type z) { <span class="keywordflow">return</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#aa91ace60bacce46e3f1996dc988fdd6a">plVec3Template&lt;Type&gt;</a>(x, y, z); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span> </div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span><span class="preprocessor">#if PL_ENABLED(PL_MATH_CHECK_FOR_NAN)</span></div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span>  <span class="keywordtype">void</span> AssertNotNaN()<span class="keyword"> const</span></div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>    PL_ASSERT_ALWAYS(!<a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a2a4310705205f4142f0eebe7ffb06c58">IsNaN</a>(), <span class="stringliteral">&quot;This object contains NaN values. This can happen when you forgot to initialize it before using it. Please &quot;</span></div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>                               <span class="stringliteral">&quot;check that all code-paths properly initialize this object.&quot;</span>);</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>  }</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span> </div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>  <span class="comment">// *** Conversions ***</span></div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#ad652723bfc450876906e5147fdd2f208">GetAsVec2</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span> </div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d1/d4b/classpl_vec4_template.htm">plVec4Template&lt;Type&gt;</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a5875d27ca17ace0ab25a4169ce955d16">GetAsVec4</a>(Type w) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span> </div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d1/d4b/classpl_vec4_template.htm">plVec4Template&lt;Type&gt;</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a860221ae3646d5c0625d4ab22c57c431">GetAsPositionVec4</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span> </div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d1/d4b/classpl_vec4_template.htm">plVec4Template&lt;Type&gt;</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a8c7950d9048fc278b8eaae1589f98b78">GetAsDirectionVec4</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span> </div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno"><a class="line" href="../../df/d1f/classpl_vec3_template.htm#a7ffe42f98c72689430d645429271e363">   75</a></span>  <span class="keyword">const</span> Type* <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a7ffe42f98c72689430d645429271e363">GetData</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> &amp;x; }</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span> </div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno"><a class="line" href="../../df/d1f/classpl_vec3_template.htm#af807291feb0fcada2238d47725ba1f54">   78</a></span>  Type* <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#af807291feb0fcada2238d47725ba1f54">GetData</a>() { <span class="keywordflow">return</span> &amp;x; }</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span> </div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>  <span class="comment">// *** Functions to set the vector to specific values ***</span></div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a0d72ff9554cd5da9acd1f93c0101f1c3">Set</a>(Type xyz); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span> </div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a0d72ff9554cd5da9acd1f93c0101f1c3">Set</a>(Type x, Type y, Type z); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span> </div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a7807ff26d2173332e933c39df3f05a24">SetZero</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span> </div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>  <span class="comment">// *** Functions dealing with length ***</span></div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>  Type <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a183fe5c97452210e61be0dd705290937">GetLength</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span> </div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>  <a class="code hl_struct" href="../../da/dce/structpl_result.htm">plResult</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#afdc6e3cb5c4db55157caeda12a1c602c">SetLength</a>(Type fNewLength, Type fEpsilon = plMath::DefaultEpsilon&lt;Type&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span> </div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>  Type <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a572854a70177ef1a0f0b6c49ecb27843">GetLengthSquared</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span> </div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>  Type <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a689178abc4bbb07988155bf8f944f571">GetLengthAndNormalize</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span> </div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a7a347b30ee59bfc32b573447d4c5cc58">GetNormalized</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span> </div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a72e0feb7f94b4f78fb9ac99e4ff6312e">Normalize</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span> </div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>  <a class="code hl_struct" href="../../da/dce/structpl_result.htm">plResult</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a889de425f7b2a39fc6f7588f39467d4a">NormalizeIfNotZero</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; vFallback = <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>(1, 0, 0), Type fEpsilon = plMath::SmallEpsilon&lt;Type&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span> </div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#aa1671956ce7a61b95b6d2761175323d0">IsZero</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span> </div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#aa1671956ce7a61b95b6d2761175323d0">IsZero</a>(Type fEpsilon) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span> </div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a48f7479d10c24b443b7df80df5407cef">IsNormalized</a>(Type fEpsilon = plMath::HugeEpsilon&lt;Type&gt;()) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span> </div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a2a4310705205f4142f0eebe7ffb06c58">IsNaN</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span> </div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a40ba0770ffe4ab142cd21a991a37fe61">IsValid</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span> </div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span> </div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>  <span class="comment">// *** Operators ***</span></div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#aed39f610add1a726aa9a1e91e2a58e9b">operator-</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span> </div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a35e4fc7fea62baddcb8e44df337ec769">operator+=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; rhs); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span> </div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#aa0429c0acbd4f367b1f81fbce57a5ead">operator-=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; rhs); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span> </div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a552dd44873ddf881c9dea4f3546a772f">operator*=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; rhs);</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span> </div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a90df1a3d668a98f14fbb974962a4bfec">operator/=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; rhs);</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span> </div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a552dd44873ddf881c9dea4f3546a772f">operator*=</a>(Type f); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span> </div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a90df1a3d668a98f14fbb974962a4bfec">operator/=</a>(Type f); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span> </div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a343ff330dc8121c57c7a3e2c897e795b">IsIdentical</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span> </div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a5d4b9c34cb678b207998f403c5e06284">IsEqual</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; rhs, Type fEpsilon) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span> </div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span> </div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>  <span class="comment">// *** Common vector operations ***</span></div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>  <a class="code hl_class" href="../../d4/dfd/classpl_angle.htm">plAngle</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#af36d84a20ff3971366d481fe393cd606">GetAngleBetween</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span> </div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>  Type <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a97023781e4ee1e7ab4a36953bba77cf0">Dot</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span> </div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span> </div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span> </div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a30dff44752bcf0939c41ede821005373">CrossRH</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span> </div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a3066073ca180a42520728c704cc0bab4">CompMin</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span> </div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a61632cae2206b10fbf8c06420a1d90fe">CompMax</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span> </div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a28fa0345170d455f00cde5aa3167faaa">CompClamp</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; vLow, <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; vHigh) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span> </div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#aa05560f1884508bae7dcaa4aedf62ce2">CompMul</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span> </div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a2d17f1e3fba5a4f23c7d767aeb295707">CompDiv</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span> </div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a39e91e722b5cbe2c3447d310f486f89e">Abs</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span> </div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span> </div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>  <span class="comment">// *** Other common operations ***</span></div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>  <a class="code hl_struct" href="../../da/dce/structpl_result.htm">plResult</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#aeda6d6ac090fea527a018ccf1d652048">CalculateNormal</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; v2, <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; v3); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span> </div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#ae11804c0cb366dc77a0e5f9e6a46966c">MakeOrthogonalTo</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; vNormal); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span> </div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#ac14909f5890e72188a9e9b9ce673c8fb">GetOrthogonalVector</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span> </div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a5c3b9cb4f6612be67e129b6306fa87a1">GetReflectedVector</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; vNormal) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span> </div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#ac2f4e942dda664f11b4a44ed34d03da3">GetRefractedVector</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; vNormal, Type fRefIndex1, Type fRefIndex2) <span class="keyword">const</span>;</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span> </div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>  [[nodiscard]] <span class="keyword">static</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a></div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>  <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#aa7e0c2666d5ed32806b02bae85e6b352">MakeRandomPointInSphere</a>(<a class="code hl_class" href="../../dc/d34/classpl_random.htm">plRandom</a>&amp; inout_rng); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span> </div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>  [[nodiscard]] <span class="keyword">static</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a></div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>  <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#aa90596ee2bad43f7b3b6fe38413f2a1c">MakeRandomDirection</a>(<a class="code hl_class" href="../../dc/d34/classpl_random.htm">plRandom</a>&amp; inout_rng); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span> </div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>  [[nodiscard]] <span class="keyword">static</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a></div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>  <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a67faa17f6bb3cf06e6dff18856b75bec">MakeRandomDeviationX</a>(<a class="code hl_class" href="../../dc/d34/classpl_random.htm">plRandom</a>&amp; inout_rng, <span class="keyword">const</span> <a class="code hl_class" href="../../d4/dfd/classpl_angle.htm">plAngle</a>&amp; maxDeviation); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span> </div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>  [[nodiscard]] <span class="keyword">static</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a></div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span>  <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#ab19999306d457ad4d43832529fc5718d">MakeRandomDeviationY</a>(<a class="code hl_class" href="../../dc/d34/classpl_random.htm">plRandom</a>&amp; inout_rng, <span class="keyword">const</span> <a class="code hl_class" href="../../d4/dfd/classpl_angle.htm">plAngle</a>&amp; maxDeviation); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span> </div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span>  [[nodiscard]] <span class="keyword">static</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a></div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span>  <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a5fba6c93c4f1238a591c3c72dd797bbd">MakeRandomDeviationZ</a>(<a class="code hl_class" href="../../dc/d34/classpl_random.htm">plRandom</a>&amp; inout_rng, <span class="keyword">const</span> <a class="code hl_class" href="../../d4/dfd/classpl_angle.htm">plAngle</a>&amp; maxDeviation); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span> </div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span>  [[nodiscard]] <span class="keyword">static</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a></div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span>  <a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#af045cc25dad36864c6f1b7e6b79679bd">MakeRandomDeviation</a>(<a class="code hl_class" href="../../dc/d34/classpl_random.htm">plRandom</a>&amp; inout_rng, <span class="keyword">const</span> <a class="code hl_class" href="../../d4/dfd/classpl_angle.htm">plAngle</a>&amp; maxDeviation, <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; vNormal); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span>};</div>
</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span> </div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span><span class="comment">// *** Operators ***</span></div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span> </div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span><span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> operator+(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; v2); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span> </div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span><span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> operator-(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; v2); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span> </div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span> </div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span><span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> operator*(Type f, <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; v); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span> </div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span><span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> operator*(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; v, Type f); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span> </div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span> </div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span><span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> operator/(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; v, Type f); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span> </div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span> </div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span><span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; v2); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span> </div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span><span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; v2); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span> </div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span><span class="keywordtype">bool</span> operator&lt;(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; v2); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span> </div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span><span class="preprocessor">#include &lt;Foundation/Math/Implementation/Vec3_inl.h&gt;</span></div>
<div class="ttc" id="aclasspl_angle_htm"><div class="ttname"><a href="../../d4/dfd/classpl_angle.htm">plAngle</a></div><div class="ttdoc">Float wrapper struct for a safe usage and conversions of angles.</div><div class="ttdef"><b>Definition</b> Angle.h:10</div></div>
<div class="ttc" id="aclasspl_random_htm"><div class="ttname"><a href="../../dc/d34/classpl_random.htm">plRandom</a></div><div class="ttdoc">A random number generator. Currently uses the WELL512 algorithm.</div><div class="ttdef"><b>Definition</b> Random.h:9</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a></div><div class="ttdoc">A 2-component vector class.</div><div class="ttdef"><b>Definition</b> Vec2.h:14</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm">plVec3Template</a></div><div class="ttdoc">A 3-component vector class.</div><div class="ttdef"><b>Definition</b> Vec3.h:9</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a05620d472397f6aa16dbebab1dceeb48"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a05620d472397f6aa16dbebab1dceeb48">plVec3Template::MakeZero</a></div><div class="ttdeci">static plVec3Template&lt; Type &gt; MakeZero()</div><div class="ttdoc">Returns a vector with all components set to zero.</div><div class="ttdef"><b>Definition</b> Vec3.h:38</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a0d72ff9554cd5da9acd1f93c0101f1c3"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a0d72ff9554cd5da9acd1f93c0101f1c3">plVec3Template::Set</a></div><div class="ttdeci">void Set(Type xyz)</div><div class="ttdoc">Sets all 3 components to this value.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:32</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a183fe5c97452210e61be0dd705290937"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a183fe5c97452210e61be0dd705290937">plVec3Template::GetLength</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE Type GetLength() const</div><div class="ttdoc">Returns the length of the vector.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:54</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a28fa0345170d455f00cde5aa3167faaa"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a28fa0345170d455f00cde5aa3167faaa">plVec3Template::CompClamp</a></div><div class="ttdeci">const plVec3Template&lt; Type &gt; CompClamp(const plVec3Template&lt; Type &gt; &amp;vLow, const plVec3Template&lt; Type &gt; &amp;vHigh) const</div><div class="ttdoc">Returns the component-wise clamped value of *this between low and high.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:335</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a2a4310705205f4142f0eebe7ffb06c58"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a2a4310705205f4142f0eebe7ffb06c58">plVec3Template::IsNaN</a></div><div class="ttdeci">bool IsNaN() const</div><div class="ttdoc">Returns true, if any of x, y or z is NaN.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:144</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a2d17f1e3fba5a4f23c7d767aeb295707"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a2d17f1e3fba5a4f23c7d767aeb295707">plVec3Template::CompDiv</a></div><div class="ttdeci">const plVec3Template&lt; Type &gt; CompDiv(const plVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise division of *this and rhs.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:354</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a3066073ca180a42520728c704cc0bab4"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a3066073ca180a42520728c704cc0bab4">plVec3Template::CompMin</a></div><div class="ttdeci">const plVec3Template&lt; Type &gt; CompMin(const plVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise minimum of *this and rhs.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:317</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a30dff44752bcf0939c41ede821005373"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a30dff44752bcf0939c41ede821005373">plVec3Template::CrossRH</a></div><div class="ttdeci">const plVec3Template&lt; Type &gt; CrossRH(const plVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the Cross-product of the two vectors (NOT commutative, order DOES matter)</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:299</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a343ff330dc8121c57c7a3e2c897e795b"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a343ff330dc8121c57c7a3e2c897e795b">plVec3Template::IsIdentical</a></div><div class="ttdeci">bool IsIdentical(const plVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Equality Check (bitwise)</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:422</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a35e4fc7fea62baddcb8e44df337ec769"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a35e4fc7fea62baddcb8e44df337ec769">plVec3Template::operator+=</a></div><div class="ttdeci">void operator+=(const plVec3Template&lt; Type &gt; &amp;rhs)</div><div class="ttdoc">Adds rhs component-wise to this vector.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:178</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a39e91e722b5cbe2c3447d310f486f89e"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a39e91e722b5cbe2c3447d310f486f89e">plVec3Template::Abs</a></div><div class="ttdeci">const plVec3Template&lt; Type &gt; Abs() const</div><div class="ttdoc">brief Returns the component-wise absolute of *this.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:363</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a40ba0770ffe4ab142cd21a991a37fe61"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a40ba0770ffe4ab142cd21a991a37fe61">plVec3Template::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdoc">Checks that all components are finite numbers.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:157</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a48f7479d10c24b443b7df80df5407cef"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a48f7479d10c24b443b7df80df5407cef">plVec3Template::IsNormalized</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE bool IsNormalized(Type fEpsilon=plMath::HugeEpsilon&lt; Type &gt;()) const</div><div class="ttdoc">Returns, whether the squared length of this vector is between 0.999f and 1.001f.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:121</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a552dd44873ddf881c9dea4f3546a772f"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a552dd44873ddf881c9dea4f3546a772f">plVec3Template::operator*=</a></div><div class="ttdeci">void operator*=(const plVec3Template&lt; Type &gt; &amp;rhs)</div><div class="ttdoc">Multiplies rhs component-wise to this vector.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:198</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a572854a70177ef1a0f0b6c49ecb27843"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a572854a70177ef1a0f0b6c49ecb27843">plVec3Template::GetLengthSquared</a></div><div class="ttdeci">Type GetLengthSquared() const</div><div class="ttdoc">Returns the squared length. Faster, since no square-root is taken. Useful, if one only wants to compa...</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:70</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a57e6c3f630a7f7ad5adb88b6f350a8ac"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a57e6c3f630a7f7ad5adb88b6f350a8ac">plVec3Template::MakeNaN</a></div><div class="ttdeci">static PL_DECLARE_IF_FLOAT_TYPE plVec3Template&lt; Type &gt; MakeNaN()</div><div class="ttdoc">Returns a vector with all components set to Not-a-Number (NaN).</div><div class="ttdef"><b>Definition</b> Vec3.h:35</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a5875d27ca17ace0ab25a4169ce955d16"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a5875d27ca17ace0ab25a4169ce955d16">plVec3Template::GetAsVec4</a></div><div class="ttdeci">const plVec4Template&lt; Type &gt; GetAsVec4(Type w) const</div><div class="ttdoc">Returns an plVec4Template with x,y,z from this vector and w set to the parameter.</div><div class="ttdef"><b>Definition</b> Vec4_inl.h:35</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a5c3b9cb4f6612be67e129b6306fa87a1"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a5c3b9cb4f6612be67e129b6306fa87a1">plVec3Template::GetReflectedVector</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE const plVec3Template&lt; Type &gt; GetReflectedVector(const plVec3Template&lt; Type &gt; &amp;vNormal) const</div><div class="ttdoc">Returns this vector reflected at vNormal.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:282</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a5d4b9c34cb678b207998f403c5e06284"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a5d4b9c34cb678b207998f403c5e06284">plVec3Template::IsEqual</a></div><div class="ttdeci">bool IsEqual(const plVec3Template&lt; Type &gt; &amp;rhs, Type fEpsilon) const</div><div class="ttdoc">Equality Check with epsilon.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:431</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a5fba6c93c4f1238a591c3c72dd797bbd"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a5fba6c93c4f1238a591c3c72dd797bbd">plVec3Template::MakeRandomDeviationZ</a></div><div class="ttdeci">static PL_DECLARE_IF_FLOAT_TYPE plVec3Template&lt; Type &gt; MakeRandomDeviationZ(plRandom &amp;inout_rng, const plAngle &amp;maxDeviation)</div><div class="ttdoc">Creates a random vector around the z axis with a maximum deviation angle of maxDeviation....</div><div class="ttdef"><b>Definition</b> AllClassesRandom_inl.h:58</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a61632cae2206b10fbf8c06420a1d90fe"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a61632cae2206b10fbf8c06420a1d90fe">plVec3Template::CompMax</a></div><div class="ttdeci">const plVec3Template&lt; Type &gt; CompMax(const plVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise maximum of *this and rhs.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:326</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a67faa17f6bb3cf06e6dff18856b75bec"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a67faa17f6bb3cf06e6dff18856b75bec">plVec3Template::MakeRandomDeviationX</a></div><div class="ttdeci">static PL_DECLARE_IF_FLOAT_TYPE plVec3Template&lt; Type &gt; MakeRandomDeviationX(plRandom &amp;inout_rng, const plAngle &amp;maxDeviation)</div><div class="ttdoc">Creates a random vector around the x axis with a maximum deviation angle of maxDeviation....</div><div class="ttdef"><b>Definition</b> AllClassesRandom_inl.h:34</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a689178abc4bbb07988155bf8f944f571"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a689178abc4bbb07988155bf8f944f571">plVec3Template::GetLengthAndNormalize</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE Type GetLengthAndNormalize()</div><div class="ttdoc">Normalizes this vector and returns its previous length in one operation. More efficient than calling ...</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:78</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a72e0feb7f94b4f78fb9ac99e4ff6312e"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a72e0feb7f94b4f78fb9ac99e4ff6312e">plVec3Template::Normalize</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE void Normalize()</div><div class="ttdoc">Normalizes this vector.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:95</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a75cd6114dac89754d705313b753b3664"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a75cd6114dac89754d705313b753b3664">plVec3Template::Make</a></div><div class="ttdeci">static plVec3Template&lt; Type &gt; Make(Type x, Type y, Type z)</div><div class="ttdoc">Returns a vector initialized to x,y,z.</div><div class="ttdef"><b>Definition</b> Vec3.h:50</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a7807ff26d2173332e933c39df3f05a24"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a7807ff26d2173332e933c39df3f05a24">plVec3Template::SetZero</a></div><div class="ttdeci">void SetZero()</div><div class="ttdoc">Sets the vector to all zero.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:48</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a7a347b30ee59bfc32b573447d4c5cc58"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a7a347b30ee59bfc32b573447d4c5cc58">plVec3Template::GetNormalized</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE const plVec3Template&lt; Type &gt; GetNormalized() const</div><div class="ttdoc">Returns a normalized version of this vector, leaves the vector itself unchanged.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:86</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a7ffe42f98c72689430d645429271e363"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a7ffe42f98c72689430d645429271e363">plVec3Template::GetData</a></div><div class="ttdeci">const Type * GetData() const</div><div class="ttdoc">Returns the data as an array.</div><div class="ttdef"><b>Definition</b> Vec3.h:75</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a860221ae3646d5c0625d4ab22c57c431"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a860221ae3646d5c0625d4ab22c57c431">plVec3Template::GetAsPositionVec4</a></div><div class="ttdeci">const plVec4Template&lt; Type &gt; GetAsPositionVec4() const</div><div class="ttdoc">Returns an plVec4Template with x,y,z from this vector and w set 1.</div><div class="ttdef"><b>Definition</b> Vec4_inl.h:43</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a889de425f7b2a39fc6f7588f39467d4a"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a889de425f7b2a39fc6f7588f39467d4a">plVec3Template::NormalizeIfNotZero</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE plResult NormalizeIfNotZero(const plVec3Template&lt; Type &gt; &amp;vFallback=plVec3Template&lt; Type &gt;(1, 0, 0), Type fEpsilon=plMath::SmallEpsilon&lt; Type &gt;())</div><div class="ttdoc">Tries to normalize this vector. If the vector is too close to zero, PL_FAILURE is returned and the ve...</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:101</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a8c7950d9048fc278b8eaae1589f98b78"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a8c7950d9048fc278b8eaae1589f98b78">plVec3Template::GetAsDirectionVec4</a></div><div class="ttdeci">const plVec4Template&lt; Type &gt; GetAsDirectionVec4() const</div><div class="ttdoc">Returns an plVec4Template with x,y,z from this vector and w set 0.</div><div class="ttdef"><b>Definition</b> Vec4_inl.h:52</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a90df1a3d668a98f14fbb974962a4bfec"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a90df1a3d668a98f14fbb974962a4bfec">plVec3Template::operator/=</a></div><div class="ttdeci">void operator/=(const plVec3Template&lt; Type &gt; &amp;rhs)</div><div class="ttdoc">Divides this vector component-wise by rhs.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:210</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a97023781e4ee1e7ab4a36953bba77cf0"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a97023781e4ee1e7ab4a36953bba77cf0">plVec3Template::Dot</a></div><div class="ttdeci">Type Dot(const plVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the Dot-product of the two vectors (commutative, order does not matter)</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:290</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_aa0429c0acbd4f367b1f81fbce57a5ead"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#aa0429c0acbd4f367b1f81fbce57a5ead">plVec3Template::operator-=</a></div><div class="ttdeci">void operator-=(const plVec3Template&lt; Type &gt; &amp;rhs)</div><div class="ttdoc">Subtracts rhs component-wise from this vector.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:188</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_aa05560f1884508bae7dcaa4aedf62ce2"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#aa05560f1884508bae7dcaa4aedf62ce2">plVec3Template::CompMul</a></div><div class="ttdeci">const plVec3Template&lt; Type &gt; CompMul(const plVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise multiplication of *this and rhs.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:345</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_aa1671956ce7a61b95b6d2761175323d0"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#aa1671956ce7a61b95b6d2761175323d0">plVec3Template::IsZero</a></div><div class="ttdeci">bool IsZero() const</div><div class="ttdoc">Returns, whether this vector is (0, 0, 0).</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:128</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_aa7e0c2666d5ed32806b02bae85e6b352"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#aa7e0c2666d5ed32806b02bae85e6b352">plVec3Template::MakeRandomPointInSphere</a></div><div class="ttdeci">static PL_DECLARE_IF_FLOAT_TYPE plVec3Template&lt; Type &gt; MakeRandomPointInSphere(plRandom &amp;inout_rng)</div><div class="ttdoc">Returns a random point inside a unit sphere (radius 1).</div><div class="ttdef"><b>Definition</b> AllClassesRandom_inl.h:8</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_aa90596ee2bad43f7b3b6fe38413f2a1c"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#aa90596ee2bad43f7b3b6fe38413f2a1c">plVec3Template::MakeRandomDirection</a></div><div class="ttdeci">static PL_DECLARE_IF_FLOAT_TYPE plVec3Template&lt; Type &gt; MakeRandomDirection(plRandom &amp;inout_rng)</div><div class="ttdoc">Creates a random direction vector. The vector is normalized.</div><div class="ttdef"><b>Definition</b> AllClassesRandom_inl.h:26</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_aa91ace60bacce46e3f1996dc988fdd6a"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#aa91ace60bacce46e3f1996dc988fdd6a">plVec3Template::plVec3Template</a></div><div class="ttdeci">plVec3Template()</div><div class="ttdoc">default-constructed vector is uninitialized (for speed)</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:4</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_ab19999306d457ad4d43832529fc5718d"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#ab19999306d457ad4d43832529fc5718d">plVec3Template::MakeRandomDeviationY</a></div><div class="ttdeci">static PL_DECLARE_IF_FLOAT_TYPE plVec3Template&lt; Type &gt; MakeRandomDeviationY(plRandom &amp;inout_rng, const plAngle &amp;maxDeviation)</div><div class="ttdoc">Creates a random vector around the y axis with a maximum deviation angle of maxDeviation....</div><div class="ttdef"><b>Definition</b> AllClassesRandom_inl.h:50</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_ac14909f5890e72188a9e9b9ce673c8fb"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#ac14909f5890e72188a9e9b9ce673c8fb">plVec3Template::GetOrthogonalVector</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE const plVec3Template&lt; Type &gt; GetOrthogonalVector() const</div><div class="ttdoc">Returns some arbitrary vector orthogonal to this one. The vector is NOT normalized.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:270</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_ac2f4e942dda664f11b4a44ed34d03da3"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#ac2f4e942dda664f11b4a44ed34d03da3">plVec3Template::GetRefractedVector</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE const plVec3Template&lt; Type &gt; GetRefractedVector(const plVec3Template&lt; Type &gt; &amp;vNormal, Type fRefIndex1, Type fRefIndex2) const</div><div class="ttdoc">Returns this vector, refracted at vNormal, using the refraction index of the current medium and the m...</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:470</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_ac7154a3e7cc129680c5caee15902f655"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#ac7154a3e7cc129680c5caee15902f655">plVec3Template::MakeAxisX</a></div><div class="ttdeci">static plVec3Template&lt; Type &gt; MakeAxisX()</div><div class="ttdoc">Returns a vector initialized to the X unit vector (1, 0, 0).</div><div class="ttdef"><b>Definition</b> Vec3.h:41</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_ad652723bfc450876906e5147fdd2f208"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#ad652723bfc450876906e5147fdd2f208">plVec3Template::GetAsVec2</a></div><div class="ttdeci">const plVec2Template&lt; Type &gt; GetAsVec2() const</div><div class="ttdoc">Returns an plVec2Template with x and y from this vector.</div><div class="ttdef"><b>Definition</b> Vec4_inl.h:26</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_ae11804c0cb366dc77a0e5f9e6a46966c"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#ae11804c0cb366dc77a0e5f9e6a46966c">plVec3Template::MakeOrthogonalTo</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE void MakeOrthogonalTo(const plVec3Template&lt; Type &gt; &amp;vNormal)</div><div class="ttdoc">Modifies this direction vector to be orthogonal to the given (normalized) direction vector....</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:260</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_aed39f610add1a726aa9a1e91e2a58e9b"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#aed39f610add1a726aa9a1e91e2a58e9b">plVec3Template::operator-</a></div><div class="ttdeci">const plVec3Template&lt; Type &gt; operator-() const</div><div class="ttdoc">Returns the negation of this vector.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:170</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_aeda6d6ac090fea527a018ccf1d652048"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#aeda6d6ac090fea527a018ccf1d652048">plVec3Template::CalculateNormal</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE plResult CalculateNormal(const plVec3Template&lt; Type &gt; &amp;v1, const plVec3Template&lt; Type &gt; &amp;v2, const plVec3Template&lt; Type &gt; &amp;v3)</div><div class="ttdoc">Calculates the normal of the triangle defined by the three vertices. Vertices are assumed to be order...</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:253</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_af01e41db672adf5d6f76c49b6232eff0"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#af01e41db672adf5d6f76c49b6232eff0">plVec3Template::MakeAxisY</a></div><div class="ttdeci">static plVec3Template&lt; Type &gt; MakeAxisY()</div><div class="ttdoc">Returns a vector initialized to the Y unit vector (0, 1, 0).</div><div class="ttdef"><b>Definition</b> Vec3.h:44</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_af045cc25dad36864c6f1b7e6b79679bd"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#af045cc25dad36864c6f1b7e6b79679bd">plVec3Template::MakeRandomDeviation</a></div><div class="ttdeci">static PL_DECLARE_IF_FLOAT_TYPE plVec3Template&lt; Type &gt; MakeRandomDeviation(plRandom &amp;inout_rng, const plAngle &amp;maxDeviation, const plVec3Template&lt; Type &gt; &amp;vNormal)</div><div class="ttdoc">Creates a random vector around the given normal with a maximum deviation.</div><div class="ttdef"><b>Definition</b> AllClassesRandom_inl.h:66</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_af32765484522b3c7dd65ad2e78e591d8"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#af32765484522b3c7dd65ad2e78e591d8">plVec3Template::MakeAxisZ</a></div><div class="ttdeci">static plVec3Template&lt; Type &gt; MakeAxisZ()</div><div class="ttdoc">Returns a vector initialized to the Z unit vector (0, 0, 1).</div><div class="ttdef"><b>Definition</b> Vec3.h:47</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_af36d84a20ff3971366d481fe393cd606"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#af36d84a20ff3971366d481fe393cd606">plVec3Template::GetAngleBetween</a></div><div class="ttdeci">plAngle GetAngleBetween(const plVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the positive angle between *this and rhs. Both this and rhs must be normalized.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:308</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_af807291feb0fcada2238d47725ba1f54"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#af807291feb0fcada2238d47725ba1f54">plVec3Template::GetData</a></div><div class="ttdeci">Type * GetData()</div><div class="ttdoc">Returns the data as an array.</div><div class="ttdef"><b>Definition</b> Vec3.h:78</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_afdc6e3cb5c4db55157caeda12a1c602c"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#afdc6e3cb5c4db55157caeda12a1c602c">plVec3Template::SetLength</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE plResult SetLength(Type fNewLength, Type fEpsilon=plMath::DefaultEpsilon&lt; Type &gt;())</div><div class="ttdoc">Tries to rescale the vector to the given length. If the vector is too close to zero,...</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:60</div></div>
<div class="ttc" id="aclasspl_vec4_template_htm"><div class="ttname"><a href="../../d1/d4b/classpl_vec4_template.htm">plVec4Template</a></div><div class="ttdoc">A 4-component vector class.</div><div class="ttdef"><b>Definition</b> Vec4.h:9</div></div>
<div class="ttc" id="anamespacepl_math_htm_a7452a7f2b15201705625a7cb78723a98"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a7452a7f2b15201705625a7cb78723a98">plMath::NaN</a></div><div class="ttdeci">constexpr TYPE NaN()</div><div class="ttdoc">Returns the value for NaN as the template type. Returns zero, if the type does not support NaN.</div><div class="ttdef"><b>Definition</b> Constants_inl.h:58</div></div>
<div class="ttc" id="astructpl_result_htm"><div class="ttname"><a href="../../da/dce/structpl_result.htm">plResult</a></div><div class="ttdoc">Default enum for returning failure or success, instead of using a bool.</div><div class="ttdef"><b>Definition</b> Types.h:54</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_b421fc8dbee4bf114051d293564697bb.htm">Math</a></li><li class="navelem"><b>Vec3.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
