<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Plasma Engine: Code/Engine/Foundation/Threading/Implementation/AtomicInteger_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Plasma Engine<span id="projectnumber">&#160;2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d8/d88/_atomic_integer__inl_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">AtomicInteger_inl.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span> </div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00003" data-start="{" data-end="}">
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#ae235a05a7366c40c3b1c685101fa7fda">    3</a></span>PL_ALWAYS_INLINE <a class="code hl_function" href="../../da/ddf/classpl_atomic_integer.htm#ae235a05a7366c40c3b1c685101fa7fda">plAtomicInteger&lt;T&gt;::plAtomicInteger</a>()</div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span>  : m_Value(0)</div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span>{</div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span>}</div>
</div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span> </div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00009" data-start="{" data-end="}">
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#a5715823addad1fc4cda58cde1e4d8684">    9</a></span>PL_ALWAYS_INLINE <a class="code hl_function" href="../../da/ddf/classpl_atomic_integer.htm#ae235a05a7366c40c3b1c685101fa7fda">plAtomicInteger&lt;T&gt;::plAtomicInteger</a>(T value)</div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span>  : m_Value(static_cast&lt;UnderlyingType&gt;(value))</div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span>{</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>}</div>
</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span> </div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00015" data-start="{" data-end="}">
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#ae1cd4234715625e1a3ba7cc410a94659">   15</a></span>PL_ALWAYS_INLINE <a class="code hl_function" href="../../da/ddf/classpl_atomic_integer.htm#ae235a05a7366c40c3b1c685101fa7fda">plAtomicInteger&lt;T&gt;::plAtomicInteger</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/ddf/classpl_atomic_integer.htm">plAtomicInteger&lt;T&gt;</a>&amp; value)</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span>  : m_Value(<a class="code hl_struct" href="../../d1/d0a/structpl_atomic_utils.htm">plAtomicUtils</a>::Read(value.m_Value))</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>{</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>}</div>
</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span> </div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00021" data-start="{" data-end="}">
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#a552fa63c77115c7af0499ac430e9109b">   21</a></span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../da/ddf/classpl_atomic_integer.htm">plAtomicInteger&lt;T&gt;</a>&amp; <a class="code hl_function" href="../../da/ddf/classpl_atomic_integer.htm#a552fa63c77115c7af0499ac430e9109b">plAtomicInteger&lt;T&gt;::operator=</a>(<span class="keyword">const</span> T value)</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>{</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>  Set(value);</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>  <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>}</div>
</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span> </div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00028" data-start="{" data-end="}">
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#a811bbe616215b2ca6b5c3b59b8b98515">   28</a></span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../da/ddf/classpl_atomic_integer.htm">plAtomicInteger&lt;T&gt;</a>&amp; <a class="code hl_function" href="../../da/ddf/classpl_atomic_integer.htm#a552fa63c77115c7af0499ac430e9109b">plAtomicInteger&lt;T&gt;::operator=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/ddf/classpl_atomic_integer.htm">plAtomicInteger&lt;T&gt;</a>&amp; value)</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>{</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>  Set(<a class="code hl_function" href="../../d1/d0a/structpl_atomic_utils.htm#a82f21e4e3ff650724758518c4d0a0f77">plAtomicUtils::Read</a>(value.m_Value));</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>  <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span>}</div>
</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span> </div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00035" data-start="{" data-end="}">
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#a3fd4f713f68655a2507905d9d59fb790">   35</a></span>PL_ALWAYS_INLINE T <a class="code hl_function" href="../../da/ddf/classpl_atomic_integer.htm#a3fd4f713f68655a2507905d9d59fb790">plAtomicInteger&lt;T&gt;::Increment</a>()</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>{</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>  <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code hl_function" href="../../d1/d0a/structpl_atomic_utils.htm#aabb99d05a2261f37d42dfa9c3e896b89">plAtomicUtils::Increment</a>(m_Value));</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>}</div>
</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span> </div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00041" data-start="{" data-end="}">
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#a742a052f3d8362ac116a17483905035f">   41</a></span>PL_ALWAYS_INLINE T <a class="code hl_function" href="../../da/ddf/classpl_atomic_integer.htm#a742a052f3d8362ac116a17483905035f">plAtomicInteger&lt;T&gt;::Decrement</a>()</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>{</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>  <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code hl_function" href="../../d1/d0a/structpl_atomic_utils.htm#a0be0beb627aa2cf504f23b426ae14ee7">plAtomicUtils::Decrement</a>(m_Value));</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>}</div>
</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span> </div>
<div class="foldopen" id="foldopen00046" data-start="{" data-end="}">
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#ae235a05a7366c40c3b1c685101fa7fda">   46</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00047" data-start="{" data-end="}">
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#aa9759151bbb1a8577ff1c31aaff6eb4a">   47</a></span>PL_ALWAYS_INLINE T <a class="code hl_function" href="../../da/ddf/classpl_atomic_integer.htm#aa9759151bbb1a8577ff1c31aaff6eb4a">plAtomicInteger&lt;T&gt;::PostIncrement</a>()</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>{</div>
<div class="foldopen" id="foldopen00049" data-start="{" data-end="}">
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#a5715823addad1fc4cda58cde1e4d8684">   49</a></span>  <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code hl_function" href="../../d1/d0a/structpl_atomic_utils.htm#a997d3f381d9cb7d9bf6099c1b7017db7">plAtomicUtils::PostIncrement</a>(m_Value));</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>}</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span> </div>
<div class="foldopen" id="foldopen00052" data-start="{" data-end="}">
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#ae1cd4234715625e1a3ba7cc410a94659">   52</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00053" data-start="{" data-end="}">
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#a6f7abe01ac4c24769ade685d984a0dcc">   53</a></span>PL_ALWAYS_INLINE T <a class="code hl_function" href="../../da/ddf/classpl_atomic_integer.htm#a6f7abe01ac4c24769ade685d984a0dcc">plAtomicInteger&lt;T&gt;::PostDecrement</a>()</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>{</div>
<div class="foldopen" id="foldopen00055" data-start="{" data-end="}">
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#a552fa63c77115c7af0499ac430e9109b">   55</a></span>  <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code hl_function" href="../../d1/d0a/structpl_atomic_utils.htm#ab7e863675defb33d13975774158c6da6">plAtomicUtils::PostDecrement</a>(m_Value));</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>}</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span> </div>
<div class="foldopen" id="foldopen00058" data-start="{" data-end="}">
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#a811bbe616215b2ca6b5c3b59b8b98515">   58</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../da/ddf/classpl_atomic_integer.htm">plAtomicInteger&lt;T&gt;::Add</a>(T x)</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>{</div>
<div class="foldopen" id="foldopen00061" data-start="{" data-end="}">
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#a3fd4f713f68655a2507905d9d59fb790">   61</a></span>  <a class="code hl_function" href="../../d1/d0a/structpl_atomic_utils.htm#a18c08fedb2e34f06b25c107dd26f713f">plAtomicUtils::Add</a>(m_Value, <span class="keyword">static_cast&lt;</span>UnderlyingType<span class="keyword">&gt;</span>(x));</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>}</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span> </div>
<div class="foldopen" id="foldopen00064" data-start="{" data-end="}">
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#a742a052f3d8362ac116a17483905035f">   64</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../da/ddf/classpl_atomic_integer.htm">plAtomicInteger&lt;T&gt;::Subtract</a>(T x)</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>{</div>
<div class="foldopen" id="foldopen00067" data-start="{" data-end="}">
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#aa9759151bbb1a8577ff1c31aaff6eb4a">   67</a></span>  <a class="code hl_function" href="../../d1/d0a/structpl_atomic_utils.htm#a18c08fedb2e34f06b25c107dd26f713f">plAtomicUtils::Add</a>(m_Value, -<span class="keyword">static_cast&lt;</span>UnderlyingType<span class="keyword">&gt;</span>(x));</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>}</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span> </div>
<div class="foldopen" id="foldopen00070" data-start="{" data-end="}">
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#a6f7abe01ac4c24769ade685d984a0dcc">   70</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../da/ddf/classpl_atomic_integer.htm">plAtomicInteger&lt;T&gt;::And</a>(T x)</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>{</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>  <a class="code hl_function" href="../../d1/d0a/structpl_atomic_utils.htm#a8a0d6f94aa469e67eef4a5fa079fdb03">plAtomicUtils::And</a>(m_Value, <span class="keyword">static_cast&lt;</span>UnderlyingType<span class="keyword">&gt;</span>(x));</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>}</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span> </div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../da/ddf/classpl_atomic_integer.htm">plAtomicInteger&lt;T&gt;::Or</a>(T x)</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>{</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>  <a class="code hl_function" href="../../d1/d0a/structpl_atomic_utils.htm#a46f99064be7e82dad94f95b15fff019a">plAtomicUtils::Or</a>(m_Value, <span class="keyword">static_cast&lt;</span>UnderlyingType<span class="keyword">&gt;</span>(x));</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>}</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span> </div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00083" data-start="{" data-end="}">
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#a90d2ab86094d86ebc9622a21f842629d">   83</a></span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../da/ddf/classpl_atomic_integer.htm">plAtomicInteger&lt;T&gt;::Xor</a>(T x)</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>{</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>  <a class="code hl_function" href="../../d1/d0a/structpl_atomic_utils.htm#a92771d38752c3591245baee422f81944">plAtomicUtils::Xor</a>(m_Value, <span class="keyword">static_cast&lt;</span>UnderlyingType<span class="keyword">&gt;</span>(x));</div>
<div class="foldopen" id="foldopen00086" data-start="{" data-end="}">
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#a1f65affa768a31a4bc3219a29ba295fe">   86</a></span>}</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span> </div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../da/ddf/classpl_atomic_integer.htm">plAtomicInteger&lt;T&gt;::Min</a>(T x)</div>
<div class="foldopen" id="foldopen00090" data-start="{" data-end="}">
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#ac64fcdab04e7d7d3aebd3f4e36215e38">   90</a></span>{</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>  <a class="code hl_function" href="../../d1/d0a/structpl_atomic_utils.htm#a849e1718797d301bba7e1e3a53b189db">plAtomicUtils::Min</a>(m_Value, <span class="keyword">static_cast&lt;</span>UnderlyingType<span class="keyword">&gt;</span>(x));</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>}</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span> </div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../da/ddf/classpl_atomic_integer.htm">plAtomicInteger&lt;T&gt;::Max</a>(T x)</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>{</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>  <a class="code hl_function" href="../../d1/d0a/structpl_atomic_utils.htm#aada3493cbf0ea41477378ad591653be7">plAtomicUtils::Max</a>(m_Value, <span class="keyword">static_cast&lt;</span>UnderlyingType<span class="keyword">&gt;</span>(x));</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>}</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span> </div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00101" data-start="{" data-end="}">
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#a90d2ab86094d86ebc9622a21f842629d">  101</a></span>PL_ALWAYS_INLINE T <a class="code hl_function" href="../../da/ddf/classpl_atomic_integer.htm#a90d2ab86094d86ebc9622a21f842629d">plAtomicInteger&lt;T&gt;::Set</a>(T x)</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>{</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>  <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code hl_function" href="../../d1/d0a/structpl_atomic_utils.htm#ab93143cdde83539f48ea2bc1d82d7596">plAtomicUtils::Set</a>(m_Value, <span class="keyword">static_cast&lt;</span>UnderlyingType<span class="keyword">&gt;</span>(x)));</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>}</div>
</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span> </div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00107" data-start="{" data-end="}">
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#a1f65affa768a31a4bc3219a29ba295fe">  107</a></span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../da/ddf/classpl_atomic_integer.htm#a1f65affa768a31a4bc3219a29ba295fe">plAtomicInteger&lt;T&gt;::TestAndSet</a>(T expected, T x)</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>{</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../d1/d0a/structpl_atomic_utils.htm#afefb2b9dee34119364949556ebd4d877">plAtomicUtils::TestAndSet</a>(m_Value, <span class="keyword">static_cast&lt;</span>UnderlyingType<span class="keyword">&gt;</span>(expected), <span class="keyword">static_cast&lt;</span>UnderlyingType<span class="keyword">&gt;</span>(x));</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>}</div>
</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span> </div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00113" data-start="{" data-end="}">
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno"><a class="line" href="../../da/ddf/classpl_atomic_integer.htm#ac64fcdab04e7d7d3aebd3f4e36215e38">  113</a></span>PL_ALWAYS_INLINE T <a class="code hl_function" href="../../da/ddf/classpl_atomic_integer.htm#ac64fcdab04e7d7d3aebd3f4e36215e38">plAtomicInteger&lt;T&gt;::CompareAndSwap</a>(T expected, T x)</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>{</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>  <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code hl_function" href="../../d1/d0a/structpl_atomic_utils.htm#a1d9c408a29f946114c2efdde4b795425">plAtomicUtils::CompareAndSwap</a>(m_Value, <span class="keyword">static_cast&lt;</span>UnderlyingType<span class="keyword">&gt;</span>(expected), <span class="keyword">static_cast&lt;</span>UnderlyingType<span class="keyword">&gt;</span>(x)));</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>}</div>
</div>
</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span> </div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../da/ddf/classpl_atomic_integer.htm">plAtomicInteger&lt;T&gt;::operator</a> T()<span class="keyword"> const</span></div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>  <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(<a class="code hl_function" href="../../d1/d0a/structpl_atomic_utils.htm#a82f21e4e3ff650724758518c4d0a0f77">plAtomicUtils::Read</a>(m_Value));</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>}</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span> </div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span> </div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>PL_ALWAYS_INLINE <a class="code hl_function" href="../../d1/dc8/classpl_atomic_bool.htm#a55eacae022e2f11c1eaeacb2c41d3baf">plAtomicBool::plAtomicBool</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>PL_ALWAYS_INLINE plAtomicBool::~plAtomicBool() = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span> </div>
<div class="foldopen" id="foldopen00129" data-start="{" data-end="}">
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno"><a class="line" href="../../d1/dc8/classpl_atomic_bool.htm#a783900a5dab6a059edb1182e5d6c9828">  129</a></span>PL_ALWAYS_INLINE <a class="code hl_function" href="../../d1/dc8/classpl_atomic_bool.htm#a55eacae022e2f11c1eaeacb2c41d3baf">plAtomicBool::plAtomicBool</a>(<span class="keywordtype">bool</span> value)</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>{</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>  <a class="code hl_function" href="../../d1/dc8/classpl_atomic_bool.htm#a06d8e3ea3555e5ef031b8c2e4dc94918">Set</a>(value);</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>}</div>
</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span> </div>
<div class="foldopen" id="foldopen00134" data-start="{" data-end="}">
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno"><a class="line" href="../../d1/dc8/classpl_atomic_bool.htm#a081ede7676c484f12d2431e6da7a6a73">  134</a></span>PL_ALWAYS_INLINE <a class="code hl_function" href="../../d1/dc8/classpl_atomic_bool.htm#a55eacae022e2f11c1eaeacb2c41d3baf">plAtomicBool::plAtomicBool</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dc8/classpl_atomic_bool.htm">plAtomicBool</a>&amp; rhs)</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>{</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>  <a class="code hl_function" href="../../d1/dc8/classpl_atomic_bool.htm#a06d8e3ea3555e5ef031b8c2e4dc94918">Set</a>(<span class="keyword">static_cast&lt;</span><span class="keywordtype">bool</span><span class="keyword">&gt;</span>(rhs));</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>}</div>
</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span> </div>
<div class="foldopen" id="foldopen00139" data-start="{" data-end="}">
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno"><a class="line" href="../../d1/dc8/classpl_atomic_bool.htm#a06d8e3ea3555e5ef031b8c2e4dc94918">  139</a></span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/dc8/classpl_atomic_bool.htm#a06d8e3ea3555e5ef031b8c2e4dc94918">plAtomicBool::Set</a>(<span class="keywordtype">bool</span> value)</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>{</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>  <span class="keywordflow">return</span> m_iAtomicInt.<a class="code hl_function" href="../../da/ddf/classpl_atomic_integer.htm#a90d2ab86094d86ebc9622a21f842629d">Set</a>(value ? 1 : 0) != 0;</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>}</div>
</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span> </div>
<div class="foldopen" id="foldopen00144" data-start="{" data-end="}">
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno"><a class="line" href="../../d1/dc8/classpl_atomic_bool.htm#a6ec8c3412d139f380a195cb6a265b037">  144</a></span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dc8/classpl_atomic_bool.htm#a6ec8c3412d139f380a195cb6a265b037">plAtomicBool::operator=</a>(<span class="keywordtype">bool</span> value)</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>{</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>  <a class="code hl_function" href="../../d1/dc8/classpl_atomic_bool.htm#a06d8e3ea3555e5ef031b8c2e4dc94918">Set</a>(value);</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>}</div>
</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span> </div>
<div class="foldopen" id="foldopen00149" data-start="{" data-end="}">
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno"><a class="line" href="../../d1/dc8/classpl_atomic_bool.htm#a97ddfdd46b798c311220d74e4612e236">  149</a></span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dc8/classpl_atomic_bool.htm#a6ec8c3412d139f380a195cb6a265b037">plAtomicBool::operator=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dc8/classpl_atomic_bool.htm">plAtomicBool</a>&amp; rhs)</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>{</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>  <a class="code hl_function" href="../../d1/dc8/classpl_atomic_bool.htm#a06d8e3ea3555e5ef031b8c2e4dc94918">Set</a>(<span class="keyword">static_cast&lt;</span><span class="keywordtype">bool</span><span class="keyword">&gt;</span>(rhs));</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>}</div>
</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span> </div>
<div class="foldopen" id="foldopen00154" data-start="{" data-end="}">
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno"><a class="line" href="../../d1/dc8/classpl_atomic_bool.htm#a48c0619214850c9509edd91fcc613f42">  154</a></span>PL_ALWAYS_INLINE plAtomicBool::operator bool()<span class="keyword"> const</span></div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>  <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>plInt32<span class="keyword">&gt;</span>(m_iAtomicInt) != 0;</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>}</div>
</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span> </div>
<div class="foldopen" id="foldopen00159" data-start="{" data-end="}">
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno"><a class="line" href="../../d1/dc8/classpl_atomic_bool.htm#a793b8cbd5f70062b0f1a26a160f15bd2">  159</a></span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/dc8/classpl_atomic_bool.htm#a793b8cbd5f70062b0f1a26a160f15bd2">plAtomicBool::TestAndSet</a>(<span class="keywordtype">bool</span> bExpected, <span class="keywordtype">bool</span> bNewValue)</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>{</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>  <span class="keywordflow">return</span> m_iAtomicInt.<a class="code hl_function" href="../../da/ddf/classpl_atomic_integer.htm#a1f65affa768a31a4bc3219a29ba295fe">TestAndSet</a>(bExpected ? 1 : 0, bNewValue ? 1 : 0) != 0;</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>}</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="ttc" id="aclasspl_atomic_bool_htm"><div class="ttname"><a href="../../d1/dc8/classpl_atomic_bool.htm">plAtomicBool</a></div><div class="ttdoc">An atomic boolean variable. This is just a wrapper around an atomic int32 for convenience.</div><div class="ttdef"><b>Definition</b> AtomicInteger.h:100</div></div>
<div class="ttc" id="aclasspl_atomic_bool_htm_a06d8e3ea3555e5ef031b8c2e4dc94918"><div class="ttname"><a href="../../d1/dc8/classpl_atomic_bool.htm#a06d8e3ea3555e5ef031b8c2e4dc94918">plAtomicBool::Set</a></div><div class="ttdeci">bool Set(bool value)</div><div class="ttdoc">Sets the bool to the given value and returns its previous value.</div><div class="ttdef"><b>Definition</b> AtomicInteger_inl.h:139</div></div>
<div class="ttc" id="aclasspl_atomic_bool_htm_a55eacae022e2f11c1eaeacb2c41d3baf"><div class="ttname"><a href="../../d1/dc8/classpl_atomic_bool.htm#a55eacae022e2f11c1eaeacb2c41d3baf">plAtomicBool::plAtomicBool</a></div><div class="ttdeci">plAtomicBool()</div><div class="ttdoc">Initializes the bool to 'false'.</div></div>
<div class="ttc" id="aclasspl_atomic_bool_htm_a6ec8c3412d139f380a195cb6a265b037"><div class="ttname"><a href="../../d1/dc8/classpl_atomic_bool.htm#a6ec8c3412d139f380a195cb6a265b037">plAtomicBool::operator=</a></div><div class="ttdeci">void operator=(bool value)</div><div class="ttdoc">Sets the bool to the given value.</div><div class="ttdef"><b>Definition</b> AtomicInteger_inl.h:144</div></div>
<div class="ttc" id="aclasspl_atomic_bool_htm_a793b8cbd5f70062b0f1a26a160f15bd2"><div class="ttname"><a href="../../d1/dc8/classpl_atomic_bool.htm#a793b8cbd5f70062b0f1a26a160f15bd2">plAtomicBool::TestAndSet</a></div><div class="ttdeci">bool TestAndSet(bool bExpected, bool bNewValue)</div><div class="ttdoc">Sets the internal value to newValue if the internal value is equal to expected and returns true,...</div><div class="ttdef"><b>Definition</b> AtomicInteger_inl.h:159</div></div>
<div class="ttc" id="aclasspl_atomic_integer_htm"><div class="ttname"><a href="../../da/ddf/classpl_atomic_integer.htm">plAtomicInteger</a></div><div class="ttdoc">Integer class that can be manipulated in an atomic (i.e. thread-safe) fashion.</div><div class="ttdef"><b>Definition</b> AtomicInteger.h:39</div></div>
<div class="ttc" id="aclasspl_atomic_integer_htm_a1f65affa768a31a4bc3219a29ba295fe"><div class="ttname"><a href="../../da/ddf/classpl_atomic_integer.htm#a1f65affa768a31a4bc3219a29ba295fe">plAtomicInteger::TestAndSet</a></div><div class="ttdeci">bool TestAndSet(T expected, T x)</div><div class="ttdoc">Sets the internal value to x if the internal value is equal to expected and returns true,...</div><div class="ttdef"><b>Definition</b> AtomicInteger_inl.h:107</div></div>
<div class="ttc" id="aclasspl_atomic_integer_htm_a3fd4f713f68655a2507905d9d59fb790"><div class="ttname"><a href="../../da/ddf/classpl_atomic_integer.htm#a3fd4f713f68655a2507905d9d59fb790">plAtomicInteger::Increment</a></div><div class="ttdeci">T Increment()</div><div class="ttdoc">Increments the internal value and returns the incremented value.</div><div class="ttdef"><b>Definition</b> AtomicInteger_inl.h:35</div></div>
<div class="ttc" id="aclasspl_atomic_integer_htm_a552fa63c77115c7af0499ac430e9109b"><div class="ttname"><a href="../../da/ddf/classpl_atomic_integer.htm#a552fa63c77115c7af0499ac430e9109b">plAtomicInteger::operator=</a></div><div class="ttdeci">plAtomicInteger &amp; operator=(T value)</div><div class="ttdoc">Assigns a new integer value to this object.</div><div class="ttdef"><b>Definition</b> AtomicInteger_inl.h:21</div></div>
<div class="ttc" id="aclasspl_atomic_integer_htm_a6f7abe01ac4c24769ade685d984a0dcc"><div class="ttname"><a href="../../da/ddf/classpl_atomic_integer.htm#a6f7abe01ac4c24769ade685d984a0dcc">plAtomicInteger::PostDecrement</a></div><div class="ttdeci">T PostDecrement()</div><div class="ttdoc">Decrements the internal value and returns the value immediately before the decrement.</div><div class="ttdef"><b>Definition</b> AtomicInteger_inl.h:53</div></div>
<div class="ttc" id="aclasspl_atomic_integer_htm_a742a052f3d8362ac116a17483905035f"><div class="ttname"><a href="../../da/ddf/classpl_atomic_integer.htm#a742a052f3d8362ac116a17483905035f">plAtomicInteger::Decrement</a></div><div class="ttdeci">T Decrement()</div><div class="ttdoc">Decrements the internal value and returns the decremented value.</div><div class="ttdef"><b>Definition</b> AtomicInteger_inl.h:41</div></div>
<div class="ttc" id="aclasspl_atomic_integer_htm_a90d2ab86094d86ebc9622a21f842629d"><div class="ttname"><a href="../../da/ddf/classpl_atomic_integer.htm#a90d2ab86094d86ebc9622a21f842629d">plAtomicInteger::Set</a></div><div class="ttdeci">T Set(T x)</div><div class="ttdoc">Sets the internal value to x and returns the original internal value.</div><div class="ttdef"><b>Definition</b> AtomicInteger_inl.h:101</div></div>
<div class="ttc" id="aclasspl_atomic_integer_htm_aa9759151bbb1a8577ff1c31aaff6eb4a"><div class="ttname"><a href="../../da/ddf/classpl_atomic_integer.htm#aa9759151bbb1a8577ff1c31aaff6eb4a">plAtomicInteger::PostIncrement</a></div><div class="ttdeci">T PostIncrement()</div><div class="ttdoc">Increments the internal value and returns the value immediately before the increment.</div><div class="ttdef"><b>Definition</b> AtomicInteger_inl.h:47</div></div>
<div class="ttc" id="aclasspl_atomic_integer_htm_ac64fcdab04e7d7d3aebd3f4e36215e38"><div class="ttname"><a href="../../da/ddf/classpl_atomic_integer.htm#ac64fcdab04e7d7d3aebd3f4e36215e38">plAtomicInteger::CompareAndSwap</a></div><div class="ttdeci">T CompareAndSwap(T expected, T x)</div><div class="ttdoc">If this is equal to expected, it is set to value. Otherwise it won't be modified. Always returns the ...</div><div class="ttdef"><b>Definition</b> AtomicInteger_inl.h:113</div></div>
<div class="ttc" id="aclasspl_atomic_integer_htm_ae235a05a7366c40c3b1c685101fa7fda"><div class="ttname"><a href="../../da/ddf/classpl_atomic_integer.htm#ae235a05a7366c40c3b1c685101fa7fda">plAtomicInteger::plAtomicInteger</a></div><div class="ttdeci">plAtomicInteger()</div><div class="ttdoc">Initializes the value to zero.</div><div class="ttdef"><b>Definition</b> AtomicInteger_inl.h:3</div></div>
<div class="ttc" id="astructpl_atomic_utils_htm"><div class="ttname"><a href="../../d1/d0a/structpl_atomic_utils.htm">plAtomicUtils</a></div><div class="ttdoc">This class provides functions to do atomic operations.</div><div class="ttdef"><b>Definition</b> AtomicUtils.h:15</div></div>
<div class="ttc" id="astructpl_atomic_utils_htm_a0be0beb627aa2cf504f23b426ae14ee7"><div class="ttname"><a href="../../d1/d0a/structpl_atomic_utils.htm#a0be0beb627aa2cf504f23b426ae14ee7">plAtomicUtils::Decrement</a></div><div class="ttdeci">static plInt32 Decrement(plInt32 &amp;ref_iDest)</div><div class="ttdoc">Decrements dest as an atomic operation and returns the new value.</div><div class="ttdef"><b>Definition</b> AtomicUtils_posix.h:31</div></div>
<div class="ttc" id="astructpl_atomic_utils_htm_a18c08fedb2e34f06b25c107dd26f713f"><div class="ttname"><a href="../../d1/d0a/structpl_atomic_utils.htm#a18c08fedb2e34f06b25c107dd26f713f">plAtomicUtils::Add</a></div><div class="ttdeci">static void Add(plInt32 &amp;ref_iDest, plInt32 value)</div><div class="ttdoc">Adds value to dest as an atomic operation.</div><div class="ttdef"><b>Definition</b> AtomicUtils_posix.h:62</div></div>
<div class="ttc" id="astructpl_atomic_utils_htm_a1d9c408a29f946114c2efdde4b795425"><div class="ttname"><a href="../../d1/d0a/structpl_atomic_utils.htm#a1d9c408a29f946114c2efdde4b795425">plAtomicUtils::CompareAndSwap</a></div><div class="ttdeci">static plInt32 CompareAndSwap(plInt32 &amp;ref_iDest, plInt32 iExpected, plInt32 value)</div><div class="ttdoc">If dest is equal to expected, this function sets dest to value. Otherwise dest will not be modified....</div><div class="ttdef"><b>Definition</b> AtomicUtils_posix.h:192</div></div>
<div class="ttc" id="astructpl_atomic_utils_htm_a46f99064be7e82dad94f95b15fff019a"><div class="ttname"><a href="../../d1/d0a/structpl_atomic_utils.htm#a46f99064be7e82dad94f95b15fff019a">plAtomicUtils::Or</a></div><div class="ttdeci">static void Or(plInt32 &amp;ref_iDest, plInt32 value)</div><div class="ttdoc">Performs an atomic bitwise OR on dest using value.</div><div class="ttdef"><b>Definition</b> AtomicUtils_posix.h:84</div></div>
<div class="ttc" id="astructpl_atomic_utils_htm_a82f21e4e3ff650724758518c4d0a0f77"><div class="ttname"><a href="../../d1/d0a/structpl_atomic_utils.htm#a82f21e4e3ff650724758518c4d0a0f77">plAtomicUtils::Read</a></div><div class="ttdeci">static plInt32 Read(const plInt32 &amp;iSrc)</div><div class="ttdoc">Returns src as an atomic operation and returns its value.</div><div class="ttdef"><b>Definition</b> AtomicUtils_posix.h:10</div></div>
<div class="ttc" id="astructpl_atomic_utils_htm_a849e1718797d301bba7e1e3a53b189db"><div class="ttname"><a href="../../d1/d0a/structpl_atomic_utils.htm#a849e1718797d301bba7e1e3a53b189db">plAtomicUtils::Min</a></div><div class="ttdeci">static void Min(plInt32 &amp;ref_iDest, plInt32 value)</div><div class="ttdoc">Performs an atomic min operation on dest using value.</div><div class="ttdef"><b>Definition</b> AtomicUtils_posix.h:106</div></div>
<div class="ttc" id="astructpl_atomic_utils_htm_a8a0d6f94aa469e67eef4a5fa079fdb03"><div class="ttname"><a href="../../d1/d0a/structpl_atomic_utils.htm#a8a0d6f94aa469e67eef4a5fa079fdb03">plAtomicUtils::And</a></div><div class="ttdeci">static void And(plInt32 &amp;ref_iDest, plInt32 value)</div><div class="ttdoc">Performs an atomic bitwise AND on dest using value.</div><div class="ttdef"><b>Definition</b> AtomicUtils_posix.h:73</div></div>
<div class="ttc" id="astructpl_atomic_utils_htm_a92771d38752c3591245baee422f81944"><div class="ttname"><a href="../../d1/d0a/structpl_atomic_utils.htm#a92771d38752c3591245baee422f81944">plAtomicUtils::Xor</a></div><div class="ttdeci">static void Xor(plInt32 &amp;ref_iDest, plInt32 value)</div><div class="ttdoc">Performs an atomic bitwise XOR on dest using value.</div><div class="ttdef"><b>Definition</b> AtomicUtils_posix.h:95</div></div>
<div class="ttc" id="astructpl_atomic_utils_htm_a997d3f381d9cb7d9bf6099c1b7017db7"><div class="ttname"><a href="../../d1/d0a/structpl_atomic_utils.htm#a997d3f381d9cb7d9bf6099c1b7017db7">plAtomicUtils::PostIncrement</a></div><div class="ttdeci">static plInt32 PostIncrement(plInt32 &amp;ref_iDest)</div><div class="ttdoc">Increments dest as an atomic operation and returns the old value.</div><div class="ttdef"><b>Definition</b> AtomicUtils_posix.h:41</div></div>
<div class="ttc" id="astructpl_atomic_utils_htm_aabb99d05a2261f37d42dfa9c3e896b89"><div class="ttname"><a href="../../d1/d0a/structpl_atomic_utils.htm#aabb99d05a2261f37d42dfa9c3e896b89">plAtomicUtils::Increment</a></div><div class="ttdeci">static plInt32 Increment(plInt32 &amp;ref_iDest)</div><div class="ttdoc">Increments dest as an atomic operation and returns the new value.</div><div class="ttdef"><b>Definition</b> AtomicUtils_posix.h:20</div></div>
<div class="ttc" id="astructpl_atomic_utils_htm_aada3493cbf0ea41477378ad591653be7"><div class="ttname"><a href="../../d1/d0a/structpl_atomic_utils.htm#aada3493cbf0ea41477378ad591653be7">plAtomicUtils::Max</a></div><div class="ttdeci">static void Max(plInt32 &amp;ref_iDest, plInt32 value)</div><div class="ttdoc">Performs an atomic max operation on dest using value.</div><div class="ttdef"><b>Definition</b> AtomicUtils_posix.h:133</div></div>
<div class="ttc" id="astructpl_atomic_utils_htm_ab7e863675defb33d13975774158c6da6"><div class="ttname"><a href="../../d1/d0a/structpl_atomic_utils.htm#ab7e863675defb33d13975774158c6da6">plAtomicUtils::PostDecrement</a></div><div class="ttdeci">static plInt32 PostDecrement(plInt32 &amp;ref_iDest)</div><div class="ttdoc">Decrements dest as an atomic operation and returns the old value.</div><div class="ttdef"><b>Definition</b> AtomicUtils_posix.h:52</div></div>
<div class="ttc" id="astructpl_atomic_utils_htm_ab93143cdde83539f48ea2bc1d82d7596"><div class="ttname"><a href="../../d1/d0a/structpl_atomic_utils.htm#ab93143cdde83539f48ea2bc1d82d7596">plAtomicUtils::Set</a></div><div class="ttdeci">static plInt32 Set(plInt32 &amp;ref_iDest, plInt32 value)</div><div class="ttdoc">Sets dest to value as an atomic operation and returns the original value of dest.</div><div class="ttdef"><b>Definition</b> AtomicUtils_posix.h:160</div></div>
<div class="ttc" id="astructpl_atomic_utils_htm_afefb2b9dee34119364949556ebd4d877"><div class="ttname"><a href="../../d1/d0a/structpl_atomic_utils.htm#afefb2b9dee34119364949556ebd4d877">plAtomicUtils::TestAndSet</a></div><div class="ttdeci">static bool TestAndSet(plInt32 &amp;ref_iDest, plInt32 iExpected, plInt32 value)</div><div class="ttdoc">If dest is equal to expected, this function sets dest to value and returns true. Otherwise dest will ...</div><div class="ttdef"><b>Definition</b> AtomicUtils_posix.h:171</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_fa1ade104661ad34fb0eac087515bd03.htm">Threading</a></li><li class="navelem"><a class="el" href="../../dir_77c2a7b3f87a959c5e2db580e09710cd.htm">Implementation</a></li><li class="navelem"><b>AtomicInteger_inl.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
