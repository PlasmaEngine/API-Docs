<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Plasma Engine: Code/Engine/Foundation/Reflection/Implementation/MapProperty.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Plasma Engine<span id="projectnumber">&#160;2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d8/d5d/_map_property_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">MapProperty.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span> </div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#include &lt;Foundation/Reflection/Implementation/AbstractProperty.h&gt;</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span> </div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="keyword">class </span><a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>;</div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span> </div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00010" data-start="{" data-end="};">
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno"><a class="line" href="../../d5/dd2/classpl_typed_map_property.htm">   10</a></span><span class="keyword">class </span><a class="code hl_class" href="../../d5/dd2/classpl_typed_map_property.htm">plTypedMapProperty</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../d1/dfe/classpl_abstract_map_property.htm">plAbstractMapProperty</a></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span>{</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>  <a class="code hl_class" href="../../d5/dd2/classpl_typed_map_property.htm">plTypedMapProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName)</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>    : <a class="code hl_function" href="../../d1/dfe/classpl_abstract_map_property.htm#a1a62d3ff3a04162fec26cd4f2508cf65">plAbstractMapProperty</a>(szPropertyName)</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span>  {</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span>    m_Flags = plPropertyFlags::GetParameterFlags&lt;Type&gt;();</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>    <span class="keyword">static_assert</span>(</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>      !std::is_pointer&lt;Type&gt;::value ||</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>        <a class="code hl_struct" href="../../d6/d03/structpl_variant_type_deduction.htm">plVariant::TypeDeduction&lt;typename plTypeTraits&lt;Type&gt;::NonConstReferencePointerType</a>&gt;::value == <a class="code hl_enumvalue" href="../../d6/d1e/structpl_variant_type.htm#a4d10a99c083abdf7283ab1f48565de12aeeb3f6c596cc924d89435564a5b70bad">plVariantType::Invalid</a>,</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>      <span class="stringliteral">&quot;Pointer to standard types are not supported.&quot;</span>);</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>  }</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span> </div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno"><a class="line" href="../../d5/dd2/classpl_typed_map_property.htm#a0e5a8723a9b4bbd508a3b4a2aaf3e272">   23</a></span>  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* <a class="code hl_function" href="../../d5/dd2/classpl_typed_map_property.htm#a0e5a8723a9b4bbd508a3b4a2aaf3e272">GetSpecificType</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> plGetStaticRTTI&lt;typename plTypeTraits&lt;Type&gt;::NonConstReferencePointerType&gt;(); }</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>};</div>
</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span> </div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span> </div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Type, <span class="keyword">typename</span> Container&gt;</div>
<div class="foldopen" id="foldopen00028" data-start="{" data-end="};">
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno"><a class="line" href="../../dc/d5e/classpl_accessor_map_property.htm">   28</a></span><span class="keyword">class </span><a class="code hl_class" href="../../dc/d5e/classpl_accessor_map_property.htm">plAccessorMapProperty</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../d5/dd2/classpl_typed_map_property.htm">plTypedMapProperty</a>&lt;Type&gt;</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>{</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>  <span class="keyword">using </span>ContainerType = <span class="keyword">typename</span> <a class="code hl_typedef" href="../../da/d5d/structpl_type_traits.htm#a5d21aa226bb680dfddc12bfcd6caaa84">plTypeTraits&lt;Container&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span>  <span class="keyword">using </span>RealType = <span class="keyword">typename</span> <a class="code hl_typedef" href="../../da/d5d/structpl_type_traits.htm#a5d21aa226bb680dfddc12bfcd6caaa84">plTypeTraits&lt;Type&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span> </div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>  <span class="keyword">using </span>InsertFunc = void (Class::*)(<span class="keyword">const</span> <span class="keywordtype">char</span>* szKey, Type value);</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span>  <span class="keyword">using </span>RemoveFunc = void (Class::*)(<span class="keyword">const</span> <span class="keywordtype">char</span>* szKey);</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>  <span class="keyword">using </span>GetValueFunc = bool (Class::*)(<span class="keyword">const</span> <span class="keywordtype">char</span>* szKey, RealType&amp; value) <span class="keyword">const</span>;</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>  <span class="keyword">using </span>GetKeyRangeFunc = Container (Class::*)() <span class="keyword">const</span>;</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span> </div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>  <a class="code hl_class" href="../../dc/d5e/classpl_accessor_map_property.htm">plAccessorMapProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName, GetKeyRangeFunc getKeys, GetValueFunc getValue, InsertFunc insert, RemoveFunc remove)</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span>    : <a class="code hl_class" href="../../d5/dd2/classpl_typed_map_property.htm">plTypedMapProperty&lt;Type&gt;</a>(szPropertyName)</div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span>  {</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>    PL_ASSERT_DEBUG(getKeys != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The getKeys function of a map property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>    PL_ASSERT_DEBUG(getValue != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The GetValueFunc function of a map property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span> </div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>    m_GetKeyRange = getKeys;</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>    m_GetValue = getValue;</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>    m_Insert = insert;</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>    m_Remove = remove;</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span> </div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>    <span class="keywordflow">if</span> (m_Insert == <span class="keyword">nullptr</span> || remove == <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>      plAbstractMapProperty::m_Flags.<a class="code hl_function" href="../../df/dd9/structpl_bitflags.htm#aff74e2d19d2f1e1d2301c35c5170803a">Add</a>(<a class="code hl_enumvalue" href="../../db/d0f/structpl_property_flags.htm#aa9691dcb8643c279db2c187968da4d10a0f65bb89430668409daaa4453b1a4b86">plPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>  }</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span> </div>
<div class="foldopen" id="foldopen00054" data-start="{" data-end="}">
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno"><a class="line" href="../../dc/d5e/classpl_accessor_map_property.htm#a9a40901c1b04f65e6d578cfc584f27a0">   54</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../dc/d5e/classpl_accessor_map_property.htm#a9a40901c1b04f65e6d578cfc584f27a0">IsEmpty</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>    <span class="comment">// this should be decltype(auto) c = ...; but MSVC 16 is too dumb for that (MSVC 15 works fine)</span></div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>    <span class="keyword">decltype</span>((<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetKeyRange)()) c = (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetKeyRange)();</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span> </div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>    <span class="keywordflow">return</span> begin(c) == end(c);</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>  }</div>
</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span> </div>
<div class="foldopen" id="foldopen00062" data-start="{" data-end="}">
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno"><a class="line" href="../../dc/d5e/classpl_accessor_map_property.htm#a18162954f66aa718a340a83ae021a90b">   62</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../dc/d5e/classpl_accessor_map_property.htm#a18162954f66aa718a340a83ae021a90b">Clear</a>(<span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>    <span class="keywordflow">while</span> (<span class="keyword">true</span>)</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>    {</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>      <span class="comment">// this should be decltype(auto) c = ...; but MSVC 16 is too dumb for that (MSVC 15 works fine)</span></div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>      <span class="keyword">decltype</span>((<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetKeyRange)()) c = (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetKeyRange)();</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span> </div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>      <span class="keyword">auto</span> it = begin(c);</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>      <span class="keywordflow">if</span> (it != end(c))</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>        <a class="code hl_function" href="../../dc/d5e/classpl_accessor_map_property.htm#a94f17981945e4804c972236353b67bc6">Remove</a>(pInstance, *it);</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>      <span class="keywordflow">else</span></div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>        <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>    }</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>  }</div>
</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span> </div>
<div class="foldopen" id="foldopen00077" data-start="{" data-end="}">
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno"><a class="line" href="../../dc/d5e/classpl_accessor_map_property.htm#a6358345256f88497fb16cd7a5d566432">   77</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../dc/d5e/classpl_accessor_map_property.htm#a6358345256f88497fb16cd7a5d566432">Insert</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>    PL_ASSERT_DEBUG(m_Insert != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no insert function, thus it is read-only.&quot;</span>, <a class="code hl_function" href="../../d4/dd7/classpl_abstract_property.htm#ab192fac6724fcbd56a160013230bad0b">plAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>    (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Insert)(szKey, *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>  }</div>
</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span> </div>
<div class="foldopen" id="foldopen00083" data-start="{" data-end="}">
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno"><a class="line" href="../../dc/d5e/classpl_accessor_map_property.htm#a94f17981945e4804c972236353b67bc6">   83</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../dc/d5e/classpl_accessor_map_property.htm#a94f17981945e4804c972236353b67bc6">Remove</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>    PL_ASSERT_DEBUG(m_Remove != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no remove function, thus it is read-only.&quot;</span>, <a class="code hl_function" href="../../d4/dd7/classpl_abstract_property.htm#ab192fac6724fcbd56a160013230bad0b">plAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>    (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Remove)(szKey);</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>  }</div>
</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span> </div>
<div class="foldopen" id="foldopen00089" data-start="{" data-end="}">
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno"><a class="line" href="../../dc/d5e/classpl_accessor_map_property.htm#a2ba7fb5d62fa45a1c60cd98c2270c5d5">   89</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../dc/d5e/classpl_accessor_map_property.htm#a2ba7fb5d62fa45a1c60cd98c2270c5d5">Contains</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>    RealType value;</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>    <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetValue)(szKey, value);</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>  }</div>
</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span> </div>
<div class="foldopen" id="foldopen00095" data-start="{" data-end="}">
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno"><a class="line" href="../../dc/d5e/classpl_accessor_map_property.htm#a12aeed94d9a5f395315edecf3a160533">   95</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../dc/d5e/classpl_accessor_map_property.htm#a12aeed94d9a5f395315edecf3a160533">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>    <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetValue)(szKey, *<span class="keyword">static_cast&lt;</span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>  }</div>
</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span> </div>
<div class="foldopen" id="foldopen00100" data-start="{" data-end="}">
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno"><a class="line" href="../../dc/d5e/classpl_accessor_map_property.htm#a6b766f1650b48c103334b8d2939e3070">  100</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../dc/d5e/classpl_accessor_map_property.htm#a6b766f1650b48c103334b8d2939e3070">GetKeys</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code hl_class" href="../../d8/dcc/classpl_hybrid_array.htm">plHybridArray&lt;plString, 16&gt;</a>&amp; out_keys)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>    out_keys.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#a595f66bad2baf69b07afd02a8d8e43c6">Clear</a>();</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>    <span class="keyword">decltype</span>(<span class="keyword">auto</span>) c = (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetKeyRange)();</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; key : c)</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>    {</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>      out_keys.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#a3e8ff51c4a7aa0afcfac3aa6206e08ff">PushBack</a>(key);</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>    }</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>  }</div>
</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span> </div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>  GetKeyRangeFunc m_GetKeyRange;</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>  GetValueFunc m_GetValue;</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>  InsertFunc m_Insert;</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>  RemoveFunc m_Remove;</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>};</div>
</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span> </div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span> </div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Type, <span class="keyword">typename</span> Container&gt;</div>
<div class="foldopen" id="foldopen00119" data-start="{" data-end="};">
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno"><a class="line" href="../../d2/d2f/classpl_write_accessor_map_property.htm">  119</a></span><span class="keyword">class </span><a class="code hl_class" href="../../d2/d2f/classpl_write_accessor_map_property.htm">plWriteAccessorMapProperty</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../d5/dd2/classpl_typed_map_property.htm">plTypedMapProperty</a>&lt;Type&gt;</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>{</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>  <span class="keyword">using </span>ContainerType = <span class="keyword">typename</span> <a class="code hl_typedef" href="../../da/d5d/structpl_type_traits.htm#a5d21aa226bb680dfddc12bfcd6caaa84">plTypeTraits&lt;Container&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>  <span class="keyword">using </span>ContainerSubType = <span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/da8/structpl_container_sub_type_resolver.htm">plContainerSubTypeResolver&lt;ContainerType&gt;::Type</a>;</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>  <span class="keyword">using </span>RealType = <span class="keyword">typename</span> <a class="code hl_typedef" href="../../da/d5d/structpl_type_traits.htm#a5d21aa226bb680dfddc12bfcd6caaa84">plTypeTraits&lt;Type&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span> </div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>  <span class="keyword">using </span>InsertFunc = void (Class::*)(<span class="keyword">const</span> <span class="keywordtype">char</span>* szKey, Type value);</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>  <span class="keyword">using </span>RemoveFunc = void (Class::*)(<span class="keyword">const</span> <span class="keywordtype">char</span>* szKey);</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>  <span class="keyword">using </span>GetContainerFunc = Container (Class::*)() <span class="keyword">const</span>;</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span> </div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>  <a class="code hl_class" href="../../d2/d2f/classpl_write_accessor_map_property.htm">plWriteAccessorMapProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName, GetContainerFunc getContainer, InsertFunc insert, RemoveFunc remove)</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>    : <a class="code hl_class" href="../../d5/dd2/classpl_typed_map_property.htm">plTypedMapProperty&lt;Type&gt;</a>(szPropertyName)</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>  {</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>    PL_ASSERT_DEBUG(getContainer != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The get count function of a map property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span> </div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>    m_GetContainer = getContainer;</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>    m_Insert = insert;</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>    m_Remove = remove;</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span> </div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>    <span class="keywordflow">if</span> (m_Insert == <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>      plAbstractMapProperty::m_Flags.<a class="code hl_function" href="../../df/dd9/structpl_bitflags.htm#aff74e2d19d2f1e1d2301c35c5170803a">Add</a>(<a class="code hl_enumvalue" href="../../db/d0f/structpl_property_flags.htm#aa9691dcb8643c279db2c187968da4d10a0f65bb89430668409daaa4453b1a4b86">plPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>  }</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span> </div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno"><a class="line" href="../../d2/d2f/classpl_write_accessor_map_property.htm#a0d9f837608ac8813d5101fee09eced04">  143</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d2/d2f/classpl_write_accessor_map_property.htm#a0d9f837608ac8813d5101fee09eced04">IsEmpty</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetContainer)().<a class="code hl_function" href="../../d2/d2f/classpl_write_accessor_map_property.htm#a0d9f837608ac8813d5101fee09eced04">IsEmpty</a>(); }</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span> </div>
<div class="foldopen" id="foldopen00145" data-start="{" data-end="}">
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno"><a class="line" href="../../d2/d2f/classpl_write_accessor_map_property.htm#aef6797a5c392644a2ef8778eeb18c1dc">  145</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/d2f/classpl_write_accessor_map_property.htm#aef6797a5c392644a2ef8778eeb18c1dc">Clear</a>(<span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>    <span class="keyword">decltype</span>(<span class="keyword">auto</span>) c = (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetContainer)();</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>    <span class="keywordflow">while</span> (!<a class="code hl_function" href="../../d2/d2f/classpl_write_accessor_map_property.htm#a0d9f837608ac8813d5101fee09eced04">IsEmpty</a>(pInstance))</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>    {</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>      <span class="keyword">auto</span> it = c.GetIterator();</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>      <a class="code hl_function" href="../../d2/d2f/classpl_write_accessor_map_property.htm#a4d29d08cde13706930ad826400c74867">Remove</a>(pInstance, it.Key());</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>    }</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>  }</div>
</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span> </div>
<div class="foldopen" id="foldopen00155" data-start="{" data-end="}">
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno"><a class="line" href="../../d2/d2f/classpl_write_accessor_map_property.htm#acb758a168c5da1f551f6172f493f03e8">  155</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/d2f/classpl_write_accessor_map_property.htm#acb758a168c5da1f551f6172f493f03e8">Insert</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>    PL_ASSERT_DEBUG(m_Insert != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no insert function, thus it is read-only.&quot;</span>, <a class="code hl_function" href="../../d4/dd7/classpl_abstract_property.htm#ab192fac6724fcbd56a160013230bad0b">plAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>    (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Insert)(szKey, *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>  }</div>
</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span> </div>
<div class="foldopen" id="foldopen00161" data-start="{" data-end="}">
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno"><a class="line" href="../../d2/d2f/classpl_write_accessor_map_property.htm#a4d29d08cde13706930ad826400c74867">  161</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/d2f/classpl_write_accessor_map_property.htm#a4d29d08cde13706930ad826400c74867">Remove</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>    PL_ASSERT_DEBUG(m_Remove != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no remove function, thus it is read-only.&quot;</span>, <a class="code hl_function" href="../../d4/dd7/classpl_abstract_property.htm#ab192fac6724fcbd56a160013230bad0b">plAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>    (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Remove)(szKey);</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>  }</div>
</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span> </div>
<div class="foldopen" id="foldopen00167" data-start="{" data-end="}">
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno"><a class="line" href="../../d2/d2f/classpl_write_accessor_map_property.htm#a3d04247584ceca917529fe0156664283">  167</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d2/d2f/classpl_write_accessor_map_property.htm#a3d04247584ceca917529fe0156664283">Contains</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>    <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetContainer)().<a class="code hl_function" href="../../d2/d2f/classpl_write_accessor_map_property.htm#a3d04247584ceca917529fe0156664283">Contains</a>(szKey);</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>  }</div>
</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span> </div>
<div class="foldopen" id="foldopen00172" data-start="{" data-end="}">
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno"><a class="line" href="../../d2/d2f/classpl_write_accessor_map_property.htm#ace1272af590f327c57c3dc48c6a3eaec">  172</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d2/d2f/classpl_write_accessor_map_property.htm#ace1272af590f327c57c3dc48c6a3eaec">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>    <span class="keyword">decltype</span>(<span class="keyword">auto</span>) c = (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetContainer)();</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>    <span class="keyword">const</span> RealType* value = c.GetValue(szKey);</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>    <span class="keywordflow">if</span> (value)</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>    {</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>      *<span class="keyword">static_cast&lt;</span>RealType*<span class="keyword">&gt;</span>(pObject) = *value;</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>    }</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>    <span class="keywordflow">return</span> value != <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>  }</div>
</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span> </div>
<div class="foldopen" id="foldopen00183" data-start="{" data-end="}">
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno"><a class="line" href="../../d2/d2f/classpl_write_accessor_map_property.htm#a2cd5563a26584860de6336931e66c3af">  183</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/d2f/classpl_write_accessor_map_property.htm#a2cd5563a26584860de6336931e66c3af">GetKeys</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code hl_class" href="../../d8/dcc/classpl_hybrid_array.htm">plHybridArray&lt;plString, 16&gt;</a>&amp; out_keys)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>    <span class="keyword">decltype</span>(<span class="keyword">auto</span>) c = (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetContainer)();</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>    out_keys.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#a595f66bad2baf69b07afd02a8d8e43c6">Clear</a>();</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = c.GetIterator(); it.IsValid(); ++it)</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>    {</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>      out_keys.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#a3e8ff51c4a7aa0afcfac3aa6206e08ff">PushBack</a>(it.Key());</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>    }</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>  }</div>
</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span> </div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>  GetContainerFunc m_GetContainer;</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>  InsertFunc m_Insert;</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>  RemoveFunc m_Remove;</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>};</div>
</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span> </div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span> </div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span> </div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Container, Container Class::*Member&gt;</div>
<div class="foldopen" id="foldopen00202" data-start="{" data-end="};">
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno"><a class="line" href="../../dd/da1/structpl_map_property_accessor.htm">  202</a></span><span class="keyword">struct </span><a class="code hl_struct" href="../../dd/da1/structpl_map_property_accessor.htm">plMapPropertyAccessor</a></div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>{</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>  <span class="keyword">using </span>ContainerType = <span class="keyword">typename</span> <a class="code hl_typedef" href="../../da/d5d/structpl_type_traits.htm#a5d21aa226bb680dfddc12bfcd6caaa84">plTypeTraits&lt;Container&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>  <span class="keyword">using </span>Type = <span class="keyword">typename</span> <a class="code hl_struct" href="../../da/d5d/structpl_type_traits.htm">plTypeTraits&lt;typename plContainerSubTypeResolver&lt;ContainerType&gt;::Type</a>&gt;::NonConstReferenceType;</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span> </div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>  <span class="keyword">static</span> <span class="keyword">const</span> ContainerType&amp; GetConstContainer(<span class="keyword">const</span> Class* pInstance) { <span class="keywordflow">return</span> (*pInstance).*Member; }</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span> </div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span>  <span class="keyword">static</span> ContainerType&amp; GetContainer(Class* pInstance) { <span class="keywordflow">return</span> (*pInstance).*Member; }</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>};</div>
</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span> </div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span> </div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Container, <span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00214" data-start="{" data-end="};">
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno"><a class="line" href="../../db/df3/classpl_member_map_property.htm">  214</a></span><span class="keyword">class </span><a class="code hl_class" href="../../db/df3/classpl_member_map_property.htm">plMemberMapProperty</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../d5/dd2/classpl_typed_map_property.htm">plTypedMapProperty</a>&lt;typename plTypeTraits&lt;Type&gt;::NonConstReferenceType&gt;</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>{</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span>  <span class="keyword">using </span>RealType = <span class="keyword">typename</span> <a class="code hl_typedef" href="../../da/d5d/structpl_type_traits.htm#a5d21aa226bb680dfddc12bfcd6caaa84">plTypeTraits&lt;Type&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>  <span class="keyword">using </span>GetConstContainerFunc = <span class="keyword">const</span> Container&amp; (*)(<span class="keyword">const</span> Class* pInstance);</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>  <span class="keyword">using </span>GetContainerFunc = Container&amp; (*)(Class* pInstance);</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span> </div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>  <a class="code hl_class" href="../../db/df3/classpl_member_map_property.htm">plMemberMapProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName, GetConstContainerFunc constGetter, GetContainerFunc getter)</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>    : <a class="code hl_class" href="../../d5/dd2/classpl_typed_map_property.htm">plTypedMapProperty&lt;RealType&gt;</a>(szPropertyName)</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>  {</div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span>    PL_ASSERT_DEBUG(constGetter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The const get count function of an array property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span> </div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>    m_ConstGetter = constGetter;</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>    m_Getter = getter;</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span> </div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>    <span class="keywordflow">if</span> (m_Getter == <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span>      plAbstractMapProperty::m_Flags.<a class="code hl_function" href="../../df/dd9/structpl_bitflags.htm#aff74e2d19d2f1e1d2301c35c5170803a">Add</a>(<a class="code hl_enumvalue" href="../../db/d0f/structpl_property_flags.htm#aa9691dcb8643c279db2c187968da4d10a0f65bb89430668409daaa4453b1a4b86">plPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>  }</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span> </div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno"><a class="line" href="../../db/df3/classpl_member_map_property.htm#a9edbf448642fc4ee0d8fc0b001af5343">  233</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../db/df3/classpl_member_map_property.htm#a9edbf448642fc4ee0d8fc0b001af5343">IsEmpty</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)).IsEmpty(); }</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span> </div>
<div class="foldopen" id="foldopen00235" data-start="{" data-end="}">
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno"><a class="line" href="../../db/df3/classpl_member_map_property.htm#ad843b5d77f9f46f809ac0e40a869c57f">  235</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/df3/classpl_member_map_property.htm#ad843b5d77f9f46f809ac0e40a869c57f">Clear</a>(<span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>    PL_ASSERT_DEBUG(</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>      m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const set accessor function, thus it is read-only.&quot;</span>, <a class="code hl_function" href="../../d4/dd7/classpl_abstract_property.htm#ab192fac6724fcbd56a160013230bad0b">plAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)).Clear();</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span>  }</div>
</div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span> </div>
<div class="foldopen" id="foldopen00242" data-start="{" data-end="}">
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno"><a class="line" href="../../db/df3/classpl_member_map_property.htm#a8bf278ea1e70734b748bbe25baf1edd0">  242</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/df3/classpl_member_map_property.htm#a8bf278ea1e70734b748bbe25baf1edd0">Insert</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>    PL_ASSERT_DEBUG(</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>      m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const set accessor function, thus it is read-only.&quot;</span>, <a class="code hl_function" href="../../d4/dd7/classpl_abstract_property.htm#ab192fac6724fcbd56a160013230bad0b">plAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span>    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)).Insert(szKey, *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>  }</div>
</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span> </div>
<div class="foldopen" id="foldopen00249" data-start="{" data-end="}">
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno"><a class="line" href="../../db/df3/classpl_member_map_property.htm#ad72bd2c14c2b746a23427394d57b135e">  249</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/df3/classpl_member_map_property.htm#ad72bd2c14c2b746a23427394d57b135e">Remove</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>    PL_ASSERT_DEBUG(</div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>      m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const set accessor function, thus it is read-only.&quot;</span>, <a class="code hl_function" href="../../d4/dd7/classpl_abstract_property.htm#ab192fac6724fcbd56a160013230bad0b">plAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span>    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)).Remove(szKey);</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span>  }</div>
</div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span> </div>
<div class="foldopen" id="foldopen00256" data-start="{" data-end="}">
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno"><a class="line" href="../../db/df3/classpl_member_map_property.htm#a5a0079ded1c83f95a7d6a856a2f857e7">  256</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../db/df3/classpl_member_map_property.htm#a5a0079ded1c83f95a7d6a856a2f857e7">Contains</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span>    <span class="keywordflow">return</span> m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)).Contains(szKey);</div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span>  }</div>
</div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span> </div>
<div class="foldopen" id="foldopen00261" data-start="{" data-end="}">
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno"><a class="line" href="../../db/df3/classpl_member_map_property.htm#a22878d5bea12dee078db8eff20dca562">  261</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../db/df3/classpl_member_map_property.htm#a22878d5bea12dee078db8eff20dca562">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span>    <span class="keyword">const</span> RealType* value = m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)).GetValue(szKey);</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>    <span class="keywordflow">if</span> (value)</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span>    {</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span>      *<span class="keyword">static_cast&lt;</span>RealType*<span class="keyword">&gt;</span>(pObject) = *value;</div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span>    }</div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span>    <span class="keywordflow">return</span> value != <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>  }</div>
</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span> </div>
<div class="foldopen" id="foldopen00271" data-start="{" data-end="}">
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno"><a class="line" href="../../db/df3/classpl_member_map_property.htm#ac752bc3b7beceafe69bc823bbe89a10a">  271</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/df3/classpl_member_map_property.htm#ac752bc3b7beceafe69bc823bbe89a10a">GetKeys</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code hl_class" href="../../d8/dcc/classpl_hybrid_array.htm">plHybridArray&lt;plString, 16&gt;</a>&amp; out_keys)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span>    <span class="keyword">decltype</span>(<span class="keyword">auto</span>) c = m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance));</div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span>    out_keys.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#a595f66bad2baf69b07afd02a8d8e43c6">Clear</a>();</div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = c.GetIterator(); it.IsValid(); ++it)</div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span>    {</div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span>      out_keys.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#a3e8ff51c4a7aa0afcfac3aa6206e08ff">PushBack</a>(it.Key());</div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span>    }</div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span>  }</div>
</div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span> </div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span>  GetConstContainerFunc m_ConstGetter;</div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span>  GetContainerFunc m_Getter;</div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span>};</div>
</div>
<div class="ttc" id="aclasspl_abstract_map_property_htm"><div class="ttname"><a href="../../d1/dfe/classpl_abstract_map_property.htm">plAbstractMapProperty</a></div><div class="ttdoc">The base class for a property that represents a set of values.</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:348</div></div>
<div class="ttc" id="aclasspl_abstract_map_property_htm_a1a62d3ff3a04162fec26cd4f2508cf65"><div class="ttname"><a href="../../d1/dfe/classpl_abstract_map_property.htm#a1a62d3ff3a04162fec26cd4f2508cf65">plAbstractMapProperty::plAbstractMapProperty</a></div><div class="ttdeci">plAbstractMapProperty(const char *szPropertyName)</div><div class="ttdoc">Passes the property name through to plAbstractProperty.</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:351</div></div>
<div class="ttc" id="aclasspl_abstract_property_htm_ab192fac6724fcbd56a160013230bad0b"><div class="ttname"><a href="../../d4/dd7/classpl_abstract_property.htm#ab192fac6724fcbd56a160013230bad0b">plAbstractProperty::GetPropertyName</a></div><div class="ttdeci">const char * GetPropertyName() const</div><div class="ttdoc">Returns the name of the property.</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:158</div></div>
<div class="ttc" id="aclasspl_accessor_map_property_htm"><div class="ttname"><a href="../../dc/d5e/classpl_accessor_map_property.htm">plAccessorMapProperty</a></div><div class="ttdef"><b>Definition</b> MapProperty.h:29</div></div>
<div class="ttc" id="aclasspl_accessor_map_property_htm_a12aeed94d9a5f395315edecf3a160533"><div class="ttname"><a href="../../dc/d5e/classpl_accessor_map_property.htm#a12aeed94d9a5f395315edecf3a160533">plAccessorMapProperty::GetValue</a></div><div class="ttdeci">virtual bool GetValue(const void *pInstance, const char *szKey, void *pObject) const override</div><div class="ttdoc">Writes element at index uiIndex to the target of pObject.</div><div class="ttdef"><b>Definition</b> MapProperty.h:95</div></div>
<div class="ttc" id="aclasspl_accessor_map_property_htm_a18162954f66aa718a340a83ae021a90b"><div class="ttname"><a href="../../dc/d5e/classpl_accessor_map_property.htm#a18162954f66aa718a340a83ae021a90b">plAccessorMapProperty::Clear</a></div><div class="ttdeci">virtual void Clear(void *pInstance) const override</div><div class="ttdoc">Clears the set.</div><div class="ttdef"><b>Definition</b> MapProperty.h:62</div></div>
<div class="ttc" id="aclasspl_accessor_map_property_htm_a2ba7fb5d62fa45a1c60cd98c2270c5d5"><div class="ttname"><a href="../../dc/d5e/classpl_accessor_map_property.htm#a2ba7fb5d62fa45a1c60cd98c2270c5d5">plAccessorMapProperty::Contains</a></div><div class="ttdeci">virtual bool Contains(const void *pInstance, const char *szKey) const override</div><div class="ttdoc">Returns whether the target of pObject is in the set.</div><div class="ttdef"><b>Definition</b> MapProperty.h:89</div></div>
<div class="ttc" id="aclasspl_accessor_map_property_htm_a6358345256f88497fb16cd7a5d566432"><div class="ttname"><a href="../../dc/d5e/classpl_accessor_map_property.htm#a6358345256f88497fb16cd7a5d566432">plAccessorMapProperty::Insert</a></div><div class="ttdeci">virtual void Insert(void *pInstance, const char *szKey, const void *pObject) const override</div><div class="ttdoc">Inserts the target of pObject into the set.</div><div class="ttdef"><b>Definition</b> MapProperty.h:77</div></div>
<div class="ttc" id="aclasspl_accessor_map_property_htm_a6b766f1650b48c103334b8d2939e3070"><div class="ttname"><a href="../../dc/d5e/classpl_accessor_map_property.htm#a6b766f1650b48c103334b8d2939e3070">plAccessorMapProperty::GetKeys</a></div><div class="ttdeci">virtual void GetKeys(const void *pInstance, plHybridArray&lt; plString, 16 &gt; &amp;out_keys) const override</div><div class="ttdoc">Writes the content of the set to out_keys.</div><div class="ttdef"><b>Definition</b> MapProperty.h:100</div></div>
<div class="ttc" id="aclasspl_accessor_map_property_htm_a94f17981945e4804c972236353b67bc6"><div class="ttname"><a href="../../dc/d5e/classpl_accessor_map_property.htm#a94f17981945e4804c972236353b67bc6">plAccessorMapProperty::Remove</a></div><div class="ttdeci">virtual void Remove(void *pInstance, const char *szKey) const override</div><div class="ttdoc">Removes the target of pObject from the set.</div><div class="ttdef"><b>Definition</b> MapProperty.h:83</div></div>
<div class="ttc" id="aclasspl_accessor_map_property_htm_a9a40901c1b04f65e6d578cfc584f27a0"><div class="ttname"><a href="../../dc/d5e/classpl_accessor_map_property.htm#a9a40901c1b04f65e6d578cfc584f27a0">plAccessorMapProperty::IsEmpty</a></div><div class="ttdeci">virtual bool IsEmpty(const void *pInstance) const override</div><div class="ttdoc">Returns whether the set is empty.</div><div class="ttdef"><b>Definition</b> MapProperty.h:54</div></div>
<div class="ttc" id="aclasspl_array_base_htm_a3e8ff51c4a7aa0afcfac3aa6206e08ff"><div class="ttname"><a href="../../d4/dc8/classpl_array_base.htm#a3e8ff51c4a7aa0afcfac3aa6206e08ff">plArrayBase::PushBack</a></div><div class="ttdeci">void PushBack(const T &amp;value)</div><div class="ttdoc">Pushes value at the end of the array.</div><div class="ttdef"><b>Definition</b> ArrayBase_inl.h:333</div></div>
<div class="ttc" id="aclasspl_array_base_htm_a595f66bad2baf69b07afd02a8d8e43c6"><div class="ttname"><a href="../../d4/dc8/classpl_array_base.htm#a595f66bad2baf69b07afd02a8d8e43c6">plArrayBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Clears the array.</div><div class="ttdef"><b>Definition</b> ArrayBase_inl.h:184</div></div>
<div class="ttc" id="aclasspl_hybrid_array_htm"><div class="ttname"><a href="../../d8/dcc/classpl_hybrid_array.htm">plHybridArray</a></div><div class="ttdoc">A hybrid array uses in-place storage to handle the first few elements without any allocation....</div><div class="ttdef"><b>Definition</b> HybridArray.h:12</div></div>
<div class="ttc" id="aclasspl_member_map_property_htm"><div class="ttname"><a href="../../db/df3/classpl_member_map_property.htm">plMemberMapProperty</a></div><div class="ttdef"><b>Definition</b> MapProperty.h:215</div></div>
<div class="ttc" id="aclasspl_member_map_property_htm_a22878d5bea12dee078db8eff20dca562"><div class="ttname"><a href="../../db/df3/classpl_member_map_property.htm#a22878d5bea12dee078db8eff20dca562">plMemberMapProperty::GetValue</a></div><div class="ttdeci">virtual bool GetValue(const void *pInstance, const char *szKey, void *pObject) const override</div><div class="ttdoc">Writes element at index uiIndex to the target of pObject.</div><div class="ttdef"><b>Definition</b> MapProperty.h:261</div></div>
<div class="ttc" id="aclasspl_member_map_property_htm_a5a0079ded1c83f95a7d6a856a2f857e7"><div class="ttname"><a href="../../db/df3/classpl_member_map_property.htm#a5a0079ded1c83f95a7d6a856a2f857e7">plMemberMapProperty::Contains</a></div><div class="ttdeci">virtual bool Contains(const void *pInstance, const char *szKey) const override</div><div class="ttdoc">Returns whether the target of pObject is in the set.</div><div class="ttdef"><b>Definition</b> MapProperty.h:256</div></div>
<div class="ttc" id="aclasspl_member_map_property_htm_a8bf278ea1e70734b748bbe25baf1edd0"><div class="ttname"><a href="../../db/df3/classpl_member_map_property.htm#a8bf278ea1e70734b748bbe25baf1edd0">plMemberMapProperty::Insert</a></div><div class="ttdeci">virtual void Insert(void *pInstance, const char *szKey, const void *pObject) const override</div><div class="ttdoc">Inserts the target of pObject into the set.</div><div class="ttdef"><b>Definition</b> MapProperty.h:242</div></div>
<div class="ttc" id="aclasspl_member_map_property_htm_a9edbf448642fc4ee0d8fc0b001af5343"><div class="ttname"><a href="../../db/df3/classpl_member_map_property.htm#a9edbf448642fc4ee0d8fc0b001af5343">plMemberMapProperty::IsEmpty</a></div><div class="ttdeci">virtual bool IsEmpty(const void *pInstance) const override</div><div class="ttdoc">Returns whether the set is empty.</div><div class="ttdef"><b>Definition</b> MapProperty.h:233</div></div>
<div class="ttc" id="aclasspl_member_map_property_htm_ac752bc3b7beceafe69bc823bbe89a10a"><div class="ttname"><a href="../../db/df3/classpl_member_map_property.htm#ac752bc3b7beceafe69bc823bbe89a10a">plMemberMapProperty::GetKeys</a></div><div class="ttdeci">virtual void GetKeys(const void *pInstance, plHybridArray&lt; plString, 16 &gt; &amp;out_keys) const override</div><div class="ttdoc">Writes the content of the set to out_keys.</div><div class="ttdef"><b>Definition</b> MapProperty.h:271</div></div>
<div class="ttc" id="aclasspl_member_map_property_htm_ad72bd2c14c2b746a23427394d57b135e"><div class="ttname"><a href="../../db/df3/classpl_member_map_property.htm#ad72bd2c14c2b746a23427394d57b135e">plMemberMapProperty::Remove</a></div><div class="ttdeci">virtual void Remove(void *pInstance, const char *szKey) const override</div><div class="ttdoc">Removes the target of pObject from the set.</div><div class="ttdef"><b>Definition</b> MapProperty.h:249</div></div>
<div class="ttc" id="aclasspl_member_map_property_htm_ad843b5d77f9f46f809ac0e40a869c57f"><div class="ttname"><a href="../../db/df3/classpl_member_map_property.htm#ad843b5d77f9f46f809ac0e40a869c57f">plMemberMapProperty::Clear</a></div><div class="ttdeci">virtual void Clear(void *pInstance) const override</div><div class="ttdoc">Clears the set.</div><div class="ttdef"><b>Definition</b> MapProperty.h:235</div></div>
<div class="ttc" id="aclasspl_r_t_t_i_htm"><div class="ttname"><a href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a></div><div class="ttdoc">This class holds information about reflected types. Each instance represents one type that is known t...</div><div class="ttdef"><b>Definition</b> RTTI.h:30</div></div>
<div class="ttc" id="aclasspl_typed_map_property_htm"><div class="ttname"><a href="../../d5/dd2/classpl_typed_map_property.htm">plTypedMapProperty</a></div><div class="ttdef"><b>Definition</b> MapProperty.h:11</div></div>
<div class="ttc" id="aclasspl_typed_map_property_htm_a0e5a8723a9b4bbd508a3b4a2aaf3e272"><div class="ttname"><a href="../../d5/dd2/classpl_typed_map_property.htm#a0e5a8723a9b4bbd508a3b4a2aaf3e272">plTypedMapProperty::GetSpecificType</a></div><div class="ttdeci">virtual const plRTTI * GetSpecificType() const override</div><div class="ttdoc">Returns the type information of the constant property. Use this to cast this property to a specific v...</div><div class="ttdef"><b>Definition</b> MapProperty.h:23</div></div>
<div class="ttc" id="aclasspl_write_accessor_map_property_htm"><div class="ttname"><a href="../../d2/d2f/classpl_write_accessor_map_property.htm">plWriteAccessorMapProperty</a></div><div class="ttdef"><b>Definition</b> MapProperty.h:120</div></div>
<div class="ttc" id="aclasspl_write_accessor_map_property_htm_a0d9f837608ac8813d5101fee09eced04"><div class="ttname"><a href="../../d2/d2f/classpl_write_accessor_map_property.htm#a0d9f837608ac8813d5101fee09eced04">plWriteAccessorMapProperty::IsEmpty</a></div><div class="ttdeci">virtual bool IsEmpty(const void *pInstance) const override</div><div class="ttdoc">Returns whether the set is empty.</div><div class="ttdef"><b>Definition</b> MapProperty.h:143</div></div>
<div class="ttc" id="aclasspl_write_accessor_map_property_htm_a2cd5563a26584860de6336931e66c3af"><div class="ttname"><a href="../../d2/d2f/classpl_write_accessor_map_property.htm#a2cd5563a26584860de6336931e66c3af">plWriteAccessorMapProperty::GetKeys</a></div><div class="ttdeci">virtual void GetKeys(const void *pInstance, plHybridArray&lt; plString, 16 &gt; &amp;out_keys) const override</div><div class="ttdoc">Writes the content of the set to out_keys.</div><div class="ttdef"><b>Definition</b> MapProperty.h:183</div></div>
<div class="ttc" id="aclasspl_write_accessor_map_property_htm_a3d04247584ceca917529fe0156664283"><div class="ttname"><a href="../../d2/d2f/classpl_write_accessor_map_property.htm#a3d04247584ceca917529fe0156664283">plWriteAccessorMapProperty::Contains</a></div><div class="ttdeci">virtual bool Contains(const void *pInstance, const char *szKey) const override</div><div class="ttdoc">Returns whether the target of pObject is in the set.</div><div class="ttdef"><b>Definition</b> MapProperty.h:167</div></div>
<div class="ttc" id="aclasspl_write_accessor_map_property_htm_a4d29d08cde13706930ad826400c74867"><div class="ttname"><a href="../../d2/d2f/classpl_write_accessor_map_property.htm#a4d29d08cde13706930ad826400c74867">plWriteAccessorMapProperty::Remove</a></div><div class="ttdeci">virtual void Remove(void *pInstance, const char *szKey) const override</div><div class="ttdoc">Removes the target of pObject from the set.</div><div class="ttdef"><b>Definition</b> MapProperty.h:161</div></div>
<div class="ttc" id="aclasspl_write_accessor_map_property_htm_acb758a168c5da1f551f6172f493f03e8"><div class="ttname"><a href="../../d2/d2f/classpl_write_accessor_map_property.htm#acb758a168c5da1f551f6172f493f03e8">plWriteAccessorMapProperty::Insert</a></div><div class="ttdeci">virtual void Insert(void *pInstance, const char *szKey, const void *pObject) const override</div><div class="ttdoc">Inserts the target of pObject into the set.</div><div class="ttdef"><b>Definition</b> MapProperty.h:155</div></div>
<div class="ttc" id="aclasspl_write_accessor_map_property_htm_ace1272af590f327c57c3dc48c6a3eaec"><div class="ttname"><a href="../../d2/d2f/classpl_write_accessor_map_property.htm#ace1272af590f327c57c3dc48c6a3eaec">plWriteAccessorMapProperty::GetValue</a></div><div class="ttdeci">virtual bool GetValue(const void *pInstance, const char *szKey, void *pObject) const override</div><div class="ttdoc">Writes element at index uiIndex to the target of pObject.</div><div class="ttdef"><b>Definition</b> MapProperty.h:172</div></div>
<div class="ttc" id="aclasspl_write_accessor_map_property_htm_aef6797a5c392644a2ef8778eeb18c1dc"><div class="ttname"><a href="../../d2/d2f/classpl_write_accessor_map_property.htm#aef6797a5c392644a2ef8778eeb18c1dc">plWriteAccessorMapProperty::Clear</a></div><div class="ttdeci">virtual void Clear(void *pInstance) const override</div><div class="ttdoc">Clears the set.</div><div class="ttdef"><b>Definition</b> MapProperty.h:145</div></div>
<div class="ttc" id="astructpl_bitflags_htm_aff74e2d19d2f1e1d2301c35c5170803a"><div class="ttname"><a href="../../df/dd9/structpl_bitflags.htm#aff74e2d19d2f1e1d2301c35c5170803a">plBitflags::Add</a></div><div class="ttdeci">PL_ALWAYS_INLINE void Add(const plBitflags&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Sets the given flag.</div><div class="ttdef"><b>Definition</b> Bitflags.h:151</div></div>
<div class="ttc" id="astructpl_container_sub_type_resolver_htm"><div class="ttname"><a href="../../d3/da8/structpl_container_sub_type_resolver.htm">plContainerSubTypeResolver</a></div><div class="ttdoc">Template that allows to probe a container for its element type.</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:455</div></div>
<div class="ttc" id="astructpl_map_property_accessor_htm"><div class="ttname"><a href="../../dd/da1/structpl_map_property_accessor.htm">plMapPropertyAccessor</a></div><div class="ttdef"><b>Definition</b> MapProperty.h:203</div></div>
<div class="ttc" id="astructpl_property_flags_htm_aa9691dcb8643c279db2c187968da4d10a0f65bb89430668409daaa4453b1a4b86"><div class="ttname"><a href="../../db/d0f/structpl_property_flags.htm#aa9691dcb8643c279db2c187968da4d10a0f65bb89430668409daaa4453b1a4b86">plPropertyFlags::ReadOnly</a></div><div class="ttdeci">@ ReadOnly</div><div class="ttdoc">Can only be read but not modified.</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:63</div></div>
<div class="ttc" id="astructpl_type_traits_htm"><div class="ttname"><a href="../../da/d5d/structpl_type_traits.htm">plTypeTraits</a></div><div class="ttdef"><b>Definition</b> TypeTraits.h:207</div></div>
<div class="ttc" id="astructpl_type_traits_htm_a5d21aa226bb680dfddc12bfcd6caaa84"><div class="ttname"><a href="../../da/d5d/structpl_type_traits.htm#a5d21aa226bb680dfddc12bfcd6caaa84">plTypeTraits::NonConstReferenceType</a></div><div class="ttdeci">typename std::remove_const&lt; typename std::remove_reference&lt; T &gt;::type &gt;::type NonConstReferenceType</div><div class="ttdoc">removes reference and const qualifier</div><div class="ttdef"><b>Definition</b> TypeTraits.h:218</div></div>
<div class="ttc" id="astructpl_variant_type_deduction_htm"><div class="ttname"><a href="../../d6/d03/structpl_variant_type_deduction.htm">plVariantTypeDeduction</a></div><div class="ttdoc">A helper struct to convert the C++ type, which is passed as the template argument,...</div><div class="ttdef"><b>Definition</b> VariantType.h:97</div></div>
<div class="ttc" id="astructpl_variant_type_htm_a4d10a99c083abdf7283ab1f48565de12aeeb3f6c596cc924d89435564a5b70bad"><div class="ttname"><a href="../../d6/d1e/structpl_variant_type.htm#a4d10a99c083abdf7283ab1f48565de12aeeb3f6c596cc924d89435564a5b70bad">plVariantType::Invalid</a></div><div class="ttdeci">@ Invalid</div><div class="ttdoc">The variant stores no (valid) data at the moment.</div><div class="ttdef"><b>Definition</b> VariantType.h:27</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_03dd0ffe19aabd3d1cd0d82a91256ab1.htm">Reflection</a></li><li class="navelem"><a class="el" href="../../dir_e37e67d8810cb9249b77d55deb37c5cb.htm">Implementation</a></li><li class="navelem"><b>MapProperty.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
