<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>plEngine: Code/Engine/Foundation/Memory/Implementation/Allocator_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only-darkmode-toggle.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">plEngine<span id="projectnumber">&#160;Release 2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('dc/df3/_allocator__inl_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Allocator_inl.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span> </div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span>PL_ALWAYS_INLINE plAllocator::plAllocator() = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span> </div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span>PL_ALWAYS_INLINE plAllocator::~plAllocator() = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span> </div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span> </div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="keyword">namespace </span><a class="code hl_namespace" href="../../d1/dbc/namespacepl_math.htm">plMath</a></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span>{</div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span>  <span class="comment">// due to #include order issues, we have to forward declare this function here</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span> </div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span>  PL_FOUNDATION_DLL plUInt64 <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a00334dd03f3d352cf3b0a617e0a40016">SafeMultiply64</a>(plUInt64 a, plUInt64 b, plUInt64 c, plUInt64 d);</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>} <span class="comment">// namespace plMath</span></div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span> </div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span><span class="keyword">namespace </span>plInternal</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span>{</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00017" data-start="{" data-end="};">
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno"><a class="line" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">   17</a></span>  <span class="keyword">struct </span><a class="code hl_struct" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">NewInstance</a></div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>  {</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>    PL_ALWAYS_INLINE <a class="code hl_struct" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">NewInstance</a>(T* pInstance, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>    {</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>      m_pInstance = pInstance;</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>      m_pAllocator = pAllocator;</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>    }</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span> </div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>    PL_ALWAYS_INLINE <a class="code hl_struct" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">NewInstance</a>(<a class="code hl_struct" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">NewInstance&lt;U&gt;</a>&amp;&amp; other)</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>    {</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>      m_pInstance = other.m_pInstance;</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>      m_pAllocator = other.m_pAllocator;</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span> </div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>      other.m_pInstance = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span>      other.m_pAllocator = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>    }</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span> </div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span>    PL_ALWAYS_INLINE <a class="code hl_struct" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">NewInstance</a>(std::nullptr_t) {}</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span> </div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>    PL_ALWAYS_INLINE <a class="code hl_struct" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">NewInstance&lt;U&gt;</a> Cast()</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>    {</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span>      <span class="keywordflow">return</span> <a class="code hl_struct" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">NewInstance&lt;U&gt;</a>(<span class="keyword">static_cast&lt;</span>U*<span class="keyword">&gt;</span>(m_pInstance), m_pAllocator);</div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span>    }</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span> </div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>    PL_ALWAYS_INLINE <span class="keyword">operator</span> T*() { <span class="keywordflow">return</span> m_pInstance; }</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span> </div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>    PL_ALWAYS_INLINE T* operator-&gt;() { <span class="keywordflow">return</span> m_pInstance; }</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span> </div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>    T* m_pInstance = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>    <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* m_pAllocator = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>  };</div>
</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span> </div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;(<span class="keyword">const</span> <a class="code hl_struct" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">NewInstance&lt;T&gt;</a>&amp; lhs, T* rhs)</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span>  {</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>    <span class="keywordflow">return</span> lhs.m_pInstance &lt; rhs;</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>  }</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span> </div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;(T* lhs, <span class="keyword">const</span> NewInstance&lt;T&gt;&amp; rhs)</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>  {</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>    <span class="keywordflow">return</span> lhs &lt; rhs.m_pInstance;</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>  }</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span> </div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>  PL_FORCE_INLINE <span class="keywordtype">void</span> Delete(<a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator, T* pPtr)</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>  {</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>    <span class="keywordflow">if</span> (pPtr != <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>    {</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>      <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#afe524b6781f69e2fd4eceb18f2a27640">plMemoryUtils::Destruct</a>(pPtr, 1);</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>      pAllocator-&gt;Deallocate(pPtr);</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>    }</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>  }</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span> </div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>  PL_FORCE_INLINE T* CreateRawBuffer(<a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator, <span class="keywordtype">size_t</span> uiCount)</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>  {</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>    plUInt64 safeAllocationSize = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a00334dd03f3d352cf3b0a617e0a40016">plMath::SafeMultiply64</a>(uiCount, <span class="keyword">sizeof</span>(T));</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(pAllocator-&gt;<a class="code hl_function" href="../../da/df3/classpl_allocator.htm#a13536372c98c8ec9592c64bfc35316d0">Allocate</a>(<span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(safeAllocationSize), PL_ALIGNMENT_OF(T))); <span class="comment">// Down-cast to size_t for 32-bit</span></div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>  }</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span> </div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>  PL_FORCE_INLINE <span class="keywordtype">void</span> DeleteRawBuffer(<a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator, <span class="keywordtype">void</span>* pPtr)</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>  {</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>    <span class="keywordflow">if</span> (pPtr != <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>    {</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>      pAllocator-&gt;Deallocate(pPtr);</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>    }</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>  }</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span> </div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>  <span class="keyword">inline</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;T&gt;</a> CreateArray(<a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator, plUInt32 uiCount)</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>  {</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>    T* buffer = CreateRawBuffer&lt;T&gt;(pAllocator, uiCount);</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>    <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a611d82f77f3c825a296d39e2bfa3b1c6">plMemoryUtils::Construct&lt;SkipTrivialTypes&gt;</a>(buffer, uiCount);</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span> </div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>    <span class="keywordflow">return</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;T&gt;</a>(buffer, uiCount);</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>  }</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span> </div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>  <span class="keyword">inline</span> <span class="keywordtype">void</span> DeleteArray(<a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator, <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;T&gt;</a> arrayPtr)</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>  {</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>    T* buffer = arrayPtr.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#a6d9dbf629f70c956b654471e53baf2be">GetPtr</a>();</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>    <span class="keywordflow">if</span> (buffer != <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>    {</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>      <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#afe524b6781f69e2fd4eceb18f2a27640">plMemoryUtils::Destruct</a>(buffer, arrayPtr.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#a025ba83275da5ff5008495fa3245b9b2">GetCount</a>());</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>      pAllocator-&gt;Deallocate(buffer);</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>    }</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>  }</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span> </div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>  PL_FORCE_INLINE T* ExtendRawBuffer(T* pPtr, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator, <span class="keywordtype">size_t</span> uiCurrentCount, <span class="keywordtype">size_t</span> uiNewCount, <a class="code hl_struct" href="../../de/d69/structpl_trait_int.htm">plTypeIsPod</a>)</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>  {</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>    <span class="keywordflow">return</span> (T*)pAllocator-&gt;Reallocate(pPtr, uiCurrentCount * <span class="keyword">sizeof</span>(T), uiNewCount * <span class="keyword">sizeof</span>(T), PL_ALIGNMENT_OF(T));</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>  }</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span> </div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>  PL_FORCE_INLINE T* ExtendRawBuffer(T* pPtr, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator, <span class="keywordtype">size_t</span> uiCurrentCount, <span class="keywordtype">size_t</span> uiNewCount, <a class="code hl_struct" href="../../de/d69/structpl_trait_int.htm">plTypeIsMemRelocatable</a>)</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>  {</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>    <span class="keywordflow">return</span> (T*)pAllocator-&gt;Reallocate(pPtr, uiCurrentCount * <span class="keyword">sizeof</span>(T), uiNewCount * <span class="keyword">sizeof</span>(T), PL_ALIGNMENT_OF(T));</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>  }</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span> </div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>  PL_FORCE_INLINE T* ExtendRawBuffer(T* pPtr, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator, <span class="keywordtype">size_t</span> uiCurrentCount, <span class="keywordtype">size_t</span> uiNewCount, <a class="code hl_struct" href="../../de/d69/structpl_trait_int.htm">plTypeIsClass</a>)</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>  {</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>    <span class="keyword">static_assert</span>(!std::is_trivial&lt;T&gt;::value,</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>      <span class="stringliteral">&quot;POD type is treated as class. Use PL_DECLARE_POD_TYPE(YourClass) or PL_DEFINE_AS_POD_TYPE(ExternalClass) to mark it as POD.&quot;</span>);</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span> </div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>    T* pNewMem = CreateRawBuffer&lt;T&gt;(pAllocator, uiNewCount);</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>    <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a5a199ddfb8a76151f443013bf3eb8310">plMemoryUtils::RelocateConstruct</a>(pNewMem, pPtr, uiCurrentCount);</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>    DeleteRawBuffer(pAllocator, pPtr);</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>    <span class="keywordflow">return</span> pNewMem;</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>  }</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span> </div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>  PL_FORCE_INLINE T* ExtendRawBuffer(T* pPtr, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator, <span class="keywordtype">size_t</span> uiCurrentCount, <span class="keywordtype">size_t</span> uiNewCount)</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>  {</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>    PL_ASSERT_DEV(uiCurrentCount &lt; uiNewCount, <span class="stringliteral">&quot;Shrinking of a buffer is not implemented yet&quot;</span>);</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>    PL_ASSERT_DEV(!(uiCurrentCount == uiNewCount), <span class="stringliteral">&quot;Same size passed in twice.&quot;</span>);</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>    <span class="keywordflow">if</span> (pPtr == <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>    {</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>      PL_ASSERT_DEV(uiCurrentCount == 0, <span class="stringliteral">&quot;current count must be 0 if ptr is nullptr&quot;</span>);</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span> </div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>      <span class="keywordflow">return</span> CreateRawBuffer&lt;T&gt;(pAllocator, uiNewCount);</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>    }</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>    <span class="keywordflow">return</span> ExtendRawBuffer(pPtr, pAllocator, uiCurrentCount, uiNewCount, <a class="code hl_struct" href="../../d9/d1d/structpl_get_type_class.htm">plGetTypeClass&lt;T&gt;</a>());</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>  }</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>} <span class="comment">// namespace plInternal</span></div>
<div class="ttc" id="aclasspl_allocator_htm"><div class="ttname"><a href="../../da/df3/classpl_allocator.htm">plAllocator</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition</b> Allocator.h:23</div></div>
<div class="ttc" id="aclasspl_allocator_htm_a13536372c98c8ec9592c64bfc35316d0"><div class="ttname"><a href="../../da/df3/classpl_allocator.htm#a13536372c98c8ec9592c64bfc35316d0">plAllocator::Allocate</a></div><div class="ttdeci">virtual void * Allocate(size_t uiSize, size_t uiAlign, plMemoryUtils::DestructorFunction destructorFunc=nullptr)=0</div><div class="ttdoc">Interface, do not use this directly, always use the new/delete macros below.</div></div>
<div class="ttc" id="aclasspl_array_ptr_htm"><div class="ttname"><a href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a></div><div class="ttdoc">This class encapsulates an array and it's size. It is recommended to use this class instead of plain ...</div><div class="ttdef"><b>Definition</b> ArrayPtr.h:37</div></div>
<div class="ttc" id="aclasspl_array_ptr_htm_a025ba83275da5ff5008495fa3245b9b2"><div class="ttname"><a href="../../db/d81/classpl_array_ptr.htm#a025ba83275da5ff5008495fa3245b9b2">plArrayPtr::GetCount</a></div><div class="ttdeci">PL_ALWAYS_INLINE plUInt32 GetCount() const</div><div class="ttdoc">Returns the number of elements in the array.</div><div class="ttdef"><b>Definition</b> ArrayPtr.h:142</div></div>
<div class="ttc" id="aclasspl_array_ptr_htm_a6d9dbf629f70c956b654471e53baf2be"><div class="ttname"><a href="../../db/d81/classpl_array_ptr.htm#a6d9dbf629f70c956b654471e53baf2be">plArrayPtr::GetPtr</a></div><div class="ttdeci">PL_ALWAYS_INLINE PointerType GetPtr() const</div><div class="ttdoc">Returns the pointer to the array.</div><div class="ttdef"><b>Definition</b> ArrayPtr.h:118</div></div>
<div class="ttc" id="aclasspl_memory_utils_htm_a5a199ddfb8a76151f443013bf3eb8310"><div class="ttname"><a href="../../df/d4d/classpl_memory_utils.htm#a5a199ddfb8a76151f443013bf3eb8310">plMemoryUtils::RelocateConstruct</a></div><div class="ttdeci">static void RelocateConstruct(T *pDestination, T *pSource, size_t uiCount=1)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination from an existing array of object...</div></div>
<div class="ttc" id="aclasspl_memory_utils_htm_a611d82f77f3c825a296d39e2bfa3b1c6"><div class="ttname"><a href="../../df/d4d/classpl_memory_utils.htm#a611d82f77f3c825a296d39e2bfa3b1c6">plMemoryUtils::Construct</a></div><div class="ttdeci">static void Construct(T *pDestination, size_t uiCount=1)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination.</div></div>
<div class="ttc" id="aclasspl_memory_utils_htm_afe524b6781f69e2fd4eceb18f2a27640"><div class="ttname"><a href="../../df/d4d/classpl_memory_utils.htm#afe524b6781f69e2fd4eceb18f2a27640">plMemoryUtils::Destruct</a></div><div class="ttdeci">static void Destruct(T *pDestination, size_t uiCount=1)</div><div class="ttdoc">Destructs uiCount objects of type T at pDestination.</div></div>
<div class="ttc" id="anamespacepl_math_htm"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm">plMath</a></div><div class="ttdoc">This namespace provides common math-functionality as functions.</div><div class="ttdef"><b>Definition</b> Constants.h:6</div></div>
<div class="ttc" id="anamespacepl_math_htm_a00334dd03f3d352cf3b0a617e0a40016"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a00334dd03f3d352cf3b0a617e0a40016">plMath::SafeMultiply64</a></div><div class="ttdeci">PL_FOUNDATION_DLL plUInt64 SafeMultiply64(plUInt64 a, plUInt64 b, plUInt64 c=1, plUInt64 d=1)</div><div class="ttdoc">returns a * b. If an overflow happens, the program is terminated.</div><div class="ttdef"><b>Definition</b> Math.cpp:200</div></div>
<div class="ttc" id="astructpl_get_type_class_htm"><div class="ttname"><a href="../../d9/d1d/structpl_get_type_class.htm">plGetTypeClass</a></div><div class="ttdoc">If there is an % operator which takes a plTypeIsMemRelocatable and returns a CompileTimeTrueType T is...</div><div class="ttdef"><b>Definition</b> TypeTraits.h:67</div></div>
<div class="ttc" id="astructpl_internal_1_1_new_instance_htm"><div class="ttname"><a href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">plInternal::NewInstance</a></div><div class="ttdef"><b>Definition</b> Allocator_inl.h:18</div></div>
<div class="ttc" id="astructpl_trait_int_htm"><div class="ttname"><a href="../../de/d69/structpl_trait_int.htm">plTraitInt</a></div><div class="ttdoc">Type traits.</div><div class="ttdef"><b>Definition</b> TypeTraits.h:12</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_4fbc68de02063aadaaa993e858caad29.htm">Memory</a></li><li class="navelem"><a class="el" href="../../dir_9825cd250d0f1cc944c46f91bcc01b24.htm">Implementation</a></li><li class="navelem"><b>Allocator_inl.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
