<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Plasma Engine: plUnicodeUtils Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Plasma Engine<span id="projectnumber">&#160;2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d5/de1/classpl_unicode_utils.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="../../dd/de3/classpl_unicode_utils-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plUnicodeUtils Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p>Helper functions to work with Unicode.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d0/d2e/_unicode_utils_8h_source.htm">UnicodeUtils.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/structpl_unicode_utils_1_1_utf_inserter.htm">UtfInserter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">[internal] Small helper class to append bytes to some arbitrary container. Used for Utf8 string building.  <a href="../../d1/d37/structpl_unicode_utils_1_1_utf_inserter.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-methods" name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a547a15418df6b0b46b539814fa426c69" id="r_a547a15418df6b0b46b539814fa426c69"><td class="memTemplParams" colspan="2"><a id="a547a15418df6b0b46b539814fa426c69" name="a547a15418df6b0b46b539814fa426c69"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a547a15418df6b0b46b539814fa426c69"><td class="memTemplItemLeft" align="right" valign="top">static constexpr T *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetMaxStringEnd</b> ()</td></tr>
<tr class="memdesc:a547a15418df6b0b46b539814fa426c69"><td class="mdescLeft">&#160;</td><td class="mdescRight">[internal] Returns the max string end pointer for the given type <br /></td></tr>
<tr class="separator:a547a15418df6b0b46b539814fa426c69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78c9537de46536a987491d933de8c934" id="r_a78c9537de46536a987491d933de8c934"><td class="memItemLeft" align="right" valign="top"><a id="a78c9537de46536a987491d933de8c934" name="a78c9537de46536a987491d933de8c934"></a>
static bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsASCII</b> (plUInt32 uiChar)</td></tr>
<tr class="memdesc:a78c9537de46536a987491d933de8c934"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether a character is a pure ASCII character (only the first 7 Bits are used) <br /></td></tr>
<tr class="separator:a78c9537de46536a987491d933de8c934"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9d2bb6ca760523ac95cd86d63002a33" id="r_ae9d2bb6ca760523ac95cd86d63002a33"><td class="memItemLeft" align="right" valign="top"><a id="ae9d2bb6ca760523ac95cd86d63002a33" name="ae9d2bb6ca760523ac95cd86d63002a33"></a>
static bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsUtf8StartByte</b> (char iByte)</td></tr>
<tr class="memdesc:ae9d2bb6ca760523ac95cd86d63002a33"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given byte is a start byte in a UTF-8 multi-byte sequence. <br /></td></tr>
<tr class="separator:ae9d2bb6ca760523ac95cd86d63002a33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb19dff6fb330079cc79279a73d85d7b" id="r_acb19dff6fb330079cc79279a73d85d7b"><td class="memItemLeft" align="right" valign="top"><a id="acb19dff6fb330079cc79279a73d85d7b" name="acb19dff6fb330079cc79279a73d85d7b"></a>
static bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsUtf8ContinuationByte</b> (char iByte)</td></tr>
<tr class="memdesc:acb19dff6fb330079cc79279a73d85d7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given byte is a byte in a UTF-8 multi-byte sequence. <br /></td></tr>
<tr class="separator:acb19dff6fb330079cc79279a73d85d7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf413083840cd93ecc5a740dd09b07e8" id="r_abf413083840cd93ecc5a740dd09b07e8"><td class="memItemLeft" align="right" valign="top"><a id="abf413083840cd93ecc5a740dd09b07e8" name="abf413083840cd93ecc5a740dd09b07e8"></a>
static plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GetUtf8SequenceLength</b> (char iFirstByte)</td></tr>
<tr class="memdesc:abf413083840cd93ecc5a740dd09b07e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of bytes that a UTF-8 sequence is in length, which is encoded in the first byte of the sequence. <br /></td></tr>
<tr class="separator:abf413083840cd93ecc5a740dd09b07e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74ff648b078866556ae3b3fd1718a73b" id="r_a74ff648b078866556ae3b3fd1718a73b"><td class="memItemLeft" align="right" valign="top"><a id="a74ff648b078866556ae3b3fd1718a73b" name="a74ff648b078866556ae3b3fd1718a73b"></a>
static plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>ConvertUtf8ToUtf32</b> (const char *pFirstChar)</td></tr>
<tr class="memdesc:a74ff648b078866556ae3b3fd1718a73b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts the UTF-8 character that starts at pFirstChar into a UTF-32 character. <br /></td></tr>
<tr class="separator:a74ff648b078866556ae3b3fd1718a73b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8464af75ed6b5deac3a917d608c0644" id="r_ab8464af75ed6b5deac3a917d608c0644"><td class="memItemLeft" align="right" valign="top"><a id="ab8464af75ed6b5deac3a917d608c0644" name="ab8464af75ed6b5deac3a917d608c0644"></a>
static plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GetSizeForCharacterInUtf8</b> (plUInt32 uiCharacter)</td></tr>
<tr class="memdesc:ab8464af75ed6b5deac3a917d608c0644"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes how many bytes the character would require, if encoded in UTF-8. <br /></td></tr>
<tr class="separator:ab8464af75ed6b5deac3a917d608c0644"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6a187e04624fd339f0299801626f41a" id="r_aa6a187e04624fd339f0299801626f41a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa6a187e04624fd339f0299801626f41a">MoveToNextUtf8</a> (const char *&amp;ref_szUtf8, plUInt32 uiNumCharacters=1)</td></tr>
<tr class="memdesc:aa6a187e04624fd339f0299801626f41a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string pointer ahead to the next Utf8 character sequence.  <br /></td></tr>
<tr class="separator:aa6a187e04624fd339f0299801626f41a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb86069ab6ebd0348326cca553eff38e" id="r_adb86069ab6ebd0348326cca553eff38e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#adb86069ab6ebd0348326cca553eff38e">MoveToNextUtf8</a> (const char *&amp;ref_szUtf8, const char *szUtf8End, plUInt32 uiNumCharacters=1)</td></tr>
<tr class="memdesc:adb86069ab6ebd0348326cca553eff38e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string pointer ahead to the next Utf8 character sequence.  <br /></td></tr>
<tr class="separator:adb86069ab6ebd0348326cca553eff38e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6f093f8905d9e727814fe6a32d13e57" id="r_ad6f093f8905d9e727814fe6a32d13e57"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad6f093f8905d9e727814fe6a32d13e57">MoveToPriorUtf8</a> (const char *&amp;ref_szUtf8, const char *szUtf8Start, plUInt32 uiNumCharacters=1)</td></tr>
<tr class="memdesc:ad6f093f8905d9e727814fe6a32d13e57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string pointer backwards to the previous Utf8 character sequence.  <br /></td></tr>
<tr class="separator:ad6f093f8905d9e727814fe6a32d13e57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad68fa1d15b759829a35eebfe7d93928d" id="r_ad68fa1d15b759829a35eebfe7d93928d"><td class="memItemLeft" align="right" valign="top"><a id="ad68fa1d15b759829a35eebfe7d93928d" name="ad68fa1d15b759829a35eebfe7d93928d"></a>
static bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsValidUtf8</b> (const char *szString, const char *szStringEnd=<a class="el" href="#a547a15418df6b0b46b539814fa426c69">GetMaxStringEnd</a>&lt; char &gt;())</td></tr>
<tr class="memdesc:ad68fa1d15b759829a35eebfe7d93928d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns false if the given string does not contain a completely valid Utf8 string. <br /></td></tr>
<tr class="separator:ad68fa1d15b759829a35eebfe7d93928d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e21fc7d9e02864f03bc83bf268301ac" id="r_a3e21fc7d9e02864f03bc83bf268301ac"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3e21fc7d9e02864f03bc83bf268301ac">SkipUtf8Bom</a> (const char *&amp;ref_szUtf8)</td></tr>
<tr class="memdesc:a3e21fc7d9e02864f03bc83bf268301ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the given string starts with a Utf8 Bom, the pointer is incremented behind the Bom, and the function returns true.  <br /></td></tr>
<tr class="separator:a3e21fc7d9e02864f03bc83bf268301ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92a0f5c91bc572f1e373d6dcf1c4638c" id="r_a92a0f5c91bc572f1e373d6dcf1c4638c"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a92a0f5c91bc572f1e373d6dcf1c4638c">SkipUtf16BomLE</a> (const plUInt16 *&amp;ref_pUtf16)</td></tr>
<tr class="memdesc:a92a0f5c91bc572f1e373d6dcf1c4638c"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the given string starts with a Utf16 little endian Bom, the pointer is incremented behind the Bom, and the function returns true.  <br /></td></tr>
<tr class="separator:a92a0f5c91bc572f1e373d6dcf1c4638c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f23c19a97dcb9c741fd723a3ac715de" id="r_a9f23c19a97dcb9c741fd723a3ac715de"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a9f23c19a97dcb9c741fd723a3ac715de">SkipUtf16BomBE</a> (const plUInt16 *&amp;ref_pUtf16)</td></tr>
<tr class="memdesc:a9f23c19a97dcb9c741fd723a3ac715de"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the given string starts with a Utf16 big endian Bom, the pointer is incremented behind the Bom, and the function returns true.  <br /></td></tr>
<tr class="separator:a9f23c19a97dcb9c741fd723a3ac715de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a362392068cfe8dfdb0e47f6aec5f9b90" id="r_a362392068cfe8dfdb0e47f6aec5f9b90"><td class="memTemplParams" colspan="2"><a id="a362392068cfe8dfdb0e47f6aec5f9b90" name="a362392068cfe8dfdb0e47f6aec5f9b90"></a>
template&lt;typename ByteIterator &gt; </td></tr>
<tr class="memitem:a362392068cfe8dfdb0e47f6aec5f9b90"><td class="memTemplItemLeft" align="right" valign="top">static plUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>DecodeUtf8ToUtf32</b> (ByteIterator &amp;ref_szUtf8Iterator)</td></tr>
<tr class="memdesc:a362392068cfe8dfdb0e47f6aec5f9b90"><td class="mdescLeft">&#160;</td><td class="mdescRight">Decodes the next character from the given Utf8 sequence to Utf32 and increments the iterator as far as necessary. <br /></td></tr>
<tr class="separator:a362392068cfe8dfdb0e47f6aec5f9b90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2756963acdb06d0f15f8d6766741bd8f" id="r_a2756963acdb06d0f15f8d6766741bd8f"><td class="memTemplParams" colspan="2"><a id="a2756963acdb06d0f15f8d6766741bd8f" name="a2756963acdb06d0f15f8d6766741bd8f"></a>
template&lt;typename UInt16Iterator &gt; </td></tr>
<tr class="memitem:a2756963acdb06d0f15f8d6766741bd8f"><td class="memTemplItemLeft" align="right" valign="top">static bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsUtf16Surrogate</b> (UInt16Iterator &amp;ref_szUtf16Iterator)</td></tr>
<tr class="memdesc:a2756963acdb06d0f15f8d6766741bd8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Characters that cannot be represented in a single utf16 code point need to be split up into two surrogate pairs to form unicode characters beyond the \uFFFF range. <br /></td></tr>
<tr class="separator:a2756963acdb06d0f15f8d6766741bd8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45701d17e699f2aeb2fb550c2331d9e4" id="r_a45701d17e699f2aeb2fb550c2331d9e4"><td class="memTemplParams" colspan="2"><a id="a45701d17e699f2aeb2fb550c2331d9e4" name="a45701d17e699f2aeb2fb550c2331d9e4"></a>
template&lt;typename UInt16Iterator &gt; </td></tr>
<tr class="memitem:a45701d17e699f2aeb2fb550c2331d9e4"><td class="memTemplItemLeft" align="right" valign="top">static plUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>DecodeUtf16ToUtf32</b> (UInt16Iterator &amp;ref_szUtf16Iterator)</td></tr>
<tr class="memdesc:a45701d17e699f2aeb2fb550c2331d9e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Decodes the next character from the given Utf16 sequence to Utf32 and increments the iterator as far as necessary. <br /></td></tr>
<tr class="separator:a45701d17e699f2aeb2fb550c2331d9e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ae87ea77c4a8c5d3a3937cec97194b2" id="r_a3ae87ea77c4a8c5d3a3937cec97194b2"><td class="memTemplParams" colspan="2"><a id="a3ae87ea77c4a8c5d3a3937cec97194b2" name="a3ae87ea77c4a8c5d3a3937cec97194b2"></a>
template&lt;typename WCharIterator &gt; </td></tr>
<tr class="memitem:a3ae87ea77c4a8c5d3a3937cec97194b2"><td class="memTemplItemLeft" align="right" valign="top">static plUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>DecodeWCharToUtf32</b> (WCharIterator &amp;ref_szWCharIterator)</td></tr>
<tr class="memdesc:a3ae87ea77c4a8c5d3a3937cec97194b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Decodes the next character from the given wchar_t sequence to Utf32 and increments the iterator as far as necessary. <br /></td></tr>
<tr class="separator:a3ae87ea77c4a8c5d3a3937cec97194b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3581cf79af0cc5f771f2fe3275ae02a" id="r_ab3581cf79af0cc5f771f2fe3275ae02a"><td class="memTemplParams" colspan="2"><a id="ab3581cf79af0cc5f771f2fe3275ae02a" name="ab3581cf79af0cc5f771f2fe3275ae02a"></a>
template&lt;typename ByteIterator &gt; </td></tr>
<tr class="memitem:ab3581cf79af0cc5f771f2fe3275ae02a"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EncodeUtf32ToUtf8</b> (plUInt32 uiUtf32, ByteIterator &amp;ref_szUtf8Output)</td></tr>
<tr class="memdesc:ab3581cf79af0cc5f771f2fe3275ae02a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Encodes the given Utf32 character to Utf8 and writes as many bytes to the output iterator, as necessary. <br /></td></tr>
<tr class="separator:ab3581cf79af0cc5f771f2fe3275ae02a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8135d70c054e7dde3bd65ef0854fb523" id="r_a8135d70c054e7dde3bd65ef0854fb523"><td class="memTemplParams" colspan="2"><a id="a8135d70c054e7dde3bd65ef0854fb523" name="a8135d70c054e7dde3bd65ef0854fb523"></a>
template&lt;typename UInt16Iterator &gt; </td></tr>
<tr class="memitem:a8135d70c054e7dde3bd65ef0854fb523"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EncodeUtf32ToUtf16</b> (plUInt32 uiUtf32, UInt16Iterator &amp;ref_szUtf16Output)</td></tr>
<tr class="memdesc:a8135d70c054e7dde3bd65ef0854fb523"><td class="mdescLeft">&#160;</td><td class="mdescRight">Encodes the given Utf32 character to Utf16 and writes as many bytes to the output iterator, as necessary. <br /></td></tr>
<tr class="separator:a8135d70c054e7dde3bd65ef0854fb523"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a7a03a38f3c21d7ea201327230b8ae1" id="r_a9a7a03a38f3c21d7ea201327230b8ae1"><td class="memTemplParams" colspan="2"><a id="a9a7a03a38f3c21d7ea201327230b8ae1" name="a9a7a03a38f3c21d7ea201327230b8ae1"></a>
template&lt;typename WCharIterator &gt; </td></tr>
<tr class="memitem:a9a7a03a38f3c21d7ea201327230b8ae1"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EncodeUtf32ToWChar</b> (plUInt32 uiUtf32, WCharIterator &amp;ref_szWCharOutput)</td></tr>
<tr class="memdesc:a9a7a03a38f3c21d7ea201327230b8ae1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Encodes the given Utf32 character to wchar_t and writes as many bytes to the output iterator, as necessary. <br /></td></tr>
<tr class="separator:a9a7a03a38f3c21d7ea201327230b8ae1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad95d011dbd4ed9d68093141d959d3b0a" id="r_ad95d011dbd4ed9d68093141d959d3b0a"><td class="memTemplParams" colspan="2">template&lt;typename Container &gt; </td></tr>
<tr class="memitem:ad95d011dbd4ed9d68093141d959d3b0a"><td class="memTemplItemLeft" align="right" valign="top">static bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ad95d011dbd4ed9d68093141d959d3b0a">RepairNonUtf8Text</a> (const char *pStartData, const char *pEndData, Container &amp;out_result)</td></tr>
<tr class="memdesc:ad95d011dbd4ed9d68093141d959d3b0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks an array of char's, whether it is a valid Utf8 string. If not, it repairs the string, ie by either re-encoding characters or removing them. Writes the result to the desired container type (plString or <a class="el" href="../../d3/d2d/classpl_string_builder.htm" title="plStringBuilder is a class that is meant for creating and modifying strings.">plStringBuilder</a>).  <br /></td></tr>
<tr class="separator:ad95d011dbd4ed9d68093141d959d3b0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-attribs" name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:a997b1ea5dd2fd9e64c8c77d243d70ccc" id="r_a997b1ea5dd2fd9e64c8c77d243d70ccc"><td class="memItemLeft" align="right" valign="top"><a id="a997b1ea5dd2fd9e64c8c77d243d70ccc" name="a997b1ea5dd2fd9e64c8c77d243d70ccc"></a>
static constexpr plUInt16&#160;</td><td class="memItemRight" valign="bottom"><b>Utf16BomLE</b> = 0xfeff</td></tr>
<tr class="memdesc:a997b1ea5dd2fd9e64c8c77d243d70ccc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Byte Order Mark for Little Endian Utf16 strings. <br /></td></tr>
<tr class="separator:a997b1ea5dd2fd9e64c8c77d243d70ccc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ae682d40e9f4c8b596b6df2b830708b" id="r_a4ae682d40e9f4c8b596b6df2b830708b"><td class="memItemLeft" align="right" valign="top"><a id="a4ae682d40e9f4c8b596b6df2b830708b" name="a4ae682d40e9f4c8b596b6df2b830708b"></a>
static constexpr plUInt16&#160;</td><td class="memItemRight" valign="bottom"><b>Utf16BomBE</b> = 0xfffe</td></tr>
<tr class="memdesc:a4ae682d40e9f4c8b596b6df2b830708b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Byte Order Mark for Big Endian Utf16 strings. <br /></td></tr>
<tr class="separator:a4ae682d40e9f4c8b596b6df2b830708b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Helper functions to work with Unicode. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="adb86069ab6ebd0348326cca553eff38e" name="adb86069ab6ebd0348326cca553eff38e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb86069ab6ebd0348326cca553eff38e">&#9670;&#160;</a></span>MoveToNextUtf8() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/dce/structpl_result.htm">plResult</a> plUnicodeUtils::MoveToNextUtf8 </td>
          <td>(</td>
          <td class="paramtype">const char *&amp;</td>          <td class="paramname"><span class="paramname"><em>ref_szUtf8</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>szUtf8End</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiNumCharacters</em></span><span class="paramdefsep"> = </span><span class="paramdefval">1</span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Moves the given string pointer ahead to the next Utf8 character sequence. </p>
<p>The string may point to an invalid position (in between a character sequence). It may not point to a zero terminator already. </p>

</div>
</div>
<a id="aa6a187e04624fd339f0299801626f41a" name="aa6a187e04624fd339f0299801626f41a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6a187e04624fd339f0299801626f41a">&#9670;&#160;</a></span>MoveToNextUtf8() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/dce/structpl_result.htm">plResult</a> plUnicodeUtils::MoveToNextUtf8 </td>
          <td>(</td>
          <td class="paramtype">const char *&amp;</td>          <td class="paramname"><span class="paramname"><em>ref_szUtf8</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiNumCharacters</em></span><span class="paramdefsep"> = </span><span class="paramdefval">1</span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Moves the given string pointer ahead to the next Utf8 character sequence. </p>
<p>The string may point to an invalid position (in between a character sequence). It may not point to a zero terminator already. </p>

</div>
</div>
<a id="ad6f093f8905d9e727814fe6a32d13e57" name="ad6f093f8905d9e727814fe6a32d13e57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad6f093f8905d9e727814fe6a32d13e57">&#9670;&#160;</a></span>MoveToPriorUtf8()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/dce/structpl_result.htm">plResult</a> plUnicodeUtils::MoveToPriorUtf8 </td>
          <td>(</td>
          <td class="paramtype">const char *&amp;</td>          <td class="paramname"><span class="paramname"><em>ref_szUtf8</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>szUtf8Start</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiNumCharacters</em></span><span class="paramdefsep"> = </span><span class="paramdefval">1</span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Moves the given string pointer backwards to the previous Utf8 character sequence. </p>
<p>The string may point to an invalid position (in between a character sequence), or even the \0 terminator, as long as there is a valid string before it (and the user knows when to stop). </p>

</div>
</div>
<a id="ad95d011dbd4ed9d68093141d959d3b0a" name="ad95d011dbd4ed9d68093141d959d3b0a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad95d011dbd4ed9d68093141d959d3b0a">&#9670;&#160;</a></span>RepairNonUtf8Text()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Container &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool plUnicodeUtils::RepairNonUtf8Text </td>
          <td>(</td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>pStartData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>pEndData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Container &amp;</td>          <td class="paramname"><span class="paramname"><em>out_result</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks an array of char's, whether it is a valid Utf8 string. If not, it repairs the string, ie by either re-encoding characters or removing them. Writes the result to the desired container type (plString or <a class="el" href="../../d3/d2d/classpl_string_builder.htm" title="plStringBuilder is a class that is meant for creating and modifying strings.">plStringBuilder</a>). </p>
<p>Returns true if the text had to be repaired, false if it was already valid.</p>
<dl class="section note"><dt>Note</dt><dd>That the for #include order reasons, the implementation is in <a class="el" href="../../da/dbb/_string_builder__inl_8h_source.htm">StringBuilder_inl.h</a>, so you need to have <a class="el" href="../../d5/df1/_string_builder_8h_source.htm">StringBuilder.h</a> included to use it. </dd></dl>

</div>
</div>
<a id="a9f23c19a97dcb9c741fd723a3ac715de" name="a9f23c19a97dcb9c741fd723a3ac715de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f23c19a97dcb9c741fd723a3ac715de">&#9670;&#160;</a></span>SkipUtf16BomBE()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool plUnicodeUtils::SkipUtf16BomBE </td>
          <td>(</td>
          <td class="paramtype">const plUInt16 *&amp;</td>          <td class="paramname"><span class="paramname"><em>ref_pUtf16</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>If the given string starts with a Utf16 big endian Bom, the pointer is incremented behind the Bom, and the function returns true. </p>
<p>Otherwise the pointer is unchanged and false is returned. </p>

</div>
</div>
<a id="a92a0f5c91bc572f1e373d6dcf1c4638c" name="a92a0f5c91bc572f1e373d6dcf1c4638c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92a0f5c91bc572f1e373d6dcf1c4638c">&#9670;&#160;</a></span>SkipUtf16BomLE()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool plUnicodeUtils::SkipUtf16BomLE </td>
          <td>(</td>
          <td class="paramtype">const plUInt16 *&amp;</td>          <td class="paramname"><span class="paramname"><em>ref_pUtf16</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>If the given string starts with a Utf16 little endian Bom, the pointer is incremented behind the Bom, and the function returns true. </p>
<p>Otherwise the pointer is unchanged and false is returned. </p>

</div>
</div>
<a id="a3e21fc7d9e02864f03bc83bf268301ac" name="a3e21fc7d9e02864f03bc83bf268301ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e21fc7d9e02864f03bc83bf268301ac">&#9670;&#160;</a></span>SkipUtf8Bom()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool plUnicodeUtils::SkipUtf8Bom </td>
          <td>(</td>
          <td class="paramtype">const char *&amp;</td>          <td class="paramname"><span class="paramname"><em>ref_szUtf8</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>If the given string starts with a Utf8 Bom, the pointer is incremented behind the Bom, and the function returns true. </p>
<p>Otherwise the pointer is unchanged and false is returned. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/Engine/Foundation/Strings/<a class="el" href="../../d0/d2e/_unicode_utils_8h_source.htm">UnicodeUtils.h</a></li>
<li>Code/Engine/Foundation/Strings/Implementation/<a class="el" href="../../da/dbb/_string_builder__inl_8h_source.htm">StringBuilder_inl.h</a></li>
<li>Code/Engine/Foundation/Strings/Implementation/<a class="el" href="../../d6/dc7/_unicode_utils__inl_8h_source.htm">UnicodeUtils_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d5/de1/classpl_unicode_utils.htm">plUnicodeUtils</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
