<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>plEngine: Code/Engine/Foundation/IO/MemoryStream.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only-darkmode-toggle.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">plEngine<span id="projectnumber">&#160;Release 2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('db/de0/_memory_stream_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">MemoryStream.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;Foundation/Basics.h&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="preprocessor">#include &lt;Foundation/Containers/HybridArray.h&gt;</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#include &lt;Foundation/IO/Stream.h&gt;</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">#include &lt;Foundation/Strings/String.h&gt;</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="preprocessor">#include &lt;Foundation/Types/RefCounted.h&gt;</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span> </div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="keyword">class </span><a class="code hl_class" href="../../da/d8f/classpl_memory_stream_reader.htm">plMemoryStreamReader</a>;</div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="keyword">class </span><a class="code hl_class" href="../../d2/d79/classpl_memory_stream_writer.htm">plMemoryStreamWriter</a>;</div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span> </div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span> </div>
<div class="foldopen" id="foldopen00017" data-start="{" data-end="};">
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno"><a class="line" href="../../d7/d28/classpl_memory_stream_storage_interface.htm">   17</a></span><span class="keyword">class </span>PL_FOUNDATION_DLL <a class="code hl_class" href="../../d7/d28/classpl_memory_stream_storage_interface.htm">plMemoryStreamStorageInterface</a></div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>{</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>  <a class="code hl_class" href="../../d7/d28/classpl_memory_stream_storage_interface.htm">plMemoryStreamStorageInterface</a>();</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>  <span class="keyword">virtual</span> <a class="code hl_class" href="../../d7/d28/classpl_memory_stream_storage_interface.htm">~plMemoryStreamStorageInterface</a>();</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span> </div>
<div class="foldopen" id="foldopen00024" data-start="{" data-end="}">
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno"><a class="line" href="../../d7/d28/classpl_memory_stream_storage_interface.htm#a9863c195bc2cc621f5e7180fc7c6ea63">   24</a></span>  plUInt32 <a class="code hl_function" href="../../d7/d28/classpl_memory_stream_storage_interface.htm#a9863c195bc2cc621f5e7180fc7c6ea63">GetStorageSize32</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>    PL_ASSERT_ALWAYS(GetStorageSize64() &lt;= <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a6173d524e4c3564b75deacc577ad176a">plMath::MaxValue&lt;plUInt32&gt;</a>(), <span class="stringliteral">&quot;The memory stream storage object has grown beyond 4GB. The code using it has to be adapted to support this.&quot;</span>);</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>    <span class="keywordflow">return</span> (plUInt32)GetStorageSize64();</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>  }</div>
</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span> </div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno"><a class="line" href="../../d7/d28/classpl_memory_stream_storage_interface.htm#ac048430724f902558ac7683840bfc2a9">   31</a></span>  <span class="keyword">virtual</span> plUInt64 <a class="code hl_function" href="../../d7/d28/classpl_memory_stream_storage_interface.htm#ac048430724f902558ac7683840bfc2a9">GetStorageSize64</a>() <span class="keyword">const</span> = 0; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span> </div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno"><a class="line" href="../../d7/d28/classpl_memory_stream_storage_interface.htm#a544c3c8ea2009d6a76db66839c12998b">   34</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/d28/classpl_memory_stream_storage_interface.htm#a544c3c8ea2009d6a76db66839c12998b">Clear</a>() = 0;</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span> </div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno"><a class="line" href="../../d7/d28/classpl_memory_stream_storage_interface.htm#a4ebd7148c638eb6b4f260cdb65d84ef7">   37</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/d28/classpl_memory_stream_storage_interface.htm#a4ebd7148c638eb6b4f260cdb65d84ef7">Compact</a>() = 0;</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span> </div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno"><a class="line" href="../../d7/d28/classpl_memory_stream_storage_interface.htm#a19f6c1f82795f119046c78af26fe5cc0">   40</a></span>  <span class="keyword">virtual</span> plUInt64 <a class="code hl_function" href="../../d7/d28/classpl_memory_stream_storage_interface.htm#a19f6c1f82795f119046c78af26fe5cc0">GetHeapMemoryUsage</a>() <span class="keyword">const</span> = 0;</div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span> </div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>  <span class="keywordtype">void</span> ReadAll(<a class="code hl_class" href="../../df/d3d/classpl_stream_reader.htm">plStreamReader</a>&amp; inout_stream, plUInt64 uiMaxBytes = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a6173d524e4c3564b75deacc577ad176a">plMath::MaxValue&lt;plUInt64&gt;</a>());</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span> </div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno"><a class="line" href="../../d7/d28/classpl_memory_stream_storage_interface.htm#a090be39d5705e860f8ce12e609e38e12">   46</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/d28/classpl_memory_stream_storage_interface.htm#a090be39d5705e860f8ce12e609e38e12">Reserve</a>(plUInt64 uiBytes) = 0;</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span> </div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno"><a class="line" href="../../d7/d28/classpl_memory_stream_storage_interface.htm#a4996989b4103d366476a2bcb7ba2bb92">   49</a></span>  <span class="keyword">virtual</span> <a class="code hl_struct" href="../../da/dce/structpl_result.htm">plResult</a> <a class="code hl_function" href="../../d7/d28/classpl_memory_stream_storage_interface.htm#a4996989b4103d366476a2bcb7ba2bb92">CopyToStream</a>(<a class="code hl_class" href="../../d6/d90/classpl_stream_writer.htm">plStreamWriter</a>&amp; inout_stream) <span class="keyword">const</span> = 0;</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span> </div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno"><a class="line" href="../../d7/d28/classpl_memory_stream_storage_interface.htm#ab22a23fb5d46d5d3a2ce875038eded5c">   58</a></span>  <span class="keyword">virtual</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const plUInt8&gt;</a> <a class="code hl_function" href="../../d7/d28/classpl_memory_stream_storage_interface.htm#ab22a23fb5d46d5d3a2ce875038eded5c">GetContiguousMemoryRange</a>(plUInt64 uiStartByte) <span class="keyword">const</span> = 0;</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span> </div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno"><a class="line" href="../../d7/d28/classpl_memory_stream_storage_interface.htm#afe670fc46357af9343585496198281ba">   61</a></span>  <span class="keyword">virtual</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;plUInt8&gt;</a> <a class="code hl_function" href="../../d7/d28/classpl_memory_stream_storage_interface.htm#afe670fc46357af9343585496198281ba">GetContiguousMemoryRange</a>(plUInt64 uiStartByte) = 0;</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span> </div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetInternalSize(plUInt64 uiSize) = 0;</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span> </div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>  <span class="keyword">friend</span> <span class="keyword">class </span><a class="code hl_class" href="../../da/d8f/classpl_memory_stream_reader.htm">plMemoryStreamReader</a>;</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>  <span class="keyword">friend</span> <span class="keyword">class </span><a class="code hl_class" href="../../d2/d79/classpl_memory_stream_writer.htm">plMemoryStreamWriter</a>;</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>};</div>
</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span> </div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span> </div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span> </div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> CONTAINER&gt;</div>
<div class="foldopen" id="foldopen00079" data-start="{" data-end="};">
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno"><a class="line" href="../../d1/dac/classpl_memory_stream_container_storage.htm">   79</a></span><span class="keyword">class </span><a class="code hl_class" href="../../d1/dac/classpl_memory_stream_container_storage.htm">plMemoryStreamContainerStorage</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../d7/d28/classpl_memory_stream_storage_interface.htm">plMemoryStreamStorageInterface</a></div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>{</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span><span class="keyword">public</span>:</div>
<div class="foldopen" id="foldopen00083" data-start="{" data-end="}">
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno"><a class="line" href="../../d1/dac/classpl_memory_stream_container_storage.htm#acf505b0c35f6e3fb10969420da880aa5">   83</a></span>  <a class="code hl_function" href="../../d1/dac/classpl_memory_stream_container_storage.htm#acf505b0c35f6e3fb10969420da880aa5">plMemoryStreamContainerStorage</a>(plUInt32 uiInitialCapacity = 0, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator = <a class="code hl_function" href="../../d8/d6f/classpl_foundation.htm#a2f9bc4a5e090e2d6173ff861d532b021">plFoundation::GetDefaultAllocator</a>())</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>    : m_Storage(pAllocator)</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>  {</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>    m_Storage.Reserve(uiInitialCapacity);</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>  }</div>
</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span> </div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno"><a class="line" href="../../d1/dac/classpl_memory_stream_container_storage.htm#a961130b60f9be6027f36b8386fbb78ee">   89</a></span>  <span class="keyword">virtual</span> plUInt64 <a class="code hl_function" href="../../d1/dac/classpl_memory_stream_container_storage.htm#a961130b60f9be6027f36b8386fbb78ee">GetStorageSize64</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_Storage.GetCount(); }</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno"><a class="line" href="../../d1/dac/classpl_memory_stream_container_storage.htm#a7a457116bdac500d9adc9b9c2c249626">   90</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dac/classpl_memory_stream_container_storage.htm#a7a457116bdac500d9adc9b9c2c249626">Clear</a>()<span class="keyword"> override </span>{ m_Storage.Clear(); }</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno"><a class="line" href="../../d1/dac/classpl_memory_stream_container_storage.htm#acd34ee76656aaea4f10e741c18739052">   91</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dac/classpl_memory_stream_container_storage.htm#acd34ee76656aaea4f10e741c18739052">Compact</a>()<span class="keyword"> override </span>{ m_Storage.Compact(); }</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno"><a class="line" href="../../d1/dac/classpl_memory_stream_container_storage.htm#ae713106377532bb98f8244b34ea57cef">   92</a></span>  <span class="keyword">virtual</span> plUInt64 <a class="code hl_function" href="../../d1/dac/classpl_memory_stream_container_storage.htm#ae713106377532bb98f8244b34ea57cef">GetHeapMemoryUsage</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_Storage.GetHeapMemoryUsage(); }</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span> </div>
<div class="foldopen" id="foldopen00094" data-start="{" data-end="}">
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno"><a class="line" href="../../d1/dac/classpl_memory_stream_container_storage.htm#a4738997cb0b8f5f29c36e13c1f0447bf">   94</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dac/classpl_memory_stream_container_storage.htm#a4738997cb0b8f5f29c36e13c1f0447bf">Reserve</a>(plUInt64 uiBytes)<span class="keyword"> override</span></div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>    PL_ASSERT_DEV(uiBytes &lt;= <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a6173d524e4c3564b75deacc577ad176a">plMath::MaxValue&lt;plUInt32&gt;</a>(), <span class="stringliteral">&quot;plMemoryStreamContainerStorage only supports 32 bit addressable sizes.&quot;</span>);</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>    m_Storage.Reserve(<span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(uiBytes));</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>  }</div>
</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span> </div>
<div class="foldopen" id="foldopen00100" data-start="{" data-end="}">
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno"><a class="line" href="../../d1/dac/classpl_memory_stream_container_storage.htm#af2fe3ec4baff8b4a3fda65749896d346">  100</a></span>  <span class="keyword">virtual</span> <a class="code hl_struct" href="../../da/dce/structpl_result.htm">plResult</a> <a class="code hl_function" href="../../d1/dac/classpl_memory_stream_container_storage.htm#af2fe3ec4baff8b4a3fda65749896d346">CopyToStream</a>(<a class="code hl_class" href="../../d6/d90/classpl_stream_writer.htm">plStreamWriter</a>&amp; inout_stream)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>    <span class="keywordflow">return</span> inout_stream.<a class="code hl_function" href="../../d6/d90/classpl_stream_writer.htm#a0ee41d4d7243d1ba861f6fd4226e1dfe">WriteBytes</a>(m_Storage.GetData(), m_Storage.GetCount());</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>  }</div>
</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span> </div>
<div class="foldopen" id="foldopen00105" data-start="{" data-end="}">
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno"><a class="line" href="../../d1/dac/classpl_memory_stream_container_storage.htm#a55ede577cf85ac7e0619ec688645d3b2">  105</a></span>  <span class="keyword">virtual</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const plUInt8&gt;</a> <a class="code hl_function" href="../../d1/dac/classpl_memory_stream_container_storage.htm#a55ede577cf85ac7e0619ec688645d3b2">GetContiguousMemoryRange</a>(plUInt64 uiStartByte)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>    <span class="keywordflow">if</span> (uiStartByte &gt;= m_Storage.GetCount())</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>      <span class="keywordflow">return</span> {};</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span> </div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>    <span class="keywordflow">return</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const plUInt8&gt;</a>(m_Storage.GetData() + uiStartByte, m_Storage.GetCount() - <span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(uiStartByte));</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>  }</div>
</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span> </div>
<div class="foldopen" id="foldopen00113" data-start="{" data-end="}">
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno"><a class="line" href="../../d1/dac/classpl_memory_stream_container_storage.htm#a71e96e9ff6b6de950f10e3ebe42dc496">  113</a></span>  <span class="keyword">virtual</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;plUInt8&gt;</a> <a class="code hl_function" href="../../d1/dac/classpl_memory_stream_container_storage.htm#a71e96e9ff6b6de950f10e3ebe42dc496">GetContiguousMemoryRange</a>(plUInt64 uiStartByte)<span class="keyword"> override</span></div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>    <span class="keywordflow">if</span> (uiStartByte &gt;= m_Storage.GetCount())</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>      <span class="keywordflow">return</span> {};</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span> </div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>    <span class="keywordflow">return</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;plUInt8&gt;</a>(m_Storage.GetData() + uiStartByte, m_Storage.GetCount() - <span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(uiStartByte));</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>  }</div>
</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span> </div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno"><a class="line" href="../../d1/dac/classpl_memory_stream_container_storage.htm#ab91b303f6c4c3bf950e033f6415fedfe">  122</a></span>  <span class="keyword">const</span> plUInt8* <a class="code hl_function" href="../../d1/dac/classpl_memory_stream_container_storage.htm#ab91b303f6c4c3bf950e033f6415fedfe">GetData</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Storage.GetData(); }</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span> </div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetInternalSize(plUInt64 uiSize)<span class="keyword"> override</span></div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>    PL_ASSERT_DEV(uiSize &lt;= <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a6173d524e4c3564b75deacc577ad176a">plMath::MaxValue&lt;plUInt32&gt;</a>(), <span class="stringliteral">&quot;Storage that large is not supported.&quot;</span>);</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>    m_Storage.SetCountUninitialized(<span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(uiSize));</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>  }</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span> </div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>  CONTAINER m_Storage;</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>};</div>
</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span> </div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span> </div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span> </div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span> </div>
<div class="foldopen" id="foldopen00144" data-start="{" data-end="};">
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno"><a class="line" href="../../d2/d69/classpl_contiguous_memory_stream_storage.htm">  144</a></span><span class="keyword">class </span>PL_FOUNDATION_DLL <a class="code hl_class" href="../../d2/d69/classpl_contiguous_memory_stream_storage.htm">plContiguousMemoryStreamStorage</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../d1/dac/classpl_memory_stream_container_storage.htm">plMemoryStreamContainerStorage</a>&lt;plHybridArray&lt;plUInt8, 256&gt;&gt;</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>{</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>  <a class="code hl_class" href="../../d2/d69/classpl_contiguous_memory_stream_storage.htm">plContiguousMemoryStreamStorage</a>(plUInt32 uiInitialCapacity = 0, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator = <a class="code hl_function" href="../../d8/d6f/classpl_foundation.htm#a2f9bc4a5e090e2d6173ff861d532b021">plFoundation::GetDefaultAllocator</a>())</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>    : <a class="code hl_class" href="../../d1/dac/classpl_memory_stream_container_storage.htm">plMemoryStreamContainerStorage&lt;plHybridArray&lt;plUInt8, 256&gt;</a>&gt;(uiInitialCapacity, pAllocator)</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>  {</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>  }</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>};</div>
</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span> </div>
<div class="foldopen" id="foldopen00160" data-start="{" data-end="};">
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno"><a class="line" href="../../db/dc4/classpl_default_memory_stream_storage.htm">  160</a></span><span class="keyword">class </span>PL_FOUNDATION_DLL <a class="code hl_class" href="../../db/dc4/classpl_default_memory_stream_storage.htm">plDefaultMemoryStreamStorage</a> final : <span class="keyword">public</span> <a class="code hl_class" href="../../d7/d28/classpl_memory_stream_storage_interface.htm">plMemoryStreamStorageInterface</a></div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>{</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>  <a class="code hl_class" href="../../db/dc4/classpl_default_memory_stream_storage.htm">plDefaultMemoryStreamStorage</a>(plUInt32 uiInitialCapacity = 0, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator = <a class="code hl_function" href="../../d8/d6f/classpl_foundation.htm#a2f9bc4a5e090e2d6173ff861d532b021">plFoundation::GetDefaultAllocator</a>());</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>  <a class="code hl_class" href="../../db/dc4/classpl_default_memory_stream_storage.htm">~plDefaultMemoryStreamStorage</a>();</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span> </div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> Reserve(plUInt64 uiBytes) <span class="keyword">override</span>;    <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span> </div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>  <span class="keyword">virtual</span> plUInt64 GetStorageSize64() <span class="keyword">const override</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> Clear() <span class="keyword">override</span>;</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> Compact() <span class="keyword">override</span>;</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>  <span class="keyword">virtual</span> plUInt64 GetHeapMemoryUsage() <span class="keyword">const override</span>;</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>  <span class="keyword">virtual</span> <a class="code hl_struct" href="../../da/dce/structpl_result.htm">plResult</a> CopyToStream(<a class="code hl_class" href="../../d6/d90/classpl_stream_writer.htm">plStreamWriter</a>&amp; inout_stream) <span class="keyword">const override</span>;</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>  <span class="keyword">virtual</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const plUInt8&gt;</a> GetContiguousMemoryRange(plUInt64 uiStartByte) <span class="keyword">const override</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>  <span class="keyword">virtual</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;plUInt8&gt;</a> GetContiguousMemoryRange(plUInt64 uiStartByte) <span class="keyword">override</span>;             <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span> </div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetInternalSize(plUInt64 uiSize) <span class="keyword">override</span>;</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span> </div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>  <span class="keywordtype">void</span> AddChunk(plUInt32 uiMinimumSize);</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span> </div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>  <span class="keyword">struct </span>Chunk</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>  {</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>    plUInt64 m_uiStartOffset = 0;</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>    <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;plUInt8&gt;</a> m_Bytes;</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>  };</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span> </div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>  <a class="code hl_class" href="../../d8/dcc/classpl_hybrid_array.htm">plHybridArray&lt;Chunk, 16&gt;</a> m_Chunks;</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span> </div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>  plUInt64 m_uiCapacity = 0;</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>  plUInt64 m_uiInternalSize = 0;</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>  plUInt8 m_InplaceMemory[512]; <span class="comment">// used for the very first bytes, might cover small memory streams without an allocation</span></div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>  <span class="keyword">mutable</span> plUInt32 m_uiLastChunkAccessed = 0;</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>  <span class="keyword">mutable</span> plUInt64 m_uiLastByteAccessed = 0;</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>};</div>
</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span> </div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span> </div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> CONTAINER&gt;</div>
<div class="foldopen" id="foldopen00202" data-start="{" data-end="};">
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno"><a class="line" href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm">  202</a></span><span class="keyword">class </span><a class="code hl_class" href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm">plMemoryStreamContainerWrapperStorage</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../d7/d28/classpl_memory_stream_storage_interface.htm">plMemoryStreamStorageInterface</a></div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>{</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>  <a class="code hl_class" href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm">plMemoryStreamContainerWrapperStorage</a>(CONTAINER* pContainer) { m_pStorage = pContainer; }</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span> </div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno"><a class="line" href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#ae70d94ef919a3abdddd298ea84cf3ad3">  207</a></span>  <span class="keyword">virtual</span> plUInt64 <a class="code hl_function" href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#ae70d94ef919a3abdddd298ea84cf3ad3">GetStorageSize64</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_pStorage-&gt;GetCount(); }</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno"><a class="line" href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#ab668407c1900eec6af19e3e3511dcdad">  208</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#ab668407c1900eec6af19e3e3511dcdad">Clear</a>()<span class="keyword"> override </span>{ m_pStorage-&gt;Clear(); }</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno"><a class="line" href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#a0238aac37b0e6296e76bfc2d80d28a16">  209</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#a0238aac37b0e6296e76bfc2d80d28a16">Compact</a>()<span class="keyword"> override </span>{ m_pStorage-&gt;Compact(); }</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno"><a class="line" href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#a549bb1e85d7af81644b536764d49830f">  210</a></span>  <span class="keyword">virtual</span> plUInt64 <a class="code hl_function" href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#a549bb1e85d7af81644b536764d49830f">GetHeapMemoryUsage</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_pStorage-&gt;GetHeapMemoryUsage(); }</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span> </div>
<div class="foldopen" id="foldopen00212" data-start="{" data-end="}">
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno"><a class="line" href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#aa2001e08112da5bf56167da8d4b2cedb">  212</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#aa2001e08112da5bf56167da8d4b2cedb">Reserve</a>(plUInt64 uiBytes)<span class="keyword"> override</span></div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>    PL_ASSERT_DEV(uiBytes &lt;= <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a6173d524e4c3564b75deacc577ad176a">plMath::MaxValue&lt;plUInt32&gt;</a>(), <span class="stringliteral">&quot;plMemoryStreamContainerWrapperStorage only supports 32 bit addressable sizes.&quot;</span>);</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>    m_pStorage-&gt;Reserve(<span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(uiBytes));</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>  }</div>
</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span> </div>
<div class="foldopen" id="foldopen00218" data-start="{" data-end="}">
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno"><a class="line" href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#a07bedc770a2d03bd191dca10d93d6d42">  218</a></span>  <span class="keyword">virtual</span> <a class="code hl_struct" href="../../da/dce/structpl_result.htm">plResult</a> <a class="code hl_function" href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#a07bedc770a2d03bd191dca10d93d6d42">CopyToStream</a>(<a class="code hl_class" href="../../d6/d90/classpl_stream_writer.htm">plStreamWriter</a>&amp; inout_stream)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>    <span class="keywordflow">return</span> inout_stream.<a class="code hl_function" href="../../d6/d90/classpl_stream_writer.htm#a0ee41d4d7243d1ba861f6fd4226e1dfe">WriteBytes</a>(m_pStorage-&gt;GetData(), m_pStorage-&gt;GetCount());</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>  }</div>
</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span> </div>
<div class="foldopen" id="foldopen00223" data-start="{" data-end="}">
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno"><a class="line" href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#a83b537b972a3d84d64e8a88f25b8d607">  223</a></span>  <span class="keyword">virtual</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const plUInt8&gt;</a> <a class="code hl_function" href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#a83b537b972a3d84d64e8a88f25b8d607">GetContiguousMemoryRange</a>(plUInt64 uiStartByte)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>    <span class="keywordflow">if</span> (uiStartByte &gt;= m_pStorage-&gt;GetCount())</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>      <span class="keywordflow">return</span> {};</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span> </div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>    <span class="keywordflow">return</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const plUInt8&gt;</a>(m_pStorage-&gt;GetData() + uiStartByte, m_pStorage-&gt;GetCount() - <span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(uiStartByte));</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>  }</div>
</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span> </div>
<div class="foldopen" id="foldopen00231" data-start="{" data-end="}">
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno"><a class="line" href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#a53224446d04fc69f8e09a4c5ef073ed2">  231</a></span>  <span class="keyword">virtual</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;plUInt8&gt;</a> <a class="code hl_function" href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#a53224446d04fc69f8e09a4c5ef073ed2">GetContiguousMemoryRange</a>(plUInt64 uiStartByte)<span class="keyword"> override</span></div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>    <span class="keywordflow">if</span> (uiStartByte &gt;= m_pStorage-&gt;GetCount())</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span>      <span class="keywordflow">return</span> {};</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span> </div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>    <span class="keywordflow">return</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;plUInt8&gt;</a>(m_pStorage-&gt;GetData() + uiStartByte, m_pStorage-&gt;GetCount() - <span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(uiStartByte));</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>  }</div>
</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span> </div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetInternalSize(plUInt64 uiSize)<span class="keyword"> override</span></div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>    PL_ASSERT_DEV(uiSize &lt;= <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a6173d524e4c3564b75deacc577ad176a">plMath::MaxValue&lt;plUInt32&gt;</a>(), <span class="stringliteral">&quot;plMemoryStreamContainerWrapperStorage only supports up to 4GB sizes.&quot;</span>);</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>    m_pStorage-&gt;SetCountUninitialized(<span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(uiSize));</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>  }</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span> </div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span>  CONTAINER* m_pStorage;</div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>};</div>
</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span> </div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span> </div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span> </div>
<div class="foldopen" id="foldopen00258" data-start="{" data-end="};">
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno"><a class="line" href="../../da/d8f/classpl_memory_stream_reader.htm">  258</a></span><span class="keyword">class </span>PL_FOUNDATION_DLL <a class="code hl_class" href="../../da/d8f/classpl_memory_stream_reader.htm">plMemoryStreamReader</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../df/d3d/classpl_stream_reader.htm">plStreamReader</a></div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span>{</div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span>  <a class="code hl_class" href="../../da/d8f/classpl_memory_stream_reader.htm">plMemoryStreamReader</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/d28/classpl_memory_stream_storage_interface.htm">plMemoryStreamStorageInterface</a>* pStreamStorage = <span class="keyword">nullptr</span>);</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span> </div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span>  <a class="code hl_class" href="../../da/d8f/classpl_memory_stream_reader.htm">~plMemoryStreamReader</a>();</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span> </div>
<div class="foldopen" id="foldopen00269" data-start="{" data-end="}">
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno"><a class="line" href="../../da/d8f/classpl_memory_stream_reader.htm#a4e98f25a31fbe3e03d9e6a2a7848d584">  269</a></span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../da/d8f/classpl_memory_stream_reader.htm#a4e98f25a31fbe3e03d9e6a2a7848d584">SetStorage</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/d28/classpl_memory_stream_storage_interface.htm">plMemoryStreamStorageInterface</a>* pStreamStorage)</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span>  {</div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span>    m_pStreamStorage = pStreamStorage;</div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span>    m_uiReadPosition = 0;</div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span>  }</div>
</div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span> </div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span>  <span class="keyword">virtual</span> plUInt64 ReadBytes(<span class="keywordtype">void</span>* pReadBuffer, plUInt64 uiBytesToRead) <span class="keyword">override</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span> </div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span>  <span class="keyword">virtual</span> plUInt64 SkipBytes(plUInt64 uiBytesToSkip) <span class="keyword">override</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span> </div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span>  <span class="keywordtype">void</span> SetReadPosition(plUInt64 uiReadPosition); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span> </div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno"><a class="line" href="../../da/d8f/classpl_memory_stream_reader.htm#a4a3823b5aab197199a3deb165b3834e3">  287</a></span>  plUInt64 <a class="code hl_function" href="../../da/d8f/classpl_memory_stream_reader.htm#a4a3823b5aab197199a3deb165b3834e3">GetReadPosition</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_uiReadPosition; }</div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span> </div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span>  plUInt32 GetByteCount32() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span>  plUInt64 GetByteCount64() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span> </div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span>  <span class="keywordtype">void</span> SetDebugSourceInformation(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sDebugSourceInformation);</div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span> </div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d7/d28/classpl_memory_stream_storage_interface.htm">plMemoryStreamStorageInterface</a>* m_pStreamStorage = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span> </div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span>  <a class="code hl_class" href="../../d2/dea/structpl_hybrid_string.htm">plString</a> m_sDebugSourceInformation;</div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span> </div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span>  plUInt64 m_uiReadPosition = 0;</div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span>};</div>
</div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span> </div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span> </div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span> </div>
<div class="foldopen" id="foldopen00312" data-start="{" data-end="};">
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno"><a class="line" href="../../d2/d79/classpl_memory_stream_writer.htm">  312</a></span><span class="keyword">class </span>PL_FOUNDATION_DLL <a class="code hl_class" href="../../d2/d79/classpl_memory_stream_writer.htm">plMemoryStreamWriter</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../d6/d90/classpl_stream_writer.htm">plStreamWriter</a></div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span>{</div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span>  <a class="code hl_class" href="../../d2/d79/classpl_memory_stream_writer.htm">plMemoryStreamWriter</a>(<a class="code hl_class" href="../../d7/d28/classpl_memory_stream_storage_interface.htm">plMemoryStreamStorageInterface</a>* pStreamStorage = <span class="keyword">nullptr</span>);</div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span> </div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>  <a class="code hl_class" href="../../d2/d79/classpl_memory_stream_writer.htm">~plMemoryStreamWriter</a>();</div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span> </div>
<div class="foldopen" id="foldopen00322" data-start="{" data-end="}">
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno"><a class="line" href="../../d2/d79/classpl_memory_stream_writer.htm#a8c62b5f4696e6124fb8fb4610f285918">  322</a></span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/d79/classpl_memory_stream_writer.htm#a8c62b5f4696e6124fb8fb4610f285918">SetStorage</a>(<a class="code hl_class" href="../../d7/d28/classpl_memory_stream_storage_interface.htm">plMemoryStreamStorageInterface</a>* pStreamStorage)</div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span>  {</div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span>    m_pStreamStorage = pStreamStorage;</div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span>    m_uiWritePosition = 0;</div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span>    <span class="keywordflow">if</span> (m_pStreamStorage)</div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span>      m_uiWritePosition = m_pStreamStorage-&gt;<a class="code hl_function" href="../../d7/d28/classpl_memory_stream_storage_interface.htm#ac048430724f902558ac7683840bfc2a9">GetStorageSize64</a>();</div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span>  }</div>
</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span> </div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span>  <span class="keyword">virtual</span> <a class="code hl_struct" href="../../da/dce/structpl_result.htm">plResult</a> WriteBytes(<span class="keyword">const</span> <span class="keywordtype">void</span>* pWriteBuffer, plUInt64 uiBytesToWrite) <span class="keyword">override</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span> </div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span>  <span class="keywordtype">void</span> SetWritePosition(plUInt64 uiWritePosition); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span> </div>
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno"><a class="line" href="../../d2/d79/classpl_memory_stream_writer.htm#ad487a527dcf495d5bd6a9716b5676258">  339</a></span>  plUInt64 <a class="code hl_function" href="../../d2/d79/classpl_memory_stream_writer.htm#ad487a527dcf495d5bd6a9716b5676258">GetWritePosition</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_uiWritePosition; }</div>
<div class="line"><a id="l00340" name="l00340"></a><span class="lineno">  340</span> </div>
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno">  342</span>  plUInt32 GetByteCount32() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span>  plUInt64 GetByteCount64() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span> </div>
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno">  345</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span>  <a class="code hl_class" href="../../d7/d28/classpl_memory_stream_storage_interface.htm">plMemoryStreamStorageInterface</a>* m_pStreamStorage = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00347" name="l00347"></a><span class="lineno">  347</span> </div>
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno">  348</span>  plUInt64 m_uiWritePosition = 0;</div>
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno">  349</span>};</div>
</div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span> </div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span> </div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno">  355</span> </div>
<div class="foldopen" id="foldopen00357" data-start="{" data-end="};">
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno"><a class="line" href="../../dd/d54/classpl_raw_memory_stream_reader.htm">  357</a></span><span class="keyword">class </span>PL_FOUNDATION_DLL <a class="code hl_class" href="../../dd/d54/classpl_raw_memory_stream_reader.htm">plRawMemoryStreamReader</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../df/d3d/classpl_stream_reader.htm">plStreamReader</a></div>
<div class="line"><a id="l00358" name="l00358"></a><span class="lineno">  358</span>{</div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno">  360</span>  <a class="code hl_class" href="../../dd/d54/classpl_raw_memory_stream_reader.htm">plRawMemoryStreamReader</a>();</div>
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno">  361</span> </div>
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno">  363</span>  <a class="code hl_class" href="../../dd/d54/classpl_raw_memory_stream_reader.htm">plRawMemoryStreamReader</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pData, plUInt64 uiDataSize); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span> </div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CONTAINER&gt;</div>
<div class="foldopen" id="foldopen00368" data-start="{" data-end="}">
<div class="line"><a id="l00368" name="l00368"></a><span class="lineno"><a class="line" href="../../dd/d54/classpl_raw_memory_stream_reader.htm#a76e4de6d0dc4391c49fa9e0297369683">  368</a></span>  <a class="code hl_function" href="../../dd/d54/classpl_raw_memory_stream_reader.htm#a76e4de6d0dc4391c49fa9e0297369683">plRawMemoryStreamReader</a>(<span class="keyword">const</span> CONTAINER&amp; container) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00369" name="l00369"></a><span class="lineno">  369</span>  {</div>
<div class="line"><a id="l00370" name="l00370"></a><span class="lineno">  370</span>    Reset(container);</div>
<div class="line"><a id="l00371" name="l00371"></a><span class="lineno">  371</span>  }</div>
</div>
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno">  372</span> </div>
<div class="line"><a id="l00373" name="l00373"></a><span class="lineno">  373</span>  <a class="code hl_class" href="../../dd/d54/classpl_raw_memory_stream_reader.htm">~plRawMemoryStreamReader</a>();</div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno">  374</span> </div>
<div class="line"><a id="l00375" name="l00375"></a><span class="lineno">  375</span>  <span class="keywordtype">void</span> Reset(<span class="keyword">const</span> <span class="keywordtype">void</span>* pData, plUInt64 uiDataSize); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00376" name="l00376"></a><span class="lineno">  376</span> </div>
<div class="line"><a id="l00377" name="l00377"></a><span class="lineno">  377</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CONTAINER&gt;</div>
<div class="line"><a id="l00378" name="l00378"></a><span class="lineno">  378</span>  <span class="keywordtype">void</span> Reset(<span class="keyword">const</span> CONTAINER&amp; container)              <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00379" name="l00379"></a><span class="lineno">  379</span>  {</div>
<div class="line"><a id="l00380" name="l00380"></a><span class="lineno">  380</span>    Reset(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>plUInt8*<span class="keyword">&gt;</span>(container.GetData()), container.GetCount());</div>
<div class="line"><a id="l00381" name="l00381"></a><span class="lineno">  381</span>  }</div>
<div class="line"><a id="l00382" name="l00382"></a><span class="lineno">  382</span> </div>
<div class="line"><a id="l00386" name="l00386"></a><span class="lineno">  386</span>  <span class="keyword">virtual</span> plUInt64 ReadBytes(<span class="keywordtype">void</span>* pReadBuffer, plUInt64 uiBytesToRead) <span class="keyword">override</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00387" name="l00387"></a><span class="lineno">  387</span> </div>
<div class="line"><a id="l00389" name="l00389"></a><span class="lineno">  389</span>  <span class="keyword">virtual</span> plUInt64 SkipBytes(plUInt64 uiBytesToSkip) <span class="keyword">override</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00390" name="l00390"></a><span class="lineno">  390</span> </div>
<div class="line"><a id="l00392" name="l00392"></a><span class="lineno">  392</span>  <span class="keywordtype">void</span> SetReadPosition(plUInt64 uiReadPosition); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00393" name="l00393"></a><span class="lineno">  393</span> </div>
<div class="line"><a id="l00395" name="l00395"></a><span class="lineno"><a class="line" href="../../dd/d54/classpl_raw_memory_stream_reader.htm#a2b023b9a371751ec74d1de3dcb913fa5">  395</a></span>  plUInt64 <a class="code hl_function" href="../../dd/d54/classpl_raw_memory_stream_reader.htm#a2b023b9a371751ec74d1de3dcb913fa5">GetReadPosition</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_uiReadPosition; }</div>
<div class="line"><a id="l00396" name="l00396"></a><span class="lineno">  396</span> </div>
<div class="line"><a id="l00398" name="l00398"></a><span class="lineno">  398</span>  plUInt64 GetByteCount() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00399" name="l00399"></a><span class="lineno">  399</span> </div>
<div class="line"><a id="l00401" name="l00401"></a><span class="lineno">  401</span>  <span class="keywordtype">void</span> SetDebugSourceInformation(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sDebugSourceInformation);</div>
<div class="line"><a id="l00402" name="l00402"></a><span class="lineno">  402</span> </div>
<div class="line"><a id="l00403" name="l00403"></a><span class="lineno">  403</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00404" name="l00404"></a><span class="lineno">  404</span>  <span class="keyword">const</span> plUInt8* m_pRawMemory = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00405" name="l00405"></a><span class="lineno">  405</span> </div>
<div class="line"><a id="l00406" name="l00406"></a><span class="lineno">  406</span>  plUInt64 m_uiChunkSize = 0;</div>
<div class="line"><a id="l00407" name="l00407"></a><span class="lineno">  407</span>  plUInt64 m_uiReadPosition = 0;</div>
<div class="line"><a id="l00408" name="l00408"></a><span class="lineno">  408</span> </div>
<div class="line"><a id="l00409" name="l00409"></a><span class="lineno">  409</span>  <a class="code hl_class" href="../../d2/dea/structpl_hybrid_string.htm">plString</a> m_sDebugSourceInformation;</div>
<div class="line"><a id="l00410" name="l00410"></a><span class="lineno">  410</span>};</div>
</div>
<div class="line"><a id="l00411" name="l00411"></a><span class="lineno">  411</span> </div>
<div class="line"><a id="l00415" name="l00415"></a><span class="lineno">  415</span> </div>
<div class="line"><a id="l00416" name="l00416"></a><span class="lineno">  416</span> </div>
<div class="foldopen" id="foldopen00418" data-start="{" data-end="};">
<div class="line"><a id="l00418" name="l00418"></a><span class="lineno"><a class="line" href="../../db/df9/classpl_raw_memory_stream_writer.htm">  418</a></span><span class="keyword">class </span>PL_FOUNDATION_DLL <a class="code hl_class" href="../../db/df9/classpl_raw_memory_stream_writer.htm">plRawMemoryStreamWriter</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../d6/d90/classpl_stream_writer.htm">plStreamWriter</a></div>
<div class="line"><a id="l00419" name="l00419"></a><span class="lineno">  419</span>{</div>
<div class="line"><a id="l00420" name="l00420"></a><span class="lineno">  420</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00421" name="l00421"></a><span class="lineno">  421</span>  <a class="code hl_class" href="../../db/df9/classpl_raw_memory_stream_writer.htm">plRawMemoryStreamWriter</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00422" name="l00422"></a><span class="lineno">  422</span> </div>
<div class="line"><a id="l00424" name="l00424"></a><span class="lineno">  424</span>  <a class="code hl_class" href="../../db/df9/classpl_raw_memory_stream_writer.htm">plRawMemoryStreamWriter</a>(<span class="keywordtype">void</span>* pData, plUInt64 uiDataSize); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00425" name="l00425"></a><span class="lineno">  425</span> </div>
<div class="line"><a id="l00428" name="l00428"></a><span class="lineno">  428</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CONTAINER&gt;</div>
<div class="foldopen" id="foldopen00429" data-start="{" data-end="}">
<div class="line"><a id="l00429" name="l00429"></a><span class="lineno"><a class="line" href="../../db/df9/classpl_raw_memory_stream_writer.htm#a3cb2354ab76439e963bebb8c86745c10">  429</a></span>  <a class="code hl_function" href="../../db/df9/classpl_raw_memory_stream_writer.htm#a3cb2354ab76439e963bebb8c86745c10">plRawMemoryStreamWriter</a>(CONTAINER&amp; ref_container) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00430" name="l00430"></a><span class="lineno">  430</span>  {</div>
<div class="line"><a id="l00431" name="l00431"></a><span class="lineno">  431</span>    Reset(ref_container);</div>
<div class="line"><a id="l00432" name="l00432"></a><span class="lineno">  432</span>  }</div>
</div>
<div class="line"><a id="l00433" name="l00433"></a><span class="lineno">  433</span> </div>
<div class="line"><a id="l00434" name="l00434"></a><span class="lineno">  434</span>  <a class="code hl_class" href="../../db/df9/classpl_raw_memory_stream_writer.htm">~plRawMemoryStreamWriter</a>();                   <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00435" name="l00435"></a><span class="lineno">  435</span> </div>
<div class="line"><a id="l00436" name="l00436"></a><span class="lineno">  436</span>  <span class="keywordtype">void</span> Reset(<span class="keywordtype">void</span>* pData, plUInt64 uiDataSize); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00437" name="l00437"></a><span class="lineno">  437</span> </div>
<div class="line"><a id="l00438" name="l00438"></a><span class="lineno">  438</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CONTAINER&gt;</div>
<div class="line"><a id="l00439" name="l00439"></a><span class="lineno">  439</span>  <span class="keywordtype">void</span> Reset(CONTAINER&amp; ref_container)          <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00440" name="l00440"></a><span class="lineno">  440</span>  {</div>
<div class="line"><a id="l00441" name="l00441"></a><span class="lineno">  441</span>    Reset(<span class="keyword">static_cast&lt;</span>plUInt8*<span class="keyword">&gt;</span>(ref_container.GetData()), ref_container.GetCount());</div>
<div class="line"><a id="l00442" name="l00442"></a><span class="lineno">  442</span>  }</div>
<div class="line"><a id="l00443" name="l00443"></a><span class="lineno">  443</span> </div>
<div class="line"><a id="l00445" name="l00445"></a><span class="lineno">  445</span>  plUInt64 GetStorageSize() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00446" name="l00446"></a><span class="lineno">  446</span> </div>
<div class="line"><a id="l00448" name="l00448"></a><span class="lineno">  448</span>  plUInt64 GetNumWrittenBytes() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00449" name="l00449"></a><span class="lineno">  449</span> </div>
<div class="line"><a id="l00451" name="l00451"></a><span class="lineno">  451</span>  <span class="keywordtype">void</span> SetDebugSourceInformation(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sDebugSourceInformation);</div>
<div class="line"><a id="l00452" name="l00452"></a><span class="lineno">  452</span> </div>
<div class="line"><a id="l00456" name="l00456"></a><span class="lineno">  456</span>  <span class="keyword">virtual</span> <a class="code hl_struct" href="../../da/dce/structpl_result.htm">plResult</a> WriteBytes(<span class="keyword">const</span> <span class="keywordtype">void</span>* pWriteBuffer, plUInt64 uiBytesToWrite) <span class="keyword">override</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00457" name="l00457"></a><span class="lineno">  457</span> </div>
<div class="line"><a id="l00458" name="l00458"></a><span class="lineno">  458</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00459" name="l00459"></a><span class="lineno">  459</span>  plUInt8* m_pRawMemory = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00460" name="l00460"></a><span class="lineno">  460</span> </div>
<div class="line"><a id="l00461" name="l00461"></a><span class="lineno">  461</span>  plUInt64 m_uiChunkSize = 0;</div>
<div class="line"><a id="l00462" name="l00462"></a><span class="lineno">  462</span>  plUInt64 m_uiWritePosition = 0;</div>
<div class="line"><a id="l00463" name="l00463"></a><span class="lineno">  463</span> </div>
<div class="line"><a id="l00464" name="l00464"></a><span class="lineno">  464</span>  <a class="code hl_class" href="../../d2/dea/structpl_hybrid_string.htm">plString</a> m_sDebugSourceInformation;</div>
<div class="line"><a id="l00465" name="l00465"></a><span class="lineno">  465</span>};</div>
</div>
<div class="ttc" id="aclasspl_allocator_htm"><div class="ttname"><a href="../../da/df3/classpl_allocator.htm">plAllocator</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition</b> Allocator.h:23</div></div>
<div class="ttc" id="aclasspl_array_ptr_htm"><div class="ttname"><a href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a></div><div class="ttdoc">This class encapsulates an array and it's size. It is recommended to use this class instead of plain ...</div><div class="ttdef"><b>Definition</b> ArrayPtr.h:37</div></div>
<div class="ttc" id="aclasspl_contiguous_memory_stream_storage_htm"><div class="ttname"><a href="../../d2/d69/classpl_contiguous_memory_stream_storage.htm">plContiguousMemoryStreamStorage</a></div><div class="ttdef"><b>Definition</b> MemoryStream.h:145</div></div>
<div class="ttc" id="aclasspl_default_memory_stream_storage_htm"><div class="ttname"><a href="../../db/dc4/classpl_default_memory_stream_storage.htm">plDefaultMemoryStreamStorage</a></div><div class="ttdoc">The default implementation for memory stream storage.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:161</div></div>
<div class="ttc" id="aclasspl_foundation_htm_a2f9bc4a5e090e2d6173ff861d532b021"><div class="ttname"><a href="../../d8/d6f/classpl_foundation.htm#a2f9bc4a5e090e2d6173ff861d532b021">plFoundation::GetDefaultAllocator</a></div><div class="ttdeci">static PL_ALWAYS_INLINE plAllocator * GetDefaultAllocator()</div><div class="ttdoc">The default allocator can be used for any kind of allocation if no alignment is required.</div><div class="ttdef"><b>Definition</b> Basics.h:82</div></div>
<div class="ttc" id="aclasspl_hybrid_array_htm"><div class="ttname"><a href="../../d8/dcc/classpl_hybrid_array.htm">plHybridArray</a></div><div class="ttdoc">A hybrid array uses in-place storage to handle the first few elements without any allocation....</div><div class="ttdef"><b>Definition</b> HybridArray.h:12</div></div>
<div class="ttc" id="aclasspl_memory_stream_container_storage_htm"><div class="ttname"><a href="../../d1/dac/classpl_memory_stream_container_storage.htm">plMemoryStreamContainerStorage</a></div><div class="ttdoc">Templated implementation of plMemoryStreamStorageInterface that adapts most standard pl containers to...</div><div class="ttdef"><b>Definition</b> MemoryStream.h:80</div></div>
<div class="ttc" id="aclasspl_memory_stream_container_storage_htm_a4738997cb0b8f5f29c36e13c1f0447bf"><div class="ttname"><a href="../../d1/dac/classpl_memory_stream_container_storage.htm#a4738997cb0b8f5f29c36e13c1f0447bf">plMemoryStreamContainerStorage::Reserve</a></div><div class="ttdeci">virtual void Reserve(plUInt64 uiBytes) override</div><div class="ttdoc">Reserves N bytes of storage.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:94</div></div>
<div class="ttc" id="aclasspl_memory_stream_container_storage_htm_a55ede577cf85ac7e0619ec688645d3b2"><div class="ttname"><a href="../../d1/dac/classpl_memory_stream_container_storage.htm#a55ede577cf85ac7e0619ec688645d3b2">plMemoryStreamContainerStorage::GetContiguousMemoryRange</a></div><div class="ttdeci">virtual plArrayPtr&lt; const plUInt8 &gt; GetContiguousMemoryRange(plUInt64 uiStartByte) const override</div><div class="ttdoc">Returns a read-only plArrayPtr that represents a contiguous area in memory which starts at the given ...</div><div class="ttdef"><b>Definition</b> MemoryStream.h:105</div></div>
<div class="ttc" id="aclasspl_memory_stream_container_storage_htm_a71e96e9ff6b6de950f10e3ebe42dc496"><div class="ttname"><a href="../../d1/dac/classpl_memory_stream_container_storage.htm#a71e96e9ff6b6de950f10e3ebe42dc496">plMemoryStreamContainerStorage::GetContiguousMemoryRange</a></div><div class="ttdeci">virtual plArrayPtr&lt; plUInt8 &gt; GetContiguousMemoryRange(plUInt64 uiStartByte) override</div><div class="ttdoc">Non-const overload of GetContiguousMemoryRange().</div><div class="ttdef"><b>Definition</b> MemoryStream.h:113</div></div>
<div class="ttc" id="aclasspl_memory_stream_container_storage_htm_a7a457116bdac500d9adc9b9c2c249626"><div class="ttname"><a href="../../d1/dac/classpl_memory_stream_container_storage.htm#a7a457116bdac500d9adc9b9c2c249626">plMemoryStreamContainerStorage::Clear</a></div><div class="ttdeci">virtual void Clear() override</div><div class="ttdoc">Clears the entire storage. All readers and writers must be reset to start from the beginning again.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:90</div></div>
<div class="ttc" id="aclasspl_memory_stream_container_storage_htm_a961130b60f9be6027f36b8386fbb78ee"><div class="ttname"><a href="../../d1/dac/classpl_memory_stream_container_storage.htm#a961130b60f9be6027f36b8386fbb78ee">plMemoryStreamContainerStorage::GetStorageSize64</a></div><div class="ttdeci">virtual plUInt64 GetStorageSize64() const override</div><div class="ttdoc">Returns the number of bytes that are currently stored.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:89</div></div>
<div class="ttc" id="aclasspl_memory_stream_container_storage_htm_ab91b303f6c4c3bf950e033f6415fedfe"><div class="ttname"><a href="../../d1/dac/classpl_memory_stream_container_storage.htm#ab91b303f6c4c3bf950e033f6415fedfe">plMemoryStreamContainerStorage::GetData</a></div><div class="ttdeci">const plUInt8 * GetData() const</div><div class="ttdoc">The data is guaranteed to be contiguous.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:122</div></div>
<div class="ttc" id="aclasspl_memory_stream_container_storage_htm_acd34ee76656aaea4f10e741c18739052"><div class="ttname"><a href="../../d1/dac/classpl_memory_stream_container_storage.htm#acd34ee76656aaea4f10e741c18739052">plMemoryStreamContainerStorage::Compact</a></div><div class="ttdeci">virtual void Compact() override</div><div class="ttdoc">Deallocates any allocated memory that's not needed to hold the currently stored data.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:91</div></div>
<div class="ttc" id="aclasspl_memory_stream_container_storage_htm_acf505b0c35f6e3fb10969420da880aa5"><div class="ttname"><a href="../../d1/dac/classpl_memory_stream_container_storage.htm#acf505b0c35f6e3fb10969420da880aa5">plMemoryStreamContainerStorage::plMemoryStreamContainerStorage</a></div><div class="ttdeci">plMemoryStreamContainerStorage(plUInt32 uiInitialCapacity=0, plAllocator *pAllocator=plFoundation::GetDefaultAllocator())</div><div class="ttdoc">Creates the storage object for a memory stream. Use uiInitialCapacity to reserve some memory up front...</div><div class="ttdef"><b>Definition</b> MemoryStream.h:83</div></div>
<div class="ttc" id="aclasspl_memory_stream_container_storage_htm_ae713106377532bb98f8244b34ea57cef"><div class="ttname"><a href="../../d1/dac/classpl_memory_stream_container_storage.htm#ae713106377532bb98f8244b34ea57cef">plMemoryStreamContainerStorage::GetHeapMemoryUsage</a></div><div class="ttdeci">virtual plUInt64 GetHeapMemoryUsage() const override</div><div class="ttdoc">Returns the amount of bytes that are currently allocated on the heap.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:92</div></div>
<div class="ttc" id="aclasspl_memory_stream_container_storage_htm_af2fe3ec4baff8b4a3fda65749896d346"><div class="ttname"><a href="../../d1/dac/classpl_memory_stream_container_storage.htm#af2fe3ec4baff8b4a3fda65749896d346">plMemoryStreamContainerStorage::CopyToStream</a></div><div class="ttdeci">virtual plResult CopyToStream(plStreamWriter &amp;inout_stream) const override</div><div class="ttdoc">Writes the entire content of the storage to the provided stream.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:100</div></div>
<div class="ttc" id="aclasspl_memory_stream_container_wrapper_storage_htm"><div class="ttname"><a href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm">plMemoryStreamContainerWrapperStorage</a></div><div class="ttdoc">Wrapper around an existing container to implement plMemoryStreamStorageInterface.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:203</div></div>
<div class="ttc" id="aclasspl_memory_stream_container_wrapper_storage_htm_a0238aac37b0e6296e76bfc2d80d28a16"><div class="ttname"><a href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#a0238aac37b0e6296e76bfc2d80d28a16">plMemoryStreamContainerWrapperStorage::Compact</a></div><div class="ttdeci">virtual void Compact() override</div><div class="ttdoc">Deallocates any allocated memory that's not needed to hold the currently stored data.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:209</div></div>
<div class="ttc" id="aclasspl_memory_stream_container_wrapper_storage_htm_a07bedc770a2d03bd191dca10d93d6d42"><div class="ttname"><a href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#a07bedc770a2d03bd191dca10d93d6d42">plMemoryStreamContainerWrapperStorage::CopyToStream</a></div><div class="ttdeci">virtual plResult CopyToStream(plStreamWriter &amp;inout_stream) const override</div><div class="ttdoc">Writes the entire content of the storage to the provided stream.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:218</div></div>
<div class="ttc" id="aclasspl_memory_stream_container_wrapper_storage_htm_a53224446d04fc69f8e09a4c5ef073ed2"><div class="ttname"><a href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#a53224446d04fc69f8e09a4c5ef073ed2">plMemoryStreamContainerWrapperStorage::GetContiguousMemoryRange</a></div><div class="ttdeci">virtual plArrayPtr&lt; plUInt8 &gt; GetContiguousMemoryRange(plUInt64 uiStartByte) override</div><div class="ttdoc">Non-const overload of GetContiguousMemoryRange().</div><div class="ttdef"><b>Definition</b> MemoryStream.h:231</div></div>
<div class="ttc" id="aclasspl_memory_stream_container_wrapper_storage_htm_a549bb1e85d7af81644b536764d49830f"><div class="ttname"><a href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#a549bb1e85d7af81644b536764d49830f">plMemoryStreamContainerWrapperStorage::GetHeapMemoryUsage</a></div><div class="ttdeci">virtual plUInt64 GetHeapMemoryUsage() const override</div><div class="ttdoc">Returns the amount of bytes that are currently allocated on the heap.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:210</div></div>
<div class="ttc" id="aclasspl_memory_stream_container_wrapper_storage_htm_a83b537b972a3d84d64e8a88f25b8d607"><div class="ttname"><a href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#a83b537b972a3d84d64e8a88f25b8d607">plMemoryStreamContainerWrapperStorage::GetContiguousMemoryRange</a></div><div class="ttdeci">virtual plArrayPtr&lt; const plUInt8 &gt; GetContiguousMemoryRange(plUInt64 uiStartByte) const override</div><div class="ttdoc">Returns a read-only plArrayPtr that represents a contiguous area in memory which starts at the given ...</div><div class="ttdef"><b>Definition</b> MemoryStream.h:223</div></div>
<div class="ttc" id="aclasspl_memory_stream_container_wrapper_storage_htm_aa2001e08112da5bf56167da8d4b2cedb"><div class="ttname"><a href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#aa2001e08112da5bf56167da8d4b2cedb">plMemoryStreamContainerWrapperStorage::Reserve</a></div><div class="ttdeci">virtual void Reserve(plUInt64 uiBytes) override</div><div class="ttdoc">Reserves N bytes of storage.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:212</div></div>
<div class="ttc" id="aclasspl_memory_stream_container_wrapper_storage_htm_ab668407c1900eec6af19e3e3511dcdad"><div class="ttname"><a href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#ab668407c1900eec6af19e3e3511dcdad">plMemoryStreamContainerWrapperStorage::Clear</a></div><div class="ttdeci">virtual void Clear() override</div><div class="ttdoc">Clears the entire storage. All readers and writers must be reset to start from the beginning again.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:208</div></div>
<div class="ttc" id="aclasspl_memory_stream_container_wrapper_storage_htm_ae70d94ef919a3abdddd298ea84cf3ad3"><div class="ttname"><a href="../../db/dea/classpl_memory_stream_container_wrapper_storage.htm#ae70d94ef919a3abdddd298ea84cf3ad3">plMemoryStreamContainerWrapperStorage::GetStorageSize64</a></div><div class="ttdeci">virtual plUInt64 GetStorageSize64() const override</div><div class="ttdoc">Returns the number of bytes that are currently stored.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:207</div></div>
<div class="ttc" id="aclasspl_memory_stream_reader_htm"><div class="ttname"><a href="../../da/d8f/classpl_memory_stream_reader.htm">plMemoryStreamReader</a></div><div class="ttdoc">A reader which can access a memory stream.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:259</div></div>
<div class="ttc" id="aclasspl_memory_stream_reader_htm_a4a3823b5aab197199a3deb165b3834e3"><div class="ttname"><a href="../../da/d8f/classpl_memory_stream_reader.htm#a4a3823b5aab197199a3deb165b3834e3">plMemoryStreamReader::GetReadPosition</a></div><div class="ttdeci">plUInt64 GetReadPosition() const</div><div class="ttdoc">Returns the current read position.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:287</div></div>
<div class="ttc" id="aclasspl_memory_stream_reader_htm_a4e98f25a31fbe3e03d9e6a2a7848d584"><div class="ttname"><a href="../../da/d8f/classpl_memory_stream_reader.htm#a4e98f25a31fbe3e03d9e6a2a7848d584">plMemoryStreamReader::SetStorage</a></div><div class="ttdeci">void SetStorage(const plMemoryStreamStorageInterface *pStreamStorage)</div><div class="ttdoc">Sets the storage object upon which to operate. Resets the read position to zero. Pass nullptr if you ...</div><div class="ttdef"><b>Definition</b> MemoryStream.h:269</div></div>
<div class="ttc" id="aclasspl_memory_stream_storage_interface_htm"><div class="ttname"><a href="../../d7/d28/classpl_memory_stream_storage_interface.htm">plMemoryStreamStorageInterface</a></div><div class="ttdoc">Instances of this class act as storage for memory streams.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:18</div></div>
<div class="ttc" id="aclasspl_memory_stream_storage_interface_htm_a090be39d5705e860f8ce12e609e38e12"><div class="ttname"><a href="../../d7/d28/classpl_memory_stream_storage_interface.htm#a090be39d5705e860f8ce12e609e38e12">plMemoryStreamStorageInterface::Reserve</a></div><div class="ttdeci">virtual void Reserve(plUInt64 uiBytes)=0</div><div class="ttdoc">Reserves N bytes of storage.</div></div>
<div class="ttc" id="aclasspl_memory_stream_storage_interface_htm_a19f6c1f82795f119046c78af26fe5cc0"><div class="ttname"><a href="../../d7/d28/classpl_memory_stream_storage_interface.htm#a19f6c1f82795f119046c78af26fe5cc0">plMemoryStreamStorageInterface::GetHeapMemoryUsage</a></div><div class="ttdeci">virtual plUInt64 GetHeapMemoryUsage() const =0</div><div class="ttdoc">Returns the amount of bytes that are currently allocated on the heap.</div></div>
<div class="ttc" id="aclasspl_memory_stream_storage_interface_htm_a4996989b4103d366476a2bcb7ba2bb92"><div class="ttname"><a href="../../d7/d28/classpl_memory_stream_storage_interface.htm#a4996989b4103d366476a2bcb7ba2bb92">plMemoryStreamStorageInterface::CopyToStream</a></div><div class="ttdeci">virtual plResult CopyToStream(plStreamWriter &amp;inout_stream) const =0</div><div class="ttdoc">Writes the entire content of the storage to the provided stream.</div></div>
<div class="ttc" id="aclasspl_memory_stream_storage_interface_htm_a4ebd7148c638eb6b4f260cdb65d84ef7"><div class="ttname"><a href="../../d7/d28/classpl_memory_stream_storage_interface.htm#a4ebd7148c638eb6b4f260cdb65d84ef7">plMemoryStreamStorageInterface::Compact</a></div><div class="ttdeci">virtual void Compact()=0</div><div class="ttdoc">Deallocates any allocated memory that's not needed to hold the currently stored data.</div></div>
<div class="ttc" id="aclasspl_memory_stream_storage_interface_htm_a544c3c8ea2009d6a76db66839c12998b"><div class="ttname"><a href="../../d7/d28/classpl_memory_stream_storage_interface.htm#a544c3c8ea2009d6a76db66839c12998b">plMemoryStreamStorageInterface::Clear</a></div><div class="ttdeci">virtual void Clear()=0</div><div class="ttdoc">Clears the entire storage. All readers and writers must be reset to start from the beginning again.</div></div>
<div class="ttc" id="aclasspl_memory_stream_storage_interface_htm_a9863c195bc2cc621f5e7180fc7c6ea63"><div class="ttname"><a href="../../d7/d28/classpl_memory_stream_storage_interface.htm#a9863c195bc2cc621f5e7180fc7c6ea63">plMemoryStreamStorageInterface::GetStorageSize32</a></div><div class="ttdeci">plUInt32 GetStorageSize32() const</div><div class="ttdoc">Returns the number of bytes that are currently stored. Asserts that the stored amount is less than 4G...</div><div class="ttdef"><b>Definition</b> MemoryStream.h:24</div></div>
<div class="ttc" id="aclasspl_memory_stream_storage_interface_htm_ab22a23fb5d46d5d3a2ce875038eded5c"><div class="ttname"><a href="../../d7/d28/classpl_memory_stream_storage_interface.htm#ab22a23fb5d46d5d3a2ce875038eded5c">plMemoryStreamStorageInterface::GetContiguousMemoryRange</a></div><div class="ttdeci">virtual plArrayPtr&lt; const plUInt8 &gt; GetContiguousMemoryRange(plUInt64 uiStartByte) const =0</div><div class="ttdoc">Returns a read-only plArrayPtr that represents a contiguous area in memory which starts at the given ...</div></div>
<div class="ttc" id="aclasspl_memory_stream_storage_interface_htm_ac048430724f902558ac7683840bfc2a9"><div class="ttname"><a href="../../d7/d28/classpl_memory_stream_storage_interface.htm#ac048430724f902558ac7683840bfc2a9">plMemoryStreamStorageInterface::GetStorageSize64</a></div><div class="ttdeci">virtual plUInt64 GetStorageSize64() const =0</div><div class="ttdoc">Returns the number of bytes that are currently stored.</div></div>
<div class="ttc" id="aclasspl_memory_stream_storage_interface_htm_afe670fc46357af9343585496198281ba"><div class="ttname"><a href="../../d7/d28/classpl_memory_stream_storage_interface.htm#afe670fc46357af9343585496198281ba">plMemoryStreamStorageInterface::GetContiguousMemoryRange</a></div><div class="ttdeci">virtual plArrayPtr&lt; plUInt8 &gt; GetContiguousMemoryRange(plUInt64 uiStartByte)=0</div><div class="ttdoc">Non-const overload of GetContiguousMemoryRange().</div></div>
<div class="ttc" id="aclasspl_memory_stream_writer_htm"><div class="ttname"><a href="../../d2/d79/classpl_memory_stream_writer.htm">plMemoryStreamWriter</a></div><div class="ttdoc">A writer which can access a memory stream.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:313</div></div>
<div class="ttc" id="aclasspl_memory_stream_writer_htm_a8c62b5f4696e6124fb8fb4610f285918"><div class="ttname"><a href="../../d2/d79/classpl_memory_stream_writer.htm#a8c62b5f4696e6124fb8fb4610f285918">plMemoryStreamWriter::SetStorage</a></div><div class="ttdeci">void SetStorage(plMemoryStreamStorageInterface *pStreamStorage)</div><div class="ttdoc">Sets the storage object upon which to operate. Resets the write position to the end of the storage st...</div><div class="ttdef"><b>Definition</b> MemoryStream.h:322</div></div>
<div class="ttc" id="aclasspl_memory_stream_writer_htm_ad487a527dcf495d5bd6a9716b5676258"><div class="ttname"><a href="../../d2/d79/classpl_memory_stream_writer.htm#ad487a527dcf495d5bd6a9716b5676258">plMemoryStreamWriter::GetWritePosition</a></div><div class="ttdeci">plUInt64 GetWritePosition() const</div><div class="ttdoc">Returns the current write position.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:339</div></div>
<div class="ttc" id="aclasspl_raw_memory_stream_reader_htm"><div class="ttname"><a href="../../dd/d54/classpl_raw_memory_stream_reader.htm">plRawMemoryStreamReader</a></div><div class="ttdoc">Maps a raw chunk of memory to the plStreamReader interface.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:358</div></div>
<div class="ttc" id="aclasspl_raw_memory_stream_reader_htm_a2b023b9a371751ec74d1de3dcb913fa5"><div class="ttname"><a href="../../dd/d54/classpl_raw_memory_stream_reader.htm#a2b023b9a371751ec74d1de3dcb913fa5">plRawMemoryStreamReader::GetReadPosition</a></div><div class="ttdeci">plUInt64 GetReadPosition() const</div><div class="ttdoc">Returns the current read position in the raw memory block.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:395</div></div>
<div class="ttc" id="aclasspl_raw_memory_stream_reader_htm_a76e4de6d0dc4391c49fa9e0297369683"><div class="ttname"><a href="../../dd/d54/classpl_raw_memory_stream_reader.htm#a76e4de6d0dc4391c49fa9e0297369683">plRawMemoryStreamReader::plRawMemoryStreamReader</a></div><div class="ttdeci">plRawMemoryStreamReader(const CONTAINER &amp;container)</div><div class="ttdoc">Initialize the raw memory reader with the chunk of memory from a standard pl container.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:368</div></div>
<div class="ttc" id="aclasspl_raw_memory_stream_writer_htm"><div class="ttname"><a href="../../db/df9/classpl_raw_memory_stream_writer.htm">plRawMemoryStreamWriter</a></div><div class="ttdoc">Maps a raw chunk of memory to the plStreamReader interface.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:419</div></div>
<div class="ttc" id="aclasspl_raw_memory_stream_writer_htm_a3cb2354ab76439e963bebb8c86745c10"><div class="ttname"><a href="../../db/df9/classpl_raw_memory_stream_writer.htm#a3cb2354ab76439e963bebb8c86745c10">plRawMemoryStreamWriter::plRawMemoryStreamWriter</a></div><div class="ttdeci">plRawMemoryStreamWriter(CONTAINER &amp;ref_container)</div><div class="ttdoc">Initialize the raw memory reader with the chunk of memory from a standard pl container.</div><div class="ttdef"><b>Definition</b> MemoryStream.h:429</div></div>
<div class="ttc" id="aclasspl_stream_reader_htm"><div class="ttname"><a href="../../df/d3d/classpl_stream_reader.htm">plStreamReader</a></div><div class="ttdoc">Interface for binary in (read) streams.</div><div class="ttdef"><b>Definition</b> Stream.h:22</div></div>
<div class="ttc" id="aclasspl_stream_writer_htm"><div class="ttname"><a href="../../d6/d90/classpl_stream_writer.htm">plStreamWriter</a></div><div class="ttdoc">Interface for binary out (write) streams.</div><div class="ttdef"><b>Definition</b> Stream.h:107</div></div>
<div class="ttc" id="aclasspl_stream_writer_htm_a0ee41d4d7243d1ba861f6fd4226e1dfe"><div class="ttname"><a href="../../d6/d90/classpl_stream_writer.htm#a0ee41d4d7243d1ba861f6fd4226e1dfe">plStreamWriter::WriteBytes</a></div><div class="ttdeci">virtual plResult WriteBytes(const void *pWriteBuffer, plUInt64 uiBytesToWrite)=0</div><div class="ttdoc">Writes a raw number of bytes from the buffer, this is the only method which has to be implemented to ...</div></div>
<div class="ttc" id="aclasspl_string_view_htm"><div class="ttname"><a href="../../d6/d79/classpl_string_view.htm">plStringView</a></div><div class="ttdoc">plStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...</div><div class="ttdef"><b>Definition</b> StringView.h:34</div></div>
<div class="ttc" id="anamespacepl_math_htm_a6173d524e4c3564b75deacc577ad176a"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a6173d524e4c3564b75deacc577ad176a">plMath::MaxValue</a></div><div class="ttdeci">constexpr TYPE MaxValue()</div><div class="ttdoc">Returns the largest possible positive value (that is not infinity).</div></div>
<div class="ttc" id="astructpl_hybrid_string_htm"><div class="ttname"><a href="../../d2/dea/structpl_hybrid_string.htm">plHybridString&lt; 32, plDefaultAllocatorWrapper &gt;</a></div></div>
<div class="ttc" id="astructpl_result_htm"><div class="ttname"><a href="../../da/dce/structpl_result.htm">plResult</a></div><div class="ttdoc">Default enum for returning failure or success, instead of using a bool.</div><div class="ttdef"><b>Definition</b> Types.h:54</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_53c6c6fb8a816921716f372d87aabbab.htm">IO</a></li><li class="navelem"><b>MemoryStream.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
