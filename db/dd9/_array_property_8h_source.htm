<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<!-- BEGIN opengraph metadata -->
<meta property="og:title" content="Doxygen Awesome" />
<meta property="og:image" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta property="og:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<meta property="og:url" content="https://jothepro.github.io/doxygen-awesome-css/" />
<!-- END opengraph metadata -->
<!-- BEGIN twitter metadata -->
<meta name="twitter:image:src" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta name="twitter:title" content="Doxygen Awesome" />
<meta name="twitter:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<!-- END twitter metadata -->
<title>Plasma Engine: Code/Engine/Foundation/Reflection/Implementation/ArrayProperty.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link rel="icon" type="image/svg+xml" href="logo.drawio.svg"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-paragraph-link.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-tabs.js"></script>
<script type="text/javascript" src="../../toggle-alternative-theme.js"></script>
<script type="text/javascript">
    DoxygenAwesomeFragmentCopyButton.init()
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeParagraphLink.init()
    DoxygenAwesomeInteractiveToc.init()
    DoxygenAwesomeTabs.init()
</script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Plasma Engine
   &#160;<span id="projectnumber">2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('db/dd9/_array_property_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">ArrayProperty.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span> </div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#include &lt;Foundation/Reflection/Implementation/AbstractProperty.h&gt;</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span> </div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="keyword">class </span><a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>;</div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span> </div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00011" data-start="{" data-end="};">
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno"><a class="line" href="../../db/d53/classpl_typed_array_property.htm">   11</a></span><span class="keyword">class </span><a class="code hl_class" href="../../db/d53/classpl_typed_array_property.htm">plTypedArrayProperty</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../dc/d4a/classpl_abstract_array_property.htm">plAbstractArrayProperty</a></div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>{</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>  <a class="code hl_class" href="../../db/d53/classpl_typed_array_property.htm">plTypedArrayProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName)</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span>    : <a class="code hl_function" href="../../dc/d4a/classpl_abstract_array_property.htm#a7b804f8a31b89c411364d9da7127be7a">plAbstractArrayProperty</a>(szPropertyName)</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span>  {</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>    m_Flags = plPropertyFlags::GetParameterFlags&lt;Type&gt;();</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>    <span class="keyword">static_assert</span>(!std::is_pointer&lt;Type&gt;::value ||</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>                    <a class="code hl_struct" href="../../d6/d03/structpl_variant_type_deduction.htm">plVariantTypeDeduction&lt;typename plTypeTraits&lt;Type&gt;::NonConstReferencePointerType</a>&gt;::value ==</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>                      <a class="code hl_enumvalue" href="../../d6/d1e/structpl_variant_type.htm#a4d10a99c083abdf7283ab1f48565de12aeeb3f6c596cc924d89435564a5b70bad">plVariantType::Invalid</a>,</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>      <span class="stringliteral">&quot;Pointer to standard types are not supported.&quot;</span>);</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>  }</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span> </div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno"><a class="line" href="../../db/d53/classpl_typed_array_property.htm#a2fdb275b1b0122f6f86244c1fe3bdc9a">   24</a></span>  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* <a class="code hl_function" href="../../db/d53/classpl_typed_array_property.htm#a2fdb275b1b0122f6f86244c1fe3bdc9a">GetSpecificType</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> plGetStaticRTTI&lt;typename plTypeTraits&lt;Type&gt;::NonConstReferencePointerType&gt;(); }</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>};</div>
</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span> </div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="foldopen" id="foldopen00029" data-start="{" data-end="};">
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno"><a class="line" href="../../df/d23/classpl_typed_array_property_3_01const_01char_01_5_01_4.htm">   29</a></span><span class="keyword">class </span><a class="code hl_class" href="../../db/d53/classpl_typed_array_property.htm">plTypedArrayProperty</a>&lt;const char*&gt; : <span class="keyword">public</span> <a class="code hl_class" href="../../dc/d4a/classpl_abstract_array_property.htm">plAbstractArrayProperty</a></div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>{</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span>  <a class="code hl_class" href="../../db/d53/classpl_typed_array_property.htm">plTypedArrayProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName)</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>    : <a class="code hl_function" href="../../dc/d4a/classpl_abstract_array_property.htm#a7b804f8a31b89c411364d9da7127be7a">plAbstractArrayProperty</a>(szPropertyName)</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>  {</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span>    m_Flags = plPropertyFlags::GetParameterFlags&lt;const char*&gt;();</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>  }</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span> </div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno"><a class="line" href="../../df/d23/classpl_typed_array_property_3_01const_01char_01_5_01_4.htm#a0386ea9b190ace90875c90517bc224d0">   38</a></span>  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* <a class="code hl_function" href="../../df/d23/classpl_typed_array_property_3_01const_01char_01_5_01_4.htm#a0386ea9b190ace90875c90517bc224d0">GetSpecificType</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> plGetStaticRTTI&lt;const char*&gt;(); }</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>};</div>
</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span> </div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span> </div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00043" data-start="{" data-end="};">
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno"><a class="line" href="../../d8/d97/classpl_accessor_array_property.htm">   43</a></span><span class="keyword">class </span><a class="code hl_class" href="../../d8/d97/classpl_accessor_array_property.htm">plAccessorArrayProperty</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../db/d53/classpl_typed_array_property.htm">plTypedArrayProperty</a>&lt;Type&gt;</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>{</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>  <span class="keyword">using </span>RealType = <span class="keyword">typename</span> <a class="code hl_typedef" href="../../da/d5d/structpl_type_traits.htm#a5d21aa226bb680dfddc12bfcd6caaa84">plTypeTraits&lt;Type&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>  <span class="keyword">using </span>GetCountFunc = plUInt32 (Class::*)() <span class="keyword">const</span>;</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>  <span class="keyword">using </span>GetValueFunc = Type (Class::*)(plUInt32 uiIndex) <span class="keyword">const</span>;</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>  <span class="keyword">using </span>SetValueFunc = void (Class::*)(plUInt32 uiIndex, Type value);</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>  <span class="keyword">using </span>InsertFunc = void (Class::*)(plUInt32 uiIndex, Type value);</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>  <span class="keyword">using </span>RemoveFunc = void (Class::*)(plUInt32 uiIndex);</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span> </div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span> </div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>  <a class="code hl_class" href="../../d8/d97/classpl_accessor_array_property.htm">plAccessorArrayProperty</a>(</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>    <span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName, GetCountFunc getCount, GetValueFunc getter, SetValueFunc setter, InsertFunc insert, RemoveFunc remove)</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>    : <a class="code hl_class" href="../../db/d53/classpl_typed_array_property.htm">plTypedArrayProperty&lt;Type&gt;</a>(szPropertyName)</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>  {</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>    PL_ASSERT_DEBUG(getCount != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The get count function of an array property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>    PL_ASSERT_DEBUG(getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The get value function of an array property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span> </div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>    m_GetCount = getCount;</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>    m_Getter = getter;</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>    m_Setter = setter;</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>    m_Insert = insert;</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>    m_Remove = remove;</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span> </div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>    <span class="keywordflow">if</span> (m_Setter == <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>      plAbstractArrayProperty::m_Flags.<a class="code hl_function" href="../../df/dd9/structpl_bitflags.htm#aff74e2d19d2f1e1d2301c35c5170803a">Add</a>(<a class="code hl_enumvalue" href="../../db/d0f/structpl_property_flags.htm#aa9691dcb8643c279db2c187968da4d10a0f65bb89430668409daaa4453b1a4b86">plPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>  }</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span> </div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span> </div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno"><a class="line" href="../../d8/d97/classpl_accessor_array_property.htm#a855a9050a702a25846368e4a286ee964">   72</a></span>  <span class="keyword">virtual</span> plUInt32 <a class="code hl_function" href="../../d8/d97/classpl_accessor_array_property.htm#a855a9050a702a25846368e4a286ee964">GetCount</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetCount)(); }</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span> </div>
<div class="foldopen" id="foldopen00074" data-start="{" data-end="}">
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno"><a class="line" href="../../d8/d97/classpl_accessor_array_property.htm#afb5fb686fc370df48ef0595dd546a38d">   74</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d8/d97/classpl_accessor_array_property.htm#afb5fb686fc370df48ef0595dd546a38d">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, plUInt32 uiIndex, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>    PL_ASSERT_DEBUG(uiIndex &lt; <a class="code hl_function" href="../../d8/d97/classpl_accessor_array_property.htm#a855a9050a702a25846368e4a286ee964">GetCount</a>(pInstance), <span class="stringliteral">&quot;GetValue: uiIndex (&#39;{0}&#39;) is out of range (&#39;{1}&#39;)&quot;</span>, uiIndex, <a class="code hl_function" href="../../d8/d97/classpl_accessor_array_property.htm#a855a9050a702a25846368e4a286ee964">GetCount</a>(pInstance));</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>    *<span class="keyword">static_cast&lt;</span>RealType*<span class="keyword">&gt;</span>(pObject) = (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Getter)(uiIndex);</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>  }</div>
</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span> </div>
<div class="foldopen" id="foldopen00080" data-start="{" data-end="}">
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno"><a class="line" href="../../d8/d97/classpl_accessor_array_property.htm#ad1276b213719366deecf0a80eaf6fbc8">   80</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d8/d97/classpl_accessor_array_property.htm#ad1276b213719366deecf0a80eaf6fbc8">SetValue</a>(<span class="keywordtype">void</span>* pInstance, plUInt32 uiIndex, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>    PL_ASSERT_DEBUG(uiIndex &lt; <a class="code hl_function" href="../../d8/d97/classpl_accessor_array_property.htm#a855a9050a702a25846368e4a286ee964">GetCount</a>(pInstance), <span class="stringliteral">&quot;SetValue: uiIndex (&#39;{0}&#39;) is out of range (&#39;{1}&#39;)&quot;</span>, uiIndex, <a class="code hl_function" href="../../d8/d97/classpl_accessor_array_property.htm#a855a9050a702a25846368e4a286ee964">GetCount</a>(pInstance));</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>    PL_ASSERT_DEBUG(m_Setter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no setter function, thus it is read-only.&quot;</span>, <a class="code hl_function" href="../../d4/dd7/classpl_abstract_property.htm#ab192fac6724fcbd56a160013230bad0b">plAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>    (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Setter)(uiIndex, *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>  }</div>
</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span> </div>
<div class="foldopen" id="foldopen00087" data-start="{" data-end="}">
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno"><a class="line" href="../../d8/d97/classpl_accessor_array_property.htm#a036838f93e26604765b20305da3bdc3b">   87</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d8/d97/classpl_accessor_array_property.htm#a036838f93e26604765b20305da3bdc3b">Insert</a>(<span class="keywordtype">void</span>* pInstance, plUInt32 uiIndex, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>    PL_ASSERT_DEBUG(uiIndex &lt;= <a class="code hl_function" href="../../d8/d97/classpl_accessor_array_property.htm#a855a9050a702a25846368e4a286ee964">GetCount</a>(pInstance), <span class="stringliteral">&quot;Insert: uiIndex (&#39;{0}&#39;) is out of range (&#39;{1}&#39;)&quot;</span>, uiIndex, <a class="code hl_function" href="../../d8/d97/classpl_accessor_array_property.htm#a855a9050a702a25846368e4a286ee964">GetCount</a>(pInstance));</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>    PL_ASSERT_DEBUG(m_Insert != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no insert function, thus it is read-only.&quot;</span>, <a class="code hl_function" href="../../d4/dd7/classpl_abstract_property.htm#ab192fac6724fcbd56a160013230bad0b">plAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>    (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Insert)(uiIndex, *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>  }</div>
</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span> </div>
<div class="foldopen" id="foldopen00094" data-start="{" data-end="}">
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno"><a class="line" href="../../d8/d97/classpl_accessor_array_property.htm#abac6899fd1dcc70b7713f406a8f9c104">   94</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d8/d97/classpl_accessor_array_property.htm#abac6899fd1dcc70b7713f406a8f9c104">Remove</a>(<span class="keywordtype">void</span>* pInstance, plUInt32 uiIndex)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>    PL_ASSERT_DEBUG(uiIndex &lt; <a class="code hl_function" href="../../d8/d97/classpl_accessor_array_property.htm#a855a9050a702a25846368e4a286ee964">GetCount</a>(pInstance), <span class="stringliteral">&quot;Remove: uiIndex (&#39;{0}&#39;) is out of range (&#39;{1}&#39;)&quot;</span>, uiIndex, <a class="code hl_function" href="../../d8/d97/classpl_accessor_array_property.htm#a855a9050a702a25846368e4a286ee964">GetCount</a>(pInstance));</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>    PL_ASSERT_DEBUG(m_Remove != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no setter function, thus it is read-only.&quot;</span>, <a class="code hl_function" href="../../d4/dd7/classpl_abstract_property.htm#ab192fac6724fcbd56a160013230bad0b">plAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>    (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Remove)(uiIndex);</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>  }</div>
</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span> </div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno"><a class="line" href="../../d8/d97/classpl_accessor_array_property.htm#a54279f021651d0062e9badc35507c7f5">  101</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d8/d97/classpl_accessor_array_property.htm#a54279f021651d0062e9badc35507c7f5">Clear</a>(<span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <a class="code hl_function" href="../../d8/d97/classpl_accessor_array_property.htm#a813a3bd0fb5e3287eddf268ffffca595">SetCount</a>(pInstance, 0); }</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span> </div>
<div class="foldopen" id="foldopen00103" data-start="{" data-end="}">
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno"><a class="line" href="../../d8/d97/classpl_accessor_array_property.htm#a813a3bd0fb5e3287eddf268ffffca595">  103</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d8/d97/classpl_accessor_array_property.htm#a813a3bd0fb5e3287eddf268ffffca595">SetCount</a>(<span class="keywordtype">void</span>* pInstance, plUInt32 uiCount)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>    PL_ASSERT_DEBUG(m_Insert != <span class="keyword">nullptr</span> &amp;&amp; m_Remove != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no remove and insert function, thus it is fixed-size.&quot;</span>,</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>      <a class="code hl_function" href="../../d4/dd7/classpl_abstract_property.htm#ab192fac6724fcbd56a160013230bad0b">plAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>    <span class="keywordflow">while</span> (uiCount &lt; <a class="code hl_function" href="../../d8/d97/classpl_accessor_array_property.htm#a855a9050a702a25846368e4a286ee964">GetCount</a>(pInstance))</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>    {</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>      <a class="code hl_function" href="../../d8/d97/classpl_accessor_array_property.htm#abac6899fd1dcc70b7713f406a8f9c104">Remove</a>(pInstance, <a class="code hl_function" href="../../d8/d97/classpl_accessor_array_property.htm#a855a9050a702a25846368e4a286ee964">GetCount</a>(pInstance) - 1);</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>    }</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>    <span class="keywordflow">while</span> (uiCount &gt; <a class="code hl_function" href="../../d8/d97/classpl_accessor_array_property.htm#a855a9050a702a25846368e4a286ee964">GetCount</a>(pInstance))</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>    {</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>      RealType elem = RealType();</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>      <a class="code hl_function" href="../../d8/d97/classpl_accessor_array_property.htm#a036838f93e26604765b20305da3bdc3b">Insert</a>(pInstance, <a class="code hl_function" href="../../d8/d97/classpl_accessor_array_property.htm#a855a9050a702a25846368e4a286ee964">GetCount</a>(pInstance), &amp;elem);</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>    }</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>  }</div>
</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span> </div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>  GetCountFunc m_GetCount;</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>  GetValueFunc m_Getter;</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>  SetValueFunc m_Setter;</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>  InsertFunc m_Insert;</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>  RemoveFunc m_Remove;</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>};</div>
</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span> </div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span> </div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span> </div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Container, Container Class::*Member&gt;</div>
<div class="foldopen" id="foldopen00129" data-start="{" data-end="};">
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno"><a class="line" href="../../db/d9c/structpl_array_property_accessor.htm">  129</a></span><span class="keyword">struct </span><a class="code hl_struct" href="../../db/d9c/structpl_array_property_accessor.htm">plArrayPropertyAccessor</a></div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>{</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>  <span class="keyword">using </span>ContainerType = <span class="keyword">typename</span> <a class="code hl_typedef" href="../../da/d5d/structpl_type_traits.htm#a5d21aa226bb680dfddc12bfcd6caaa84">plTypeTraits&lt;Container&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>  <span class="keyword">using </span>Type = <span class="keyword">typename</span> <a class="code hl_struct" href="../../da/d5d/structpl_type_traits.htm">plTypeTraits&lt;typename plContainerSubTypeResolver&lt;ContainerType&gt;::Type</a>&gt;::NonConstReferenceType;</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span> </div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>  <span class="keyword">static</span> <span class="keyword">const</span> ContainerType&amp; GetConstContainer(<span class="keyword">const</span> Class* pInstance) { <span class="keywordflow">return</span> (*pInstance).*Member; }</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span> </div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>  <span class="keyword">static</span> ContainerType&amp; GetContainer(Class* pInstance) { <span class="keywordflow">return</span> (*pInstance).*Member; }</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>};</div>
</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span> </div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span> </div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Container, <span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00141" data-start="{" data-end="};">
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno"><a class="line" href="../../df/dc4/classpl_member_array_property.htm">  141</a></span><span class="keyword">class </span><a class="code hl_class" href="../../df/dc4/classpl_member_array_property.htm">plMemberArrayProperty</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../db/d53/classpl_typed_array_property.htm">plTypedArrayProperty</a>&lt;typename plTypeTraits&lt;Type&gt;::NonConstReferenceType&gt;</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>{</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>  <span class="keyword">using </span>RealType = <span class="keyword">typename</span> <a class="code hl_typedef" href="../../da/d5d/structpl_type_traits.htm#a5d21aa226bb680dfddc12bfcd6caaa84">plTypeTraits&lt;Type&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>  <span class="keyword">using </span>GetConstContainerFunc = <span class="keyword">const</span> Container&amp; (*)(<span class="keyword">const</span> Class* pInstance);</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>  <span class="keyword">using </span>GetContainerFunc = Container&amp; (*)(Class* pInstance);</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span> </div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>  <a class="code hl_class" href="../../df/dc4/classpl_member_array_property.htm">plMemberArrayProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName, GetConstContainerFunc constGetter, GetContainerFunc getter)</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>    : <a class="code hl_class" href="../../db/d53/classpl_typed_array_property.htm">plTypedArrayProperty&lt;RealType&gt;</a>(szPropertyName)</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>  {</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>    PL_ASSERT_DEBUG(constGetter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The const get count function of an array property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span> </div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>    m_ConstGetter = constGetter;</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>    m_Getter = getter;</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span> </div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>    <span class="keywordflow">if</span> (m_Getter == <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>      plAbstractArrayProperty::m_Flags.<a class="code hl_function" href="../../df/dd9/structpl_bitflags.htm#aff74e2d19d2f1e1d2301c35c5170803a">Add</a>(<a class="code hl_enumvalue" href="../../db/d0f/structpl_property_flags.htm#aa9691dcb8643c279db2c187968da4d10a0f65bb89430668409daaa4453b1a4b86">plPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>  }</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span> </div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno"><a class="line" href="../../df/dc4/classpl_member_array_property.htm#afc50bb7282059ab62442d90c5b02d801">  160</a></span>  <span class="keyword">virtual</span> plUInt32 <a class="code hl_function" href="../../df/dc4/classpl_member_array_property.htm#afc50bb7282059ab62442d90c5b02d801">GetCount</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)).GetCount(); }</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span> </div>
<div class="foldopen" id="foldopen00162" data-start="{" data-end="}">
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno"><a class="line" href="../../df/dc4/classpl_member_array_property.htm#a3aff5b309fe4b72bc4dba0322a416df4">  162</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../df/dc4/classpl_member_array_property.htm#a3aff5b309fe4b72bc4dba0322a416df4">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, plUInt32 uiIndex, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>    PL_ASSERT_DEBUG(uiIndex &lt; <a class="code hl_function" href="../../df/dc4/classpl_member_array_property.htm#afc50bb7282059ab62442d90c5b02d801">GetCount</a>(pInstance), <span class="stringliteral">&quot;GetValue: uiIndex (&#39;{0}&#39;) is out of range (&#39;{1}&#39;)&quot;</span>, uiIndex, <a class="code hl_function" href="../../df/dc4/classpl_member_array_property.htm#afc50bb7282059ab62442d90c5b02d801">GetCount</a>(pInstance));</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>    *<span class="keyword">static_cast&lt;</span>RealType*<span class="keyword">&gt;</span>(pObject) = m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance))[uiIndex];</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>  }</div>
</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span> </div>
<div class="foldopen" id="foldopen00168" data-start="{" data-end="}">
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno"><a class="line" href="../../df/dc4/classpl_member_array_property.htm#a0fcf03fcd5a0b0812b485ae2101a0e60">  168</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../df/dc4/classpl_member_array_property.htm#a0fcf03fcd5a0b0812b485ae2101a0e60">SetValue</a>(<span class="keywordtype">void</span>* pInstance, plUInt32 uiIndex, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>    PL_ASSERT_DEBUG(uiIndex &lt; <a class="code hl_function" href="../../df/dc4/classpl_member_array_property.htm#afc50bb7282059ab62442d90c5b02d801">GetCount</a>(pInstance), <span class="stringliteral">&quot;SetValue: uiIndex (&#39;{0}&#39;) is out of range (&#39;{1}&#39;)&quot;</span>, uiIndex, <a class="code hl_function" href="../../df/dc4/classpl_member_array_property.htm#afc50bb7282059ab62442d90c5b02d801">GetCount</a>(pInstance));</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>    PL_ASSERT_DEBUG(m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const array accessor function, thus it is read-only.&quot;</span>,</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>      <a class="code hl_function" href="../../d4/dd7/classpl_abstract_property.htm#ab192fac6724fcbd56a160013230bad0b">plAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance))[uiIndex] = *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject);</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>  }</div>
</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span> </div>
<div class="foldopen" id="foldopen00176" data-start="{" data-end="}">
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno"><a class="line" href="../../df/dc4/classpl_member_array_property.htm#afd5c55a22a2ae4210c6ea69011a28204">  176</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../df/dc4/classpl_member_array_property.htm#afd5c55a22a2ae4210c6ea69011a28204">Insert</a>(<span class="keywordtype">void</span>* pInstance, plUInt32 uiIndex, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>    PL_ASSERT_DEBUG(uiIndex &lt;= <a class="code hl_function" href="../../df/dc4/classpl_member_array_property.htm#afc50bb7282059ab62442d90c5b02d801">GetCount</a>(pInstance), <span class="stringliteral">&quot;Insert: uiIndex (&#39;{0}&#39;) is out of range (&#39;{1}&#39;)&quot;</span>, uiIndex, <a class="code hl_function" href="../../df/dc4/classpl_member_array_property.htm#afc50bb7282059ab62442d90c5b02d801">GetCount</a>(pInstance));</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>    PL_ASSERT_DEBUG(m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const array accessor function, thus it is read-only.&quot;</span>,</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>      <a class="code hl_function" href="../../d4/dd7/classpl_abstract_property.htm#ab192fac6724fcbd56a160013230bad0b">plAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)).InsertAt(uiIndex, *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>  }</div>
</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span> </div>
<div class="foldopen" id="foldopen00184" data-start="{" data-end="}">
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno"><a class="line" href="../../df/dc4/classpl_member_array_property.htm#a914aac8135c98e81aa4d560416a2dfed">  184</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../df/dc4/classpl_member_array_property.htm#a914aac8135c98e81aa4d560416a2dfed">Remove</a>(<span class="keywordtype">void</span>* pInstance, plUInt32 uiIndex)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>    PL_ASSERT_DEBUG(uiIndex &lt; <a class="code hl_function" href="../../df/dc4/classpl_member_array_property.htm#afc50bb7282059ab62442d90c5b02d801">GetCount</a>(pInstance), <span class="stringliteral">&quot;Remove: uiIndex (&#39;{0}&#39;) is out of range (&#39;{1}&#39;)&quot;</span>, uiIndex, <a class="code hl_function" href="../../df/dc4/classpl_member_array_property.htm#afc50bb7282059ab62442d90c5b02d801">GetCount</a>(pInstance));</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>    PL_ASSERT_DEBUG(m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const array accessor function, thus it is read-only.&quot;</span>,</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>      <a class="code hl_function" href="../../d4/dd7/classpl_abstract_property.htm#ab192fac6724fcbd56a160013230bad0b">plAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)).RemoveAtAndCopy(uiIndex);</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>  }</div>
</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span> </div>
<div class="foldopen" id="foldopen00192" data-start="{" data-end="}">
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno"><a class="line" href="../../df/dc4/classpl_member_array_property.htm#afb42f9f030fb8199e6d8159878d6854b">  192</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../df/dc4/classpl_member_array_property.htm#afb42f9f030fb8199e6d8159878d6854b">Clear</a>(<span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>    PL_ASSERT_DEBUG(m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const array accessor function, thus it is read-only.&quot;</span>,</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>      <a class="code hl_function" href="../../d4/dd7/classpl_abstract_property.htm#ab192fac6724fcbd56a160013230bad0b">plAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)).Clear();</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>  }</div>
</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span> </div>
<div class="foldopen" id="foldopen00199" data-start="{" data-end="}">
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno"><a class="line" href="../../df/dc4/classpl_member_array_property.htm#a0bdeb033157a405ee4280dab6c7f3c53">  199</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../df/dc4/classpl_member_array_property.htm#a0bdeb033157a405ee4280dab6c7f3c53">SetCount</a>(<span class="keywordtype">void</span>* pInstance, plUInt32 uiCount)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>    PL_ASSERT_DEBUG(m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const array accessor function, thus it is read-only.&quot;</span>,</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>      <a class="code hl_function" href="../../d4/dd7/classpl_abstract_property.htm#ab192fac6724fcbd56a160013230bad0b">plAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)).SetCount(uiCount);</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>  }</div>
</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span> </div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span>* GetValuePointer(<span class="keywordtype">void</span>* pInstance, plUInt32 uiIndex)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>    PL_ASSERT_DEBUG(uiIndex &lt; <a class="code hl_function" href="../../df/dc4/classpl_member_array_property.htm#afc50bb7282059ab62442d90c5b02d801">GetCount</a>(pInstance), <span class="stringliteral">&quot;GetValue: uiIndex (&#39;{0}&#39;) is out of range (&#39;{1}&#39;)&quot;</span>, uiIndex, <a class="code hl_function" href="../../df/dc4/classpl_member_array_property.htm#afc50bb7282059ab62442d90c5b02d801">GetCount</a>(pInstance));</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span>    <span class="keywordflow">return</span> &amp;(m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance))[uiIndex]);</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>  }</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span> </div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>  GetConstContainerFunc m_ConstGetter;</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>  GetContainerFunc m_Getter;</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>};</div>
</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span> </div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Container, <span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00219" data-start="{" data-end="};">
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno"><a class="line" href="../../db/d89/classpl_member_array_read_only_property.htm">  219</a></span><span class="keyword">class </span><a class="code hl_class" href="../../db/d89/classpl_member_array_read_only_property.htm">plMemberArrayReadOnlyProperty</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../db/d53/classpl_typed_array_property.htm">plTypedArrayProperty</a>&lt;typename plTypeTraits&lt;Type&gt;::NonConstReferenceType&gt;</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>{</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>  <span class="keyword">using </span>RealType = <span class="keyword">typename</span> <a class="code hl_typedef" href="../../da/d5d/structpl_type_traits.htm#a5d21aa226bb680dfddc12bfcd6caaa84">plTypeTraits&lt;Type&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>  <span class="keyword">using </span>GetConstContainerFunc = <span class="keyword">const</span> Container&amp; (*)(<span class="keyword">const</span> Class* pInstance);</div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span> </div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>  <a class="code hl_class" href="../../db/d89/classpl_member_array_read_only_property.htm">plMemberArrayReadOnlyProperty</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPropertyName, GetConstContainerFunc constGetter)</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>    : <a class="code hl_class" href="../../db/d53/classpl_typed_array_property.htm">plTypedArrayProperty&lt;RealType&gt;</a>(szPropertyName)</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>  {</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>    PL_ASSERT_DEBUG(constGetter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The const get count function of an array property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span> </div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span>    m_ConstGetter = constGetter;</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>    plAbstractArrayProperty::m_Flags.<a class="code hl_function" href="../../df/dd9/structpl_bitflags.htm#aff74e2d19d2f1e1d2301c35c5170803a">Add</a>(<a class="code hl_enumvalue" href="../../db/d0f/structpl_property_flags.htm#aa9691dcb8643c279db2c187968da4d10a0f65bb89430668409daaa4453b1a4b86">plPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>  }</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span> </div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno"><a class="line" href="../../db/d89/classpl_member_array_read_only_property.htm#ac067cd92ff5bbdcb891d4de5fe621051">  234</a></span>  <span class="keyword">virtual</span> plUInt32 <a class="code hl_function" href="../../db/d89/classpl_member_array_read_only_property.htm#ac067cd92ff5bbdcb891d4de5fe621051">GetCount</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)).GetCount(); }</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span> </div>
<div class="foldopen" id="foldopen00236" data-start="{" data-end="}">
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno"><a class="line" href="../../db/d89/classpl_member_array_read_only_property.htm#ac2cb9094b23e97ab0c8ab9a8939f9de4">  236</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d89/classpl_member_array_read_only_property.htm#ac2cb9094b23e97ab0c8ab9a8939f9de4">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, plUInt32 uiIndex, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>    PL_ASSERT_DEBUG(uiIndex &lt; <a class="code hl_function" href="../../db/d89/classpl_member_array_read_only_property.htm#ac067cd92ff5bbdcb891d4de5fe621051">GetCount</a>(pInstance), <span class="stringliteral">&quot;GetValue: uiIndex (&#39;{0}&#39;) is out of range (&#39;{1}&#39;)&quot;</span>, uiIndex, <a class="code hl_function" href="../../db/d89/classpl_member_array_read_only_property.htm#ac067cd92ff5bbdcb891d4de5fe621051">GetCount</a>(pInstance));</div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>    *<span class="keyword">static_cast&lt;</span>RealType*<span class="keyword">&gt;</span>(pObject) = m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance))[uiIndex];</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span>  }</div>
</div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span> </div>
<div class="foldopen" id="foldopen00242" data-start="{" data-end="}">
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno"><a class="line" href="../../db/d89/classpl_member_array_read_only_property.htm#aabdd336039c36108299ed687aa15b95b">  242</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d89/classpl_member_array_read_only_property.htm#aabdd336039c36108299ed687aa15b95b">SetValue</a>(<span class="keywordtype">void</span>* pInstance, plUInt32 uiIndex, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>    PL_REPORT_FAILURE(<span class="stringliteral">&quot;The property &#39;{0}&#39; is read-only.&quot;</span>, <a class="code hl_function" href="../../d4/dd7/classpl_abstract_property.htm#ab192fac6724fcbd56a160013230bad0b">plAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>  }</div>
</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span> </div>
<div class="foldopen" id="foldopen00247" data-start="{" data-end="}">
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno"><a class="line" href="../../db/d89/classpl_member_array_read_only_property.htm#a3ab65a8c26031587856d96e955390432">  247</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d89/classpl_member_array_read_only_property.htm#a3ab65a8c26031587856d96e955390432">Insert</a>(<span class="keywordtype">void</span>* pInstance, plUInt32 uiIndex, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span>    PL_REPORT_FAILURE(<span class="stringliteral">&quot;The property &#39;{0}&#39; is read-only.&quot;</span>, <a class="code hl_function" href="../../d4/dd7/classpl_abstract_property.htm#ab192fac6724fcbd56a160013230bad0b">plAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>  }</div>
</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span> </div>
<div class="foldopen" id="foldopen00252" data-start="{" data-end="}">
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno"><a class="line" href="../../db/d89/classpl_member_array_read_only_property.htm#a8a32002afef66337f1c486275ccfd160">  252</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d89/classpl_member_array_read_only_property.htm#a8a32002afef66337f1c486275ccfd160">Remove</a>(<span class="keywordtype">void</span>* pInstance, plUInt32 uiIndex)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span>    PL_REPORT_FAILURE(<span class="stringliteral">&quot;The property &#39;{0}&#39; is read-only.&quot;</span>, <a class="code hl_function" href="../../d4/dd7/classpl_abstract_property.htm#ab192fac6724fcbd56a160013230bad0b">plAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span>  }</div>
</div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span> </div>
<div class="foldopen" id="foldopen00257" data-start="{" data-end="}">
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno"><a class="line" href="../../db/d89/classpl_member_array_read_only_property.htm#a4b7064adadea18bc65fe7ae1020a836b">  257</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d89/classpl_member_array_read_only_property.htm#a4b7064adadea18bc65fe7ae1020a836b">Clear</a>(<span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span>    PL_REPORT_FAILURE(<span class="stringliteral">&quot;The property &#39;{0}&#39; is read-only.&quot;</span>, <a class="code hl_function" href="../../d4/dd7/classpl_abstract_property.htm#ab192fac6724fcbd56a160013230bad0b">plAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span>  }</div>
</div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span> </div>
<div class="foldopen" id="foldopen00262" data-start="{" data-end="}">
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno"><a class="line" href="../../db/d89/classpl_member_array_read_only_property.htm#a34dffd1685f58a0c29f6a968df87e3b7">  262</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d89/classpl_member_array_read_only_property.htm#a34dffd1685f58a0c29f6a968df87e3b7">SetCount</a>(<span class="keywordtype">void</span>* pInstance, plUInt32 uiCount)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>    PL_REPORT_FAILURE(<span class="stringliteral">&quot;The property &#39;{0}&#39; is read-only.&quot;</span>, <a class="code hl_function" href="../../d4/dd7/classpl_abstract_property.htm#ab192fac6724fcbd56a160013230bad0b">plAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span>  }</div>
</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span> </div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span>  GetConstContainerFunc m_ConstGetter;</div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>};</div>
</div>
<div class="ttc" id="aclasspl_abstract_array_property_htm"><div class="ttname"><a href="../../dc/d4a/classpl_abstract_array_property.htm">plAbstractArrayProperty</a></div><div class="ttdoc">The base class for a property that represents an array of values.</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:273</div></div>
<div class="ttc" id="aclasspl_abstract_array_property_htm_a7b804f8a31b89c411364d9da7127be7a"><div class="ttname"><a href="../../dc/d4a/classpl_abstract_array_property.htm#a7b804f8a31b89c411364d9da7127be7a">plAbstractArrayProperty::plAbstractArrayProperty</a></div><div class="ttdeci">plAbstractArrayProperty(const char *szPropertyName)</div><div class="ttdoc">Passes the property name through to plAbstractProperty.</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:276</div></div>
<div class="ttc" id="aclasspl_abstract_property_htm_ab192fac6724fcbd56a160013230bad0b"><div class="ttname"><a href="../../d4/dd7/classpl_abstract_property.htm#ab192fac6724fcbd56a160013230bad0b">plAbstractProperty::GetPropertyName</a></div><div class="ttdeci">const char * GetPropertyName() const</div><div class="ttdoc">Returns the name of the property.</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:158</div></div>
<div class="ttc" id="aclasspl_accessor_array_property_htm"><div class="ttname"><a href="../../d8/d97/classpl_accessor_array_property.htm">plAccessorArrayProperty</a></div><div class="ttdef"><b>Definition</b> ArrayProperty.h:44</div></div>
<div class="ttc" id="aclasspl_accessor_array_property_htm_a036838f93e26604765b20305da3bdc3b"><div class="ttname"><a href="../../d8/d97/classpl_accessor_array_property.htm#a036838f93e26604765b20305da3bdc3b">plAccessorArrayProperty::Insert</a></div><div class="ttdeci">virtual void Insert(void *pInstance, plUInt32 uiIndex, const void *pObject) const override</div><div class="ttdoc">Inserts the target of pObject into the array at index uiIndex.</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:87</div></div>
<div class="ttc" id="aclasspl_accessor_array_property_htm_a54279f021651d0062e9badc35507c7f5"><div class="ttname"><a href="../../d8/d97/classpl_accessor_array_property.htm#a54279f021651d0062e9badc35507c7f5">plAccessorArrayProperty::Clear</a></div><div class="ttdeci">virtual void Clear(void *pInstance) const override</div><div class="ttdoc">Clears the array.</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:101</div></div>
<div class="ttc" id="aclasspl_accessor_array_property_htm_a813a3bd0fb5e3287eddf268ffffca595"><div class="ttname"><a href="../../d8/d97/classpl_accessor_array_property.htm#a813a3bd0fb5e3287eddf268ffffca595">plAccessorArrayProperty::SetCount</a></div><div class="ttdeci">virtual void SetCount(void *pInstance, plUInt32 uiCount) const override</div><div class="ttdoc">Resizes the array to uiCount.</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:103</div></div>
<div class="ttc" id="aclasspl_accessor_array_property_htm_a855a9050a702a25846368e4a286ee964"><div class="ttname"><a href="../../d8/d97/classpl_accessor_array_property.htm#a855a9050a702a25846368e4a286ee964">plAccessorArrayProperty::GetCount</a></div><div class="ttdeci">virtual plUInt32 GetCount(const void *pInstance) const override</div><div class="ttdoc">Returns number of elements.</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:72</div></div>
<div class="ttc" id="aclasspl_accessor_array_property_htm_abac6899fd1dcc70b7713f406a8f9c104"><div class="ttname"><a href="../../d8/d97/classpl_accessor_array_property.htm#abac6899fd1dcc70b7713f406a8f9c104">plAccessorArrayProperty::Remove</a></div><div class="ttdeci">virtual void Remove(void *pInstance, plUInt32 uiIndex) const override</div><div class="ttdoc">Removes the element in the array at index uiIndex.</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:94</div></div>
<div class="ttc" id="aclasspl_accessor_array_property_htm_ad1276b213719366deecf0a80eaf6fbc8"><div class="ttname"><a href="../../d8/d97/classpl_accessor_array_property.htm#ad1276b213719366deecf0a80eaf6fbc8">plAccessorArrayProperty::SetValue</a></div><div class="ttdeci">virtual void SetValue(void *pInstance, plUInt32 uiIndex, const void *pObject) const override</div><div class="ttdoc">Writes the target of pObject to the element at index uiIndex.</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:80</div></div>
<div class="ttc" id="aclasspl_accessor_array_property_htm_afb5fb686fc370df48ef0595dd546a38d"><div class="ttname"><a href="../../d8/d97/classpl_accessor_array_property.htm#afb5fb686fc370df48ef0595dd546a38d">plAccessorArrayProperty::GetValue</a></div><div class="ttdeci">virtual void GetValue(const void *pInstance, plUInt32 uiIndex, void *pObject) const override</div><div class="ttdoc">Writes element at index uiIndex to the target of pObject.</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:74</div></div>
<div class="ttc" id="aclasspl_member_array_property_htm"><div class="ttname"><a href="../../df/dc4/classpl_member_array_property.htm">plMemberArrayProperty</a></div><div class="ttdef"><b>Definition</b> ArrayProperty.h:142</div></div>
<div class="ttc" id="aclasspl_member_array_property_htm_a0bdeb033157a405ee4280dab6c7f3c53"><div class="ttname"><a href="../../df/dc4/classpl_member_array_property.htm#a0bdeb033157a405ee4280dab6c7f3c53">plMemberArrayProperty::SetCount</a></div><div class="ttdeci">virtual void SetCount(void *pInstance, plUInt32 uiCount) const override</div><div class="ttdoc">Resizes the array to uiCount.</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:199</div></div>
<div class="ttc" id="aclasspl_member_array_property_htm_a0fcf03fcd5a0b0812b485ae2101a0e60"><div class="ttname"><a href="../../df/dc4/classpl_member_array_property.htm#a0fcf03fcd5a0b0812b485ae2101a0e60">plMemberArrayProperty::SetValue</a></div><div class="ttdeci">virtual void SetValue(void *pInstance, plUInt32 uiIndex, const void *pObject) const override</div><div class="ttdoc">Writes the target of pObject to the element at index uiIndex.</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:168</div></div>
<div class="ttc" id="aclasspl_member_array_property_htm_a3aff5b309fe4b72bc4dba0322a416df4"><div class="ttname"><a href="../../df/dc4/classpl_member_array_property.htm#a3aff5b309fe4b72bc4dba0322a416df4">plMemberArrayProperty::GetValue</a></div><div class="ttdeci">virtual void GetValue(const void *pInstance, plUInt32 uiIndex, void *pObject) const override</div><div class="ttdoc">Writes element at index uiIndex to the target of pObject.</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:162</div></div>
<div class="ttc" id="aclasspl_member_array_property_htm_a914aac8135c98e81aa4d560416a2dfed"><div class="ttname"><a href="../../df/dc4/classpl_member_array_property.htm#a914aac8135c98e81aa4d560416a2dfed">plMemberArrayProperty::Remove</a></div><div class="ttdeci">virtual void Remove(void *pInstance, plUInt32 uiIndex) const override</div><div class="ttdoc">Removes the element in the array at index uiIndex.</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:184</div></div>
<div class="ttc" id="aclasspl_member_array_property_htm_afb42f9f030fb8199e6d8159878d6854b"><div class="ttname"><a href="../../df/dc4/classpl_member_array_property.htm#afb42f9f030fb8199e6d8159878d6854b">plMemberArrayProperty::Clear</a></div><div class="ttdeci">virtual void Clear(void *pInstance) const override</div><div class="ttdoc">Clears the array.</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:192</div></div>
<div class="ttc" id="aclasspl_member_array_property_htm_afc50bb7282059ab62442d90c5b02d801"><div class="ttname"><a href="../../df/dc4/classpl_member_array_property.htm#afc50bb7282059ab62442d90c5b02d801">plMemberArrayProperty::GetCount</a></div><div class="ttdeci">virtual plUInt32 GetCount(const void *pInstance) const override</div><div class="ttdoc">Returns number of elements.</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:160</div></div>
<div class="ttc" id="aclasspl_member_array_property_htm_afd5c55a22a2ae4210c6ea69011a28204"><div class="ttname"><a href="../../df/dc4/classpl_member_array_property.htm#afd5c55a22a2ae4210c6ea69011a28204">plMemberArrayProperty::Insert</a></div><div class="ttdeci">virtual void Insert(void *pInstance, plUInt32 uiIndex, const void *pObject) const override</div><div class="ttdoc">Inserts the target of pObject into the array at index uiIndex.</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:176</div></div>
<div class="ttc" id="aclasspl_member_array_read_only_property_htm"><div class="ttname"><a href="../../db/d89/classpl_member_array_read_only_property.htm">plMemberArrayReadOnlyProperty</a></div><div class="ttdoc">Read only version of plMemberArrayProperty that does not call any functions that modify the array....</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:220</div></div>
<div class="ttc" id="aclasspl_member_array_read_only_property_htm_a34dffd1685f58a0c29f6a968df87e3b7"><div class="ttname"><a href="../../db/d89/classpl_member_array_read_only_property.htm#a34dffd1685f58a0c29f6a968df87e3b7">plMemberArrayReadOnlyProperty::SetCount</a></div><div class="ttdeci">virtual void SetCount(void *pInstance, plUInt32 uiCount) const override</div><div class="ttdoc">Resizes the array to uiCount.</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:262</div></div>
<div class="ttc" id="aclasspl_member_array_read_only_property_htm_a3ab65a8c26031587856d96e955390432"><div class="ttname"><a href="../../db/d89/classpl_member_array_read_only_property.htm#a3ab65a8c26031587856d96e955390432">plMemberArrayReadOnlyProperty::Insert</a></div><div class="ttdeci">virtual void Insert(void *pInstance, plUInt32 uiIndex, const void *pObject) const override</div><div class="ttdoc">Inserts the target of pObject into the array at index uiIndex.</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:247</div></div>
<div class="ttc" id="aclasspl_member_array_read_only_property_htm_a4b7064adadea18bc65fe7ae1020a836b"><div class="ttname"><a href="../../db/d89/classpl_member_array_read_only_property.htm#a4b7064adadea18bc65fe7ae1020a836b">plMemberArrayReadOnlyProperty::Clear</a></div><div class="ttdeci">virtual void Clear(void *pInstance) const override</div><div class="ttdoc">Clears the array.</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:257</div></div>
<div class="ttc" id="aclasspl_member_array_read_only_property_htm_a8a32002afef66337f1c486275ccfd160"><div class="ttname"><a href="../../db/d89/classpl_member_array_read_only_property.htm#a8a32002afef66337f1c486275ccfd160">plMemberArrayReadOnlyProperty::Remove</a></div><div class="ttdeci">virtual void Remove(void *pInstance, plUInt32 uiIndex) const override</div><div class="ttdoc">Removes the element in the array at index uiIndex.</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:252</div></div>
<div class="ttc" id="aclasspl_member_array_read_only_property_htm_aabdd336039c36108299ed687aa15b95b"><div class="ttname"><a href="../../db/d89/classpl_member_array_read_only_property.htm#aabdd336039c36108299ed687aa15b95b">plMemberArrayReadOnlyProperty::SetValue</a></div><div class="ttdeci">virtual void SetValue(void *pInstance, plUInt32 uiIndex, const void *pObject) const override</div><div class="ttdoc">Writes the target of pObject to the element at index uiIndex.</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:242</div></div>
<div class="ttc" id="aclasspl_member_array_read_only_property_htm_ac067cd92ff5bbdcb891d4de5fe621051"><div class="ttname"><a href="../../db/d89/classpl_member_array_read_only_property.htm#ac067cd92ff5bbdcb891d4de5fe621051">plMemberArrayReadOnlyProperty::GetCount</a></div><div class="ttdeci">virtual plUInt32 GetCount(const void *pInstance) const override</div><div class="ttdoc">Returns number of elements.</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:234</div></div>
<div class="ttc" id="aclasspl_member_array_read_only_property_htm_ac2cb9094b23e97ab0c8ab9a8939f9de4"><div class="ttname"><a href="../../db/d89/classpl_member_array_read_only_property.htm#ac2cb9094b23e97ab0c8ab9a8939f9de4">plMemberArrayReadOnlyProperty::GetValue</a></div><div class="ttdeci">virtual void GetValue(const void *pInstance, plUInt32 uiIndex, void *pObject) const override</div><div class="ttdoc">Writes element at index uiIndex to the target of pObject.</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:236</div></div>
<div class="ttc" id="aclasspl_r_t_t_i_htm"><div class="ttname"><a href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a></div><div class="ttdoc">This class holds information about reflected types. Each instance represents one type that is known t...</div><div class="ttdef"><b>Definition</b> RTTI.h:30</div></div>
<div class="ttc" id="aclasspl_typed_array_property_3_01const_01char_01_5_01_4_htm_a0386ea9b190ace90875c90517bc224d0"><div class="ttname"><a href="../../df/d23/classpl_typed_array_property_3_01const_01char_01_5_01_4.htm#a0386ea9b190ace90875c90517bc224d0">plTypedArrayProperty&lt; const char * &gt;::GetSpecificType</a></div><div class="ttdeci">virtual const plRTTI * GetSpecificType() const override</div><div class="ttdoc">Returns the type information of the constant property. Use this to cast this property to a specific v...</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:38</div></div>
<div class="ttc" id="aclasspl_typed_array_property_htm"><div class="ttname"><a href="../../db/d53/classpl_typed_array_property.htm">plTypedArrayProperty</a></div><div class="ttdoc">Do not cast into this class or any of its derived classes, use plTypedArrayProperty instead.</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:12</div></div>
<div class="ttc" id="aclasspl_typed_array_property_htm_a2fdb275b1b0122f6f86244c1fe3bdc9a"><div class="ttname"><a href="../../db/d53/classpl_typed_array_property.htm#a2fdb275b1b0122f6f86244c1fe3bdc9a">plTypedArrayProperty::GetSpecificType</a></div><div class="ttdeci">virtual const plRTTI * GetSpecificType() const override</div><div class="ttdoc">Returns the type information of the constant property. Use this to cast this property to a specific v...</div><div class="ttdef"><b>Definition</b> ArrayProperty.h:24</div></div>
<div class="ttc" id="astructpl_array_property_accessor_htm"><div class="ttname"><a href="../../db/d9c/structpl_array_property_accessor.htm">plArrayPropertyAccessor</a></div><div class="ttdef"><b>Definition</b> ArrayProperty.h:130</div></div>
<div class="ttc" id="astructpl_bitflags_htm_aff74e2d19d2f1e1d2301c35c5170803a"><div class="ttname"><a href="../../df/dd9/structpl_bitflags.htm#aff74e2d19d2f1e1d2301c35c5170803a">plBitflags::Add</a></div><div class="ttdeci">PL_ALWAYS_INLINE void Add(const plBitflags&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Sets the given flag.</div><div class="ttdef"><b>Definition</b> Bitflags.h:151</div></div>
<div class="ttc" id="astructpl_property_flags_htm_aa9691dcb8643c279db2c187968da4d10a0f65bb89430668409daaa4453b1a4b86"><div class="ttname"><a href="../../db/d0f/structpl_property_flags.htm#aa9691dcb8643c279db2c187968da4d10a0f65bb89430668409daaa4453b1a4b86">plPropertyFlags::ReadOnly</a></div><div class="ttdeci">@ ReadOnly</div><div class="ttdoc">Can only be read but not modified.</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:63</div></div>
<div class="ttc" id="astructpl_type_traits_htm"><div class="ttname"><a href="../../da/d5d/structpl_type_traits.htm">plTypeTraits</a></div><div class="ttdef"><b>Definition</b> TypeTraits.h:207</div></div>
<div class="ttc" id="astructpl_type_traits_htm_a5d21aa226bb680dfddc12bfcd6caaa84"><div class="ttname"><a href="../../da/d5d/structpl_type_traits.htm#a5d21aa226bb680dfddc12bfcd6caaa84">plTypeTraits::NonConstReferenceType</a></div><div class="ttdeci">typename std::remove_const&lt; typename std::remove_reference&lt; T &gt;::type &gt;::type NonConstReferenceType</div><div class="ttdoc">removes reference and const qualifier</div><div class="ttdef"><b>Definition</b> TypeTraits.h:218</div></div>
<div class="ttc" id="astructpl_variant_type_deduction_htm"><div class="ttname"><a href="../../d6/d03/structpl_variant_type_deduction.htm">plVariantTypeDeduction</a></div><div class="ttdoc">A helper struct to convert the C++ type, which is passed as the template argument,...</div><div class="ttdef"><b>Definition</b> VariantType.h:97</div></div>
<div class="ttc" id="astructpl_variant_type_htm_a4d10a99c083abdf7283ab1f48565de12aeeb3f6c596cc924d89435564a5b70bad"><div class="ttname"><a href="../../d6/d1e/structpl_variant_type.htm#a4d10a99c083abdf7283ab1f48565de12aeeb3f6c596cc924d89435564a5b70bad">plVariantType::Invalid</a></div><div class="ttdeci">@ Invalid</div><div class="ttdoc">The variant stores no (valid) data at the moment.</div><div class="ttdef"><b>Definition</b> VariantType.h:27</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_03dd0ffe19aabd3d1cd0d82a91256ab1.htm">Reflection</a></li><li class="navelem"><a class="el" href="../../dir_e37e67d8810cb9249b77d55deb37c5cb.htm">Implementation</a></li><li class="navelem"><b>ArrayProperty.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
