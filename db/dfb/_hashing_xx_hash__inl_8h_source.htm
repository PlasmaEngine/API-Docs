<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>plEngine: Code/Engine/Foundation/Algorithm/Implementation/HashingXxHash_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only-darkmode-toggle.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">plEngine<span id="projectnumber">&#160;Release 2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('db/dfb/_hashing_xx_hash__inl_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">HashingXxHash_inl.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="keyword">namespace </span>plInternal</div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span>{</div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span>  <span class="keyword">constexpr</span> plUInt32 PRIME32_1 = 0x9E3779B1U;</div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span>  <span class="keyword">constexpr</span> plUInt32 PRIME32_2 = 0x85EBCA77U;</div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span>  <span class="keyword">constexpr</span> plUInt32 PRIME32_3 = 0xC2B2AE3DU;</div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span>  <span class="keyword">constexpr</span> plUInt32 PRIME32_4 = 0x27D4EB2FU;</div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span>  <span class="keyword">constexpr</span> plUInt32 PRIME32_5 = 0x165667B1U;</div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span> </div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span>  <span class="keyword">constexpr</span> plUInt64 PRIME64_1 = 0x9E3779B185EBCA87ULL;</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>  <span class="keyword">constexpr</span> plUInt64 PRIME64_2 = 0xC2B2AE3D27D4EB4FULL;</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>  <span class="keyword">constexpr</span> plUInt64 PRIME64_3 = 0x165667B19E3779F9ULL;</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>  <span class="keyword">constexpr</span> plUInt64 PRIME64_4 = 0x85EBCA77C2B2AE63ULL;</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span>  <span class="keyword">constexpr</span> plUInt64 PRIME64_5 = 0x27D4EB2F165667C5ULL;</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span> </div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>  <span class="keyword">constexpr</span> plUInt32 plRotLeft(plUInt32 value, plUInt32 uiAmount)</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>  {</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>    <span class="keywordflow">return</span> (value &lt;&lt; uiAmount) | (value &gt;&gt; (32 - uiAmount));</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>  }</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>  <span class="keyword">constexpr</span> plUInt64 plRotLeft(plUInt64 value, plUInt64 uiAmount)</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>  {</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>    <span class="keywordflow">return</span> (value &lt;&lt; uiAmount) | (value &gt;&gt; (64 - uiAmount));</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>  }</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span> </div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>  <span class="keyword">template</span> &lt;<span class="keywordtype">size_t</span> N&gt;</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>  <span class="keyword">constexpr</span> plUInt32 CompileTimeXxHash32(<span class="keyword">const</span> <span class="keywordtype">char</span> (&amp;str)[N], plUInt32 uiSeed)</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>  {</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>    <span class="comment">// Note: N will contain the trailing 0 of a string literal. This needs to be ignored.</span></div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>    <span class="keyword">constexpr</span> plUInt32 length = <span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(N - 1);</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>    <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (length == 0)</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span>    {</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>      <span class="keywordflow">return</span> 46947589u;</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>    }</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span>    <span class="keywordflow">else</span></div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>    {</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>      plUInt32 acc = 0;</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>      plUInt32 index = 0;</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>      <span class="comment">// Perform simple initialization if N &lt; 16</span></div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span>      <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (length &lt; 16)</div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span>      {</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>        acc = uiSeed + PRIME32_5;</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>      }</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>      <span class="keywordflow">else</span></div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>      {</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>        plUInt32 accs[4] = {uiSeed + PRIME32_1 + PRIME32_2, uiSeed + PRIME32_2, uiSeed, uiSeed - PRIME32_1};</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>        <span class="keywordflow">for</span> (; length - index &gt;= 16; index += 16)</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>        {</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>          <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 4; i++)</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>          {</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>            plUInt32 laneN = (<span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(str[index + i * 4 + 0]) &lt;&lt; 0) | (<span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(str[index + i * 4 + 1]) &lt;&lt; 8) |</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>                             (<span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(str[index + i * 4 + 2]) &lt;&lt; 16) | (<span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(str[index + i * 4 + 3]) &lt;&lt; 24);</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span>            accs[i] = accs[i] + (laneN * PRIME32_2);</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>            accs[i] = plRotLeft(accs[i], 13);</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>            accs[i] = accs[i] * PRIME32_1;</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>          }</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>        }</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>        acc = plRotLeft(accs[0], 1) + plRotLeft(accs[1], 7) + plRotLeft(accs[2], 12) + plRotLeft(accs[3], 18);</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>      }</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span> </div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>      <span class="comment">// Step 4</span></div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>      acc = acc + length;</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span> </div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>      <span class="comment">// Step 5</span></div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>      <span class="keywordflow">for</span> (; length - index &gt;= 4; index += 4)</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>      {</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>        plUInt32 lane = (<span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(str[index + 0]) &lt;&lt; 0) | (<span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(str[index + 1]) &lt;&lt; 8) |</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>                        (<span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(str[index + 2]) &lt;&lt; 16) | (<span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(str[index + 3]) &lt;&lt; 24);</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>        acc = acc + lane * PRIME32_3;</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>        acc = plRotLeft(acc, 17) * PRIME32_4;</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>      }</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span> </div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>      <span class="keywordflow">for</span> (; length - index &gt;= 1; index++)</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>      {</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>        plUInt32 lane = <span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(str[index]);</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>        acc = acc + lane * PRIME32_5;</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>        acc = plRotLeft(acc, 11) * PRIME32_1;</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>      }</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span> </div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>      <span class="comment">// Step 6</span></div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>      acc = acc ^ (acc &gt;&gt; 15);</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>      acc = acc * PRIME32_2;</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>      acc = acc ^ (acc &gt;&gt; 13);</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>      acc = acc * PRIME32_3;</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>      acc = acc ^ (acc &gt;&gt; 16);</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span> </div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>      <span class="keywordflow">return</span> acc;</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>    }</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>  }</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span> </div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>  <span class="keyword">template</span> &lt;<span class="keywordtype">size_t</span> N&gt;</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>  <span class="keyword">constexpr</span> plUInt64 CompileTimeXxHash64(<span class="keyword">const</span> <span class="keywordtype">char</span> (&amp;str)[N], plUInt64 uiSeed)</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>  {</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>    <span class="comment">// Note: N will contain the trailing 0 of a string literal. This needs to be ignored.</span></div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>    <span class="keyword">constexpr</span> plUInt32 length = <span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(N - 1);</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>    <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (length == 0)</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>    {</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>      <span class="keywordflow">return</span> 17241709254077376921llu;</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>    }</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>    <span class="keywordflow">else</span></div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>    {</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>      plUInt64 acc = 0;</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>      plUInt32 index = 0;</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span> </div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>      <span class="comment">// Step 1</span></div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>      <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (length &lt; 32)</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>      {</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>        <span class="comment">// simple initialization</span></div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>        acc = uiSeed + PRIME64_5;</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>      }</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>      <span class="keywordflow">else</span></div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>      {</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>        plUInt64 accs[] = {uiSeed + PRIME64_1 + PRIME64_2, uiSeed + PRIME64_2, uiSeed + 0, uiSeed - PRIME64_1};</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>        <span class="comment">// Step 2</span></div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>        <span class="keywordflow">for</span> (; length - index &gt;= 32; index += 32)</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>        {</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>          <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 4; i++)</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>          {</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>            plUInt64 laneN = (<span class="keyword">static_cast&lt;</span>plUInt64<span class="keyword">&gt;</span>(str[index + i * 8 + 0]) &lt;&lt; 0) | (<span class="keyword">static_cast&lt;</span>plUInt64<span class="keyword">&gt;</span>(str[index + i * 8 + 1]) &lt;&lt; 8) |</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>                             (<span class="keyword">static_cast&lt;</span>plUInt64<span class="keyword">&gt;</span>(str[index + i * 8 + 2]) &lt;&lt; 16) | (<span class="keyword">static_cast&lt;</span>plUInt64<span class="keyword">&gt;</span>(str[index + i * 8 + 3]) &lt;&lt; 24) |</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>                             (<span class="keyword">static_cast&lt;</span>plUInt64<span class="keyword">&gt;</span>(str[index + i * 8 + 4]) &lt;&lt; 32) | (<span class="keyword">static_cast&lt;</span>plUInt64<span class="keyword">&gt;</span>(str[index + i * 8 + 5]) &lt;&lt; 40) |</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>                             (<span class="keyword">static_cast&lt;</span>plUInt64<span class="keyword">&gt;</span>(str[index + i * 8 + 6]) &lt;&lt; 48) | (<span class="keyword">static_cast&lt;</span>plUInt64<span class="keyword">&gt;</span>(str[index + i * 8 + 7]) &lt;&lt; 56);</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>            accs[i] = accs[i] + (laneN * PRIME64_2);</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>            accs[i] = plRotLeft(accs[i], 31ULL);</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>            accs[i] = accs[i] * PRIME64_1;</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>          }</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>        }</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span> </div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>        <span class="comment">// Step 3</span></div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>        acc = plRotLeft(accs[0], 1ULL) + plRotLeft(accs[1], 7ULL) + plRotLeft(accs[2], 12ULL) + plRotLeft(accs[3], 18ULL);</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 4; i++)</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>        {</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>          acc = (acc ^ (plRotLeft(accs[i] * PRIME64_2, 31ULL) * PRIME64_1)) * PRIME64_1 + PRIME64_4;</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>        }</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>      }</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>      <span class="comment">// Step 4</span></div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>      acc += length;</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span> </div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>      <span class="comment">// Step 5</span></div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>      <span class="keywordflow">for</span> (; length - index &gt;= 8; index += 8)</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>      {</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>        plUInt64 lane = (<span class="keyword">static_cast&lt;</span>plUInt64<span class="keyword">&gt;</span>(str[index + 0]) &lt;&lt; 0) | (<span class="keyword">static_cast&lt;</span>plUInt64<span class="keyword">&gt;</span>(str[index + 1]) &lt;&lt; 8) |</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>                        (<span class="keyword">static_cast&lt;</span>plUInt64<span class="keyword">&gt;</span>(str[index + 2]) &lt;&lt; 16) | (<span class="keyword">static_cast&lt;</span>plUInt64<span class="keyword">&gt;</span>(str[index + 3]) &lt;&lt; 24) |</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>                        (<span class="keyword">static_cast&lt;</span>plUInt64<span class="keyword">&gt;</span>(str[index + 4]) &lt;&lt; 32) | (<span class="keyword">static_cast&lt;</span>plUInt64<span class="keyword">&gt;</span>(str[index + 5]) &lt;&lt; 40) |</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>                        (<span class="keyword">static_cast&lt;</span>plUInt64<span class="keyword">&gt;</span>(str[index + 6]) &lt;&lt; 48) | (<span class="keyword">static_cast&lt;</span>plUInt64<span class="keyword">&gt;</span>(str[index + 7]) &lt;&lt; 56);</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>        acc = acc ^ (plRotLeft(lane * PRIME64_2, 31ULL) * PRIME64_1);</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>        acc = plRotLeft(acc, 27ULL) * PRIME64_1;</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>        acc += PRIME64_4;</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>      }</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span> </div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>      <span class="keywordflow">for</span> (; length - index &gt;= 4; index += 4)</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>      {</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>        plUInt64 lane = (<span class="keyword">static_cast&lt;</span>plUInt64<span class="keyword">&gt;</span>(str[index + 0]) &lt;&lt; 0) | (<span class="keyword">static_cast&lt;</span>plUInt64<span class="keyword">&gt;</span>(str[index + 1]) &lt;&lt; 8) |</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>                        (<span class="keyword">static_cast&lt;</span>plUInt64<span class="keyword">&gt;</span>(str[index + 2]) &lt;&lt; 16) | (<span class="keyword">static_cast&lt;</span>plUInt64<span class="keyword">&gt;</span>(str[index + 3]) &lt;&lt; 24);</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>        acc = acc ^ (lane * PRIME64_1);</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>        acc = plRotLeft(acc, 23ULL) * PRIME64_2;</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>        acc += PRIME64_3;</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>      }</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span> </div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>      <span class="keywordflow">for</span> (; length - index &gt;= 1; index++)</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>      {</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>        plUInt64 lane = <span class="keyword">static_cast&lt;</span>plUInt64<span class="keyword">&gt;</span>(str[index]);</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>        acc = acc ^ (lane * PRIME64_5);</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>        acc = plRotLeft(acc, 11ULL) * PRIME64_1;</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>      }</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span> </div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>      <span class="comment">// Step 6</span></div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>      acc = acc ^ (acc &gt;&gt; 33);</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>      acc = acc * PRIME64_2;</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>      acc = acc ^ (acc &gt;&gt; 29);</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>      acc = acc * PRIME64_3;</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>      acc = acc ^ (acc &gt;&gt; 32);</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span> </div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>      <span class="keywordflow">return</span> acc;</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>    }</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>  }</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>} <span class="comment">// namespace plInternal</span></div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span> </div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span><span class="keyword">template</span> &lt;<span class="keywordtype">size_t</span> N&gt;</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span><span class="keyword">constexpr</span> PL_ALWAYS_INLINE plUInt32 <a class="code hl_function" href="../../de/d53/classpl_hashing_utils.htm#ab3bf17fc699a6416ef105b6e95f32a4e">plHashingUtils::xxHash32String</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> (&amp;str)[N], plUInt32 uiSeed)</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>{</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>  <span class="keywordflow">return</span> plInternal::CompileTimeXxHash32(str, uiSeed);</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>}</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span> </div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span><span class="keyword">template</span> &lt;<span class="keywordtype">size_t</span> N&gt;</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span><span class="keyword">constexpr</span> PL_ALWAYS_INLINE plUInt64 <a class="code hl_function" href="../../de/d53/classpl_hashing_utils.htm#a51de524fd315b0f9c4cf8f827632a669">plHashingUtils::xxHash64String</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> (&amp;str)[N], plUInt64 uiSeed)</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>{</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>  <span class="keywordflow">return</span> plInternal::CompileTimeXxHash64(str, uiSeed);</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>}</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span> </div>
<div class="foldopen" id="foldopen00191" data-start="{" data-end="}">
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno"><a class="line" href="../../de/d53/classpl_hashing_utils.htm#af786319e461ff6151ed5f566f5a27814">  191</a></span>PL_ALWAYS_INLINE plUInt32 <a class="code hl_function" href="../../de/d53/classpl_hashing_utils.htm#ab3bf17fc699a6416ef105b6e95f32a4e">plHashingUtils::xxHash32String</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStr, plUInt32 uiSeed)</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>{</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d53/classpl_hashing_utils.htm#a7c0a580df763da8745e5fe430d6b8393">xxHash32</a>(sStr.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a74f83d2da688a507fee719c4deea8e28">GetStartPointer</a>(), sStr.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a0828063775dbf037984994e4d0827764">GetElementCount</a>(), uiSeed);</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>}</div>
</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span> </div>
<div class="foldopen" id="foldopen00196" data-start="{" data-end="}">
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno"><a class="line" href="../../de/d53/classpl_hashing_utils.htm#a964dacb71724515ecb86fd7c69826fe9">  196</a></span>PL_ALWAYS_INLINE plUInt64 <a class="code hl_function" href="../../de/d53/classpl_hashing_utils.htm#a51de524fd315b0f9c4cf8f827632a669">plHashingUtils::xxHash64String</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStr, plUInt64 uiSeed)</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>{</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d53/classpl_hashing_utils.htm#afc1d6b8ee61ef32f93fac4ae7ad6a048">xxHash64</a>(sStr.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a74f83d2da688a507fee719c4deea8e28">GetStartPointer</a>(), sStr.<a class="code hl_function" href="../../d6/d79/classpl_string_view.htm#a0828063775dbf037984994e4d0827764">GetElementCount</a>(), uiSeed);</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>}</div>
</div>
<div class="ttc" id="aclasspl_hashing_utils_htm_a51de524fd315b0f9c4cf8f827632a669"><div class="ttname"><a href="../../de/d53/classpl_hashing_utils.htm#a51de524fd315b0f9c4cf8f827632a669">plHashingUtils::xxHash64String</a></div><div class="ttdeci">static constexpr plUInt64 xxHash64String(const char(&amp;str)[N], plUInt64 uiSeed=0)</div><div class="ttdoc">Calculates the 64bit xxHash of the given string literal at compile time.</div></div>
<div class="ttc" id="aclasspl_hashing_utils_htm_a7c0a580df763da8745e5fe430d6b8393"><div class="ttname"><a href="../../de/d53/classpl_hashing_utils.htm#a7c0a580df763da8745e5fe430d6b8393">plHashingUtils::xxHash32</a></div><div class="ttdeci">static plUInt32 xxHash32(const void *pKey, size_t uiSizeInByte, plUInt32 uiSeed=0)</div><div class="ttdoc">Calculates the 32bit xxHash of the given key.</div><div class="ttdef"><b>Definition</b> HashingUtils.cpp:209</div></div>
<div class="ttc" id="aclasspl_hashing_utils_htm_ab3bf17fc699a6416ef105b6e95f32a4e"><div class="ttname"><a href="../../de/d53/classpl_hashing_utils.htm#ab3bf17fc699a6416ef105b6e95f32a4e">plHashingUtils::xxHash32String</a></div><div class="ttdeci">static constexpr plUInt32 xxHash32String(const char(&amp;str)[N], plUInt32 uiSeed=0)</div><div class="ttdoc">Calculates the 32bit xxHash of the given string literal at compile time.</div></div>
<div class="ttc" id="aclasspl_hashing_utils_htm_afc1d6b8ee61ef32f93fac4ae7ad6a048"><div class="ttname"><a href="../../de/d53/classpl_hashing_utils.htm#afc1d6b8ee61ef32f93fac4ae7ad6a048">plHashingUtils::xxHash64</a></div><div class="ttdeci">static plUInt64 xxHash64(const void *pKey, size_t uiSizeInByte, plUInt64 uiSeed=0)</div><div class="ttdoc">Calculates the 64bit xxHash of the given key.</div><div class="ttdef"><b>Definition</b> HashingUtils.cpp:215</div></div>
<div class="ttc" id="aclasspl_string_view_htm"><div class="ttname"><a href="../../d6/d79/classpl_string_view.htm">plStringView</a></div><div class="ttdoc">plStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...</div><div class="ttdef"><b>Definition</b> StringView.h:34</div></div>
<div class="ttc" id="aclasspl_string_view_htm_a0828063775dbf037984994e4d0827764"><div class="ttname"><a href="../../d6/d79/classpl_string_view.htm#a0828063775dbf037984994e4d0827764">plStringView::GetElementCount</a></div><div class="ttdeci">plUInt32 GetElementCount() const</div><div class="ttdoc">Returns the number of bytes from the start position up to its end.</div><div class="ttdef"><b>Definition</b> StringView.h:93</div></div>
<div class="ttc" id="aclasspl_string_view_htm_a74f83d2da688a507fee719c4deea8e28"><div class="ttname"><a href="../../d6/d79/classpl_string_view.htm#a74f83d2da688a507fee719c4deea8e28">plStringView::GetStartPointer</a></div><div class="ttdeci">const char * GetStartPointer() const</div><div class="ttdoc">Returns the start of the view range.</div><div class="ttdef"><b>Definition</b> StringView.h:102</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_84a7a2cba595e04d2507324f6c30e358.htm">Algorithm</a></li><li class="navelem"><a class="el" href="../../dir_61dd4527daaedd8768bd8ae7964eae4b.htm">Implementation</a></li><li class="navelem"><b>HashingXxHash_inl.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
