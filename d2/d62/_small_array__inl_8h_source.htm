<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>plEngine: Code/Engine/Foundation/Containers/Implementation/SmallArray_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only-darkmode-toggle.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">plEngine<span id="projectnumber">&#160;Release 2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d2/d62/_small_array__inl_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">SmallArray_inl.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span> </div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;::plSmallArrayBase</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span> </div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;::plSmallArrayBase</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>&amp; other, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span>{</div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span>  CopyFrom((<a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const T&gt;</a>)other, pAllocator);</div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span>  m_uiUserData = other.m_uiUserData;</div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span>}</div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span> </div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;::plSmallArrayBase</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const T&gt;</a>&amp; other, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>{</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span>  CopyFrom(other, pAllocator);</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span>}</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span> </div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;::plSmallArrayBase</a>(<a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>&amp;&amp; other, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>{</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>  MoveFrom(std::move(other), pAllocator);</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>}</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span> </div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>PL_FORCE_INLINE <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;::~plSmallArrayBase</a>()</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>{</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>  PL_ASSERT_DEBUG(m_uiCount == 0, <span class="stringliteral">&quot;The derived class did not destruct all objects. Count is {0}.&quot;</span>, m_uiCount);</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>  PL_ASSERT_DEBUG(m_pElements == <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The derived class did not free its memory.&quot;</span>);</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>}</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span> </div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00032" data-start="{" data-end="}">
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a7bdb7ccdd99b15c07c61f179436d63a8">   32</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a7bdb7ccdd99b15c07c61f179436d63a8">plSmallArrayBase&lt;T, Size&gt;::CopyFrom</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const T&gt;</a>&amp; other, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>{</div>
<div class="foldopen" id="foldopen00034" data-start="{" data-end="}">
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a7bdb7ccdd99b15c07c61f179436d63a8">   34</a></span>  PL_ASSERT_DEV(other.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#a025ba83275da5ff5008495fa3245b9b2">GetCount</a>() &lt;= plSmallInvalidIndex, <span class="stringliteral">&quot;Can&#39;t copy {} elements to small array. Maximum count is {}&quot;</span>, other.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#a025ba83275da5ff5008495fa3245b9b2">GetCount</a>(), plSmallInvalidIndex);</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span> </div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>  <span class="keywordflow">if</span> (GetData() == other.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#a6d9dbf629f70c956b654471e53baf2be">GetPtr</a>())</div>
<div class="foldopen" id="foldopen00037" data-start="{" data-end="}">
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a429bf06f44557e9e94d93bcee6cb8631">   37</a></span>  {</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>    <span class="keywordflow">if</span> (m_uiCount == other.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#a025ba83275da5ff5008495fa3245b9b2">GetCount</a>())</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>      <span class="keywordflow">return</span>;</div>
<div class="foldopen" id="foldopen00040" data-start="{" data-end="}">
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#ab776a645d67194526ad6563cd2cad5f5">   40</a></span> </div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span>    PL_ASSERT_DEV(m_uiCount &gt; other.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#a025ba83275da5ff5008495fa3245b9b2">GetCount</a>(), <span class="stringliteral">&quot;Dangling array pointer. The given array pointer points to invalid memory.&quot;</span>);</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>    T* pElements = GetElementsPtr();</div>
<div class="foldopen" id="foldopen00043" data-start="{" data-end="}">
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a1a61fca2934c395d98ed0ea70a79f3ab">   43</a></span>    <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#afe524b6781f69e2fd4eceb18f2a27640">plMemoryUtils::Destruct</a>(pElements + other.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#a025ba83275da5ff5008495fa3245b9b2">GetCount</a>(), m_uiCount - other.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#a025ba83275da5ff5008495fa3245b9b2">GetCount</a>());</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>    m_uiCount = <span class="keyword">static_cast&lt;</span>plUInt16<span class="keyword">&gt;</span>(other.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#a025ba83275da5ff5008495fa3245b9b2">GetCount</a>());</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>    <span class="keywordflow">return</span>;</div>
<div class="foldopen" id="foldopen00046" data-start="{" data-end="}">
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#ae10acb56265e7505bf03cc5c90e8fc09">   46</a></span>  }</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span> </div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>  <span class="keyword">const</span> plUInt32 uiOldCount = m_uiCount;</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>  <span class="keyword">const</span> plUInt32 uiNewCount = other.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#a025ba83275da5ff5008495fa3245b9b2">GetCount</a>();</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span> </div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>  <span class="keywordflow">if</span> (uiNewCount &gt; uiOldCount)</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>  {</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span>    Reserve(<span class="keyword">static_cast&lt;</span>plUInt16<span class="keyword">&gt;</span>(uiNewCount), pAllocator);</div>
<div class="foldopen" id="foldopen00054" data-start="{" data-end="}">
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#ab139b09923133b72fabb28a2fae3e4f4">   54</a></span>    T* pElements = GetElementsPtr();</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>    <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a9a74df0cde5a8c8012d7b6c48d3d8729">plMemoryUtils::Copy</a>(pElements, other.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#a6d9dbf629f70c956b654471e53baf2be">GetPtr</a>(), uiOldCount);</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>    <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a1f9d7301372dec5fdcee4015a4620c8e">plMemoryUtils::CopyConstructArray</a>(pElements + uiOldCount, other.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#a6d9dbf629f70c956b654471e53baf2be">GetPtr</a>() + uiOldCount, uiNewCount - uiOldCount);</div>
<div class="foldopen" id="foldopen00057" data-start="{" data-end="}">
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a1e8832ff03f03674a30bf140d077e7f0">   57</a></span>  }</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>  <span class="keywordflow">else</span></div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>  {</div>
<div class="foldopen" id="foldopen00060" data-start="{" data-end="}">
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a132a3c1de704395663e3ffeafeff482e">   60</a></span>    T* pElements = GetElementsPtr();</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>    <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a9a74df0cde5a8c8012d7b6c48d3d8729">plMemoryUtils::Copy</a>(pElements, other.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#a6d9dbf629f70c956b654471e53baf2be">GetPtr</a>(), uiNewCount);</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>    <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#afe524b6781f69e2fd4eceb18f2a27640">plMemoryUtils::Destruct</a>(pElements + uiNewCount, uiOldCount - uiNewCount);</div>
<div class="foldopen" id="foldopen00063" data-start="{" data-end="}">
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#ac35a0b448af6ffaad076e109d6d0ae38">   63</a></span>  }</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span> </div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>  m_uiCount = <span class="keyword">static_cast&lt;</span>plUInt16<span class="keyword">&gt;</span>(uiNewCount);</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>}</div>
<div class="foldopen" id="foldopen00067" data-start="{" data-end="}">
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a55c33bfdeaaa99c1331a8a8fe2ee9e10">   67</a></span> </div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00069" data-start="{" data-end="}">
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a429bf06f44557e9e94d93bcee6cb8631">   69</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a429bf06f44557e9e94d93bcee6cb8631">plSmallArrayBase&lt;T, Size&gt;::MoveFrom</a>(<a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>&amp;&amp; other, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>{</div>
<div class="foldopen" id="foldopen00071" data-start="{" data-end="}">
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a8cee3cefaff8bc613de722a43025ceca">   71</a></span>  Clear();</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span> </div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>  <span class="keywordflow">if</span> (other.m_uiCapacity &gt; Size)</div>
<div class="foldopen" id="foldopen00074" data-start="{" data-end="}">
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#aaadcac566b72769bc7881e1daadb63c7">   74</a></span>  {</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>    <span class="keywordflow">if</span> (m_uiCapacity &gt; Size)</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>    {</div>
<div class="foldopen" id="foldopen00077" data-start="{" data-end="}">
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#ac5e8a1f919fa2e2be0f7737874d661fc">   77</a></span>      <span class="comment">// only delete our own external storage</span></div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>      PL_DELETE_RAW_BUFFER(pAllocator, m_pElements);</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>    }</div>
<div class="foldopen" id="foldopen00080" data-start="{" data-end="}">
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a1105ef94e1b2228e67ecfe976f151e13">   80</a></span> </div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>    m_uiCapacity = other.m_uiCapacity;</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>    m_pElements = other.m_pElements;</div>
<div class="foldopen" id="foldopen00083" data-start="{" data-end="}">
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#af1f603e32fd9d8e5d01ac453c9a3f898">   83</a></span>  }</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>  <span class="keywordflow">else</span></div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>  {</div>
<div class="foldopen" id="foldopen00086" data-start="{" data-end="}">
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a70cb0225a3ab95e62a1b8b3793e3d01b">   86</a></span>    <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a5a199ddfb8a76151f443013bf3eb8310">plMemoryUtils::RelocateConstruct</a>(GetElementsPtr(), other.GetElementsPtr(), other.m_uiCount);</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>  }</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span> </div>
<div class="foldopen" id="foldopen00089" data-start="{" data-end="}">
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a8b5bb5855005cca54b378e411c72b9b4">   89</a></span>  m_uiCount = other.m_uiCount;</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>  m_uiUserData = other.m_uiUserData;</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span> </div>
<div class="foldopen" id="foldopen00092" data-start="{" data-end="}">
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a819a8168e990edb947bdfc68783067d2">   92</a></span>  <span class="comment">// reset the other array to not reference the data anymore</span></div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>  other.m_pElements = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>  other.m_uiCount = 0;</div>
<div class="foldopen" id="foldopen00095" data-start="{" data-end="}">
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#ae496c8f3895f5c72d78e17e7936ec8d3">   95</a></span>  other.m_uiCapacity = 0;</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>}</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span> </div>
<div class="foldopen" id="foldopen00098" data-start="{" data-end="}">
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#abaa3bfea372deca3ac86eaf52e1e6885">   98</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00099" data-start="{" data-end="}">
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#ab776a645d67194526ad6563cd2cad5f5">   99</a></span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;::operator</a> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const T&gt;</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span><span class="keyword"></span>{</div>
<div class="foldopen" id="foldopen00101" data-start="{" data-end="}">
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a4225e8476f7118a0a4220bbd2ea69c27">  101</a></span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const T&gt;</a>(GetElementsPtr(), m_uiCount);</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>}</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span> </div>
<div class="foldopen" id="foldopen00104" data-start="{" data-end="}">
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#ae0c4dfc056dcc0d9739e6ed397dcd583">  104</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00105" data-start="{" data-end="}">
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a1a61fca2934c395d98ed0ea70a79f3ab">  105</a></span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;::operator</a> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;T&gt;</a>()</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>{</div>
<div class="foldopen" id="foldopen00107" data-start="{" data-end="}">
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#aa61f12c4ae9a08d46f309e7f5379a748">  107</a></span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;T&gt;</a>(GetElementsPtr(), m_uiCount);</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>}</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span> </div>
<div class="foldopen" id="foldopen00110" data-start="{" data-end="}">
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a9ff3a42c1621c781821554113bf61918">  110</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00111" data-start="{" data-end="}">
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#ae10acb56265e7505bf03cc5c90e8fc09">  111</a></span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#ae10acb56265e7505bf03cc5c90e8fc09">plSmallArrayBase&lt;T, Size&gt;::operator==</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span><span class="keyword"></span>{</div>
<div class="foldopen" id="foldopen00113" data-start="{" data-end="}">
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#ac950cb444242c44a3e2f4b428deb357d">  113</a></span>  <span class="keywordflow">return</span> *<span class="keyword">this</span> == rhs.<a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#aaa15d1b49967ceb624cbc58fb65606da">GetArrayPtr</a>();</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>}</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span> </div>
<div class="foldopen" id="foldopen00116" data-start="{" data-end="}">
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a370d12f1f40604b3360a877ca6eab7af">  116</a></span><span class="preprocessor">#if PL_DISABLED(PL_USE_CPP20_OPERATORS)</span></div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#ae10acb56265e7505bf03cc5c90e8fc09">plSmallArrayBase&lt;T, Size&gt;::operator==</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const T&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="foldopen" id="foldopen00119" data-start="{" data-end="}">
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#ac416170760d69eb6792c4a9e0926449e">  119</a></span><span class="keyword"></span>{</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>  <span class="keywordflow">if</span> (m_uiCount != rhs.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#a025ba83275da5ff5008495fa3245b9b2">GetCount</a>())</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="foldopen" id="foldopen00122" data-start="{" data-end="}">
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a026c0b458e04da9e28dd3d352f2a080a">  122</a></span> </div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a4164db412280d367dd4aa34e7c4787e8">plMemoryUtils::IsEqual</a>(GetElementsPtr(), rhs.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#a6d9dbf629f70c956b654471e53baf2be">GetPtr</a>(), m_uiCount);</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>}</div>
<div class="foldopen" id="foldopen00125" data-start="{" data-end="}">
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a0e083b79e10f09bd20ac388a61bccb51">  125</a></span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span> </div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00128" data-start="{" data-end="}">
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#ab139b09923133b72fabb28a2fae3e4f4">  128</a></span>PL_ALWAYS_INLINE <span class="keyword">const</span> T&amp; <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#ab139b09923133b72fabb28a2fae3e4f4">plSmallArrayBase&lt;T, Size&gt;::operator[]</a>(<span class="keyword">const</span> plUInt32 uiIndex)<span class="keyword"> const</span></div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>  PL_ASSERT_DEBUG(uiIndex &lt; m_uiCount, <span class="stringliteral">&quot;Out of bounds access. Array has {0} elements, trying to access element at index {1}.&quot;</span>, m_uiCount, uiIndex);</div>
<div class="foldopen" id="foldopen00131" data-start="{" data-end="}">
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a9641463b1b2674974d6f5af15e6161d1">  131</a></span>  <span class="keywordflow">return</span> GetElementsPtr()[uiIndex];</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>}</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span> </div>
<div class="foldopen" id="foldopen00134" data-start="{" data-end="}">
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#ae51280e3d782e0e508d78d1569484691">  134</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00135" data-start="{" data-end="}">
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a1e8832ff03f03674a30bf140d077e7f0">  135</a></span>PL_ALWAYS_INLINE T&amp; <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#ab139b09923133b72fabb28a2fae3e4f4">plSmallArrayBase&lt;T, Size&gt;::operator[]</a>(<span class="keyword">const</span> plUInt32 uiIndex)</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>{</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>  PL_ASSERT_DEBUG(uiIndex &lt; m_uiCount, <span class="stringliteral">&quot;Out of bounds access. Array has {0} elements, trying to access element at index {1}.&quot;</span>, m_uiCount, uiIndex);</div>
<div class="foldopen" id="foldopen00138" data-start="{" data-end="}">
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#aad895a02e3503ea07ee9fddec917f5bc">  138</a></span>  <span class="keywordflow">return</span> GetElementsPtr()[uiIndex];</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>}</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span> </div>
<div class="foldopen" id="foldopen00141" data-start="{" data-end="}">
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a6718419bdff0ce164ae62177cb886de6">  141</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00142" data-start="{" data-end="}">
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a132a3c1de704395663e3ffeafeff482e">  142</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a132a3c1de704395663e3ffeafeff482e">plSmallArrayBase&lt;T, Size&gt;::SetCount</a>(plUInt16 uiCount, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>{</div>
<div class="foldopen" id="foldopen00144" data-start="{" data-end="}">
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a8d296d79cfc46a7daa2e5f63aec5594f">  144</a></span>  <span class="keyword">const</span> plUInt32 uiOldCount = m_uiCount;</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>  <span class="keyword">const</span> plUInt32 uiNewCount = uiCount;</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span> </div>
<div class="foldopen" id="foldopen00147" data-start="{" data-end="}">
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#ab18568d8c7240921d1e1144e589b58a4">  147</a></span>  <span class="keywordflow">if</span> (uiNewCount &gt; uiOldCount)</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>  {</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>    Reserve(<span class="keyword">static_cast&lt;</span>plUInt16<span class="keyword">&gt;</span>(uiNewCount), pAllocator);</div>
<div class="foldopen" id="foldopen00150" data-start="{" data-end="}">
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#aaa15d1b49967ceb624cbc58fb65606da">  150</a></span>    <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a611d82f77f3c825a296d39e2bfa3b1c6">plMemoryUtils::Construct&lt;ConstructAll&gt;</a>(GetElementsPtr() + uiOldCount, uiNewCount - uiOldCount);</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>  }</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (uiNewCount &lt; uiOldCount)</div>
<div class="foldopen" id="foldopen00153" data-start="{" data-end="}">
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a37beccc22732c11d4afbd95d66a26ff1">  153</a></span>  {</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>    <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#afe524b6781f69e2fd4eceb18f2a27640">plMemoryUtils::Destruct</a>(GetElementsPtr() + uiNewCount, uiOldCount - uiNewCount);</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>  }</div>
<div class="foldopen" id="foldopen00156" data-start="{" data-end="}">
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a827d52bbc2f8b77ce74bee1e2a960d7d">  156</a></span> </div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>  m_uiCount = uiCount;</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>}</div>
<div class="foldopen" id="foldopen00159" data-start="{" data-end="}">
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a132ead49dbf1c0f163879748c5ad388b">  159</a></span> </div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00161" data-start="{" data-end="}">
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#ac35a0b448af6ffaad076e109d6d0ae38">  161</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a132a3c1de704395663e3ffeafeff482e">plSmallArrayBase&lt;T, Size&gt;::SetCount</a>(plUInt16 uiCount, <span class="keyword">const</span> T&amp; fillValue, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="foldopen" id="foldopen00162" data-start="{" data-end="}">
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a6f8e3c811f1a36986107131c01820426">  162</a></span>{</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>  <span class="keyword">const</span> plUInt32 uiOldCount = m_uiCount;</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>  <span class="keyword">const</span> plUInt32 uiNewCount = uiCount;</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span> </div>
<div class="foldopen" id="foldopen00166" data-start="{" data-end="}">
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a6c9ccc27d42825a50c849e2d8b4d6be2">  166</a></span>  <span class="keywordflow">if</span> (uiNewCount &gt; uiOldCount)</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>  {</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>    Reserve(uiCount, pAllocator);</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>    <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a07b6ac85720d94f8568760ac12f786e5">plMemoryUtils::CopyConstruct</a>(GetElementsPtr() + uiOldCount, fillValue, uiNewCount - uiOldCount);</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>  }</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (uiNewCount &lt; uiOldCount)</div>
<div class="foldopen" id="foldopen00172" data-start="{" data-end="}">
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a918972762638a07472ad288f59d7bd7b">  172</a></span>  {</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>    <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#afe524b6781f69e2fd4eceb18f2a27640">plMemoryUtils::Destruct</a>(GetElementsPtr() + uiNewCount, uiOldCount - uiNewCount);</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>  }</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span> </div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>  m_uiCount = uiCount;</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>}</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span> </div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00180" data-start="{" data-end="}">
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a8cee3cefaff8bc613de722a43025ceca">  180</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a8cee3cefaff8bc613de722a43025ceca">plSmallArrayBase&lt;T, Size&gt;::EnsureCount</a>(plUInt16 uiCount, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>{</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>  <span class="keywordflow">if</span> (uiCount &gt; m_uiCount)</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>  {</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>    SetCount(uiCount, pAllocator);</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>  }</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>}</div>
</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span> </div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span>&gt; <span class="comment">// Second template needed so that the compiler does only instantiate it when called. Otherwise the static_assert would trigger early.</span></div>
<div class="foldopen" id="foldopen00190" data-start="{" data-end="}">
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a55c33bfdeaaa99c1331a8a8fe2ee9e10">  190</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a55c33bfdeaaa99c1331a8a8fe2ee9e10">plSmallArrayBase&lt;T, Size&gt;::SetCountUninitialized</a>(plUInt16 uiCount, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>{</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>  <span class="keyword">static_assert</span>(<a class="code hl_struct" href="../../d5/d6a/structpl_is_pod_type.htm">plIsPodType&lt;T&gt;::value</a> == plTypeIsPod::value, <span class="stringliteral">&quot;SetCountUninitialized is only supported for POD types.&quot;</span>);</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>  <span class="keyword">const</span> plUInt16 uiOldCount = m_uiCount;</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>  <span class="keyword">const</span> plUInt16 uiNewCount = uiCount;</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span> </div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>  <span class="keywordflow">if</span> (uiNewCount &gt; uiOldCount)</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>  {</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>    Reserve(uiNewCount, pAllocator);</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>    <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a611d82f77f3c825a296d39e2bfa3b1c6">plMemoryUtils::Construct&lt;SkipTrivialTypes&gt;</a>(GetElementsPtr() + uiOldCount, uiNewCount - uiOldCount);</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>  }</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (uiNewCount &lt; uiOldCount)</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>  {</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>    <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#afe524b6781f69e2fd4eceb18f2a27640">plMemoryUtils::Destruct</a>(GetElementsPtr() + uiNewCount, uiOldCount - uiNewCount);</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>  }</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span> </div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>  m_uiCount = uiCount;</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>}</div>
</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span> </div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00210" data-start="{" data-end="}">
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#aaadcac566b72769bc7881e1daadb63c7">  210</a></span>PL_ALWAYS_INLINE plUInt32 <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#aaadcac566b72769bc7881e1daadb63c7">plSmallArrayBase&lt;T, Size&gt;::GetCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>  <span class="keywordflow">return</span> m_uiCount;</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>}</div>
</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span> </div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00216" data-start="{" data-end="}">
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#ac5e8a1f919fa2e2be0f7737874d661fc">  216</a></span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#ac5e8a1f919fa2e2be0f7737874d661fc">plSmallArrayBase&lt;T, Size&gt;::IsEmpty</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>  <span class="keywordflow">return</span> m_uiCount == 0;</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>}</div>
</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span> </div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00222" data-start="{" data-end="}">
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a1105ef94e1b2228e67ecfe976f151e13">  222</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a1105ef94e1b2228e67ecfe976f151e13">plSmallArrayBase&lt;T, Size&gt;::Clear</a>()</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>{</div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span>  <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#afe524b6781f69e2fd4eceb18f2a27640">plMemoryUtils::Destruct</a>(GetElementsPtr(), m_uiCount);</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>  m_uiCount = 0;</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>}</div>
</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span> </div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00229" data-start="{" data-end="}">
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#af1f603e32fd9d8e5d01ac453c9a3f898">  229</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#af1f603e32fd9d8e5d01ac453c9a3f898">plSmallArrayBase&lt;T, Size&gt;::Contains</a>(<span class="keyword">const</span> T&amp; value)<span class="keyword"> const</span></div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>  <span class="keywordflow">return</span> IndexOf(value) != plInvalidIndex;</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>}</div>
</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span> </div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00235" data-start="{" data-end="}">
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a70cb0225a3ab95e62a1b8b3793e3d01b">  235</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a70cb0225a3ab95e62a1b8b3793e3d01b">plSmallArrayBase&lt;T, Size&gt;::Insert</a>(<span class="keyword">const</span> T&amp; value, plUInt32 uiIndex, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>{</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>  PL_ASSERT_DEV(uiIndex &lt;= m_uiCount, <span class="stringliteral">&quot;Invalid index. Array has {0} elements, trying to insert element at index {1}.&quot;</span>, m_uiCount, uiIndex);</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span> </div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>  Reserve(m_uiCount + 1, pAllocator);</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span> </div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>  <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a896238870c5f0caca5ab1464920698b6">plMemoryUtils::Prepend</a>(GetElementsPtr() + uiIndex, value, m_uiCount - uiIndex);</div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>  m_uiCount++;</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>}</div>
</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span> </div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00246" data-start="{" data-end="}">
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a8b5bb5855005cca54b378e411c72b9b4">  246</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a70cb0225a3ab95e62a1b8b3793e3d01b">plSmallArrayBase&lt;T, Size&gt;::Insert</a>(T&amp;&amp; value, plUInt32 uiIndex, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>{</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>  PL_ASSERT_DEV(uiIndex &lt;= m_uiCount, <span class="stringliteral">&quot;Invalid index. Array has {0} elements, trying to insert element at index {1}.&quot;</span>, m_uiCount, uiIndex);</div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span> </div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>  Reserve(m_uiCount + 1, pAllocator);</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span> </div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>  <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a896238870c5f0caca5ab1464920698b6">plMemoryUtils::Prepend</a>(GetElementsPtr() + uiIndex, std::move(value), m_uiCount - uiIndex);</div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span>  m_uiCount++;</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span>}</div>
</div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span> </div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00257" data-start="{" data-end="}">
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a819a8168e990edb947bdfc68783067d2">  257</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a819a8168e990edb947bdfc68783067d2">plSmallArrayBase&lt;T, Size&gt;::RemoveAndCopy</a>(<span class="keyword">const</span> T&amp; value)</div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span>{</div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span>  plUInt32 uiIndex = IndexOf(value);</div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span> </div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span>  <span class="keywordflow">if</span> (uiIndex == plInvalidIndex)</div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span> </div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>  RemoveAtAndCopy(uiIndex);</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span>  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span>}</div>
</div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span> </div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00269" data-start="{" data-end="}">
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#ae496c8f3895f5c72d78e17e7936ec8d3">  269</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#ae496c8f3895f5c72d78e17e7936ec8d3">plSmallArrayBase&lt;T, Size&gt;::RemoveAndSwap</a>(<span class="keyword">const</span> T&amp; value)</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span>{</div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span>  plUInt32 uiIndex = IndexOf(value);</div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span> </div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span>  <span class="keywordflow">if</span> (uiIndex == plInvalidIndex)</div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span> </div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span>  RemoveAtAndSwap(uiIndex);</div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span>  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span>}</div>
</div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span> </div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00281" data-start="{" data-end="}">
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#abaa3bfea372deca3ac86eaf52e1e6885">  281</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#abaa3bfea372deca3ac86eaf52e1e6885">plSmallArrayBase&lt;T, Size&gt;::RemoveAtAndCopy</a>(plUInt32 uiIndex, plUInt16 uiNumElements <span class="comment">/*= 1*/</span>)</div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span>{</div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span>  PL_ASSERT_DEV(uiIndex + uiNumElements &lt;= m_uiCount, <span class="stringliteral">&quot;Out of bounds access. Array has {0} elements, trying to remove element at index {1}.&quot;</span>, m_uiCount, uiIndex + uiNumElements - 1);</div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span> </div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span>  T* pElements = GetElementsPtr();</div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span> </div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span>  m_uiCount -= uiNumElements;</div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span>  <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#ad644c6cd5636810d5218474fa2b478c5">plMemoryUtils::RelocateOverlapped</a>(pElements + uiIndex, pElements + uiIndex + uiNumElements, m_uiCount - uiIndex);</div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span>}</div>
</div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span> </div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00292" data-start="{" data-end="}">
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a4225e8476f7118a0a4220bbd2ea69c27">  292</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a4225e8476f7118a0a4220bbd2ea69c27">plSmallArrayBase&lt;T, Size&gt;::RemoveAtAndSwap</a>(plUInt32 uiIndex, plUInt16 uiNumElements <span class="comment">/*= 1*/</span>)</div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span>{</div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span>  PL_ASSERT_DEV(uiIndex + uiNumElements &lt;= m_uiCount, <span class="stringliteral">&quot;Out of bounds access. Array has {0} elements, trying to remove element at index {1}.&quot;</span>, m_uiCount, uiIndex + uiNumElements - 1);</div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span> </div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span>  T* pElements = GetElementsPtr();</div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span> </div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span>  <span class="keywordflow">for</span> (plUInt32 i = 0; i &lt; uiNumElements; ++i)</div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span>  {</div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span>    m_uiCount--;</div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span> </div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span>    <span class="keywordflow">if</span> (m_uiCount != uiIndex)</div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span>    {</div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span>      pElements[uiIndex] = std::move(pElements[m_uiCount]);</div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span>    }</div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span>    <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#afe524b6781f69e2fd4eceb18f2a27640">plMemoryUtils::Destruct</a>(pElements + m_uiCount, 1);</div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span>    ++uiIndex;</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span>  }</div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span>}</div>
</div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span> </div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00312" data-start="{" data-end="}">
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#ae0c4dfc056dcc0d9739e6ed397dcd583">  312</a></span>plUInt32 <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#ae0c4dfc056dcc0d9739e6ed397dcd583">plSmallArrayBase&lt;T, Size&gt;::IndexOf</a>(<span class="keyword">const</span> T&amp; value, plUInt32 uiStartIndex)<span class="keyword"> const</span></div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span>  <span class="keyword">const</span> T* pElements = GetElementsPtr();</div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span> </div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span>  <span class="keywordflow">for</span> (plUInt32 i = uiStartIndex; i &lt; m_uiCount; i++)</div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span>  {</div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>    <span class="keywordflow">if</span> (<a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a4164db412280d367dd4aa34e7c4787e8">plMemoryUtils::IsEqual</a>(pElements + i, &amp;value))</div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span>      <span class="keywordflow">return</span> i;</div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span>  }</div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span>  <span class="keywordflow">return</span> plInvalidIndex;</div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span>}</div>
</div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span> </div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00325" data-start="{" data-end="}">
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#aa61f12c4ae9a08d46f309e7f5379a748">  325</a></span>plUInt32 <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#aa61f12c4ae9a08d46f309e7f5379a748">plSmallArrayBase&lt;T, Size&gt;::LastIndexOf</a>(<span class="keyword">const</span> T&amp; value, plUInt32 uiStartIndex)<span class="keyword"> const</span></div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span>  <span class="keyword">const</span> T* pElements = GetElementsPtr();</div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span> </div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span>  <span class="keywordflow">for</span> (plUInt32 i = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a314b24989122e22968ae0a11cc872e28">plMath::Min&lt;plUInt32&gt;</a>(uiStartIndex, m_uiCount); i-- &gt; 0;)</div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span>  {</div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span>    <span class="keywordflow">if</span> (<a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a4164db412280d367dd4aa34e7c4787e8">plMemoryUtils::IsEqual</a>(pElements + i, &amp;value))</div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span>      <span class="keywordflow">return</span> i;</div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span>  }</div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span>  <span class="keywordflow">return</span> plInvalidIndex;</div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span>}</div>
</div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span> </div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00338" data-start="{" data-end="}">
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a9ff3a42c1621c781821554113bf61918">  338</a></span>T&amp; <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a9ff3a42c1621c781821554113bf61918">plSmallArrayBase&lt;T, Size&gt;::ExpandAndGetRef</a>(<a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno">  339</span>{</div>
<div class="line"><a id="l00340" name="l00340"></a><span class="lineno">  340</span>  Reserve(m_uiCount + 1, pAllocator);</div>
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno">  341</span> </div>
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno">  342</span>  T* pElements = GetElementsPtr();</div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span> </div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span>  <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a611d82f77f3c825a296d39e2bfa3b1c6">plMemoryUtils::Construct&lt;SkipTrivialTypes&gt;</a>(pElements + m_uiCount, 1);</div>
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno">  345</span> </div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span>  T&amp; ReturnRef = *(pElements + m_uiCount);</div>
<div class="line"><a id="l00347" name="l00347"></a><span class="lineno">  347</span> </div>
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno">  348</span>  m_uiCount++;</div>
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno">  349</span> </div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span>  <span class="keywordflow">return</span> ReturnRef;</div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span>}</div>
</div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span> </div>
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno">  353</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00354" data-start="{" data-end="}">
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#ac950cb444242c44a3e2f4b428deb357d">  354</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#ac950cb444242c44a3e2f4b428deb357d">plSmallArrayBase&lt;T, Size&gt;::PushBack</a>(<span class="keyword">const</span> T&amp; value, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno">  355</span>{</div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span>  Reserve(m_uiCount + 1, pAllocator);</div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span> </div>
<div class="line"><a id="l00358" name="l00358"></a><span class="lineno">  358</span>  <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a07b6ac85720d94f8568760ac12f786e5">plMemoryUtils::CopyConstruct</a>(GetElementsPtr() + m_uiCount, value, 1);</div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span>  m_uiCount++;</div>
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno">  360</span>}</div>
</div>
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno">  361</span> </div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno">  362</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00363" data-start="{" data-end="}">
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a370d12f1f40604b3360a877ca6eab7af">  363</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#ac950cb444242c44a3e2f4b428deb357d">plSmallArrayBase&lt;T, Size&gt;::PushBack</a>(T&amp;&amp; value, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span>{</div>
<div class="line"><a id="l00365" name="l00365"></a><span class="lineno">  365</span>  Reserve(m_uiCount + 1, pAllocator);</div>
<div class="line"><a id="l00366" name="l00366"></a><span class="lineno">  366</span> </div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span>  <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#abec7a10f06a461b6d32c183b6347cc80">plMemoryUtils::MoveConstruct&lt;T&gt;</a>(GetElementsPtr() + m_uiCount, std::move(value));</div>
<div class="line"><a id="l00368" name="l00368"></a><span class="lineno">  368</span>  m_uiCount++;</div>
<div class="line"><a id="l00369" name="l00369"></a><span class="lineno">  369</span>}</div>
</div>
<div class="line"><a id="l00370" name="l00370"></a><span class="lineno">  370</span> </div>
<div class="line"><a id="l00371" name="l00371"></a><span class="lineno">  371</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00372" data-start="{" data-end="}">
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#ac416170760d69eb6792c4a9e0926449e">  372</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#ac416170760d69eb6792c4a9e0926449e">plSmallArrayBase&lt;T, Size&gt;::PushBackUnchecked</a>(<span class="keyword">const</span> T&amp; value)</div>
<div class="line"><a id="l00373" name="l00373"></a><span class="lineno">  373</span>{</div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno">  374</span>  PL_ASSERT_DEBUG(m_uiCount &lt; m_uiCapacity, <span class="stringliteral">&quot;Appending unchecked to array with insufficient capacity.&quot;</span>);</div>
<div class="line"><a id="l00375" name="l00375"></a><span class="lineno">  375</span> </div>
<div class="line"><a id="l00376" name="l00376"></a><span class="lineno">  376</span>  <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a07b6ac85720d94f8568760ac12f786e5">plMemoryUtils::CopyConstruct</a>(GetElementsPtr() + m_uiCount, value, 1);</div>
<div class="line"><a id="l00377" name="l00377"></a><span class="lineno">  377</span>  m_uiCount++;</div>
<div class="line"><a id="l00378" name="l00378"></a><span class="lineno">  378</span>}</div>
</div>
<div class="line"><a id="l00379" name="l00379"></a><span class="lineno">  379</span> </div>
<div class="line"><a id="l00380" name="l00380"></a><span class="lineno">  380</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00381" data-start="{" data-end="}">
<div class="line"><a id="l00381" name="l00381"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a026c0b458e04da9e28dd3d352f2a080a">  381</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#ac416170760d69eb6792c4a9e0926449e">plSmallArrayBase&lt;T, Size&gt;::PushBackUnchecked</a>(T&amp;&amp; value)</div>
<div class="line"><a id="l00382" name="l00382"></a><span class="lineno">  382</span>{</div>
<div class="line"><a id="l00383" name="l00383"></a><span class="lineno">  383</span>  PL_ASSERT_DEBUG(m_uiCount &lt; m_uiCapacity, <span class="stringliteral">&quot;Appending unchecked to array with insufficient capacity.&quot;</span>);</div>
<div class="line"><a id="l00384" name="l00384"></a><span class="lineno">  384</span> </div>
<div class="line"><a id="l00385" name="l00385"></a><span class="lineno">  385</span>  <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#abec7a10f06a461b6d32c183b6347cc80">plMemoryUtils::MoveConstruct&lt;T&gt;</a>(GetElementsPtr() + m_uiCount, std::move(value));</div>
<div class="line"><a id="l00386" name="l00386"></a><span class="lineno">  386</span>  m_uiCount++;</div>
<div class="line"><a id="l00387" name="l00387"></a><span class="lineno">  387</span>}</div>
</div>
<div class="line"><a id="l00388" name="l00388"></a><span class="lineno">  388</span> </div>
<div class="line"><a id="l00389" name="l00389"></a><span class="lineno">  389</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00390" data-start="{" data-end="}">
<div class="line"><a id="l00390" name="l00390"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a0e083b79e10f09bd20ac388a61bccb51">  390</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a0e083b79e10f09bd20ac388a61bccb51">plSmallArrayBase&lt;T, Size&gt;::PushBackRange</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const T&gt;</a>&amp; range, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00391" name="l00391"></a><span class="lineno">  391</span>{</div>
<div class="line"><a id="l00392" name="l00392"></a><span class="lineno">  392</span>  <span class="keyword">const</span> plUInt32 uiRangeCount = range.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#a025ba83275da5ff5008495fa3245b9b2">GetCount</a>();</div>
<div class="line"><a id="l00393" name="l00393"></a><span class="lineno">  393</span>  Reserve(m_uiCount + uiRangeCount, pAllocator);</div>
<div class="line"><a id="l00394" name="l00394"></a><span class="lineno">  394</span> </div>
<div class="line"><a id="l00395" name="l00395"></a><span class="lineno">  395</span>  <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a1f9d7301372dec5fdcee4015a4620c8e">plMemoryUtils::CopyConstructArray</a>(GetElementsPtr() + m_uiCount, range.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#a6d9dbf629f70c956b654471e53baf2be">GetPtr</a>(), uiRangeCount);</div>
<div class="line"><a id="l00396" name="l00396"></a><span class="lineno">  396</span>  m_uiCount += uiRangeCount;</div>
<div class="line"><a id="l00397" name="l00397"></a><span class="lineno">  397</span>}</div>
</div>
<div class="line"><a id="l00398" name="l00398"></a><span class="lineno">  398</span> </div>
<div class="line"><a id="l00399" name="l00399"></a><span class="lineno">  399</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00400" data-start="{" data-end="}">
<div class="line"><a id="l00400" name="l00400"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a014b7fc2ba69771cf680857045655a71">  400</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a014b7fc2ba69771cf680857045655a71">plSmallArrayBase&lt;T, Size&gt;::PopBack</a>(plUInt32 uiCountToRemove <span class="comment">/* = 1 */</span>)</div>
<div class="line"><a id="l00401" name="l00401"></a><span class="lineno">  401</span>{</div>
<div class="line"><a id="l00402" name="l00402"></a><span class="lineno">  402</span>  PL_ASSERT_DEBUG(m_uiCount &gt;= uiCountToRemove, <span class="stringliteral">&quot;Out of bounds access. Array has {0} elements, trying to pop {1} elements.&quot;</span>, m_uiCount, uiCountToRemove);</div>
<div class="line"><a id="l00403" name="l00403"></a><span class="lineno">  403</span> </div>
<div class="line"><a id="l00404" name="l00404"></a><span class="lineno">  404</span>  m_uiCount -= uiCountToRemove;</div>
<div class="line"><a id="l00405" name="l00405"></a><span class="lineno">  405</span>  <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#afe524b6781f69e2fd4eceb18f2a27640">plMemoryUtils::Destruct</a>(GetElementsPtr() + m_uiCount, uiCountToRemove);</div>
<div class="line"><a id="l00406" name="l00406"></a><span class="lineno">  406</span>}</div>
</div>
<div class="line"><a id="l00407" name="l00407"></a><span class="lineno">  407</span> </div>
<div class="line"><a id="l00408" name="l00408"></a><span class="lineno">  408</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00409" data-start="{" data-end="}">
<div class="line"><a id="l00409" name="l00409"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a9641463b1b2674974d6f5af15e6161d1">  409</a></span>PL_FORCE_INLINE T&amp; <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a9641463b1b2674974d6f5af15e6161d1">plSmallArrayBase&lt;T, Size&gt;::PeekBack</a>()</div>
<div class="line"><a id="l00410" name="l00410"></a><span class="lineno">  410</span>{</div>
<div class="line"><a id="l00411" name="l00411"></a><span class="lineno">  411</span>  PL_ASSERT_DEBUG(m_uiCount &gt; 0, <span class="stringliteral">&quot;Out of bounds access. Trying to peek into an empty array.&quot;</span>);</div>
<div class="line"><a id="l00412" name="l00412"></a><span class="lineno">  412</span>  <span class="keywordflow">return</span> GetElementsPtr()[m_uiCount - 1];</div>
<div class="line"><a id="l00413" name="l00413"></a><span class="lineno">  413</span>}</div>
</div>
<div class="line"><a id="l00414" name="l00414"></a><span class="lineno">  414</span> </div>
<div class="line"><a id="l00415" name="l00415"></a><span class="lineno">  415</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00416" data-start="{" data-end="}">
<div class="line"><a id="l00416" name="l00416"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#ae51280e3d782e0e508d78d1569484691">  416</a></span>PL_FORCE_INLINE <span class="keyword">const</span> T&amp; <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a9641463b1b2674974d6f5af15e6161d1">plSmallArrayBase&lt;T, Size&gt;::PeekBack</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00417" name="l00417"></a><span class="lineno">  417</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00418" name="l00418"></a><span class="lineno">  418</span>  PL_ASSERT_DEBUG(m_uiCount &gt; 0, <span class="stringliteral">&quot;Out of bounds access. Trying to peek into an empty array.&quot;</span>);</div>
<div class="line"><a id="l00419" name="l00419"></a><span class="lineno">  419</span>  <span class="keywordflow">return</span> GetElementsPtr()[m_uiCount - 1];</div>
<div class="line"><a id="l00420" name="l00420"></a><span class="lineno">  420</span>}</div>
</div>
<div class="line"><a id="l00421" name="l00421"></a><span class="lineno">  421</span> </div>
<div class="line"><a id="l00422" name="l00422"></a><span class="lineno">  422</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00423" name="l00423"></a><span class="lineno">  423</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Comparer&gt;</div>
<div class="foldopen" id="foldopen00424" data-start="{" data-end="}">
<div class="line"><a id="l00424" name="l00424"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#aad895a02e3503ea07ee9fddec917f5bc">  424</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a6718419bdff0ce164ae62177cb886de6">plSmallArrayBase&lt;T, Size&gt;::Sort</a>(<span class="keyword">const</span> Comparer&amp; comparer)</div>
<div class="line"><a id="l00425" name="l00425"></a><span class="lineno">  425</span>{</div>
<div class="line"><a id="l00426" name="l00426"></a><span class="lineno">  426</span>  <span class="keywordflow">if</span> (m_uiCount &gt; 1)</div>
<div class="line"><a id="l00427" name="l00427"></a><span class="lineno">  427</span>  {</div>
<div class="line"><a id="l00428" name="l00428"></a><span class="lineno">  428</span>    <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;T&gt;</a> ar = GetArrayPtr();</div>
<div class="line"><a id="l00429" name="l00429"></a><span class="lineno">  429</span>    <a class="code hl_function" href="../../da/d2c/classpl_sorting.htm#a54c184164bc333e6b16dbee44a115c2b">plSorting::QuickSort</a>(ar, comparer);</div>
<div class="line"><a id="l00430" name="l00430"></a><span class="lineno">  430</span>  }</div>
<div class="line"><a id="l00431" name="l00431"></a><span class="lineno">  431</span>}</div>
</div>
<div class="line"><a id="l00432" name="l00432"></a><span class="lineno">  432</span> </div>
<div class="line"><a id="l00433" name="l00433"></a><span class="lineno">  433</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00434" data-start="{" data-end="}">
<div class="line"><a id="l00434" name="l00434"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a6718419bdff0ce164ae62177cb886de6">  434</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a6718419bdff0ce164ae62177cb886de6">plSmallArrayBase&lt;T, Size&gt;::Sort</a>()</div>
<div class="line"><a id="l00435" name="l00435"></a><span class="lineno">  435</span>{</div>
<div class="line"><a id="l00436" name="l00436"></a><span class="lineno">  436</span>  <span class="keywordflow">if</span> (m_uiCount &gt; 1)</div>
<div class="line"><a id="l00437" name="l00437"></a><span class="lineno">  437</span>  {</div>
<div class="line"><a id="l00438" name="l00438"></a><span class="lineno">  438</span>    <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;T&gt;</a> ar = GetArrayPtr();</div>
<div class="line"><a id="l00439" name="l00439"></a><span class="lineno">  439</span>    <a class="code hl_function" href="../../da/d2c/classpl_sorting.htm#a54c184164bc333e6b16dbee44a115c2b">plSorting::QuickSort</a>(ar, <a class="code hl_struct" href="../../df/dc9/structpl_compare_helper.htm">plCompareHelper&lt;T&gt;</a>());</div>
<div class="line"><a id="l00440" name="l00440"></a><span class="lineno">  440</span>  }</div>
<div class="line"><a id="l00441" name="l00441"></a><span class="lineno">  441</span>}</div>
</div>
<div class="line"><a id="l00442" name="l00442"></a><span class="lineno">  442</span> </div>
<div class="line"><a id="l00443" name="l00443"></a><span class="lineno">  443</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00444" data-start="{" data-end="}">
<div class="line"><a id="l00444" name="l00444"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a8d296d79cfc46a7daa2e5f63aec5594f">  444</a></span>PL_ALWAYS_INLINE T* <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a8d296d79cfc46a7daa2e5f63aec5594f">plSmallArrayBase&lt;T, Size&gt;::GetData</a>()</div>
<div class="line"><a id="l00445" name="l00445"></a><span class="lineno">  445</span>{</div>
<div class="line"><a id="l00446" name="l00446"></a><span class="lineno">  446</span>  <span class="keywordflow">if</span> (IsEmpty())</div>
<div class="line"><a id="l00447" name="l00447"></a><span class="lineno">  447</span>    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00448" name="l00448"></a><span class="lineno">  448</span> </div>
<div class="line"><a id="l00449" name="l00449"></a><span class="lineno">  449</span>  <span class="keywordflow">return</span> GetElementsPtr();</div>
<div class="line"><a id="l00450" name="l00450"></a><span class="lineno">  450</span>}</div>
</div>
<div class="line"><a id="l00451" name="l00451"></a><span class="lineno">  451</span> </div>
<div class="line"><a id="l00452" name="l00452"></a><span class="lineno">  452</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00453" data-start="{" data-end="}">
<div class="line"><a id="l00453" name="l00453"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#ab18568d8c7240921d1e1144e589b58a4">  453</a></span>PL_ALWAYS_INLINE <span class="keyword">const</span> T* <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a8d296d79cfc46a7daa2e5f63aec5594f">plSmallArrayBase&lt;T, Size&gt;::GetData</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00454" name="l00454"></a><span class="lineno">  454</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00455" name="l00455"></a><span class="lineno">  455</span>  <span class="keywordflow">if</span> (IsEmpty())</div>
<div class="line"><a id="l00456" name="l00456"></a><span class="lineno">  456</span>    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00457" name="l00457"></a><span class="lineno">  457</span> </div>
<div class="line"><a id="l00458" name="l00458"></a><span class="lineno">  458</span>  <span class="keywordflow">return</span> GetElementsPtr();</div>
<div class="line"><a id="l00459" name="l00459"></a><span class="lineno">  459</span>}</div>
</div>
<div class="line"><a id="l00460" name="l00460"></a><span class="lineno">  460</span> </div>
<div class="line"><a id="l00461" name="l00461"></a><span class="lineno">  461</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00462" data-start="{" data-end="}">
<div class="line"><a id="l00462" name="l00462"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#aaa15d1b49967ceb624cbc58fb65606da">  462</a></span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;T&gt;</a> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#aaa15d1b49967ceb624cbc58fb65606da">plSmallArrayBase&lt;T, Size&gt;::GetArrayPtr</a>()</div>
<div class="line"><a id="l00463" name="l00463"></a><span class="lineno">  463</span>{</div>
<div class="line"><a id="l00464" name="l00464"></a><span class="lineno">  464</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;T&gt;</a>(GetData(), GetCount());</div>
<div class="line"><a id="l00465" name="l00465"></a><span class="lineno">  465</span>}</div>
</div>
<div class="line"><a id="l00466" name="l00466"></a><span class="lineno">  466</span> </div>
<div class="line"><a id="l00467" name="l00467"></a><span class="lineno">  467</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00468" data-start="{" data-end="}">
<div class="line"><a id="l00468" name="l00468"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a37beccc22732c11d4afbd95d66a26ff1">  468</a></span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const T&gt;</a> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#aaa15d1b49967ceb624cbc58fb65606da">plSmallArrayBase&lt;T, Size&gt;::GetArrayPtr</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00469" name="l00469"></a><span class="lineno">  469</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00470" name="l00470"></a><span class="lineno">  470</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const T&gt;</a>(GetData(), GetCount());</div>
<div class="line"><a id="l00471" name="l00471"></a><span class="lineno">  471</span>}</div>
</div>
<div class="line"><a id="l00472" name="l00472"></a><span class="lineno">  472</span> </div>
<div class="line"><a id="l00473" name="l00473"></a><span class="lineno">  473</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00474" data-start="{" data-end="}">
<div class="line"><a id="l00474" name="l00474"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a827d52bbc2f8b77ce74bee1e2a960d7d">  474</a></span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;typename plArrayPtr&lt;T&gt;::ByteType</a>&gt; <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a827d52bbc2f8b77ce74bee1e2a960d7d">plSmallArrayBase&lt;T, Size&gt;::GetByteArrayPtr</a>()</div>
<div class="line"><a id="l00475" name="l00475"></a><span class="lineno">  475</span>{</div>
<div class="line"><a id="l00476" name="l00476"></a><span class="lineno">  476</span>  <span class="keywordflow">return</span> GetArrayPtr().<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#aa3c9487595e390c71c7a7e2f533b0d3e">ToByteArray</a>();</div>
<div class="line"><a id="l00477" name="l00477"></a><span class="lineno">  477</span>}</div>
</div>
<div class="line"><a id="l00478" name="l00478"></a><span class="lineno">  478</span> </div>
<div class="line"><a id="l00479" name="l00479"></a><span class="lineno">  479</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00480" data-start="{" data-end="}">
<div class="line"><a id="l00480" name="l00480"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a132ead49dbf1c0f163879748c5ad388b">  480</a></span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;typename plArrayPtr&lt;const T&gt;::ByteType</a>&gt; <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a827d52bbc2f8b77ce74bee1e2a960d7d">plSmallArrayBase&lt;T, Size&gt;::GetByteArrayPtr</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00481" name="l00481"></a><span class="lineno">  481</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00482" name="l00482"></a><span class="lineno">  482</span>  <span class="keywordflow">return</span> GetArrayPtr().<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#aa3c9487595e390c71c7a7e2f533b0d3e">ToByteArray</a>();</div>
<div class="line"><a id="l00483" name="l00483"></a><span class="lineno">  483</span>}</div>
</div>
<div class="line"><a id="l00484" name="l00484"></a><span class="lineno">  484</span> </div>
<div class="line"><a id="l00485" name="l00485"></a><span class="lineno">  485</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00486" data-start="{" data-end="}">
<div class="line"><a id="l00486" name="l00486"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a6f8e3c811f1a36986107131c01820426">  486</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a6f8e3c811f1a36986107131c01820426">plSmallArrayBase&lt;T, Size&gt;::Reserve</a>(plUInt16 uiCapacity, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00487" name="l00487"></a><span class="lineno">  487</span>{</div>
<div class="line"><a id="l00488" name="l00488"></a><span class="lineno">  488</span>  <span class="keywordflow">if</span> (m_uiCapacity &gt;= uiCapacity)</div>
<div class="line"><a id="l00489" name="l00489"></a><span class="lineno">  489</span>    <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00490" name="l00490"></a><span class="lineno">  490</span> </div>
<div class="line"><a id="l00491" name="l00491"></a><span class="lineno">  491</span>  <span class="keyword">const</span> plUInt32 uiCurCap = <span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(m_uiCapacity);</div>
<div class="line"><a id="l00492" name="l00492"></a><span class="lineno">  492</span>  plUInt32 uiNewCapacity = uiCurCap + (uiCurCap / 2);</div>
<div class="line"><a id="l00493" name="l00493"></a><span class="lineno">  493</span> </div>
<div class="line"><a id="l00494" name="l00494"></a><span class="lineno">  494</span>  uiNewCapacity = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">plMath::Max&lt;plUInt32&gt;</a>(uiNewCapacity, uiCapacity);</div>
<div class="line"><a id="l00495" name="l00495"></a><span class="lineno">  495</span>  uiNewCapacity = <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#aebac0ea8dc364f79d0ed4cf8c65ab0de">plMemoryUtils::AlignSize&lt;plUInt32&gt;</a>(uiNewCapacity, CAPACITY_ALIGNMENT);</div>
<div class="line"><a id="l00496" name="l00496"></a><span class="lineno">  496</span>  uiNewCapacity = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a314b24989122e22968ae0a11cc872e28">plMath::Min&lt;plUInt32&gt;</a>(uiNewCapacity, 0xFFFFu);</div>
<div class="line"><a id="l00497" name="l00497"></a><span class="lineno">  497</span> </div>
<div class="line"><a id="l00498" name="l00498"></a><span class="lineno">  498</span>  SetCapacity(<span class="keyword">static_cast&lt;</span>plUInt16<span class="keyword">&gt;</span>(uiNewCapacity), pAllocator);</div>
<div class="line"><a id="l00499" name="l00499"></a><span class="lineno">  499</span>}</div>
</div>
<div class="line"><a id="l00500" name="l00500"></a><span class="lineno">  500</span> </div>
<div class="line"><a id="l00501" name="l00501"></a><span class="lineno">  501</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00502" data-start="{" data-end="}">
<div class="line"><a id="l00502" name="l00502"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a6c9ccc27d42825a50c849e2d8b4d6be2">  502</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a6c9ccc27d42825a50c849e2d8b4d6be2">plSmallArrayBase&lt;T, Size&gt;::Compact</a>(<a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00503" name="l00503"></a><span class="lineno">  503</span>{</div>
<div class="line"><a id="l00504" name="l00504"></a><span class="lineno">  504</span>  <span class="keywordflow">if</span> (IsEmpty())</div>
<div class="line"><a id="l00505" name="l00505"></a><span class="lineno">  505</span>  {</div>
<div class="line"><a id="l00506" name="l00506"></a><span class="lineno">  506</span>    <span class="keywordflow">if</span> (m_uiCapacity &gt; Size)</div>
<div class="line"><a id="l00507" name="l00507"></a><span class="lineno">  507</span>    {</div>
<div class="line"><a id="l00508" name="l00508"></a><span class="lineno">  508</span>      <span class="comment">// completely deallocate all data, if the array is empty.</span></div>
<div class="line"><a id="l00509" name="l00509"></a><span class="lineno">  509</span>      PL_DELETE_RAW_BUFFER(pAllocator, m_pElements);</div>
<div class="line"><a id="l00510" name="l00510"></a><span class="lineno">  510</span>    }</div>
<div class="line"><a id="l00511" name="l00511"></a><span class="lineno">  511</span> </div>
<div class="line"><a id="l00512" name="l00512"></a><span class="lineno">  512</span>    m_uiCapacity = Size;</div>
<div class="line"><a id="l00513" name="l00513"></a><span class="lineno">  513</span>    m_pElements = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00514" name="l00514"></a><span class="lineno">  514</span>  }</div>
<div class="line"><a id="l00515" name="l00515"></a><span class="lineno">  515</span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (m_uiCapacity &gt; Size)</div>
<div class="line"><a id="l00516" name="l00516"></a><span class="lineno">  516</span>  {</div>
<div class="line"><a id="l00517" name="l00517"></a><span class="lineno">  517</span>    plUInt32 uiNewCapacity = <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#aebac0ea8dc364f79d0ed4cf8c65ab0de">plMemoryUtils::AlignSize&lt;plUInt32&gt;</a>(m_uiCount, CAPACITY_ALIGNMENT);</div>
<div class="line"><a id="l00518" name="l00518"></a><span class="lineno">  518</span>    uiNewCapacity = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a314b24989122e22968ae0a11cc872e28">plMath::Min&lt;plUInt32&gt;</a>(uiNewCapacity, 0xFFFFu);</div>
<div class="line"><a id="l00519" name="l00519"></a><span class="lineno">  519</span> </div>
<div class="line"><a id="l00520" name="l00520"></a><span class="lineno">  520</span>    <span class="keywordflow">if</span> (m_uiCapacity != uiNewCapacity)</div>
<div class="line"><a id="l00521" name="l00521"></a><span class="lineno">  521</span>      SetCapacity(<span class="keyword">static_cast&lt;</span>plUInt16<span class="keyword">&gt;</span>(uiNewCapacity), pAllocator);</div>
<div class="line"><a id="l00522" name="l00522"></a><span class="lineno">  522</span>  }</div>
<div class="line"><a id="l00523" name="l00523"></a><span class="lineno">  523</span>}</div>
</div>
<div class="line"><a id="l00524" name="l00524"></a><span class="lineno">  524</span> </div>
<div class="line"><a id="l00525" name="l00525"></a><span class="lineno">  525</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00526" data-start="{" data-end="}">
<div class="line"><a id="l00526" name="l00526"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#a918972762638a07472ad288f59d7bd7b">  526</a></span>PL_ALWAYS_INLINE plUInt64 <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a918972762638a07472ad288f59d7bd7b">plSmallArrayBase&lt;T, Size&gt;::GetHeapMemoryUsage</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00527" name="l00527"></a><span class="lineno">  527</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00528" name="l00528"></a><span class="lineno">  528</span>  <span class="keywordflow">return</span> m_uiCapacity &lt;= Size ? 0 : m_uiCapacity * <span class="keyword">sizeof</span>(T);</div>
<div class="line"><a id="l00529" name="l00529"></a><span class="lineno">  529</span>}</div>
</div>
</div>
<div class="line"><a id="l00530" name="l00530"></a><span class="lineno">  530</span> </div>
<div class="line"><a id="l00531" name="l00531"></a><span class="lineno">  531</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00532" name="l00532"></a><span class="lineno">  532</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div>
<div class="line"><a id="l00533" name="l00533"></a><span class="lineno">  533</span>PL_ALWAYS_INLINE <span class="keyword">const</span> U&amp; <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;::GetUserData</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00534" name="l00534"></a><span class="lineno">  534</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00535" name="l00535"></a><span class="lineno">  535</span>  <span class="keyword">static_assert</span>(<span class="keyword">sizeof</span>(U) &lt;= <span class="keyword">sizeof</span>(plUInt32));</div>
<div class="line"><a id="l00536" name="l00536"></a><span class="lineno">  536</span>  <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span>U&amp;<span class="keyword">&gt;</span>(m_uiUserData);</div>
<div class="line"><a id="l00537" name="l00537"></a><span class="lineno">  537</span>}</div>
<div class="line"><a id="l00538" name="l00538"></a><span class="lineno">  538</span> </div>
<div class="line"><a id="l00539" name="l00539"></a><span class="lineno">  539</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00540" name="l00540"></a><span class="lineno">  540</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div>
<div class="line"><a id="l00541" name="l00541"></a><span class="lineno">  541</span>PL_ALWAYS_INLINE U&amp; <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;::GetUserData</a>()</div>
<div class="line"><a id="l00542" name="l00542"></a><span class="lineno">  542</span>{</div>
<div class="line"><a id="l00543" name="l00543"></a><span class="lineno">  543</span>  <span class="keyword">static_assert</span>(<span class="keyword">sizeof</span>(U) &lt;= <span class="keyword">sizeof</span>(plUInt32));</div>
<div class="line"><a id="l00544" name="l00544"></a><span class="lineno">  544</span>  <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span>U&amp;<span class="keyword">&gt;</span>(m_uiUserData);</div>
<div class="line"><a id="l00545" name="l00545"></a><span class="lineno">  545</span>}</div>
<div class="line"><a id="l00546" name="l00546"></a><span class="lineno">  546</span> </div>
<div class="line"><a id="l00547" name="l00547"></a><span class="lineno">  547</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00548" name="l00548"></a><span class="lineno">  548</span><span class="keywordtype">void</span> <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;::SetCapacity</a>(plUInt16 uiCapacity, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00549" name="l00549"></a><span class="lineno">  549</span>{</div>
<div class="line"><a id="l00550" name="l00550"></a><span class="lineno">  550</span>  <span class="keywordflow">if</span> (m_uiCapacity &gt; Size &amp;&amp; uiCapacity &gt; m_uiCapacity)</div>
<div class="line"><a id="l00551" name="l00551"></a><span class="lineno">  551</span>  {</div>
<div class="line"><a id="l00552" name="l00552"></a><span class="lineno">  552</span>    m_pElements = PL_EXTEND_RAW_BUFFER(pAllocator, m_pElements, m_uiCount, uiCapacity);</div>
<div class="line"><a id="l00553" name="l00553"></a><span class="lineno">  553</span>    m_uiCapacity = uiCapacity;</div>
<div class="line"><a id="l00554" name="l00554"></a><span class="lineno">  554</span>  }</div>
<div class="line"><a id="l00555" name="l00555"></a><span class="lineno">  555</span>  <span class="keywordflow">else</span></div>
<div class="line"><a id="l00556" name="l00556"></a><span class="lineno">  556</span>  {</div>
<div class="line"><a id="l00557" name="l00557"></a><span class="lineno">  557</span>    <span class="comment">// special case when migrating from in-place to external storage or shrinking</span></div>
<div class="line"><a id="l00558" name="l00558"></a><span class="lineno">  558</span>    T* pOldElements = GetElementsPtr();</div>
<div class="line"><a id="l00559" name="l00559"></a><span class="lineno">  559</span> </div>
<div class="line"><a id="l00560" name="l00560"></a><span class="lineno">  560</span>    <span class="keyword">const</span> plUInt32 uiOldCapacity = m_uiCapacity;</div>
<div class="line"><a id="l00561" name="l00561"></a><span class="lineno">  561</span>    <span class="keyword">const</span> plUInt32 uiNewCapacity = uiCapacity;</div>
<div class="line"><a id="l00562" name="l00562"></a><span class="lineno">  562</span>    m_uiCapacity = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">plMath::Max</a>(uiCapacity, Size);</div>
<div class="line"><a id="l00563" name="l00563"></a><span class="lineno">  563</span> </div>
<div class="line"><a id="l00564" name="l00564"></a><span class="lineno">  564</span>    <span class="keywordflow">if</span> (uiNewCapacity &gt; Size)</div>
<div class="line"><a id="l00565" name="l00565"></a><span class="lineno">  565</span>    {</div>
<div class="line"><a id="l00566" name="l00566"></a><span class="lineno">  566</span>      <span class="comment">// new external storage</span></div>
<div class="line"><a id="l00567" name="l00567"></a><span class="lineno">  567</span>      T* pNewElements = PL_NEW_RAW_BUFFER(pAllocator, T, uiCapacity);</div>
<div class="line"><a id="l00568" name="l00568"></a><span class="lineno">  568</span>      <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a5a199ddfb8a76151f443013bf3eb8310">plMemoryUtils::RelocateConstruct</a>(pNewElements, pOldElements, m_uiCount);</div>
<div class="line"><a id="l00569" name="l00569"></a><span class="lineno">  569</span>      m_pElements = pNewElements;</div>
<div class="line"><a id="l00570" name="l00570"></a><span class="lineno">  570</span>    }</div>
<div class="line"><a id="l00571" name="l00571"></a><span class="lineno">  571</span>    <span class="keywordflow">else</span></div>
<div class="line"><a id="l00572" name="l00572"></a><span class="lineno">  572</span>    {</div>
<div class="line"><a id="l00573" name="l00573"></a><span class="lineno">  573</span>      <span class="comment">// Re-use inplace storage</span></div>
<div class="line"><a id="l00574" name="l00574"></a><span class="lineno">  574</span>      <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a5a199ddfb8a76151f443013bf3eb8310">plMemoryUtils::RelocateConstruct</a>(GetElementsPtr(), pOldElements, m_uiCount);</div>
<div class="line"><a id="l00575" name="l00575"></a><span class="lineno">  575</span>    }</div>
<div class="line"><a id="l00576" name="l00576"></a><span class="lineno">  576</span> </div>
<div class="line"><a id="l00577" name="l00577"></a><span class="lineno">  577</span>    <span class="keywordflow">if</span> (uiOldCapacity &gt; Size)</div>
<div class="line"><a id="l00578" name="l00578"></a><span class="lineno">  578</span>    {</div>
<div class="line"><a id="l00579" name="l00579"></a><span class="lineno">  579</span>      PL_DELETE_RAW_BUFFER(pAllocator, pOldElements);</div>
<div class="line"><a id="l00580" name="l00580"></a><span class="lineno">  580</span>    }</div>
<div class="line"><a id="l00581" name="l00581"></a><span class="lineno">  581</span>  }</div>
<div class="line"><a id="l00582" name="l00582"></a><span class="lineno">  582</span>}</div>
<div class="line"><a id="l00583" name="l00583"></a><span class="lineno">  583</span> </div>
<div class="line"><a id="l00584" name="l00584"></a><span class="lineno">  584</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00585" name="l00585"></a><span class="lineno">  585</span>PL_ALWAYS_INLINE T* <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;::GetElementsPtr</a>()</div>
<div class="line"><a id="l00586" name="l00586"></a><span class="lineno">  586</span>{</div>
<div class="line"><a id="l00587" name="l00587"></a><span class="lineno">  587</span>  <span class="keywordflow">return</span> m_uiCapacity &lt;= Size ? reinterpret_cast&lt;T*&gt;(m_StaticData) : m_pElements;</div>
<div class="line"><a id="l00588" name="l00588"></a><span class="lineno">  588</span>}</div>
<div class="line"><a id="l00589" name="l00589"></a><span class="lineno">  589</span> </div>
<div class="line"><a id="l00590" name="l00590"></a><span class="lineno">  590</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00591" name="l00591"></a><span class="lineno">  591</span>PL_ALWAYS_INLINE <span class="keyword">const</span> T* <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;::GetElementsPtr</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00592" name="l00592"></a><span class="lineno">  592</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00593" name="l00593"></a><span class="lineno">  593</span>  <span class="keywordflow">return</span> m_uiCapacity &lt;= Size ? reinterpret_cast&lt;const T*&gt;(m_StaticData) : m_pElements;</div>
<div class="line"><a id="l00594" name="l00594"></a><span class="lineno">  594</span>}</div>
<div class="line"><a id="l00595" name="l00595"></a><span class="lineno">  595</span> </div>
<div class="line"><a id="l00597" name="l00597"></a><span class="lineno">  597</span> </div>
<div class="line"><a id="l00598" name="l00598"></a><span class="lineno">  598</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= plDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a id="l00599" name="l00599"></a><span class="lineno">  599</span><a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;::plSmallArray</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00600" name="l00600"></a><span class="lineno">  600</span> </div>
<div class="line"><a id="l00601" name="l00601"></a><span class="lineno">  601</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= plDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a id="l00602" name="l00602"></a><span class="lineno">  602</span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;::plSmallArray</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;</a>&amp; other)</div>
<div class="line"><a id="l00603" name="l00603"></a><span class="lineno">  603</span>  : SUPER(other, AllocatorWrapper::GetAllocator())</div>
<div class="line"><a id="l00604" name="l00604"></a><span class="lineno">  604</span>{</div>
<div class="line"><a id="l00605" name="l00605"></a><span class="lineno">  605</span>}</div>
<div class="line"><a id="l00606" name="l00606"></a><span class="lineno">  606</span> </div>
<div class="line"><a id="l00607" name="l00607"></a><span class="lineno">  607</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= plDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a id="l00608" name="l00608"></a><span class="lineno">  608</span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;::plSmallArray</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const T&gt;</a>&amp; other)</div>
<div class="line"><a id="l00609" name="l00609"></a><span class="lineno">  609</span>  : SUPER(other, AllocatorWrapper::GetAllocator())</div>
<div class="line"><a id="l00610" name="l00610"></a><span class="lineno">  610</span>{</div>
<div class="line"><a id="l00611" name="l00611"></a><span class="lineno">  611</span>}</div>
<div class="line"><a id="l00612" name="l00612"></a><span class="lineno">  612</span> </div>
<div class="line"><a id="l00613" name="l00613"></a><span class="lineno">  613</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= plDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a id="l00614" name="l00614"></a><span class="lineno">  614</span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;::plSmallArray</a>(<a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;</a>&amp;&amp; other)</div>
<div class="line"><a id="l00615" name="l00615"></a><span class="lineno">  615</span>  : SUPER(static_cast&lt;SUPER&amp;&amp;&gt;(other), AllocatorWrapper::GetAllocator())</div>
<div class="line"><a id="l00616" name="l00616"></a><span class="lineno">  616</span>{</div>
<div class="line"><a id="l00617" name="l00617"></a><span class="lineno">  617</span>}</div>
<div class="line"><a id="l00618" name="l00618"></a><span class="lineno">  618</span> </div>
<div class="line"><a id="l00619" name="l00619"></a><span class="lineno">  619</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= plDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a id="l00620" name="l00620"></a><span class="lineno">  620</span><a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;::~plSmallArray</a>()</div>
<div class="line"><a id="l00621" name="l00621"></a><span class="lineno">  621</span>{</div>
<div class="line"><a id="l00622" name="l00622"></a><span class="lineno">  622</span>  SUPER::Clear();</div>
<div class="line"><a id="l00623" name="l00623"></a><span class="lineno">  623</span>  SUPER::Compact(AllocatorWrapper::GetAllocator());</div>
<div class="line"><a id="l00624" name="l00624"></a><span class="lineno">  624</span>}</div>
<div class="line"><a id="l00625" name="l00625"></a><span class="lineno">  625</span> </div>
<div class="line"><a id="l00626" name="l00626"></a><span class="lineno">  626</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= plDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a id="l00627" name="l00627"></a><span class="lineno">  627</span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;::operator=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;</a>&amp; rhs)</div>
<div class="line"><a id="l00628" name="l00628"></a><span class="lineno">  628</span>{</div>
<div class="line"><a id="l00629" name="l00629"></a><span class="lineno">  629</span>  *<span class="keyword">this</span> = ((<a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const T&gt;</a>)rhs); <span class="comment">// redirect this to the plArrayPtr version</span></div>
<div class="line"><a id="l00630" name="l00630"></a><span class="lineno">  630</span>  this-&gt;m_uiUserData = rhs.m_uiUserData;</div>
<div class="line"><a id="l00631" name="l00631"></a><span class="lineno">  631</span>}</div>
<div class="line"><a id="l00632" name="l00632"></a><span class="lineno">  632</span> </div>
<div class="line"><a id="l00633" name="l00633"></a><span class="lineno">  633</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= plDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a id="l00634" name="l00634"></a><span class="lineno">  634</span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;::operator=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const T&gt;</a>&amp; rhs)</div>
<div class="line"><a id="l00635" name="l00635"></a><span class="lineno">  635</span>{</div>
<div class="line"><a id="l00636" name="l00636"></a><span class="lineno">  636</span>  SUPER::CopyFrom(rhs, AllocatorWrapper::GetAllocator());</div>
<div class="line"><a id="l00637" name="l00637"></a><span class="lineno">  637</span>}</div>
<div class="line"><a id="l00638" name="l00638"></a><span class="lineno">  638</span> </div>
<div class="line"><a id="l00639" name="l00639"></a><span class="lineno">  639</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= plDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a id="l00640" name="l00640"></a><span class="lineno">  640</span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;::operator=</a>(<a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;</a>&amp;&amp; rhs) <span class="keyword">noexcept</span></div>
<div class="line"><a id="l00641" name="l00641"></a><span class="lineno">  641</span>{</div>
<div class="line"><a id="l00642" name="l00642"></a><span class="lineno">  642</span>  SUPER::MoveFrom(std::move(rhs), AllocatorWrapper::GetAllocator());</div>
<div class="line"><a id="l00643" name="l00643"></a><span class="lineno">  643</span>}</div>
<div class="line"><a id="l00644" name="l00644"></a><span class="lineno">  644</span> </div>
<div class="line"><a id="l00645" name="l00645"></a><span class="lineno">  645</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= plDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a id="l00646" name="l00646"></a><span class="lineno">  646</span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;::SetCount</a>(plUInt16 uiCount)</div>
<div class="line"><a id="l00647" name="l00647"></a><span class="lineno">  647</span>{</div>
<div class="line"><a id="l00648" name="l00648"></a><span class="lineno">  648</span>  SUPER::SetCount(uiCount, AllocatorWrapper::GetAllocator());</div>
<div class="line"><a id="l00649" name="l00649"></a><span class="lineno">  649</span>}</div>
<div class="line"><a id="l00650" name="l00650"></a><span class="lineno">  650</span> </div>
<div class="line"><a id="l00651" name="l00651"></a><span class="lineno">  651</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= plDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a id="l00652" name="l00652"></a><span class="lineno">  652</span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;::SetCount</a>(plUInt16 uiCount, <span class="keyword">const</span> T&amp; fillValue)</div>
<div class="line"><a id="l00653" name="l00653"></a><span class="lineno">  653</span>{</div>
<div class="line"><a id="l00654" name="l00654"></a><span class="lineno">  654</span>  SUPER::SetCount(uiCount, fillValue, AllocatorWrapper::GetAllocator());</div>
<div class="line"><a id="l00655" name="l00655"></a><span class="lineno">  655</span>}</div>
<div class="line"><a id="l00656" name="l00656"></a><span class="lineno">  656</span> </div>
<div class="line"><a id="l00657" name="l00657"></a><span class="lineno">  657</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= plDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a id="l00658" name="l00658"></a><span class="lineno">  658</span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;::EnsureCount</a>(plUInt16 uiCount)</div>
<div class="line"><a id="l00659" name="l00659"></a><span class="lineno">  659</span>{</div>
<div class="line"><a id="l00660" name="l00660"></a><span class="lineno">  660</span>  SUPER::EnsureCount(uiCount, AllocatorWrapper::GetAllocator());</div>
<div class="line"><a id="l00661" name="l00661"></a><span class="lineno">  661</span>}</div>
<div class="line"><a id="l00662" name="l00662"></a><span class="lineno">  662</span> </div>
<div class="line"><a id="l00663" name="l00663"></a><span class="lineno">  663</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= plDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a id="l00664" name="l00664"></a><span class="lineno">  664</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span>&gt; <span class="comment">// Second template needed so that the compiler does only instantiate it when called. Otherwise the static_assert would trigger early.</span></div>
<div class="line"><a id="l00665" name="l00665"></a><span class="lineno">  665</span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;::SetCountUninitialized</a>(plUInt16 uiCount)</div>
<div class="line"><a id="l00666" name="l00666"></a><span class="lineno">  666</span>{</div>
<div class="line"><a id="l00667" name="l00667"></a><span class="lineno">  667</span>  SUPER::SetCountUninitialized(uiCount, AllocatorWrapper::GetAllocator());</div>
<div class="line"><a id="l00668" name="l00668"></a><span class="lineno">  668</span>}</div>
<div class="line"><a id="l00669" name="l00669"></a><span class="lineno">  669</span> </div>
<div class="line"><a id="l00670" name="l00670"></a><span class="lineno">  670</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= plDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a id="l00671" name="l00671"></a><span class="lineno">  671</span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;::InsertAt</a>(plUInt32 uiIndex, <span class="keyword">const</span> T&amp; value)</div>
<div class="line"><a id="l00672" name="l00672"></a><span class="lineno">  672</span>{</div>
<div class="line"><a id="l00673" name="l00673"></a><span class="lineno">  673</span>  SUPER::Insert(value, uiIndex, AllocatorWrapper::GetAllocator());</div>
<div class="line"><a id="l00674" name="l00674"></a><span class="lineno">  674</span>}</div>
<div class="line"><a id="l00675" name="l00675"></a><span class="lineno">  675</span> </div>
<div class="line"><a id="l00676" name="l00676"></a><span class="lineno">  676</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= plDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a id="l00677" name="l00677"></a><span class="lineno">  677</span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;::InsertAt</a>(plUInt32 uiIndex, T&amp;&amp; value)</div>
<div class="line"><a id="l00678" name="l00678"></a><span class="lineno">  678</span>{</div>
<div class="line"><a id="l00679" name="l00679"></a><span class="lineno">  679</span>  SUPER::Insert(value, uiIndex, AllocatorWrapper::GetAllocator());</div>
<div class="line"><a id="l00680" name="l00680"></a><span class="lineno">  680</span>}</div>
<div class="line"><a id="l00681" name="l00681"></a><span class="lineno">  681</span> </div>
<div class="line"><a id="l00682" name="l00682"></a><span class="lineno">  682</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= plDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a id="l00683" name="l00683"></a><span class="lineno">  683</span>PL_ALWAYS_INLINE T&amp; <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;::ExpandAndGetRef</a>()</div>
<div class="line"><a id="l00684" name="l00684"></a><span class="lineno">  684</span>{</div>
<div class="line"><a id="l00685" name="l00685"></a><span class="lineno">  685</span>  <span class="keywordflow">return</span> SUPER::ExpandAndGetRef(AllocatorWrapper::GetAllocator());</div>
<div class="line"><a id="l00686" name="l00686"></a><span class="lineno">  686</span>}</div>
<div class="line"><a id="l00687" name="l00687"></a><span class="lineno">  687</span> </div>
<div class="line"><a id="l00688" name="l00688"></a><span class="lineno">  688</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= plDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a id="l00689" name="l00689"></a><span class="lineno">  689</span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;::PushBack</a>(<span class="keyword">const</span> T&amp; value)</div>
<div class="line"><a id="l00690" name="l00690"></a><span class="lineno">  690</span>{</div>
<div class="line"><a id="l00691" name="l00691"></a><span class="lineno">  691</span>  SUPER::PushBack(value, AllocatorWrapper::GetAllocator());</div>
<div class="line"><a id="l00692" name="l00692"></a><span class="lineno">  692</span>}</div>
<div class="line"><a id="l00693" name="l00693"></a><span class="lineno">  693</span> </div>
<div class="line"><a id="l00694" name="l00694"></a><span class="lineno">  694</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= plDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a id="l00695" name="l00695"></a><span class="lineno">  695</span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;::PushBack</a>(T&amp;&amp; value)</div>
<div class="line"><a id="l00696" name="l00696"></a><span class="lineno">  696</span>{</div>
<div class="line"><a id="l00697" name="l00697"></a><span class="lineno">  697</span>  SUPER::PushBack(std::move(value), AllocatorWrapper::GetAllocator());</div>
<div class="line"><a id="l00698" name="l00698"></a><span class="lineno">  698</span>}</div>
<div class="line"><a id="l00699" name="l00699"></a><span class="lineno">  699</span> </div>
<div class="line"><a id="l00700" name="l00700"></a><span class="lineno">  700</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= plDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a id="l00701" name="l00701"></a><span class="lineno">  701</span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;::PushBackRange</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const T&gt;</a>&amp; range)</div>
<div class="line"><a id="l00702" name="l00702"></a><span class="lineno">  702</span>{</div>
<div class="line"><a id="l00703" name="l00703"></a><span class="lineno">  703</span>  SUPER::PushBackRange(range, AllocatorWrapper::GetAllocator());</div>
<div class="line"><a id="l00704" name="l00704"></a><span class="lineno">  704</span>}</div>
<div class="line"><a id="l00705" name="l00705"></a><span class="lineno">  705</span> </div>
<div class="line"><a id="l00706" name="l00706"></a><span class="lineno">  706</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= plDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a id="l00707" name="l00707"></a><span class="lineno">  707</span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;::Reserve</a>(plUInt16 uiCapacity)</div>
<div class="line"><a id="l00708" name="l00708"></a><span class="lineno">  708</span>{</div>
<div class="line"><a id="l00709" name="l00709"></a><span class="lineno">  709</span>  SUPER::Reserve(uiCapacity, AllocatorWrapper::GetAllocator());</div>
<div class="line"><a id="l00710" name="l00710"></a><span class="lineno">  710</span>}</div>
<div class="line"><a id="l00711" name="l00711"></a><span class="lineno">  711</span> </div>
<div class="line"><a id="l00712" name="l00712"></a><span class="lineno">  712</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper <span class="comment">/*= plDefaultAllocatorWrapper*/</span>&gt;</div>
<div class="line"><a id="l00713" name="l00713"></a><span class="lineno">  713</span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;::Compact</a>()</div>
<div class="line"><a id="l00714" name="l00714"></a><span class="lineno">  714</span>{</div>
<div class="line"><a id="l00715" name="l00715"></a><span class="lineno">  715</span>  SUPER::Compact(AllocatorWrapper::GetAllocator());</div>
<div class="line"><a id="l00716" name="l00716"></a><span class="lineno">  716</span>}</div>
<div class="line"><a id="l00717" name="l00717"></a><span class="lineno">  717</span> </div>
<div class="line"><a id="l00719" name="l00719"></a><span class="lineno">  719</span> </div>
<div class="line"><a id="l00720" name="l00720"></a><span class="lineno">  720</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00721" name="l00721"></a><span class="lineno">  721</span><span class="keyword">typename</span> plSmallArrayBase&lt;T, Size&gt;::iterator begin(<a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>&amp; ref_container)</div>
<div class="line"><a id="l00722" name="l00722"></a><span class="lineno">  722</span>{</div>
<div class="line"><a id="l00723" name="l00723"></a><span class="lineno">  723</span>  <span class="keywordflow">return</span> ref_container.<a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a8d296d79cfc46a7daa2e5f63aec5594f">GetData</a>();</div>
<div class="line"><a id="l00724" name="l00724"></a><span class="lineno">  724</span>}</div>
<div class="line"><a id="l00725" name="l00725"></a><span class="lineno">  725</span> </div>
<div class="line"><a id="l00726" name="l00726"></a><span class="lineno">  726</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00727" name="l00727"></a><span class="lineno">  727</span><span class="keyword">typename</span> plSmallArrayBase&lt;T, Size&gt;::const_iterator begin(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>&amp; container)</div>
<div class="line"><a id="l00728" name="l00728"></a><span class="lineno">  728</span>{</div>
<div class="line"><a id="l00729" name="l00729"></a><span class="lineno">  729</span>  <span class="keywordflow">return</span> container.<a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a8d296d79cfc46a7daa2e5f63aec5594f">GetData</a>();</div>
<div class="line"><a id="l00730" name="l00730"></a><span class="lineno">  730</span>}</div>
<div class="line"><a id="l00731" name="l00731"></a><span class="lineno">  731</span> </div>
<div class="line"><a id="l00732" name="l00732"></a><span class="lineno">  732</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00733" name="l00733"></a><span class="lineno">  733</span><span class="keyword">typename</span> plSmallArrayBase&lt;T, Size&gt;::const_iterator cbegin(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>&amp; container)</div>
<div class="line"><a id="l00734" name="l00734"></a><span class="lineno">  734</span>{</div>
<div class="line"><a id="l00735" name="l00735"></a><span class="lineno">  735</span>  <span class="keywordflow">return</span> container.<a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a8d296d79cfc46a7daa2e5f63aec5594f">GetData</a>();</div>
<div class="line"><a id="l00736" name="l00736"></a><span class="lineno">  736</span>}</div>
<div class="line"><a id="l00737" name="l00737"></a><span class="lineno">  737</span> </div>
<div class="line"><a id="l00738" name="l00738"></a><span class="lineno">  738</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00739" name="l00739"></a><span class="lineno">  739</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/df2/structreverse__pointer__iterator.htm">plSmallArrayBase&lt;T, Size&gt;::reverse_iterator</a> rbegin(<a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>&amp; ref_container)</div>
<div class="line"><a id="l00740" name="l00740"></a><span class="lineno">  740</span>{</div>
<div class="line"><a id="l00741" name="l00741"></a><span class="lineno">  741</span>  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/df2/structreverse__pointer__iterator.htm">plSmallArrayBase&lt;T, Size&gt;::reverse_iterator</a>(ref_container.<a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a8d296d79cfc46a7daa2e5f63aec5594f">GetData</a>() + ref_container.<a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#aaadcac566b72769bc7881e1daadb63c7">GetCount</a>() - 1);</div>
<div class="line"><a id="l00742" name="l00742"></a><span class="lineno">  742</span>}</div>
<div class="line"><a id="l00743" name="l00743"></a><span class="lineno">  743</span> </div>
<div class="line"><a id="l00744" name="l00744"></a><span class="lineno">  744</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00745" name="l00745"></a><span class="lineno">  745</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">plSmallArrayBase&lt;T, Size&gt;::const_reverse_iterator</a> rbegin(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>&amp; container)</div>
<div class="line"><a id="l00746" name="l00746"></a><span class="lineno">  746</span>{</div>
<div class="line"><a id="l00747" name="l00747"></a><span class="lineno">  747</span>  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">plSmallArrayBase&lt;T, Size&gt;::const_reverse_iterator</a>(container.<a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a8d296d79cfc46a7daa2e5f63aec5594f">GetData</a>() + container.<a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#aaadcac566b72769bc7881e1daadb63c7">GetCount</a>() - 1);</div>
<div class="line"><a id="l00748" name="l00748"></a><span class="lineno">  748</span>}</div>
<div class="line"><a id="l00749" name="l00749"></a><span class="lineno">  749</span> </div>
<div class="line"><a id="l00750" name="l00750"></a><span class="lineno">  750</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00751" name="l00751"></a><span class="lineno">  751</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">plSmallArrayBase&lt;T, Size&gt;::const_reverse_iterator</a> crbegin(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>&amp; container)</div>
<div class="line"><a id="l00752" name="l00752"></a><span class="lineno">  752</span>{</div>
<div class="line"><a id="l00753" name="l00753"></a><span class="lineno">  753</span>  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">plSmallArrayBase&lt;T, Size&gt;::const_reverse_iterator</a>(container.<a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a8d296d79cfc46a7daa2e5f63aec5594f">GetData</a>() + container.<a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#aaadcac566b72769bc7881e1daadb63c7">GetCount</a>() - 1);</div>
<div class="line"><a id="l00754" name="l00754"></a><span class="lineno">  754</span>}</div>
<div class="line"><a id="l00755" name="l00755"></a><span class="lineno">  755</span> </div>
<div class="line"><a id="l00756" name="l00756"></a><span class="lineno">  756</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00757" name="l00757"></a><span class="lineno">  757</span><span class="keyword">typename</span> plSmallArrayBase&lt;T, Size&gt;::iterator end(<a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>&amp; ref_container)</div>
<div class="line"><a id="l00758" name="l00758"></a><span class="lineno">  758</span>{</div>
<div class="line"><a id="l00759" name="l00759"></a><span class="lineno">  759</span>  <span class="keywordflow">return</span> ref_container.<a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a8d296d79cfc46a7daa2e5f63aec5594f">GetData</a>() + ref_container.<a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#aaadcac566b72769bc7881e1daadb63c7">GetCount</a>();</div>
<div class="line"><a id="l00760" name="l00760"></a><span class="lineno">  760</span>}</div>
<div class="line"><a id="l00761" name="l00761"></a><span class="lineno">  761</span> </div>
<div class="line"><a id="l00762" name="l00762"></a><span class="lineno">  762</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00763" name="l00763"></a><span class="lineno">  763</span><span class="keyword">typename</span> plSmallArrayBase&lt;T, Size&gt;::const_iterator end(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>&amp; container)</div>
<div class="line"><a id="l00764" name="l00764"></a><span class="lineno">  764</span>{</div>
<div class="line"><a id="l00765" name="l00765"></a><span class="lineno">  765</span>  <span class="keywordflow">return</span> container.<a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a8d296d79cfc46a7daa2e5f63aec5594f">GetData</a>() + container.<a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#aaadcac566b72769bc7881e1daadb63c7">GetCount</a>();</div>
<div class="line"><a id="l00766" name="l00766"></a><span class="lineno">  766</span>}</div>
<div class="line"><a id="l00767" name="l00767"></a><span class="lineno">  767</span> </div>
<div class="line"><a id="l00768" name="l00768"></a><span class="lineno">  768</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00769" name="l00769"></a><span class="lineno">  769</span><span class="keyword">typename</span> plSmallArrayBase&lt;T, Size&gt;::const_iterator cend(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>&amp; container)</div>
<div class="line"><a id="l00770" name="l00770"></a><span class="lineno">  770</span>{</div>
<div class="line"><a id="l00771" name="l00771"></a><span class="lineno">  771</span>  <span class="keywordflow">return</span> container.<a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a8d296d79cfc46a7daa2e5f63aec5594f">GetData</a>() + container.<a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#aaadcac566b72769bc7881e1daadb63c7">GetCount</a>();</div>
<div class="line"><a id="l00772" name="l00772"></a><span class="lineno">  772</span>}</div>
<div class="line"><a id="l00773" name="l00773"></a><span class="lineno">  773</span> </div>
<div class="line"><a id="l00774" name="l00774"></a><span class="lineno">  774</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00775" name="l00775"></a><span class="lineno">  775</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/df2/structreverse__pointer__iterator.htm">plSmallArrayBase&lt;T, Size&gt;::reverse_iterator</a> rend(<a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>&amp; ref_container)</div>
<div class="line"><a id="l00776" name="l00776"></a><span class="lineno">  776</span>{</div>
<div class="line"><a id="l00777" name="l00777"></a><span class="lineno">  777</span>  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/df2/structreverse__pointer__iterator.htm">plSmallArrayBase&lt;T, Size&gt;::reverse_iterator</a>(ref_container.<a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a8d296d79cfc46a7daa2e5f63aec5594f">GetData</a>() - 1);</div>
<div class="line"><a id="l00778" name="l00778"></a><span class="lineno">  778</span>}</div>
<div class="line"><a id="l00779" name="l00779"></a><span class="lineno">  779</span> </div>
<div class="line"><a id="l00780" name="l00780"></a><span class="lineno">  780</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00781" name="l00781"></a><span class="lineno">  781</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">plSmallArrayBase&lt;T, Size&gt;::const_reverse_iterator</a> rend(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>&amp; container)</div>
<div class="line"><a id="l00782" name="l00782"></a><span class="lineno">  782</span>{</div>
<div class="line"><a id="l00783" name="l00783"></a><span class="lineno">  783</span>  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">plSmallArrayBase&lt;T, Size&gt;::const_reverse_iterator</a>(container.<a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a8d296d79cfc46a7daa2e5f63aec5594f">GetData</a>() - 1);</div>
<div class="line"><a id="l00784" name="l00784"></a><span class="lineno">  784</span>}</div>
<div class="line"><a id="l00785" name="l00785"></a><span class="lineno">  785</span> </div>
<div class="line"><a id="l00786" name="l00786"></a><span class="lineno">  786</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="line"><a id="l00787" name="l00787"></a><span class="lineno">  787</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">plSmallArrayBase&lt;T, Size&gt;::const_reverse_iterator</a> crend(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>&amp; container)</div>
<div class="line"><a id="l00788" name="l00788"></a><span class="lineno">  788</span>{</div>
<div class="line"><a id="l00789" name="l00789"></a><span class="lineno">  789</span>  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">plSmallArrayBase&lt;T, Size&gt;::const_reverse_iterator</a>(container.<a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a8d296d79cfc46a7daa2e5f63aec5594f">GetData</a>() - 1);</div>
<div class="line"><a id="l00790" name="l00790"></a><span class="lineno">  790</span>}</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="ttc" id="aclasspl_allocator_htm"><div class="ttname"><a href="../../da/df3/classpl_allocator.htm">plAllocator</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition</b> Allocator.h:23</div></div>
<div class="ttc" id="aclasspl_array_ptr_htm"><div class="ttname"><a href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a></div><div class="ttdoc">This class encapsulates an array and it's size. It is recommended to use this class instead of plain ...</div><div class="ttdef"><b>Definition</b> ArrayPtr.h:37</div></div>
<div class="ttc" id="aclasspl_array_ptr_htm_a025ba83275da5ff5008495fa3245b9b2"><div class="ttname"><a href="../../db/d81/classpl_array_ptr.htm#a025ba83275da5ff5008495fa3245b9b2">plArrayPtr::GetCount</a></div><div class="ttdeci">PL_ALWAYS_INLINE plUInt32 GetCount() const</div><div class="ttdoc">Returns the number of elements in the array.</div><div class="ttdef"><b>Definition</b> ArrayPtr.h:142</div></div>
<div class="ttc" id="aclasspl_array_ptr_htm_a6d9dbf629f70c956b654471e53baf2be"><div class="ttname"><a href="../../db/d81/classpl_array_ptr.htm#a6d9dbf629f70c956b654471e53baf2be">plArrayPtr::GetPtr</a></div><div class="ttdeci">PL_ALWAYS_INLINE PointerType GetPtr() const</div><div class="ttdoc">Returns the pointer to the array.</div><div class="ttdef"><b>Definition</b> ArrayPtr.h:118</div></div>
<div class="ttc" id="aclasspl_array_ptr_htm_aa3c9487595e390c71c7a7e2f533b0d3e"><div class="ttname"><a href="../../db/d81/classpl_array_ptr.htm#aa3c9487595e390c71c7a7e2f533b0d3e">plArrayPtr::ToByteArray</a></div><div class="ttdeci">PL_ALWAYS_INLINE plArrayPtr&lt; const ByteType &gt; ToByteArray() const</div><div class="ttdoc">Reinterprets this array as a byte array.</div><div class="ttdef"><b>Definition</b> ArrayPtr.h:165</div></div>
<div class="ttc" id="aclasspl_memory_utils_htm_a07b6ac85720d94f8568760ac12f786e5"><div class="ttname"><a href="../../df/d4d/classpl_memory_utils.htm#a07b6ac85720d94f8568760ac12f786e5">plMemoryUtils::CopyConstruct</a></div><div class="ttdeci">static void CopyConstruct(Destination *pDestination, const Source &amp;copy, size_t uiCount=1)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination, by creating uiCount copies of c...</div></div>
<div class="ttc" id="aclasspl_memory_utils_htm_a1f9d7301372dec5fdcee4015a4620c8e"><div class="ttname"><a href="../../df/d4d/classpl_memory_utils.htm#a1f9d7301372dec5fdcee4015a4620c8e">plMemoryUtils::CopyConstructArray</a></div><div class="ttdeci">static void CopyConstructArray(T *pDestination, const T *pSource, size_t uiCount)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination from an existing array of object...</div></div>
<div class="ttc" id="aclasspl_memory_utils_htm_a4164db412280d367dd4aa34e7c4787e8"><div class="ttname"><a href="../../df/d4d/classpl_memory_utils.htm#a4164db412280d367dd4aa34e7c4787e8">plMemoryUtils::IsEqual</a></div><div class="ttdeci">static bool IsEqual(const T *a, const T *b, size_t uiCount=1)</div><div class="ttdoc">Tests if objects of type T from pSource and pDestination are equal.</div></div>
<div class="ttc" id="aclasspl_memory_utils_htm_a5a199ddfb8a76151f443013bf3eb8310"><div class="ttname"><a href="../../df/d4d/classpl_memory_utils.htm#a5a199ddfb8a76151f443013bf3eb8310">plMemoryUtils::RelocateConstruct</a></div><div class="ttdeci">static void RelocateConstruct(T *pDestination, T *pSource, size_t uiCount=1)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination from an existing array of object...</div></div>
<div class="ttc" id="aclasspl_memory_utils_htm_a611d82f77f3c825a296d39e2bfa3b1c6"><div class="ttname"><a href="../../df/d4d/classpl_memory_utils.htm#a611d82f77f3c825a296d39e2bfa3b1c6">plMemoryUtils::Construct</a></div><div class="ttdeci">static void Construct(T *pDestination, size_t uiCount=1)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination.</div></div>
<div class="ttc" id="aclasspl_memory_utils_htm_a896238870c5f0caca5ab1464920698b6"><div class="ttname"><a href="../../df/d4d/classpl_memory_utils.htm#a896238870c5f0caca5ab1464920698b6">plMemoryUtils::Prepend</a></div><div class="ttdeci">static void Prepend(T *pDestination, const T &amp;source, size_t uiCount)</div><div class="ttdoc">Moves uiCount objects in pDestination by one object and copies source to the free space.</div></div>
<div class="ttc" id="aclasspl_memory_utils_htm_a9a74df0cde5a8c8012d7b6c48d3d8729"><div class="ttname"><a href="../../df/d4d/classpl_memory_utils.htm#a9a74df0cde5a8c8012d7b6c48d3d8729">plMemoryUtils::Copy</a></div><div class="ttdeci">static void Copy(T *pDestination, const T *pSource, size_t uiCount=1)</div><div class="ttdoc">Copies objects of type T from pSource to pDestination.</div></div>
<div class="ttc" id="aclasspl_memory_utils_htm_abec7a10f06a461b6d32c183b6347cc80"><div class="ttname"><a href="../../df/d4d/classpl_memory_utils.htm#abec7a10f06a461b6d32c183b6347cc80">plMemoryUtils::MoveConstruct</a></div><div class="ttdeci">static void MoveConstruct(T *pDestination, T &amp;&amp;source)</div><div class="ttdoc">Constructs an object of type T in a raw buffer at pDestination, by using move construction from sourc...</div></div>
<div class="ttc" id="aclasspl_memory_utils_htm_ad644c6cd5636810d5218474fa2b478c5"><div class="ttname"><a href="../../df/d4d/classpl_memory_utils.htm#ad644c6cd5636810d5218474fa2b478c5">plMemoryUtils::RelocateOverlapped</a></div><div class="ttdeci">static void RelocateOverlapped(T *pDestination, T *pSource, size_t uiCount=1)</div><div class="ttdoc">Moves objects of type T from pSource to pDestination.</div></div>
<div class="ttc" id="aclasspl_memory_utils_htm_aebac0ea8dc364f79d0ed4cf8c65ab0de"><div class="ttname"><a href="../../df/d4d/classpl_memory_utils.htm#aebac0ea8dc364f79d0ed4cf8c65ab0de">plMemoryUtils::AlignSize</a></div><div class="ttdeci">static T AlignSize(T uiSize, T uiAlignment)</div><div class="ttdoc">Aligns the given size uiSize by rounding up to the next multiple of the size.</div></div>
<div class="ttc" id="aclasspl_memory_utils_htm_afe524b6781f69e2fd4eceb18f2a27640"><div class="ttname"><a href="../../df/d4d/classpl_memory_utils.htm#afe524b6781f69e2fd4eceb18f2a27640">plMemoryUtils::Destruct</a></div><div class="ttdeci">static void Destruct(T *pDestination, size_t uiCount=1)</div><div class="ttdoc">Destructs uiCount objects of type T at pDestination.</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase</a></div><div class="ttdoc">Implementation of a dynamically growing array with in-place storage and small memory overhead.</div><div class="ttdef"><b>Definition</b> SmallArray.h:17</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a014b7fc2ba69771cf680857045655a71"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a014b7fc2ba69771cf680857045655a71">plSmallArrayBase::PopBack</a></div><div class="ttdeci">void PopBack(plUInt32 uiCountToRemove=1)</div><div class="ttdoc">Removes count elements from the end of the array.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:400</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a0e083b79e10f09bd20ac388a61bccb51"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a0e083b79e10f09bd20ac388a61bccb51">plSmallArrayBase::PushBackRange</a></div><div class="ttdeci">void PushBackRange(const plArrayPtr&lt; const T &gt; &amp;range, plAllocator *pAllocator)</div><div class="ttdoc">Pushes all elements in range at the end of the array. Increases the capacity if necessary.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:390</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a1105ef94e1b2228e67ecfe976f151e13"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a1105ef94e1b2228e67ecfe976f151e13">plSmallArrayBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Clears the array.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:222</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a132a3c1de704395663e3ffeafeff482e"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a132a3c1de704395663e3ffeafeff482e">plSmallArrayBase::SetCount</a></div><div class="ttdeci">void SetCount(plUInt16 uiCount, plAllocator *pAllocator)</div><div class="ttdoc">Resizes the array to have exactly uiCount elements. Default constructs extra elements if the array is...</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:142</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a4225e8476f7118a0a4220bbd2ea69c27"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a4225e8476f7118a0a4220bbd2ea69c27">plSmallArrayBase::RemoveAtAndSwap</a></div><div class="ttdeci">void RemoveAtAndSwap(plUInt32 uiIndex, plUInt16 uiNumElements=1)</div><div class="ttdoc">Removes the element at index and fills the gap by swapping in the last element.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:292</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a429bf06f44557e9e94d93bcee6cb8631"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a429bf06f44557e9e94d93bcee6cb8631">plSmallArrayBase::MoveFrom</a></div><div class="ttdeci">void MoveFrom(plSmallArrayBase&lt; T, Size &gt; &amp;&amp;other, plAllocator *pAllocator)</div><div class="ttdoc">Moves the data from some other array into this one.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:69</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a55c33bfdeaaa99c1331a8a8fe2ee9e10"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a55c33bfdeaaa99c1331a8a8fe2ee9e10">plSmallArrayBase::SetCountUninitialized</a></div><div class="ttdeci">void SetCountUninitialized(plUInt16 uiCount, plAllocator *pAllocator)</div><div class="ttdoc">Resizes the array to have exactly uiCount elements. Extra elements might be uninitialized.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:190</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a6718419bdff0ce164ae62177cb886de6"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a6718419bdff0ce164ae62177cb886de6">plSmallArrayBase::Sort</a></div><div class="ttdeci">void Sort()</div><div class="ttdoc">Sort with default comparer.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:434</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a6c9ccc27d42825a50c849e2d8b4d6be2"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a6c9ccc27d42825a50c849e2d8b4d6be2">plSmallArrayBase::Compact</a></div><div class="ttdeci">void Compact(plAllocator *pAllocator)</div><div class="ttdoc">Tries to compact the array to avoid wasting memory. The resulting capacity is at least 'GetCount' (no...</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:502</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a6f8e3c811f1a36986107131c01820426"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a6f8e3c811f1a36986107131c01820426">plSmallArrayBase::Reserve</a></div><div class="ttdeci">void Reserve(plUInt16 uiCapacity, plAllocator *pAllocator)</div><div class="ttdoc">Expands the array so it can at least store the given capacity.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:486</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a70cb0225a3ab95e62a1b8b3793e3d01b"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a70cb0225a3ab95e62a1b8b3793e3d01b">plSmallArrayBase::Insert</a></div><div class="ttdeci">void Insert(const T &amp;value, plUInt32 uiIndex, plAllocator *pAllocator)</div><div class="ttdoc">Inserts value at index by shifting all following elements.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:235</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a7bdb7ccdd99b15c07c61f179436d63a8"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a7bdb7ccdd99b15c07c61f179436d63a8">plSmallArrayBase::CopyFrom</a></div><div class="ttdeci">void CopyFrom(const plArrayPtr&lt; const T &gt; &amp;other, plAllocator *pAllocator)</div><div class="ttdoc">Copies the data from some other array into this one.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:32</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a819a8168e990edb947bdfc68783067d2"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a819a8168e990edb947bdfc68783067d2">plSmallArrayBase::RemoveAndCopy</a></div><div class="ttdeci">bool RemoveAndCopy(const T &amp;value)</div><div class="ttdoc">Removes the first occurrence of value and fills the gap by shifting all following elements.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:257</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a827d52bbc2f8b77ce74bee1e2a960d7d"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a827d52bbc2f8b77ce74bee1e2a960d7d">plSmallArrayBase::GetByteArrayPtr</a></div><div class="ttdeci">plArrayPtr&lt; typename plArrayPtr&lt; T &gt;::ByteType &gt; GetByteArrayPtr()</div><div class="ttdoc">Returns a byte array pointer to the array data, or an empty array pointer if the array is empty.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:474</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a8cee3cefaff8bc613de722a43025ceca"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a8cee3cefaff8bc613de722a43025ceca">plSmallArrayBase::EnsureCount</a></div><div class="ttdeci">void EnsureCount(plUInt16 uiCount, plAllocator *pAllocator)</div><div class="ttdoc">Ensures the container has at least uiCount elements. Ie. calls SetCount() if the container has fewer ...</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:180</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a8d296d79cfc46a7daa2e5f63aec5594f"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a8d296d79cfc46a7daa2e5f63aec5594f">plSmallArrayBase::GetData</a></div><div class="ttdeci">T * GetData()</div><div class="ttdoc">Returns a pointer to the array data, or nullptr if the array is empty.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:444</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a918972762638a07472ad288f59d7bd7b"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a918972762638a07472ad288f59d7bd7b">plSmallArrayBase::GetHeapMemoryUsage</a></div><div class="ttdeci">plUInt64 GetHeapMemoryUsage() const</div><div class="ttdoc">Returns the amount of bytes that are currently allocated on the heap.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:526</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a9641463b1b2674974d6f5af15e6161d1"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a9641463b1b2674974d6f5af15e6161d1">plSmallArrayBase::PeekBack</a></div><div class="ttdeci">T &amp; PeekBack()</div><div class="ttdoc">Returns the last element of the array.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:409</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a9ff3a42c1621c781821554113bf61918"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a9ff3a42c1621c781821554113bf61918">plSmallArrayBase::ExpandAndGetRef</a></div><div class="ttdeci">T &amp; ExpandAndGetRef(plAllocator *pAllocator)</div><div class="ttdoc">Grows the array by one element and returns a reference to the newly created element.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:338</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_aa61f12c4ae9a08d46f309e7f5379a748"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#aa61f12c4ae9a08d46f309e7f5379a748">plSmallArrayBase::LastIndexOf</a></div><div class="ttdeci">plUInt32 LastIndexOf(const T &amp;value, plUInt32 uiStartIndex=plSmallInvalidIndex) const</div><div class="ttdoc">Searches for the last occurrence of the given value and returns its index or plInvalidIndex if not fo...</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:325</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_aaa15d1b49967ceb624cbc58fb65606da"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#aaa15d1b49967ceb624cbc58fb65606da">plSmallArrayBase::GetArrayPtr</a></div><div class="ttdeci">plArrayPtr&lt; T &gt; GetArrayPtr()</div><div class="ttdoc">Returns an array pointer to the array data, or an empty array pointer if the array is empty.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:462</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_aaadcac566b72769bc7881e1daadb63c7"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#aaadcac566b72769bc7881e1daadb63c7">plSmallArrayBase::GetCount</a></div><div class="ttdeci">plUInt32 GetCount() const</div><div class="ttdoc">Returns the number of active elements in the array.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:210</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_ab139b09923133b72fabb28a2fae3e4f4"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#ab139b09923133b72fabb28a2fae3e4f4">plSmallArrayBase::operator[]</a></div><div class="ttdeci">const T &amp; operator[](plUInt32 uiIndex) const</div><div class="ttdoc">Returns the element at the given index. Does bounds checks in debug builds.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:128</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_abaa3bfea372deca3ac86eaf52e1e6885"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#abaa3bfea372deca3ac86eaf52e1e6885">plSmallArrayBase::RemoveAtAndCopy</a></div><div class="ttdeci">void RemoveAtAndCopy(plUInt32 uiIndex, plUInt16 uiNumElements=1)</div><div class="ttdoc">Removes the element at index and fills the gap by shifting all following elements.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:281</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_ac416170760d69eb6792c4a9e0926449e"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#ac416170760d69eb6792c4a9e0926449e">plSmallArrayBase::PushBackUnchecked</a></div><div class="ttdeci">void PushBackUnchecked(const T &amp;value)</div><div class="ttdoc">Pushes value at the end of the array. Does NOT ensure capacity.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:372</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_ac5e8a1f919fa2e2be0f7737874d661fc"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#ac5e8a1f919fa2e2be0f7737874d661fc">plSmallArrayBase::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns true, if the array does not contain any elements.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:216</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_ac950cb444242c44a3e2f4b428deb357d"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#ac950cb444242c44a3e2f4b428deb357d">plSmallArrayBase::PushBack</a></div><div class="ttdeci">void PushBack(const T &amp;value, plAllocator *pAllocator)</div><div class="ttdoc">Pushes value at the end of the array.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:354</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_ae0c4dfc056dcc0d9739e6ed397dcd583"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#ae0c4dfc056dcc0d9739e6ed397dcd583">plSmallArrayBase::IndexOf</a></div><div class="ttdeci">plUInt32 IndexOf(const T &amp;value, plUInt32 uiStartIndex=0) const</div><div class="ttdoc">Searches for the first occurrence of the given value and returns its index or plInvalidIndex if not f...</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:312</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_ae10acb56265e7505bf03cc5c90e8fc09"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#ae10acb56265e7505bf03cc5c90e8fc09">plSmallArrayBase::operator==</a></div><div class="ttdeci">bool operator==(const plSmallArrayBase&lt; T, Size &gt; &amp;rhs) const</div><div class="ttdoc">Compares this array to another contiguous array type.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:111</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_ae496c8f3895f5c72d78e17e7936ec8d3"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#ae496c8f3895f5c72d78e17e7936ec8d3">plSmallArrayBase::RemoveAndSwap</a></div><div class="ttdeci">bool RemoveAndSwap(const T &amp;value)</div><div class="ttdoc">Removes the first occurrence of value and fills the gap by swapping in the last element.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:269</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_af1f603e32fd9d8e5d01ac453c9a3f898"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#af1f603e32fd9d8e5d01ac453c9a3f898">plSmallArrayBase::Contains</a></div><div class="ttdeci">bool Contains(const T &amp;value) const</div><div class="ttdoc">Checks whether the given value can be found in the array. O(n) complexity.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:229</div></div>
<div class="ttc" id="aclasspl_small_array_htm"><div class="ttname"><a href="../../df/dd9/classpl_small_array.htm">plSmallArray</a></div><div class="ttdef"><b>Definition</b> SmallArray.h:219</div></div>
<div class="ttc" id="aclasspl_sorting_htm_a54c184164bc333e6b16dbee44a115c2b"><div class="ttname"><a href="../../da/d2c/classpl_sorting.htm#a54c184164bc333e6b16dbee44a115c2b">plSorting::QuickSort</a></div><div class="ttdeci">static void QuickSort(Container &amp;inout_container, const Comparer &amp;comparer=Comparer())</div><div class="ttdoc">Sorts the elements in container using a in-place quick sort implementation (not stable).</div><div class="ttdef"><b>Definition</b> Sorting_inl.h:3</div></div>
<div class="ttc" id="anamespacepl_math_htm_a314b24989122e22968ae0a11cc872e28"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a314b24989122e22968ae0a11cc872e28">plMath::Min</a></div><div class="ttdeci">constexpr PL_ALWAYS_INLINE T Min(T f1, T f2)</div><div class="ttdoc">Returns the smaller value, f1 or f2.</div><div class="ttdef"><b>Definition</b> Math_inl.h:27</div></div>
<div class="ttc" id="anamespacepl_math_htm_ad724a3f51a1faa9bcc3e6a53fd6b9a4f"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">plMath::Max</a></div><div class="ttdeci">constexpr PL_ALWAYS_INLINE T Max(T f1, T f2)</div><div class="ttdoc">Returns the greater value, f1 or f2.</div><div class="ttdef"><b>Definition</b> Math_inl.h:39</div></div>
<div class="ttc" id="astructconst__reverse__pointer__iterator_htm"><div class="ttname"><a href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">const_reverse_pointer_iterator</a></div><div class="ttdoc">Base class for Pointer like reverse iterators.</div><div class="ttdef"><b>Definition</b> ArrayIterator.h:152</div></div>
<div class="ttc" id="astructpl_compare_helper_htm"><div class="ttname"><a href="../../df/dc9/structpl_compare_helper.htm">plCompareHelper</a></div><div class="ttdoc">A comparer object is used in sorting algorithms to compare to objects of the same type.</div><div class="ttdef"><b>Definition</b> Comparer.h:7</div></div>
<div class="ttc" id="astructpl_is_pod_type_htm"><div class="ttname"><a href="../../d5/d6a/structpl_is_pod_type.htm">plIsPodType</a></div><div class="ttdoc">If there is an % operator which takes a TypeIsPod and returns a CompileTimeTrueType T is Pod....</div><div class="ttdef"><b>Definition</b> TypeTraits.h:43</div></div>
<div class="ttc" id="astructreverse__pointer__iterator_htm"><div class="ttname"><a href="../../d3/df2/structreverse__pointer__iterator.htm">reverse_pointer_iterator</a></div><div class="ttdoc">Non-Const class for Pointer like reverse iterators.</div><div class="ttdef"><b>Definition</b> ArrayIterator.h:216</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_3416883c1320ec68c4d0694befd114fc.htm">Containers</a></li><li class="navelem"><a class="el" href="../../dir_f032078016c44376fe34ead7fd8ff37e.htm">Implementation</a></li><li class="navelem"><b>SmallArray_inl.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
