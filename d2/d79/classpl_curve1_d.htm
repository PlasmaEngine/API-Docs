<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>plEngine: plCurve1D Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only-darkmode-toggle.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">plEngine<span id="projectnumber">&#160;Release 2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d2/d79/classpl_curve1_d.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="../../de/dc5/classpl_curve1_d-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plCurve1D Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p>A 1D curve for animating a single value over time.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../db/dd2/_curve1_d_8h_source.htm">Curve1D.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/db8/structpl_curve1_d_1_1_control_point.htm">ControlPoint</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores position and tangents to control spline interpolation.  <a href="../../d4/db8/structpl_curve1_d_1_1_control_point.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ab69af8ff628d26a204b1f38b48ca7aa3" id="r_ab69af8ff628d26a204b1f38b48ca7aa3"><td class="memItemLeft" align="right" valign="top"><a id="ab69af8ff628d26a204b1f38b48ca7aa3" name="ab69af8ff628d26a204b1f38b48ca7aa3"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Clear</b> ()</td></tr>
<tr class="memdesc:ab69af8ff628d26a204b1f38b48ca7aa3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all control points. <br /></td></tr>
<tr class="separator:ab69af8ff628d26a204b1f38b48ca7aa3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e0a0d2680d58b99026272a92d70368a" id="r_a0e0a0d2680d58b99026272a92d70368a"><td class="memItemLeft" align="right" valign="top"><a id="a0e0a0d2680d58b99026272a92d70368a" name="a0e0a0d2680d58b99026272a92d70368a"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEmpty</b> () const</td></tr>
<tr class="memdesc:a0e0a0d2680d58b99026272a92d70368a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the curve has any control point. <br /></td></tr>
<tr class="separator:a0e0a0d2680d58b99026272a92d70368a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e69b9175d58cd2a413d30c906dc74a1" id="r_a5e69b9175d58cd2a413d30c906dc74a1"><td class="memItemLeft" align="right" valign="top"><a id="a5e69b9175d58cd2a413d30c906dc74a1" name="a5e69b9175d58cd2a413d30c906dc74a1"></a>
<a class="el" href="../../d4/db8/structpl_curve1_d_1_1_control_point.htm">ControlPoint</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>AddControlPoint</b> (double fPos)</td></tr>
<tr class="memdesc:a5e69b9175d58cd2a413d30c906dc74a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends a control point. <a class="el" href="#ab8ddca8ce76f78a4914a28bf8452f9f2" title="Sorts the control point arrays by their position. The CPs have to be sorted before calling Evaluate()...">SortControlPoints()</a> must be called to before evaluating the curve. <br /></td></tr>
<tr class="separator:a5e69b9175d58cd2a413d30c906dc74a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d0a5a641b3a551eb6aa301cab6f68b0" id="r_a2d0a5a641b3a551eb6aa301cab6f68b0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2d0a5a641b3a551eb6aa301cab6f68b0">RecomputeExtents</a> ()</td></tr>
<tr class="memdesc:a2d0a5a641b3a551eb6aa301cab6f68b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Updates the min/max X value that can be retrieved through GetExtents().  <br /></td></tr>
<tr class="separator:a2d0a5a641b3a551eb6aa301cab6f68b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe186d43c0155363c3081b708f8dc35a" id="r_afe186d43c0155363c3081b708f8dc35a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#afe186d43c0155363c3081b708f8dc35a">QueryExtents</a> (double &amp;ref_fMinx, double &amp;ref_fMaxx) const</td></tr>
<tr class="memdesc:afe186d43c0155363c3081b708f8dc35a"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the min and max position value across all control points.  <br /></td></tr>
<tr class="separator:afe186d43c0155363c3081b708f8dc35a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae707372088ec78ce8c2c5bd9ff538747" id="r_ae707372088ec78ce8c2c5bd9ff538747"><td class="memItemLeft" align="right" valign="top"><a id="ae707372088ec78ce8c2c5bd9ff538747" name="ae707372088ec78ce8c2c5bd9ff538747"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>QueryExtremeValues</b> (double &amp;ref_fMinVal, double &amp;ref_fMaxVal) const</td></tr>
<tr class="memdesc:ae707372088ec78ce8c2c5bd9ff538747"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the min and max Y value across the curve. For this information to be available, the linear approximation of the curve must have been computed, otherwise stale values will be returned. <br /></td></tr>
<tr class="separator:ae707372088ec78ce8c2c5bd9ff538747"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a913efe5191b869df38de3d568902fa04" id="r_a913efe5191b869df38de3d568902fa04"><td class="memItemLeft" align="right" valign="top"><a id="a913efe5191b869df38de3d568902fa04" name="a913efe5191b869df38de3d568902fa04"></a>
plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GetNumControlPoints</b> () const</td></tr>
<tr class="memdesc:a913efe5191b869df38de3d568902fa04"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of control points. <br /></td></tr>
<tr class="separator:a913efe5191b869df38de3d568902fa04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea274f9dda9372b36cdd0077ea570f58" id="r_aea274f9dda9372b36cdd0077ea570f58"><td class="memItemLeft" align="right" valign="top"><a id="aea274f9dda9372b36cdd0077ea570f58" name="aea274f9dda9372b36cdd0077ea570f58"></a>
const <a class="el" href="../../d4/db8/structpl_curve1_d_1_1_control_point.htm">ControlPoint</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>GetControlPoint</b> (plUInt32 uiIdx) const</td></tr>
<tr class="memdesc:aea274f9dda9372b36cdd0077ea570f58"><td class="mdescLeft">&#160;</td><td class="mdescRight">Const access to a control point. <br /></td></tr>
<tr class="separator:aea274f9dda9372b36cdd0077ea570f58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af020daf62e8ceb6f9894a972b321cc1f" id="r_af020daf62e8ceb6f9894a972b321cc1f"><td class="memItemLeft" align="right" valign="top"><a id="af020daf62e8ceb6f9894a972b321cc1f" name="af020daf62e8ceb6f9894a972b321cc1f"></a>
<a class="el" href="../../d4/db8/structpl_curve1_d_1_1_control_point.htm">ControlPoint</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>ModifyControlPoint</b> (plUInt32 uiIdx)</td></tr>
<tr class="memdesc:af020daf62e8ceb6f9894a972b321cc1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Non-const access to a control point. If you modify the position, <a class="el" href="#ab8ddca8ce76f78a4914a28bf8452f9f2" title="Sorts the control point arrays by their position. The CPs have to be sorted before calling Evaluate()...">SortControlPoints()</a> has to be called before evaluating the curve. <br /></td></tr>
<tr class="separator:af020daf62e8ceb6f9894a972b321cc1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8ddca8ce76f78a4914a28bf8452f9f2" id="r_ab8ddca8ce76f78a4914a28bf8452f9f2"><td class="memItemLeft" align="right" valign="top"><a id="ab8ddca8ce76f78a4914a28bf8452f9f2" name="ab8ddca8ce76f78a4914a28bf8452f9f2"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SortControlPoints</b> ()</td></tr>
<tr class="memdesc:ab8ddca8ce76f78a4914a28bf8452f9f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sorts the control point arrays by their position. The CPs have to be sorted before calling <a class="el" href="#aef2f87c60f18a7daa5b71ce6ea4c3a6e" title="Evaluates the curve at the given position (x coordinate) and returns the value Y value at that point.">Evaluate()</a>, otherwise the result will be wrong. <br /></td></tr>
<tr class="separator:ab8ddca8ce76f78a4914a28bf8452f9f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef2f87c60f18a7daa5b71ce6ea4c3a6e" id="r_aef2f87c60f18a7daa5b71ce6ea4c3a6e"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aef2f87c60f18a7daa5b71ce6ea4c3a6e">Evaluate</a> (double fPosition) const</td></tr>
<tr class="memdesc:aef2f87c60f18a7daa5b71ce6ea4c3a6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluates the curve at the given position (x coordinate) and returns the value Y value at that point.  <br /></td></tr>
<tr class="separator:aef2f87c60f18a7daa5b71ce6ea4c3a6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa62dd6f22d5c3267eeb88f1cce697ada" id="r_aa62dd6f22d5c3267eeb88f1cce697ada"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa62dd6f22d5c3267eeb88f1cce697ada">ConvertNormalizedPos</a> (double fPos) const</td></tr>
<tr class="memdesc:aa62dd6f22d5c3267eeb88f1cce697ada"><td class="mdescLeft">&#160;</td><td class="mdescRight">Takes the normalized x coordinate [0;1] and converts it into a valid position on the curve.  <br /></td></tr>
<tr class="separator:aa62dd6f22d5c3267eeb88f1cce697ada"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95a032987b2972c0cef0811d88a37972" id="r_a95a032987b2972c0cef0811d88a37972"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a95a032987b2972c0cef0811d88a37972">NormalizeValue</a> (double value) const</td></tr>
<tr class="memdesc:a95a032987b2972c0cef0811d88a37972"><td class="mdescLeft">&#160;</td><td class="mdescRight">Takes a value (typically returned by <a class="el" href="#aef2f87c60f18a7daa5b71ce6ea4c3a6e" title="Evaluates the curve at the given position (x coordinate) and returns the value Y value at that point.">Evaluate()</a>) and normalizes it into [0;1] range.  <br /></td></tr>
<tr class="separator:a95a032987b2972c0cef0811d88a37972"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abac66526af3760d5d44271df6446a096" id="r_abac66526af3760d5d44271df6446a096"><td class="memItemLeft" align="right" valign="top"><a id="abac66526af3760d5d44271df6446a096" name="abac66526af3760d5d44271df6446a096"></a>
plUInt64&#160;</td><td class="memItemRight" valign="bottom"><b>GetHeapMemoryUsage</b> () const</td></tr>
<tr class="memdesc:abac66526af3760d5d44271df6446a096"><td class="mdescLeft">&#160;</td><td class="mdescRight">How much heap memory the curve uses. <br /></td></tr>
<tr class="separator:abac66526af3760d5d44271df6446a096"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a3ddcd07c9ca0ab4b70e3f356c4d71e" id="r_a0a3ddcd07c9ca0ab4b70e3f356c4d71e"><td class="memItemLeft" align="right" valign="top"><a id="a0a3ddcd07c9ca0ab4b70e3f356c4d71e" name="a0a3ddcd07c9ca0ab4b70e3f356c4d71e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Save</b> (<a class="el" href="../../d6/d90/classpl_stream_writer.htm">plStreamWriter</a> &amp;inout_stream) const</td></tr>
<tr class="memdesc:a0a3ddcd07c9ca0ab4b70e3f356c4d71e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores the current state in a stream. <br /></td></tr>
<tr class="separator:a0a3ddcd07c9ca0ab4b70e3f356c4d71e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a213921bde5f8b89088f86d03eb3f4be3" id="r_a213921bde5f8b89088f86d03eb3f4be3"><td class="memItemLeft" align="right" valign="top"><a id="a213921bde5f8b89088f86d03eb3f4be3" name="a213921bde5f8b89088f86d03eb3f4be3"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Load</b> (<a class="el" href="../../df/d3d/classpl_stream_reader.htm">plStreamReader</a> &amp;inout_stream)</td></tr>
<tr class="memdesc:a213921bde5f8b89088f86d03eb3f4be3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Restores the state from a stream. <br /></td></tr>
<tr class="separator:a213921bde5f8b89088f86d03eb3f4be3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a219923e93af283ee3fd9331be2dfaa35" id="r_a219923e93af283ee3fd9331be2dfaa35"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a219923e93af283ee3fd9331be2dfaa35">CreateLinearApproximation</a> (double fMaxError=0.01, plUInt8 uiMaxSubDivs=8)</td></tr>
<tr class="memdesc:a219923e93af283ee3fd9331be2dfaa35"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pre-computes sample points for linear interpolation that approximate the curve within the allowed error threshold.  <br /></td></tr>
<tr class="separator:a219923e93af283ee3fd9331be2dfaa35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c048369377b6bb26097cb09c9b54c45" id="r_a4c048369377b6bb26097cb09c9b54c45"><td class="memItemLeft" align="right" valign="top"><a id="a4c048369377b6bb26097cb09c9b54c45" name="a4c048369377b6bb26097cb09c9b54c45"></a>
const <a class="el" href="../../d8/dcc/classpl_hybrid_array.htm">plHybridArray</a>&lt; <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2d</a>, 24 &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>GetLinearApproximation</b> () const</td></tr>
<tr class="separator:a4c048369377b6bb26097cb09c9b54c45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6af47345fdd242fa43b24c9b1809da8" id="r_ac6af47345fdd242fa43b24c9b1809da8"><td class="memItemLeft" align="right" valign="top"><a id="ac6af47345fdd242fa43b24c9b1809da8" name="ac6af47345fdd242fa43b24c9b1809da8"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>ClampTangents</b> ()</td></tr>
<tr class="memdesc:ac6af47345fdd242fa43b24c9b1809da8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adjusts the tangents such that the curve cannot make loopings. <br /></td></tr>
<tr class="separator:ac6af47345fdd242fa43b24c9b1809da8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9c493a81dfe49a6530e2605791d6002" id="r_af9c493a81dfe49a6530e2605791d6002"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af9c493a81dfe49a6530e2605791d6002">ApplyTangentModes</a> ()</td></tr>
<tr class="memdesc:af9c493a81dfe49a6530e2605791d6002"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adjusts the tangents in accordance to the specified tangent modes at each control point.  <br /></td></tr>
<tr class="separator:af9c493a81dfe49a6530e2605791d6002"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f82532263661a727ad940d3fab90010" id="r_a1f82532263661a727ad940d3fab90010"><td class="memItemLeft" align="right" valign="top"><a id="a1f82532263661a727ad940d3fab90010" name="a1f82532263661a727ad940d3fab90010"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>MakeFixedLengthTangentLeft</b> (plUInt32 uiCpIdx)</td></tr>
<tr class="memdesc:a1f82532263661a727ad940d3fab90010"><td class="mdescLeft">&#160;</td><td class="mdescRight">Typically called by <a class="el" href="#af9c493a81dfe49a6530e2605791d6002" title="Adjusts the tangents in accordance to the specified tangent modes at each control point.">ApplyTangentModes()</a> for specific control points. Control points must be in sorted order. <br /></td></tr>
<tr class="separator:a1f82532263661a727ad940d3fab90010"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4840bff12fa8ed50cfc3cf2072f9c579" id="r_a4840bff12fa8ed50cfc3cf2072f9c579"><td class="memItemLeft" align="right" valign="top"><a id="a4840bff12fa8ed50cfc3cf2072f9c579" name="a4840bff12fa8ed50cfc3cf2072f9c579"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>MakeFixedLengthTangentRight</b> (plUInt32 uiCpIdx)</td></tr>
<tr class="memdesc:a4840bff12fa8ed50cfc3cf2072f9c579"><td class="mdescLeft">&#160;</td><td class="mdescRight">Typically called by <a class="el" href="#af9c493a81dfe49a6530e2605791d6002" title="Adjusts the tangents in accordance to the specified tangent modes at each control point.">ApplyTangentModes()</a> for specific control points. Control points must be in sorted order. <br /></td></tr>
<tr class="separator:a4840bff12fa8ed50cfc3cf2072f9c579"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a399be477fa87a089c92c21cff8e29da4" id="r_a399be477fa87a089c92c21cff8e29da4"><td class="memItemLeft" align="right" valign="top"><a id="a399be477fa87a089c92c21cff8e29da4" name="a399be477fa87a089c92c21cff8e29da4"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>MakeLinearTangentLeft</b> (plUInt32 uiCpIdx)</td></tr>
<tr class="memdesc:a399be477fa87a089c92c21cff8e29da4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Typically called by <a class="el" href="#af9c493a81dfe49a6530e2605791d6002" title="Adjusts the tangents in accordance to the specified tangent modes at each control point.">ApplyTangentModes()</a> for specific control points. Control points must be in sorted order. <br /></td></tr>
<tr class="separator:a399be477fa87a089c92c21cff8e29da4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89b027cc197d6fca5008eef0cbe5434e" id="r_a89b027cc197d6fca5008eef0cbe5434e"><td class="memItemLeft" align="right" valign="top"><a id="a89b027cc197d6fca5008eef0cbe5434e" name="a89b027cc197d6fca5008eef0cbe5434e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>MakeLinearTangentRight</b> (plUInt32 uiCpIdx)</td></tr>
<tr class="memdesc:a89b027cc197d6fca5008eef0cbe5434e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Typically called by <a class="el" href="#af9c493a81dfe49a6530e2605791d6002" title="Adjusts the tangents in accordance to the specified tangent modes at each control point.">ApplyTangentModes()</a> for specific control points. Control points must be in sorted order. <br /></td></tr>
<tr class="separator:a89b027cc197d6fca5008eef0cbe5434e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af422b0ec348a457b37a3c8867f74d284" id="r_af422b0ec348a457b37a3c8867f74d284"><td class="memItemLeft" align="right" valign="top"><a id="af422b0ec348a457b37a3c8867f74d284" name="af422b0ec348a457b37a3c8867f74d284"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>MakeAutoTangentLeft</b> (plUInt32 uiCpIdx)</td></tr>
<tr class="separator:af422b0ec348a457b37a3c8867f74d284"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2421b59a710b20ed5f7718776ef0f9a3" id="r_a2421b59a710b20ed5f7718776ef0f9a3"><td class="memItemLeft" align="right" valign="top"><a id="a2421b59a710b20ed5f7718776ef0f9a3" name="a2421b59a710b20ed5f7718776ef0f9a3"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>MakeAutoTangentRight</b> (plUInt32 uiCpIdx)</td></tr>
<tr class="separator:a2421b59a710b20ed5f7718776ef0f9a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A 1D curve for animating a single value over time. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="af9c493a81dfe49a6530e2605791d6002" name="af9c493a81dfe49a6530e2605791d6002"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9c493a81dfe49a6530e2605791d6002">&#9670;&#160;</a></span>ApplyTangentModes()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void plCurve1D::ApplyTangentModes </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adjusts the tangents in accordance to the specified tangent modes at each control point. </p>
<dl class="section note"><dt>Note</dt><dd>All control points must already be in sorted order, so call <a class="el" href="#ab8ddca8ce76f78a4914a28bf8452f9f2" title="Sorts the control point arrays by their position. The CPs have to be sorted before calling Evaluate()...">SortControlPoints()</a> first if necessary. </dd></dl>

</div>
</div>
<a id="aa62dd6f22d5c3267eeb88f1cce697ada" name="aa62dd6f22d5c3267eeb88f1cce697ada"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa62dd6f22d5c3267eeb88f1cce697ada">&#9670;&#160;</a></span>ConvertNormalizedPos()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double plCurve1D::ConvertNormalizedPos </td>
          <td>(</td>
          <td class="paramtype">double</td>          <td class="paramname"><span class="paramname"><em>fPos</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Takes the normalized x coordinate [0;1] and converts it into a valid position on the curve. </p>
<dl class="section note"><dt>Note</dt><dd>This only works when the curve extents are available. See <a class="el" href="#afe186d43c0155363c3081b708f8dc35a" title="returns the min and max position value across all control points.">QueryExtents()</a> and <a class="el" href="#a2d0a5a641b3a551eb6aa301cab6f68b0" title="Updates the min/max X value that can be retrieved through GetExtents().">RecomputeExtents()</a>.</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="#a2d0a5a641b3a551eb6aa301cab6f68b0" title="Updates the min/max X value that can be retrieved through GetExtents().">RecomputeExtents</a> </dd>
<dd>
<a class="el" href="#afe186d43c0155363c3081b708f8dc35a" title="returns the min and max position value across all control points.">QueryExtents</a> </dd></dl>

</div>
</div>
<a id="a219923e93af283ee3fd9331be2dfaa35" name="a219923e93af283ee3fd9331be2dfaa35"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a219923e93af283ee3fd9331be2dfaa35">&#9670;&#160;</a></span>CreateLinearApproximation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void plCurve1D::CreateLinearApproximation </td>
          <td>(</td>
          <td class="paramtype">double</td>          <td class="paramname"><span class="paramname"><em>fMaxError</em></span><span class="paramdefsep"> = </span><span class="paramdefval">0.01</span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt8</td>          <td class="paramname"><span class="paramname"><em>uiMaxSubDivs</em></span><span class="paramdefsep"> = </span><span class="paramdefval">8</span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Pre-computes sample points for linear interpolation that approximate the curve within the allowed error threshold. </p>
<dl class="section note"><dt>Note</dt><dd>All control points must already be in sorted order, so call <a class="el" href="#ab8ddca8ce76f78a4914a28bf8452f9f2" title="Sorts the control point arrays by their position. The CPs have to be sorted before calling Evaluate()...">SortControlPoints()</a> first if necessary. </dd></dl>
<dl class="todo"><dt><b><a class="el" href="../../dd/da0/todo.htm#_todo000059">Todo</a></b></dt><dd>Since we do this, we actually don't need the linear approximation anymore and could just evaluate the full curve </dd></dl>

</div>
</div>
<a id="aef2f87c60f18a7daa5b71ce6ea4c3a6e" name="aef2f87c60f18a7daa5b71ce6ea4c3a6e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef2f87c60f18a7daa5b71ce6ea4c3a6e">&#9670;&#160;</a></span>Evaluate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double plCurve1D::Evaluate </td>
          <td>(</td>
          <td class="paramtype">double</td>          <td class="paramname"><span class="paramname"><em>fPosition</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Evaluates the curve at the given position (x coordinate) and returns the value Y value at that point. </p>
<p>This uses the linear approximation of the curve, so <a class="el" href="#a219923e93af283ee3fd9331be2dfaa35" title="Pre-computes sample points for linear interpolation that approximate the curve within the allowed err...">CreateLinearApproximation()</a> must have been called first.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="#a219923e93af283ee3fd9331be2dfaa35" title="Pre-computes sample points for linear interpolation that approximate the curve within the allowed err...">CreateLinearApproximation</a> </dd></dl>

</div>
</div>
<a id="a95a032987b2972c0cef0811d88a37972" name="a95a032987b2972c0cef0811d88a37972"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95a032987b2972c0cef0811d88a37972">&#9670;&#160;</a></span>NormalizeValue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double plCurve1D::NormalizeValue </td>
          <td>(</td>
          <td class="paramtype">double</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Takes a value (typically returned by <a class="el" href="#aef2f87c60f18a7daa5b71ce6ea4c3a6e" title="Evaluates the curve at the given position (x coordinate) and returns the value Y value at that point.">Evaluate()</a>) and normalizes it into [0;1] range. </p>
<dl class="section note"><dt>Note</dt><dd>This only works when the linear approximation of the curve has been computed first. </dd></dl>

</div>
</div>
<a id="afe186d43c0155363c3081b708f8dc35a" name="afe186d43c0155363c3081b708f8dc35a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe186d43c0155363c3081b708f8dc35a">&#9670;&#160;</a></span>QueryExtents()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void plCurve1D::QueryExtents </td>
          <td>(</td>
          <td class="paramtype">double &amp;</td>          <td class="paramname"><span class="paramname"><em>ref_fMinx</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double &amp;</td>          <td class="paramname"><span class="paramname"><em>ref_fMaxx</em></span>&#160;) const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>returns the min and max position value across all control points. </p>
<p>The returned values are only up to date if either <a class="el" href="#ab8ddca8ce76f78a4914a28bf8452f9f2" title="Sorts the control point arrays by their position. The CPs have to be sorted before calling Evaluate()...">SortControlPoints()</a> or <a class="el" href="#a2d0a5a641b3a551eb6aa301cab6f68b0" title="Updates the min/max X value that can be retrieved through GetExtents().">RecomputeExtents()</a> was called before. Otherwise they will contain stale values. </p>

</div>
</div>
<a id="a2d0a5a641b3a551eb6aa301cab6f68b0" name="a2d0a5a641b3a551eb6aa301cab6f68b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2d0a5a641b3a551eb6aa301cab6f68b0">&#9670;&#160;</a></span>RecomputeExtents()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void plCurve1D::RecomputeExtents </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Updates the min/max X value that can be retrieved through GetExtents(). </p>
<p>This is automatically done when <a class="el" href="#ab8ddca8ce76f78a4914a28bf8452f9f2" title="Sorts the control point arrays by their position. The CPs have to be sorted before calling Evaluate()...">SortControlPoints()</a> is called. It can be called manually, if the information is required without sorting. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/Engine/Foundation/Tracks/<a class="el" href="../../db/dd2/_curve1_d_8h_source.htm">Curve1D.h</a></li>
<li>Code/Engine/Foundation/Tracks/Implementation/<b>Curve1D.cpp</b></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d2/d79/classpl_curve1_d.htm">plCurve1D</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
