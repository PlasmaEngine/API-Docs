<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>plEngine: plOpenDdlReader Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only-darkmode-toggle.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">plEngine<span id="projectnumber">&#160;Release 2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d0/d83/classpl_open_ddl_reader.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="#pro-static-attribs">Static Protected Attributes</a> &#124;
<a href="../../d1/d46/classpl_open_ddl_reader-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plOpenDdlReader Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p>An OpenDDL reader parses an entire DDL document and creates an in-memory representation of the document structure.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d3/d4f/_open_ddl_reader_8h_source.htm">OpenDdlReader.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for plOpenDdlReader:</div>
<div class="dyncontent">
<div class="center"><img src="../../d5/dc6/classpl_open_ddl_reader__inherit__graph.png" border="0" usemap="#apl_open_ddl_reader_inherit__map" alt="Inheritance graph"/></div>
<map name="apl_open_ddl_reader_inherit__map" id="apl_open_ddl_reader_inherit__map">
<area shape="rect" title="An OpenDDL reader parses an entire DDL document and creates an in&#45;memory representation of the docume..." alt="" coords="5,80,128,107"/>
<area shape="rect" title=" " alt="" coords="15,155,118,181"/>
<area shape="poly" title=" " alt="" coords="69,122,69,154,64,154,64,122"/>
<area shape="rect" href="../../d4/dc9/classpl_open_ddl_parser.htm" title="A low level parser for the OpenDDL format. It can incrementally parse the structure,..." alt="" coords="7,5,126,32"/>
<area shape="poly" title=" " alt="" coords="69,48,69,80,64,80,64,48"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a7b43f6939721019e67b262770010e45c" id="r_a7b43f6939721019e67b262770010e45c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7b43f6939721019e67b262770010e45c">ParseDocument</a> (<a class="el" href="../../df/d3d/classpl_stream_reader.htm">plStreamReader</a> &amp;inout_stream, plUInt32 uiFirstLineOffset=0, <a class="el" href="../../d5/d6c/classpl_log_interface.htm">plLogInterface</a> *pLog=<a class="el" href="../../dc/d24/classpl_log.htm#afe6864f18010d65027c9678ce96d8b77">plLog::GetThreadLocalLogSystem</a>(), plUInt32 uiCacheSizeInKB=4)</td></tr>
<tr class="memdesc:a7b43f6939721019e67b262770010e45c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parses the given document, returns PL_FAILURE if an unrecoverable parsing error was encountered.  <br /></td></tr>
<tr class="separator:a7b43f6939721019e67b262770010e45c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2c222d73ca193d3ad90480eda0a89fa" id="r_ac2c222d73ca193d3ad90480eda0a89fa"><td class="memItemLeft" align="right" valign="top"><a id="ac2c222d73ca193d3ad90480eda0a89fa" name="ac2c222d73ca193d3ad90480eda0a89fa"></a>
const <a class="el" href="../../d2/d5d/classpl_open_ddl_reader_element.htm">plOpenDdlReaderElement</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetRootElement</b> () const</td></tr>
<tr class="memdesc:ac2c222d73ca193d3ad90480eda0a89fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Every document has exactly one root element. <br /></td></tr>
<tr class="separator:ac2c222d73ca193d3ad90480eda0a89fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5016ab416c06b86dd6fbe5a1b0227abd" id="r_a5016ab416c06b86dd6fbe5a1b0227abd"><td class="memItemLeft" align="right" valign="top"><a id="a5016ab416c06b86dd6fbe5a1b0227abd" name="a5016ab416c06b86dd6fbe5a1b0227abd"></a>
const <a class="el" href="../../d2/d5d/classpl_open_ddl_reader_element.htm">plOpenDdlReaderElement</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>FindElement</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sGlobalName) const</td></tr>
<tr class="memdesc:a5016ab416c06b86dd6fbe5a1b0227abd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Searches for an element with a global name. NULL if there is no such element. <br /></td></tr>
<tr class="separator:a5016ab416c06b86dd6fbe5a1b0227abd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classpl_open_ddl_parser"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_classpl_open_ddl_parser')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm">plOpenDdlParser</a></td></tr>
<tr class="memitem:ae1bc1f95c7714d3df6c9bd77d9d7f2a0 inherit pub_methods_classpl_open_ddl_parser" id="r_ae1bc1f95c7714d3df6c9bd77d9d7f2a0"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>HadFatalParsingError</b> () const</td></tr>
<tr class="memdesc:ae1bc1f95c7714d3df6c9bd77d9d7f2a0 inherit pub_methods_classpl_open_ddl_parser"><td class="mdescLeft">&#160;</td><td class="mdescRight">Whether an error occurred during parsing that resulted in cancellation of further parsing. <br /></td></tr>
<tr class="separator:ae1bc1f95c7714d3df6c9bd77d9d7f2a0 inherit pub_methods_classpl_open_ddl_parser"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-methods" name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a5e57a4e45e55cc76870980c09c263d01" id="r_a5e57a4e45e55cc76870980c09c263d01"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5e57a4e45e55cc76870980c09c263d01">OnBeginObject</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sType, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, bool bGlobalName) override</td></tr>
<tr class="memdesc:a5e57a4e45e55cc76870980c09c263d01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when a new object is encountered.  <br /></td></tr>
<tr class="separator:a5e57a4e45e55cc76870980c09c263d01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2888d135b287c1b6234320b10458f5e9" id="r_a2888d135b287c1b6234320b10458f5e9"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2888d135b287c1b6234320b10458f5e9">OnEndObject</a> () override</td></tr>
<tr class="memdesc:a2888d135b287c1b6234320b10458f5e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when the end of an object is encountered.  <br /></td></tr>
<tr class="separator:a2888d135b287c1b6234320b10458f5e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72061cbe99e7f9d8cd749f5291eb4f03" id="r_a72061cbe99e7f9d8cd749f5291eb4f03"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a72061cbe99e7f9d8cd749f5291eb4f03">OnBeginPrimitiveList</a> (plOpenDdlPrimitiveType type, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, bool bGlobalName) override</td></tr>
<tr class="memdesc:a72061cbe99e7f9d8cd749f5291eb4f03"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when a new primitive object is encountered.  <br /></td></tr>
<tr class="separator:a72061cbe99e7f9d8cd749f5291eb4f03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52e844f97e5beac0335f20d1898ad1ab" id="r_a52e844f97e5beac0335f20d1898ad1ab"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a52e844f97e5beac0335f20d1898ad1ab">OnEndPrimitiveList</a> () override</td></tr>
<tr class="memdesc:a52e844f97e5beac0335f20d1898ad1ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when the end of a primitive object is encountered.  <br /></td></tr>
<tr class="separator:a52e844f97e5beac0335f20d1898ad1ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b533de33efb166d7ded9ae61f3080c5" id="r_a5b533de33efb166d7ded9ae61f3080c5"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5b533de33efb166d7ded9ae61f3080c5">OnPrimitiveBool</a> (plUInt32 count, const bool *pData, bool bThisIsAll) override</td></tr>
<tr class="memdesc:a5b533de33efb166d7ded9ae61f3080c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:a5b533de33efb166d7ded9ae61f3080c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac81493c51068a2174827c678158abac6" id="r_ac81493c51068a2174827c678158abac6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac81493c51068a2174827c678158abac6">OnPrimitiveInt8</a> (plUInt32 count, const plInt8 *pData, bool bThisIsAll) override</td></tr>
<tr class="memdesc:ac81493c51068a2174827c678158abac6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:ac81493c51068a2174827c678158abac6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7903a28c729661a4817ba8cacd64f295" id="r_a7903a28c729661a4817ba8cacd64f295"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7903a28c729661a4817ba8cacd64f295">OnPrimitiveInt16</a> (plUInt32 count, const plInt16 *pData, bool bThisIsAll) override</td></tr>
<tr class="memdesc:a7903a28c729661a4817ba8cacd64f295"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:a7903a28c729661a4817ba8cacd64f295"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d0e5a38332d0e0b394a480fc25677f1" id="r_a3d0e5a38332d0e0b394a480fc25677f1"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3d0e5a38332d0e0b394a480fc25677f1">OnPrimitiveInt32</a> (plUInt32 count, const plInt32 *pData, bool bThisIsAll) override</td></tr>
<tr class="memdesc:a3d0e5a38332d0e0b394a480fc25677f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:a3d0e5a38332d0e0b394a480fc25677f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee3850925181113de298d68565be4fe6" id="r_aee3850925181113de298d68565be4fe6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aee3850925181113de298d68565be4fe6">OnPrimitiveInt64</a> (plUInt32 count, const plInt64 *pData, bool bThisIsAll) override</td></tr>
<tr class="memdesc:aee3850925181113de298d68565be4fe6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:aee3850925181113de298d68565be4fe6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8cdd9aec9f5f3ebfd1e4c09edcb9ef9" id="r_aa8cdd9aec9f5f3ebfd1e4c09edcb9ef9"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa8cdd9aec9f5f3ebfd1e4c09edcb9ef9">OnPrimitiveUInt8</a> (plUInt32 count, const plUInt8 *pData, bool bThisIsAll) override</td></tr>
<tr class="memdesc:aa8cdd9aec9f5f3ebfd1e4c09edcb9ef9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:aa8cdd9aec9f5f3ebfd1e4c09edcb9ef9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6aa1a64a13394d594dff185c9a634517" id="r_a6aa1a64a13394d594dff185c9a634517"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6aa1a64a13394d594dff185c9a634517">OnPrimitiveUInt16</a> (plUInt32 count, const plUInt16 *pData, bool bThisIsAll) override</td></tr>
<tr class="memdesc:a6aa1a64a13394d594dff185c9a634517"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:a6aa1a64a13394d594dff185c9a634517"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe3c8ca38a6efee0a0b13c6069c30d4d" id="r_afe3c8ca38a6efee0a0b13c6069c30d4d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#afe3c8ca38a6efee0a0b13c6069c30d4d">OnPrimitiveUInt32</a> (plUInt32 count, const plUInt32 *pData, bool bThisIsAll) override</td></tr>
<tr class="memdesc:afe3c8ca38a6efee0a0b13c6069c30d4d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:afe3c8ca38a6efee0a0b13c6069c30d4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39d519b6d60332d7d1070a012c14f7a8" id="r_a39d519b6d60332d7d1070a012c14f7a8"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a39d519b6d60332d7d1070a012c14f7a8">OnPrimitiveUInt64</a> (plUInt32 count, const plUInt64 *pData, bool bThisIsAll) override</td></tr>
<tr class="memdesc:a39d519b6d60332d7d1070a012c14f7a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:a39d519b6d60332d7d1070a012c14f7a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af297e7d13b14ab913046b33f03cf4e0f" id="r_af297e7d13b14ab913046b33f03cf4e0f"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af297e7d13b14ab913046b33f03cf4e0f">OnPrimitiveFloat</a> (plUInt32 count, const float *pData, bool bThisIsAll) override</td></tr>
<tr class="memdesc:af297e7d13b14ab913046b33f03cf4e0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:af297e7d13b14ab913046b33f03cf4e0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ced502f690613ca90442f624d32ea1a" id="r_a5ced502f690613ca90442f624d32ea1a"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5ced502f690613ca90442f624d32ea1a">OnPrimitiveDouble</a> (plUInt32 count, const double *pData, bool bThisIsAll) override</td></tr>
<tr class="memdesc:a5ced502f690613ca90442f624d32ea1a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:a5ced502f690613ca90442f624d32ea1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9dcc04346068ba636fdeb378fe27a56" id="r_ac9dcc04346068ba636fdeb378fe27a56"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac9dcc04346068ba636fdeb378fe27a56">OnPrimitiveString</a> (plUInt32 count, const <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> *pData, bool bThisIsAll) override</td></tr>
<tr class="memdesc:ac9dcc04346068ba636fdeb378fe27a56"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when data for a primitive type is available. More than one value may be reported at a time.  <br /></td></tr>
<tr class="separator:ac9dcc04346068ba636fdeb378fe27a56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa702fc2ffa307608fe7cbd4f6e743a33" id="r_aa702fc2ffa307608fe7cbd4f6e743a33"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa702fc2ffa307608fe7cbd4f6e743a33">OnParsingError</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sMessage, bool bFatal, plUInt32 uiLine, plUInt32 uiColumn) override</td></tr>
<tr class="memdesc:aa702fc2ffa307608fe7cbd4f6e743a33"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when something unexpected is encountered in the document.  <br /></td></tr>
<tr class="separator:aa702fc2ffa307608fe7cbd4f6e743a33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46044688c8eda842f1183791fee620d6" id="r_a46044688c8eda842f1183791fee620d6"><td class="memItemLeft" align="right" valign="top"><a id="a46044688c8eda842f1183791fee620d6" name="a46044688c8eda842f1183791fee620d6"></a>
<a class="el" href="../../d2/d5d/classpl_open_ddl_reader_element.htm">plOpenDdlReaderElement</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>CreateElement</b> (plOpenDdlPrimitiveType type, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sType, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, bool bGlobalName)</td></tr>
<tr class="separator:a46044688c8eda842f1183791fee620d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd8e45a48469c80c9bda12af5fb1a850" id="r_abd8e45a48469c80c9bda12af5fb1a850"><td class="memItemLeft" align="right" valign="top"><a id="abd8e45a48469c80c9bda12af5fb1a850" name="abd8e45a48469c80c9bda12af5fb1a850"></a>
<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><b>CopyString</b> (const <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> &amp;string)</td></tr>
<tr class="separator:abd8e45a48469c80c9bda12af5fb1a850"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85bb412862b69853ead7b8d5efa3b76d" id="r_a85bb412862b69853ead7b8d5efa3b76d"><td class="memItemLeft" align="right" valign="top"><a id="a85bb412862b69853ead7b8d5efa3b76d" name="a85bb412862b69853ead7b8d5efa3b76d"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>StorePrimitiveData</b> (bool bThisIsAll, plUInt32 bytecount, const plUInt8 *pData)</td></tr>
<tr class="separator:a85bb412862b69853ead7b8d5efa3b76d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e986466e661dfa0adcf412812ba38a2" id="r_a3e986466e661dfa0adcf412812ba38a2"><td class="memItemLeft" align="right" valign="top"><a id="a3e986466e661dfa0adcf412812ba38a2" name="a3e986466e661dfa0adcf412812ba38a2"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>ClearDataChunks</b> ()</td></tr>
<tr class="separator:a3e986466e661dfa0adcf412812ba38a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ebdaf748b92fca51816740f9036ed11" id="r_a6ebdaf748b92fca51816740f9036ed11"><td class="memItemLeft" align="right" valign="top"><a id="a6ebdaf748b92fca51816740f9036ed11" name="a6ebdaf748b92fca51816740f9036ed11"></a>
plUInt8 *&#160;</td><td class="memItemRight" valign="bottom"><b>AllocateBytes</b> (plUInt32 uiNumBytes)</td></tr>
<tr class="separator:a6ebdaf748b92fca51816740f9036ed11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classpl_open_ddl_parser"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_methods_classpl_open_ddl_parser')"><img src="../../closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm">plOpenDdlParser</a></td></tr>
<tr class="memitem:a5dd6e98de28d8565e25bae1995052861 inherit pro_methods_classpl_open_ddl_parser" id="r_a5dd6e98de28d8565e25bae1995052861"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetLogInterface</b> (<a class="el" href="../../d5/d6c/classpl_log_interface.htm">plLogInterface</a> *pLog)</td></tr>
<tr class="memdesc:a5dd6e98de28d8565e25bae1995052861 inherit pro_methods_classpl_open_ddl_parser"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets an <a class="el" href="../../d5/d6c/classpl_log_interface.htm" title="Base class for all logging classes.">plLogInterface</a> through which errors and warnings are reported. <br /></td></tr>
<tr class="separator:a5dd6e98de28d8565e25bae1995052861 inherit pro_methods_classpl_open_ddl_parser"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f1b08d4238dc8187db5896eb2f34405 inherit pro_methods_classpl_open_ddl_parser" id="r_a4f1b08d4238dc8187db5896eb2f34405"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm#a4f1b08d4238dc8187db5896eb2f34405">SetCacheSize</a> (plUInt32 uiSizeInKB)</td></tr>
<tr class="memdesc:a4f1b08d4238dc8187db5896eb2f34405 inherit pro_methods_classpl_open_ddl_parser"><td class="mdescLeft">&#160;</td><td class="mdescRight">Data is returned in larger chunks, to reduce the number of function calls. The cache size determines the maximum chunk size per primitive type.  <br /></td></tr>
<tr class="separator:a4f1b08d4238dc8187db5896eb2f34405 inherit pro_methods_classpl_open_ddl_parser"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e09f139a2da25bdce3c0edcf3bb57b5 inherit pro_methods_classpl_open_ddl_parser" id="r_a1e09f139a2da25bdce3c0edcf3bb57b5"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetInputStream</b> (<a class="el" href="../../df/d3d/classpl_stream_reader.htm">plStreamReader</a> &amp;stream, plUInt32 uiFirstLineOffset=0)</td></tr>
<tr class="memdesc:a1e09f139a2da25bdce3c0edcf3bb57b5 inherit pro_methods_classpl_open_ddl_parser"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures the parser to read from the given stream. This can only be called once on a parser instance. <br /></td></tr>
<tr class="separator:a1e09f139a2da25bdce3c0edcf3bb57b5 inherit pro_methods_classpl_open_ddl_parser"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacaa19ee76981deba6d6d24ab8490b3f inherit pro_methods_classpl_open_ddl_parser" id="r_aacaa19ee76981deba6d6d24ab8490b3f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm#aacaa19ee76981deba6d6d24ab8490b3f">ContinueParsing</a> ()</td></tr>
<tr class="memdesc:aacaa19ee76981deba6d6d24ab8490b3f inherit pro_methods_classpl_open_ddl_parser"><td class="mdescLeft">&#160;</td><td class="mdescRight">Call this to parse the next piece of the document. This may trigger a callback through which data is returned.  <br /></td></tr>
<tr class="separator:aacaa19ee76981deba6d6d24ab8490b3f inherit pro_methods_classpl_open_ddl_parser"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab060843a1e5ea0e1865f5766b06e28c inherit pro_methods_classpl_open_ddl_parser" id="r_aab060843a1e5ea0e1865f5766b06e28c"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><b>ParseAll</b> ()</td></tr>
<tr class="memdesc:aab060843a1e5ea0e1865f5766b06e28c inherit pro_methods_classpl_open_ddl_parser"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calls <a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm#aacaa19ee76981deba6d6d24ab8490b3f" title="Call this to parse the next piece of the document. This may trigger a callback through which data is ...">ContinueParsing()</a> in a loop until that returns false. <br /></td></tr>
<tr class="separator:aab060843a1e5ea0e1865f5766b06e28c inherit pro_methods_classpl_open_ddl_parser"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a469915106b61bd5c87e6a673287582e4 inherit pro_methods_classpl_open_ddl_parser" id="r_a469915106b61bd5c87e6a673287582e4"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>SkipRestOfObject</b> ()</td></tr>
<tr class="memdesc:a469915106b61bd5c87e6a673287582e4 inherit pro_methods_classpl_open_ddl_parser"><td class="mdescLeft">&#160;</td><td class="mdescRight">Skips the rest of the currently open object. No <a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm#abf24a508c2bd33aae660217d8bf41e90" title="Called when the end of an object is encountered.">OnEndObject()</a> call will be done for this object either. <br /></td></tr>
<tr class="separator:a469915106b61bd5c87e6a673287582e4 inherit pro_methods_classpl_open_ddl_parser"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09a44dcef5a1a2db965fef8cc3ef37bf inherit pro_methods_classpl_open_ddl_parser" id="r_a09a44dcef5a1a2db965fef8cc3ef37bf"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>StopParsing</b> ()</td></tr>
<tr class="memdesc:a09a44dcef5a1a2db965fef8cc3ef37bf inherit pro_methods_classpl_open_ddl_parser"><td class="mdescLeft">&#160;</td><td class="mdescRight">Can be used to prevent parsing the rest of the document. <br /></td></tr>
<tr class="separator:a09a44dcef5a1a2db965fef8cc3ef37bf inherit pro_methods_classpl_open_ddl_parser"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92e4c879c1f3a457c3e22943e922a3a0 inherit pro_methods_classpl_open_ddl_parser" id="r_a92e4c879c1f3a457c3e22943e922a3a0"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>ParsingError</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sMessage, bool bFatal)</td></tr>
<tr class="memdesc:a92e4c879c1f3a457c3e22943e922a3a0 inherit pro_methods_classpl_open_ddl_parser"><td class="mdescLeft">&#160;</td><td class="mdescRight">Outputs that a parsing error was detected (via OnParsingError) and stops further parsing, if bFatal is set to true. <br /></td></tr>
<tr class="separator:a92e4c879c1f3a457c3e22943e922a3a0 inherit pro_methods_classpl_open_ddl_parser"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-attribs" name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a374f20ce338bb132912fa007a4cafcb4" id="r_a374f20ce338bb132912fa007a4cafcb4"><td class="memItemLeft" align="right" valign="top"><a id="a374f20ce338bb132912fa007a4cafcb4" name="a374f20ce338bb132912fa007a4cafcb4"></a>
<a class="el" href="../../d8/dcc/classpl_hybrid_array.htm">plHybridArray</a>&lt; plUInt8 *, 16 &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>m_DataChunks</b></td></tr>
<tr class="separator:a374f20ce338bb132912fa007a4cafcb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84f4f6fd9bd992c0ef7ddc571dd6f47a" id="r_a84f4f6fd9bd992c0ef7ddc571dd6f47a"><td class="memItemLeft" align="right" valign="top"><a id="a84f4f6fd9bd992c0ef7ddc571dd6f47a" name="a84f4f6fd9bd992c0ef7ddc571dd6f47a"></a>
plUInt8 *&#160;</td><td class="memItemRight" valign="bottom"><b>m_pCurrentChunk</b></td></tr>
<tr class="separator:a84f4f6fd9bd992c0ef7ddc571dd6f47a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab39945f44a15ba9dd7a0b3aa8b1ea2ea" id="r_ab39945f44a15ba9dd7a0b3aa8b1ea2ea"><td class="memItemLeft" align="right" valign="top"><a id="ab39945f44a15ba9dd7a0b3aa8b1ea2ea" name="ab39945f44a15ba9dd7a0b3aa8b1ea2ea"></a>
plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>m_uiBytesInChunkLeft</b></td></tr>
<tr class="separator:ab39945f44a15ba9dd7a0b3aa8b1ea2ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37ae4bf21eb66461f7627606fb1e726f" id="r_a37ae4bf21eb66461f7627606fb1e726f"><td class="memItemLeft" align="right" valign="top"><a id="a37ae4bf21eb66461f7627606fb1e726f" name="a37ae4bf21eb66461f7627606fb1e726f"></a>
<a class="el" href="../../d0/d4e/classpl_dynamic_array.htm">plDynamicArray</a>&lt; plUInt8 &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>m_TempCache</b></td></tr>
<tr class="separator:a37ae4bf21eb66461f7627606fb1e726f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85e006ad50705834d4e37f504437cb5e" id="r_a85e006ad50705834d4e37f504437cb5e"><td class="memItemLeft" align="right" valign="top"><a id="a85e006ad50705834d4e37f504437cb5e" name="a85e006ad50705834d4e37f504437cb5e"></a>
<a class="el" href="../../d7/de8/classpl_deque.htm">plDeque</a>&lt; <a class="el" href="../../d2/d5d/classpl_open_ddl_reader_element.htm">plOpenDdlReaderElement</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>m_Elements</b></td></tr>
<tr class="separator:a85e006ad50705834d4e37f504437cb5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d117ec025463040a3544ba3ce15a02e" id="r_a2d117ec025463040a3544ba3ce15a02e"><td class="memItemLeft" align="right" valign="top"><a id="a2d117ec025463040a3544ba3ce15a02e" name="a2d117ec025463040a3544ba3ce15a02e"></a>
<a class="el" href="../../d8/dcc/classpl_hybrid_array.htm">plHybridArray</a>&lt; <a class="el" href="../../d2/d5d/classpl_open_ddl_reader_element.htm">plOpenDdlReaderElement</a> *, 16 &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>m_ObjectStack</b></td></tr>
<tr class="separator:a2d117ec025463040a3544ba3ce15a02e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc243d34cde27bce37fa542cd72dee29" id="r_acc243d34cde27bce37fa542cd72dee29"><td class="memItemLeft" align="right" valign="top"><a id="acc243d34cde27bce37fa542cd72dee29" name="acc243d34cde27bce37fa542cd72dee29"></a>
<a class="el" href="../../d7/de8/classpl_deque.htm">plDeque</a>&lt; <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plString</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>m_Strings</b></td></tr>
<tr class="separator:acc243d34cde27bce37fa542cd72dee29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e394241eba158c676042d599c944857" id="r_a2e394241eba158c676042d599c944857"><td class="memItemLeft" align="right" valign="top"><a id="a2e394241eba158c676042d599c944857" name="a2e394241eba158c676042d599c944857"></a>
<a class="el" href="../../d9/d50/classpl_map.htm">plMap</a>&lt; <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plString</a>, <a class="el" href="../../d2/d5d/classpl_open_ddl_reader_element.htm">plOpenDdlReaderElement</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>m_GlobalNames</b></td></tr>
<tr class="separator:a2e394241eba158c676042d599c944857"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_classpl_open_ddl_parser"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_attribs_classpl_open_ddl_parser')"><img src="../../closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm">plOpenDdlParser</a></td></tr>
<tr class="memitem:a6b057121a5f5bdce8e72565ac178e9e0 inherit pro_attribs_classpl_open_ddl_parser" id="r_a6b057121a5f5bdce8e72565ac178e9e0"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../d5/d6c/classpl_log_interface.htm">plLogInterface</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>m_pLogInterface</b></td></tr>
<tr class="separator:a6b057121a5f5bdce8e72565ac178e9e0 inherit pro_attribs_classpl_open_ddl_parser"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-static-attribs" name="pro-static-attribs"></a>
Static Protected Attributes</h2></td></tr>
<tr class="memitem:a2bf62dfac99da128f8d51b2aca04d781" id="r_a2bf62dfac99da128f8d51b2aca04d781"><td class="memItemLeft" align="right" valign="top"><a id="a2bf62dfac99da128f8d51b2aca04d781" name="a2bf62dfac99da128f8d51b2aca04d781"></a>
static constexpr plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>s_uiChunkSize</b> = 1000 * 4</td></tr>
<tr class="separator:a2bf62dfac99da128f8d51b2aca04d781"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>An OpenDDL reader parses an entire DDL document and creates an in-memory representation of the document structure. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a5e57a4e45e55cc76870980c09c263d01" name="a5e57a4e45e55cc76870980c09c263d01"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e57a4e45e55cc76870980c09c263d01">&#9670;&#160;</a></span>OnBeginObject()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plOpenDdlReader::OnBeginObject </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sType</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sName</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bGlobalName</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when a new object is encountered. </p>

<p>Implements <a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm#ac8c6034fcdae70aaa352d82d1c7c33b2">plOpenDdlParser</a>.</p>

</div>
</div>
<a id="a72061cbe99e7f9d8cd749f5291eb4f03" name="a72061cbe99e7f9d8cd749f5291eb4f03"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72061cbe99e7f9d8cd749f5291eb4f03">&#9670;&#160;</a></span>OnBeginPrimitiveList()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plOpenDdlReader::OnBeginPrimitiveList </td>
          <td>(</td>
          <td class="paramtype">plOpenDdlPrimitiveType</td>          <td class="paramname"><span class="paramname"><em>type</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sName</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bGlobalName</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when a new primitive object is encountered. </p>

<p>Implements <a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm#a6a961fb56f954daf89461a372129fd6c">plOpenDdlParser</a>.</p>

</div>
</div>
<a id="a2888d135b287c1b6234320b10458f5e9" name="a2888d135b287c1b6234320b10458f5e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2888d135b287c1b6234320b10458f5e9">&#9670;&#160;</a></span>OnEndObject()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plOpenDdlReader::OnEndObject </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when the end of an object is encountered. </p>

<p>Implements <a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm#abf24a508c2bd33aae660217d8bf41e90">plOpenDdlParser</a>.</p>

</div>
</div>
<a id="a52e844f97e5beac0335f20d1898ad1ab" name="a52e844f97e5beac0335f20d1898ad1ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a52e844f97e5beac0335f20d1898ad1ab">&#9670;&#160;</a></span>OnEndPrimitiveList()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plOpenDdlReader::OnEndPrimitiveList </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when the end of a primitive object is encountered. </p>

<p>Implements <a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm#a3c2d5ebb979fdd96b55848edaa9b3bc0">plOpenDdlParser</a>.</p>

</div>
</div>
<a id="aa702fc2ffa307608fe7cbd4f6e743a33" name="aa702fc2ffa307608fe7cbd4f6e743a33"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa702fc2ffa307608fe7cbd4f6e743a33">&#9670;&#160;</a></span>OnParsingError()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plOpenDdlReader::OnParsingError </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sMessage</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bFatal</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiLine</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiColumn</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when something unexpected is encountered in the document. </p>
<p>The error message describes what was expected and what was encountered. If bFatal is true, the error has left the parser in an unrecoverable state and thus it will not continue parsing. In that case client code will need to clean up it's open state, as no further callbacks will be called. If bFatal is false, the document is not entirely valid, but the parser is still able to continue. </p>

<p>Reimplemented from <a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm#a6810bd5180b2c19221b6f5a4c99ffcb2">plOpenDdlParser</a>.</p>

</div>
</div>
<a id="a5b533de33efb166d7ded9ae61f3080c5" name="a5b533de33efb166d7ded9ae61f3080c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b533de33efb166d7ded9ae61f3080c5">&#9670;&#160;</a></span>OnPrimitiveBool()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plOpenDdlReader::OnPrimitiveBool </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>
<dl class="todo"><dt><b><a class="el" href="../../dd/da0/todo.htm#_todo000045">Todo</a></b></dt><dd>Currently not supported </dd></dl>

<p>Implements <a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm#a76d84aa70ba363e8f81bd1ca7cb8cacf">plOpenDdlParser</a>.</p>

</div>
</div>
<a id="a5ced502f690613ca90442f624d32ea1a" name="a5ced502f690613ca90442f624d32ea1a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ced502f690613ca90442f624d32ea1a">&#9670;&#160;</a></span>OnPrimitiveDouble()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plOpenDdlReader::OnPrimitiveDouble </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>

<p>Implements <a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm#a2dec42d04bb2e5a9d847b5632edeeb76">plOpenDdlParser</a>.</p>

</div>
</div>
<a id="af297e7d13b14ab913046b33f03cf4e0f" name="af297e7d13b14ab913046b33f03cf4e0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af297e7d13b14ab913046b33f03cf4e0f">&#9670;&#160;</a></span>OnPrimitiveFloat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plOpenDdlReader::OnPrimitiveFloat </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const float *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>

<p>Implements <a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm#a931abada90b3ad39e521aee531b23deb">plOpenDdlParser</a>.</p>

</div>
</div>
<a id="a7903a28c729661a4817ba8cacd64f295" name="a7903a28c729661a4817ba8cacd64f295"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7903a28c729661a4817ba8cacd64f295">&#9670;&#160;</a></span>OnPrimitiveInt16()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plOpenDdlReader::OnPrimitiveInt16 </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const plInt16 *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>

<p>Implements <a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm#a72566c4602cb5a4e68de021735172ef6">plOpenDdlParser</a>.</p>

</div>
</div>
<a id="a3d0e5a38332d0e0b394a480fc25677f1" name="a3d0e5a38332d0e0b394a480fc25677f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d0e5a38332d0e0b394a480fc25677f1">&#9670;&#160;</a></span>OnPrimitiveInt32()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plOpenDdlReader::OnPrimitiveInt32 </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const plInt32 *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>

<p>Implements <a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm#a5ea15f8895a299ede992ce0b0210d10f">plOpenDdlParser</a>.</p>

</div>
</div>
<a id="aee3850925181113de298d68565be4fe6" name="aee3850925181113de298d68565be4fe6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee3850925181113de298d68565be4fe6">&#9670;&#160;</a></span>OnPrimitiveInt64()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plOpenDdlReader::OnPrimitiveInt64 </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const plInt64 *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>

<p>Implements <a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm#a899ffe3ff05512705a0291614cb8b60b">plOpenDdlParser</a>.</p>

</div>
</div>
<a id="ac81493c51068a2174827c678158abac6" name="ac81493c51068a2174827c678158abac6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac81493c51068a2174827c678158abac6">&#9670;&#160;</a></span>OnPrimitiveInt8()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plOpenDdlReader::OnPrimitiveInt8 </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const plInt8 *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>

<p>Implements <a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm#ad7ba7db1ab2384ea65b33949b468e5a4">plOpenDdlParser</a>.</p>

</div>
</div>
<a id="ac9dcc04346068ba636fdeb378fe27a56" name="ac9dcc04346068ba636fdeb378fe27a56"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac9dcc04346068ba636fdeb378fe27a56">&#9670;&#160;</a></span>OnPrimitiveString()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plOpenDdlReader::OnPrimitiveString </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>

<p>Implements <a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm#ac9e2229be16e9f90d885e43ff54157c2">plOpenDdlParser</a>.</p>

</div>
</div>
<a id="a6aa1a64a13394d594dff185c9a634517" name="a6aa1a64a13394d594dff185c9a634517"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6aa1a64a13394d594dff185c9a634517">&#9670;&#160;</a></span>OnPrimitiveUInt16()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plOpenDdlReader::OnPrimitiveUInt16 </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const plUInt16 *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>

<p>Implements <a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm#a21a765f5325d89c7af619c11daa04b31">plOpenDdlParser</a>.</p>

</div>
</div>
<a id="afe3c8ca38a6efee0a0b13c6069c30d4d" name="afe3c8ca38a6efee0a0b13c6069c30d4d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe3c8ca38a6efee0a0b13c6069c30d4d">&#9670;&#160;</a></span>OnPrimitiveUInt32()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plOpenDdlReader::OnPrimitiveUInt32 </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const plUInt32 *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>

<p>Implements <a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm#a6dc22351f7fc4b0cd17bab0cd2a00aad">plOpenDdlParser</a>.</p>

</div>
</div>
<a id="a39d519b6d60332d7d1070a012c14f7a8" name="a39d519b6d60332d7d1070a012c14f7a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39d519b6d60332d7d1070a012c14f7a8">&#9670;&#160;</a></span>OnPrimitiveUInt64()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plOpenDdlReader::OnPrimitiveUInt64 </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const plUInt64 *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>

<p>Implements <a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm#a9f98cd4f7f186e89630b9097098117d2">plOpenDdlParser</a>.</p>

</div>
</div>
<a id="aa8cdd9aec9f5f3ebfd1e4c09edcb9ef9" name="aa8cdd9aec9f5f3ebfd1e4c09edcb9ef9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa8cdd9aec9f5f3ebfd1e4c09edcb9ef9">&#9670;&#160;</a></span>OnPrimitiveUInt8()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plOpenDdlReader::OnPrimitiveUInt8 </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>count</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const plUInt8 *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bThisIsAll</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when data for a primitive type is available. More than one value may be reported at a time. </p>

<p>Implements <a class="el" href="../../d4/dc9/classpl_open_ddl_parser.htm#a99f64956d848eb45aa4bdba45dd08559">plOpenDdlParser</a>.</p>

</div>
</div>
<a id="a7b43f6939721019e67b262770010e45c" name="a7b43f6939721019e67b262770010e45c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b43f6939721019e67b262770010e45c">&#9670;&#160;</a></span>ParseDocument()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/dce/structpl_result.htm">plResult</a> plOpenDdlReader::ParseDocument </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/d3d/classpl_stream_reader.htm">plStreamReader</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>inout_stream</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiFirstLineOffset</em></span><span class="paramdefsep"> = </span><span class="paramdefval">0</span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d5/d6c/classpl_log_interface.htm">plLogInterface</a> *</td>          <td class="paramname"><span class="paramname"><em>pLog</em></span><span class="paramdefsep"> = </span><span class="paramdefval"><a class="el" href="../../dc/d24/classpl_log.htm#afe6864f18010d65027c9678ce96d8b77">plLog::GetThreadLocalLogSystem</a>()</span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiCacheSizeInKB</em></span><span class="paramdefsep"> = </span><span class="paramdefval">4</span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Parses the given document, returns PL_FAILURE if an unrecoverable parsing error was encountered. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">stream</td><td>is the input data. </td></tr>
    <tr><td class="paramname">uiFirstLineOffset</td><td>allows to adjust the reported line numbers in error messages, in case the given stream represents a sub-section of a larger file.</td></tr>
    <tr><td class="paramname">pLog</td><td>is used for outputting details about parsing errors. If nullptr is given, no details are logged.</td></tr>
    <tr><td class="paramname">uiCacheSizeInKB</td><td>is the internal cache size that the parser uses. If the parsed documents contain primitives lists with several thousand elements in a single list, increasing the cache size can improve performance, but typically this doesn't need to be adjusted. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/Engine/Foundation/IO/<a class="el" href="../../d3/d4f/_open_ddl_reader_8h_source.htm">OpenDdlReader.h</a></li>
<li>Code/Engine/Foundation/IO/Implementation/<b>OpenDdlReader.cpp</b></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d0/d83/classpl_open_ddl_reader.htm">plOpenDdlReader</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
