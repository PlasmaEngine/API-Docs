<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<!-- BEGIN opengraph metadata -->
<meta property="og:title" content="Doxygen Awesome" />
<meta property="og:image" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta property="og:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<meta property="og:url" content="https://jothepro.github.io/doxygen-awesome-css/" />
<!-- END opengraph metadata -->
<!-- BEGIN twitter metadata -->
<meta name="twitter:image:src" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta name="twitter:title" content="Doxygen Awesome" />
<meta name="twitter:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<!-- END twitter metadata -->
<title>Plasma Engine: plCommandLineUtils Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link rel="icon" type="image/svg+xml" href="logo.drawio.svg"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-paragraph-link.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-tabs.js"></script>
<script type="text/javascript" src="../../toggle-alternative-theme.js"></script>
<script type="text/javascript">
    DoxygenAwesomeFragmentCopyButton.init()
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeParagraphLink.init()
    DoxygenAwesomeInteractiveToc.init()
    DoxygenAwesomeTabs.init()
</script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Plasma Engine
   &#160;<span id="projectnumber">2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d1/d79/classpl_command_line_utils.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="../../d9/dbf/classpl_command_line_utils-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plCommandLineUtils Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p>This is a helper class to parse command lines.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../dd/d6e/_command_line_utils_8h_source.htm">CommandLineUtils.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a8dbf3119cb028b19d2d9ed279c7a3204" id="r_a8dbf3119cb028b19d2d9ed279c7a3204"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a8dbf3119cb028b19d2d9ed279c7a3204">ArgMode</a> { <a class="el" href="#a8dbf3119cb028b19d2d9ed279c7a3204a2b31df494acfa7ede26211b609638936">UseArgcArgv</a>
, <a class="el" href="#a8dbf3119cb028b19d2d9ed279c7a3204acf63f5ad05434ab83eadc9b28cb07630">PreferOsArgs</a>
 }</td></tr>
<tr class="separator:a8dbf3119cb028b19d2d9ed279c7a3204"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a86e4677bbb50eaec9b7ffd187f61281a" id="r_a86e4677bbb50eaec9b7ffd187f61281a"><td class="memItemLeft" align="right" valign="top"><a id="a86e4677bbb50eaec9b7ffd187f61281a" name="a86e4677bbb50eaec9b7ffd187f61281a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetCommandLine</b> (plUInt32 uiArgc, const char **pArgv, <a class="el" href="#a8dbf3119cb028b19d2d9ed279c7a3204">ArgMode</a> mode=<a class="el" href="#a8dbf3119cb028b19d2d9ed279c7a3204a2b31df494acfa7ede26211b609638936">UseArgcArgv</a>)</td></tr>
<tr class="memdesc:a86e4677bbb50eaec9b7ffd187f61281a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes <a class="el" href="../../d1/d79/classpl_command_line_utils.htm" title="This is a helper class to parse command lines.">plCommandLineUtils</a> from the parameter arguments that were passed to the application. <br /></td></tr>
<tr class="separator:a86e4677bbb50eaec9b7ffd187f61281a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b5fed42ae9193a84ece226b751d5ec3" id="r_a3b5fed42ae9193a84ece226b751d5ec3"><td class="memItemLeft" align="right" valign="top"><a id="a3b5fed42ae9193a84ece226b751d5ec3" name="a3b5fed42ae9193a84ece226b751d5ec3"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetCommandLine</b> (plUInt32 uiArgc, char **pArgv, <a class="el" href="#a8dbf3119cb028b19d2d9ed279c7a3204">ArgMode</a> mode=<a class="el" href="#a8dbf3119cb028b19d2d9ed279c7a3204a2b31df494acfa7ede26211b609638936">UseArgcArgv</a>)</td></tr>
<tr class="memdesc:a3b5fed42ae9193a84ece226b751d5ec3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload for non-const argv versions. <br /></td></tr>
<tr class="separator:a3b5fed42ae9193a84ece226b751d5ec3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a224d61a502d46e4cf7076cdc0279322f" id="r_a224d61a502d46e4cf7076cdc0279322f"><td class="memItemLeft" align="right" valign="top"><a id="a224d61a502d46e4cf7076cdc0279322f" name="a224d61a502d46e4cf7076cdc0279322f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetCommandLine</b> (<a class="el" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a>&lt; <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plString</a> &gt; commands)</td></tr>
<tr class="memdesc:a224d61a502d46e4cf7076cdc0279322f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes <a class="el" href="../../d1/d79/classpl_command_line_utils.htm" title="This is a helper class to parse command lines.">plCommandLineUtils</a> from a list of already split up commands. <br /></td></tr>
<tr class="separator:a224d61a502d46e4cf7076cdc0279322f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec6e7a0ec523a80f12f59792d0543b70" id="r_aec6e7a0ec523a80f12f59792d0543b70"><td class="memItemLeft" align="right" valign="top"><a id="aec6e7a0ec523a80f12f59792d0543b70" name="aec6e7a0ec523a80f12f59792d0543b70"></a>
const <a class="el" href="../../d0/d4e/classpl_dynamic_array.htm">plDynamicArray</a>&lt; <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plString</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>GetCommandLineArray</b> () const</td></tr>
<tr class="memdesc:aec6e7a0ec523a80f12f59792d0543b70"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the split up command line. <br /></td></tr>
<tr class="separator:aec6e7a0ec523a80f12f59792d0543b70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5285e11ca787e7998cce6d5723d413d" id="r_ab5285e11ca787e7998cce6d5723d413d"><td class="memItemLeft" align="right" valign="top"><a id="ab5285e11ca787e7998cce6d5723d413d" name="ab5285e11ca787e7998cce6d5723d413d"></a>
<a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plString</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetCommandLineString</b> () const</td></tr>
<tr class="memdesc:ab5285e11ca787e7998cce6d5723d413d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assembles the original command line from the split up string representation. <br /></td></tr>
<tr class="separator:ab5285e11ca787e7998cce6d5723d413d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a02a66dd3965d8f317cd53fee31a34d22" id="r_a02a66dd3965d8f317cd53fee31a34d22"><td class="memItemLeft" align="right" valign="top"><a id="a02a66dd3965d8f317cd53fee31a34d22" name="a02a66dd3965d8f317cd53fee31a34d22"></a>
plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GetParameterCount</b> () const</td></tr>
<tr class="memdesc:a02a66dd3965d8f317cd53fee31a34d22"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the total number of command line parameters (excluding the program path, which is often passed as the first parameter). <br /></td></tr>
<tr class="separator:a02a66dd3965d8f317cd53fee31a34d22"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54a1ae9f2e1d11cd83098c590382cab2" id="r_a54a1ae9f2e1d11cd83098c590382cab2"><td class="memItemLeft" align="right" valign="top"><a id="a54a1ae9f2e1d11cd83098c590382cab2" name="a54a1ae9f2e1d11cd83098c590382cab2"></a>
const <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>GetParameter</b> (plUInt32 uiParam) const</td></tr>
<tr class="memdesc:a54a1ae9f2e1d11cd83098c590382cab2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the n-th parameter string that was passed to the application. <br /></td></tr>
<tr class="separator:a54a1ae9f2e1d11cd83098c590382cab2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3334433e7fd066a353d3b2c12ad190e" id="r_ab3334433e7fd066a353d3b2c12ad190e"><td class="memItemLeft" align="right" valign="top">plInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab3334433e7fd066a353d3b2c12ad190e">GetOptionIndex</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOption, bool bCaseSensitive=false) const</td></tr>
<tr class="memdesc:ab3334433e7fd066a353d3b2c12ad190e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the index at which the given option string can be found in the parameter list.  <br /></td></tr>
<tr class="separator:ab3334433e7fd066a353d3b2c12ad190e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a133c58bafb38ed6a7fd3a9f56aac3049" id="r_a133c58bafb38ed6a7fd3a9f56aac3049"><td class="memItemLeft" align="right" valign="top"><a id="a133c58bafb38ed6a7fd3a9f56aac3049" name="a133c58bafb38ed6a7fd3a9f56aac3049"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>HasOption</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOption, bool bCaseSensitive=false) const</td></tr>
<tr class="memdesc:a133c58bafb38ed6a7fd3a9f56aac3049"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the requested option is specified, at all. <br /></td></tr>
<tr class="separator:a133c58bafb38ed6a7fd3a9f56aac3049"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d62397be7fb0e8444224fe9e46a26ed" id="r_a3d62397be7fb0e8444224fe9e46a26ed"><td class="memItemLeft" align="right" valign="top">plUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3d62397be7fb0e8444224fe9e46a26ed">GetStringOptionArguments</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOption, bool bCaseSensitive=false) const</td></tr>
<tr class="memdesc:a3d62397be7fb0e8444224fe9e46a26ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns how many arguments follow behind the option with the name <em>szOption</em>.  <br /></td></tr>
<tr class="separator:a3d62397be7fb0e8444224fe9e46a26ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a315d5f778da1ae8d8eac79d264c63aef" id="r_a315d5f778da1ae8d8eac79d264c63aef"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a315d5f778da1ae8d8eac79d264c63aef">GetStringOption</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOption, plUInt32 uiArgument=0, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sDefault={}, bool bCaseSensitive=false) const</td></tr>
<tr class="memdesc:a315d5f778da1ae8d8eac79d264c63aef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the n-th parameter to the command line option with the name <em>szOption</em>.  <br /></td></tr>
<tr class="separator:a315d5f778da1ae8d8eac79d264c63aef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3cf9f70abe2c9d2649cdd8a069491dd" id="r_aa3cf9f70abe2c9d2649cdd8a069491dd"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plString</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa3cf9f70abe2c9d2649cdd8a069491dd">GetAbsolutePathOption</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOption, plUInt32 uiArgument=0, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sDefault={}, bool bCaseSensitive=false) const</td></tr>
<tr class="memdesc:aa3cf9f70abe2c9d2649cdd8a069491dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="#a315d5f778da1ae8d8eac79d264c63aef" title="Returns the n-th parameter to the command line option with the name szOption.">GetStringOption()</a> but assumes that the strings represent paths and concatenates the current working directory if a relative path is given.  <br /></td></tr>
<tr class="separator:aa3cf9f70abe2c9d2649cdd8a069491dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc78dfd771c3810559187567f7d4a006" id="r_acc78dfd771c3810559187567f7d4a006"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#acc78dfd771c3810559187567f7d4a006">GetBoolOption</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOption, bool bDefault=false, bool bCaseSensitive=false) const</td></tr>
<tr class="memdesc:acc78dfd771c3810559187567f7d4a006"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a boolean interpretation of the option <em>szOption</em> or bDefault if it cannot be found.  <br /></td></tr>
<tr class="separator:acc78dfd771c3810559187567f7d4a006"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff1bd8dcff480924b8b7f50e7bd33a46" id="r_aff1bd8dcff480924b8b7f50e7bd33a46"><td class="memItemLeft" align="right" valign="top">plInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aff1bd8dcff480924b8b7f50e7bd33a46">GetIntOption</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOption, plInt32 iDefault=0, bool bCaseSensitive=false) const</td></tr>
<tr class="memdesc:aff1bd8dcff480924b8b7f50e7bd33a46"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an integer interpretation of the option <em>szOption</em> or iDefault if it cannot be found.  <br /></td></tr>
<tr class="separator:aff1bd8dcff480924b8b7f50e7bd33a46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65ff095c91694a5a4fdb444300e8f9c2" id="r_a65ff095c91694a5a4fdb444300e8f9c2"><td class="memItemLeft" align="right" valign="top"><a id="a65ff095c91694a5a4fdb444300e8f9c2" name="a65ff095c91694a5a4fdb444300e8f9c2"></a>
plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GetUIntOption</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOption, plUInt32 uiDefault=0, bool bCaseSensitive=false) const</td></tr>
<tr class="memdesc:a65ff095c91694a5a4fdb444300e8f9c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="#aff1bd8dcff480924b8b7f50e7bd33a46" title="Returns an integer interpretation of the option szOption or iDefault if it cannot be found.">GetIntOption()</a> but assumes the value is a uint32. <br /></td></tr>
<tr class="separator:a65ff095c91694a5a4fdb444300e8f9c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5baf7c22b46469787ff0aa2546901f1d" id="r_a5baf7c22b46469787ff0aa2546901f1d"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5baf7c22b46469787ff0aa2546901f1d">GetFloatOption</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOption, double fDefault=0.0, bool bCaseSensitive=false) const</td></tr>
<tr class="memdesc:a5baf7c22b46469787ff0aa2546901f1d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a float interpretation of the option <em>szOption</em> or fDefault if it cannot be found.  <br /></td></tr>
<tr class="separator:a5baf7c22b46469787ff0aa2546901f1d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a761e1ca2695caefca86d7afe852ba51c" id="r_a761e1ca2695caefca86d7afe852ba51c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a761e1ca2695caefca86d7afe852ba51c">InjectCustomArgument</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sArgument)</td></tr>
<tr class="memdesc:a761e1ca2695caefca86d7afe852ba51c"><td class="mdescLeft">&#160;</td><td class="mdescRight">This allows to append an argument programmatically, that wasn't actually set through the command line.  <br /></td></tr>
<tr class="separator:a761e1ca2695caefca86d7afe852ba51c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-methods" name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a1a67800a6604a7e98e051cd7667da09e" id="r_a1a67800a6604a7e98e051cd7667da09e"><td class="memItemLeft" align="right" valign="top"><a id="a1a67800a6604a7e98e051cd7667da09e" name="a1a67800a6604a7e98e051cd7667da09e"></a>
static <a class="el" href="../../d1/d79/classpl_command_line_utils.htm">plCommandLineUtils</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetGlobalInstance</b> ()</td></tr>
<tr class="memdesc:a1a67800a6604a7e98e051cd7667da09e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns one global instance of <a class="el" href="../../d1/d79/classpl_command_line_utils.htm" title="This is a helper class to parse command lines.">plCommandLineUtils</a>. <br /></td></tr>
<tr class="separator:a1a67800a6604a7e98e051cd7667da09e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4820f77e53b1ba97daec2084756ecdda" id="r_a4820f77e53b1ba97daec2084756ecdda"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4820f77e53b1ba97daec2084756ecdda">SplitCommandLineString</a> (const char *szCommandString, bool bAddExecutableDir, <a class="el" href="../../d0/d4e/classpl_dynamic_array.htm">plDynamicArray</a>&lt; <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plString</a> &gt; &amp;out_args, <a class="el" href="../../d0/d4e/classpl_dynamic_array.htm">plDynamicArray</a>&lt; const char * &gt; &amp;out_argsV)</td></tr>
<tr class="memdesc:a4820f77e53b1ba97daec2084756ecdda"><td class="mdescLeft">&#160;</td><td class="mdescRight">Splits a string into the classic argc/argv string.  <br /></td></tr>
<tr class="separator:a4820f77e53b1ba97daec2084756ecdda"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This is a helper class to parse command lines. </p>
<p>Initialize it using <a class="el" href="#a86e4677bbb50eaec9b7ffd187f61281a" title="Initializes plCommandLineUtils from the parameter arguments that were passed to the application.">SetCommandLine()</a>. Then query for command line options using <a class="el" href="#a315d5f778da1ae8d8eac79d264c63aef" title="Returns the n-th parameter to the command line option with the name szOption.">GetStringOption()</a>, <a class="el" href="#acc78dfd771c3810559187567f7d4a006" title="Returns a boolean interpretation of the option szOption or bDefault if it cannot be found.">GetBoolOption()</a>, <a class="el" href="#aff1bd8dcff480924b8b7f50e7bd33a46" title="Returns an integer interpretation of the option szOption or iDefault if it cannot be found.">GetIntOption()</a> or <a class="el" href="#a5baf7c22b46469787ff0aa2546901f1d" title="Returns a float interpretation of the option szOption or fDefault if it cannot be found.">GetFloatOption()</a> </p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="a8dbf3119cb028b19d2d9ed279c7a3204" name="a8dbf3119cb028b19d2d9ed279c7a3204"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8dbf3119cb028b19d2d9ed279c7a3204">&#9670;&#160;</a></span>ArgMode</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="#a8dbf3119cb028b19d2d9ed279c7a3204">plCommandLineUtils::ArgMode</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a8dbf3119cb028b19d2d9ed279c7a3204a2b31df494acfa7ede26211b609638936" name="a8dbf3119cb028b19d2d9ed279c7a3204a2b31df494acfa7ede26211b609638936"></a>UseArgcArgv&#160;</td><td class="fielddoc"><p>Use the passed in argc/argv values as they are passed in. </p>
</td></tr>
<tr><td class="fieldname"><a id="a8dbf3119cb028b19d2d9ed279c7a3204acf63f5ad05434ab83eadc9b28cb07630" name="a8dbf3119cb028b19d2d9ed279c7a3204acf63f5ad05434ab83eadc9b28cb07630"></a>PreferOsArgs&#160;</td><td class="fielddoc"><p>On Windows, ignore argc/argv and instead query the global arguments from the OS. Necessary to properly support Unicode strings in arguments. </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="aa3cf9f70abe2c9d2649cdd8a069491dd" name="aa3cf9f70abe2c9d2649cdd8a069491dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3cf9f70abe2c9d2649cdd8a069491dd">&#9670;&#160;</a></span>GetAbsolutePathOption()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plString</a> plCommandLineUtils::GetAbsolutePathOption </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sOption</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiArgument</em></span><span class="paramdefsep"> = </span><span class="paramdefval">0</span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sDefault</em></span><span class="paramdefsep"> = </span><span class="paramdefval">{}</span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bCaseSensitive</em></span><span class="paramdefsep"> = </span><span class="paramdefval">false</span>&#160;) const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="#a315d5f778da1ae8d8eac79d264c63aef" title="Returns the n-th parameter to the command line option with the name szOption.">GetStringOption()</a> but assumes that the strings represent paths and concatenates the current working directory if a relative path is given. </p>
<p>To check how many arguments are available, use <a class="el" href="#a3d62397be7fb0e8444224fe9e46a26ed" title="Returns how many arguments follow behind the option with the name szOption.">GetStringOptionArguments()</a>. </p><dl class="section note"><dt>Note</dt><dd>This function always returns absolute or rooted paths, never relative ones. If relative paths are supposed to be allowed, use <a class="el" href="#a315d5f778da1ae8d8eac79d264c63aef" title="Returns the n-th parameter to the command line option with the name szOption.">GetStringOption()</a> instead.</dd></dl>
<p>If szDefault is empty and the user did not provide this option, then the result will also be the empty string. If szDefault is a relative path, it will be concatenated with the CWD just as any user provided option would. </p>

</div>
</div>
<a id="acc78dfd771c3810559187567f7d4a006" name="acc78dfd771c3810559187567f7d4a006"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc78dfd771c3810559187567f7d4a006">&#9670;&#160;</a></span>GetBoolOption()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool plCommandLineUtils::GetBoolOption </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sOption</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bDefault</em></span><span class="paramdefsep"> = </span><span class="paramdefval">false</span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bCaseSensitive</em></span><span class="paramdefsep"> = </span><span class="paramdefval">false</span>&#160;) const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a boolean interpretation of the option <em>szOption</em> or bDefault if it cannot be found. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">szOption</td><td>The name of the option to search for. All option-names must start with a hyphen.</td></tr>
    <tr><td class="paramname">bDefault</td><td>The default value to use when no other value can be derived.</td></tr>
    <tr><td class="paramname">bCaseSensitive</td><td>Whether it should be searched case-sensitive for the option with name <em>szOption</em>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>If an option with the name <em>szOption</em> can be found, which has no parameters, it is interpreted as 'true'. If there is one parameter following, it is interpreted using <a class="el" href="../../d7/dc4/namespacepl_conversion_utils.htm#a1b235de21bb1ace468bc60950e44192b" title="Parses szString and checks that the first word it finds starts with a phrase that can be interpreted ...">plConversionUtils::StringToBool()</a>. If that conversion fails, bDefault is returned. </dd></dl>

</div>
</div>
<a id="a5baf7c22b46469787ff0aa2546901f1d" name="a5baf7c22b46469787ff0aa2546901f1d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5baf7c22b46469787ff0aa2546901f1d">&#9670;&#160;</a></span>GetFloatOption()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double plCommandLineUtils::GetFloatOption </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sOption</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double</td>          <td class="paramname"><span class="paramname"><em>fDefault</em></span><span class="paramdefsep"> = </span><span class="paramdefval">0.0</span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bCaseSensitive</em></span><span class="paramdefsep"> = </span><span class="paramdefval">false</span>&#160;) const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a float interpretation of the option <em>szOption</em> or fDefault if it cannot be found. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">szOption</td><td>The name of the option to search for. All option-names must start with a hyphen.</td></tr>
    <tr><td class="paramname">fDefault</td><td>The default value to use when no other value can be derived.</td></tr>
    <tr><td class="paramname">bCaseSensitive</td><td>Whether it should be searched case-sensitive for the option with name <em>szOption</em>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>If an option with the name <em>szOption</em> can be found, and there is one parameter following, it is interpreted using <a class="el" href="../../d7/dc4/namespacepl_conversion_utils.htm#af6693d03386641ca0018613635a9123d" title="Parses szString and converts it to a double value. Returns PL_FAILURE if the string contains no parse...">plConversionUtils::StringToFloat()</a>. If that conversion fails or there is no such option or no parameter follows it, fDefault is returned. </dd></dl>

</div>
</div>
<a id="aff1bd8dcff480924b8b7f50e7bd33a46" name="aff1bd8dcff480924b8b7f50e7bd33a46"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aff1bd8dcff480924b8b7f50e7bd33a46">&#9670;&#160;</a></span>GetIntOption()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">plInt32 plCommandLineUtils::GetIntOption </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sOption</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plInt32</td>          <td class="paramname"><span class="paramname"><em>iDefault</em></span><span class="paramdefsep"> = </span><span class="paramdefval">0</span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bCaseSensitive</em></span><span class="paramdefsep"> = </span><span class="paramdefval">false</span>&#160;) const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns an integer interpretation of the option <em>szOption</em> or iDefault if it cannot be found. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">szOption</td><td>The name of the option to search for. All option-names must start with a hyphen.</td></tr>
    <tr><td class="paramname">iDefault</td><td>The default value to use when no other value can be derived.</td></tr>
    <tr><td class="paramname">bCaseSensitive</td><td>Whether it should be searched case-sensitive for the option with name <em>szOption</em>.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>If an option with the name <em>szOption</em> can be found, and there is one parameter following, it is interpreted using <a class="el" href="../../d7/dc4/namespacepl_conversion_utils.htm#a9c35fd8718551b779382df25d63fc2b0" title="Parses szString and converts it to an integer value. Returns PL_FAILURE if the string contains no par...">plConversionUtils::StringToInt()</a>. If that conversion fails or there is no such option or no parameter follows it, iDefault is returned. </dd></dl>

</div>
</div>
<a id="ab3334433e7fd066a353d3b2c12ad190e" name="ab3334433e7fd066a353d3b2c12ad190e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3334433e7fd066a353d3b2c12ad190e">&#9670;&#160;</a></span>GetOptionIndex()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">plInt32 plCommandLineUtils::GetOptionIndex </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sOption</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bCaseSensitive</em></span><span class="paramdefsep"> = </span><span class="paramdefval">false</span>&#160;) const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the index at which the given option string can be found in the parameter list. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">szOption</td><td>The name of the command line option. Must start with a hyphen (-) </td></tr>
    <tr><td class="paramname">bCaseSensitive</td><td>Whether the option name szOption shall be searched case sensitive.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>-1 When no option with the given name is found. Otherwise the index at which the option can be found. This can be passed to <a class="el" href="#a54a1ae9f2e1d11cd83098c590382cab2" title="Returns the n-th parameter string that was passed to the application.">GetParameter()</a> or <a class="el" href="#a3d62397be7fb0e8444224fe9e46a26ed" title="Returns how many arguments follow behind the option with the name szOption.">GetStringOptionArguments()</a>. </dd></dl>

</div>
</div>
<a id="a315d5f778da1ae8d8eac79d264c63aef" name="a315d5f778da1ae8d8eac79d264c63aef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a315d5f778da1ae8d8eac79d264c63aef">&#9670;&#160;</a></span>GetStringOption()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> plCommandLineUtils::GetStringOption </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sOption</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiArgument</em></span><span class="paramdefsep"> = </span><span class="paramdefval">0</span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sDefault</em></span><span class="paramdefsep"> = </span><span class="paramdefval">{}</span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bCaseSensitive</em></span><span class="paramdefsep"> = </span><span class="paramdefval">false</span>&#160;) const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the n-th parameter to the command line option with the name <em>szOption</em>. </p>
<p>If the option does not exist or does not have that many parameters, <em>szDefault</em> is returned. </p>

</div>
</div>
<a id="a3d62397be7fb0e8444224fe9e46a26ed" name="a3d62397be7fb0e8444224fe9e46a26ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d62397be7fb0e8444224fe9e46a26ed">&#9670;&#160;</a></span>GetStringOptionArguments()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">plUInt32 plCommandLineUtils::GetStringOptionArguments </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sOption</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bCaseSensitive</em></span><span class="paramdefsep"> = </span><span class="paramdefval">false</span>&#160;) const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns how many arguments follow behind the option with the name <em>szOption</em>. </p>
<p>Everything that does not start with a hyphen is considered to be an additional parameter for the option. </p>

</div>
</div>
<a id="a761e1ca2695caefca86d7afe852ba51c" name="a761e1ca2695caefca86d7afe852ba51c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a761e1ca2695caefca86d7afe852ba51c">&#9670;&#160;</a></span>InjectCustomArgument()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void plCommandLineUtils::InjectCustomArgument </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sArgument</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This allows to append an argument programmatically, that wasn't actually set through the command line. </p>
<p>This can be useful when the command-line is a method to configure something, which might be hidden away in a plugin, and we have no other easy way to configure it.</p>
<p>Be aware that each call to this function is like one command line argument. Therefore to add "-arg test", call it two times, once with "-arg", once with "test". To add a string with spaces, call it once, but do not wrap the string in artificial quotes. </p>

</div>
</div>
<a id="a4820f77e53b1ba97daec2084756ecdda" name="a4820f77e53b1ba97daec2084756ecdda"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4820f77e53b1ba97daec2084756ecdda">&#9670;&#160;</a></span>SplitCommandLineString()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plCommandLineUtils::SplitCommandLineString </td>
          <td>(</td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>szCommandString</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bAddExecutableDir</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d4e/classpl_dynamic_array.htm">plDynamicArray</a>&lt; <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plString</a> &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>out_args</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d4e/classpl_dynamic_array.htm">plDynamicArray</a>&lt; const char * &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>out_argsV</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Splits a string into the classic argc/argv string. </p>
<p>Useful for platforms where command line args come in as a single string. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">addExecutableDir</td><td>Adds executable path as first parameter (just as it would normally be in 'int main(argc, argv)'). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/Engine/Foundation/Utilities/<a class="el" href="../../dd/d6e/_command_line_utils_8h_source.htm">CommandLineUtils.h</a></li>
<li>Code/Engine/Foundation/Utilities/Implementation/<b>CommandLineUtils.cpp</b></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d1/d79/classpl_command_line_utils.htm">plCommandLineUtils</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
