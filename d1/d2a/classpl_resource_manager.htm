<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<!-- BEGIN opengraph metadata -->
<meta property="og:title" content="Doxygen Awesome" />
<meta property="og:image" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta property="og:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<meta property="og:url" content="https://jothepro.github.io/doxygen-awesome-css/" />
<!-- END opengraph metadata -->
<!-- BEGIN twitter metadata -->
<meta name="twitter:image:src" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta name="twitter:title" content="Doxygen Awesome" />
<meta name="twitter:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<!-- END twitter metadata -->
<title>Plasma Engine: plResourceManager Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link rel="icon" type="image/svg+xml" href="logo.drawio.svg"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-paragraph-link.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-tabs.js"></script>
<script type="text/javascript" src="../../toggle-alternative-theme.js"></script>
<script type="text/javascript">
    DoxygenAwesomeFragmentCopyButton.init()
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeParagraphLink.init()
    DoxygenAwesomeInteractiveToc.init()
    DoxygenAwesomeTabs.init()
</script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Plasma Engine
   &#160;<span id="projectnumber">2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d1/d2a/classpl_resource_manager.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#friends">Friends</a> &#124;
<a href="../../da/de6/classpl_resource_manager-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plResourceManager Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p>The central class for managing all types derived from <a class="el" href="../../d8/d1c/classpl_resource.htm" title="The base class for all resources.">plResource</a>.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d1/d46/_resource_manager_8h_source.htm">ResourceManager.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-methods" name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Events</div></td></tr>
<tr class="memitem:a5b6c3de37fa7e6e40f2918c974921697" id="r_a5b6c3de37fa7e6e40f2918c974921697"><td class="memItemLeft" align="right" valign="top">static const <a class="el" href="../../dd/d61/classpl_event.htm">plEvent</a>&lt; const <a class="el" href="../../d5/dc0/structpl_resource_event.htm">plResourceEvent</a> &amp;, <a class="el" href="../../d1/df4/classpl_mutex.htm">plMutex</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5b6c3de37fa7e6e40f2918c974921697">GetResourceEvents</a> ()</td></tr>
<tr class="separator:a5b6c3de37fa7e6e40f2918c974921697"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a730db82f65aeca87e400acf7bb754aa2" id="r_a730db82f65aeca87e400acf7bb754aa2"><td class="memItemLeft" align="right" valign="top"><a id="a730db82f65aeca87e400acf7bb754aa2" name="a730db82f65aeca87e400acf7bb754aa2"></a>
static const <a class="el" href="../../dd/d61/classpl_event.htm">plEvent</a>&lt; const <a class="el" href="../../d9/dea/structpl_resource_manager_event.htm">plResourceManagerEvent</a> &amp;, <a class="el" href="../../d1/df4/classpl_mutex.htm">plMutex</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>GetManagerEvents</b> ()</td></tr>
<tr class="memdesc:a730db82f65aeca87e400acf7bb754aa2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Events for the resource manager that affect broader things. <br /></td></tr>
<tr class="separator:a730db82f65aeca87e400acf7bb754aa2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a938264430dce1bfea1f67c4f0738a10c" id="r_a938264430dce1bfea1f67c4f0738a10c"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a938264430dce1bfea1f67c4f0738a10c">BroadcastExistsEvent</a> ()</td></tr>
<tr class="memdesc:a938264430dce1bfea1f67c4f0738a10c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Goes through all existing resources and broadcasts the 'Exists' event.  <br /></td></tr>
<tr class="separator:a938264430dce1bfea1f67c4f0738a10c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Loading and creating resources</div></td></tr>
<tr class="memitem:ad7f0848a40f57cfad43502b62125b16a" id="r_ad7f0848a40f57cfad43502b62125b16a"><td class="memTemplParams" colspan="2">template&lt;typename ResourceType &gt; </td></tr>
<tr class="memitem:ad7f0848a40f57cfad43502b62125b16a"><td class="memTemplItemLeft" align="right" valign="top">static <a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; ResourceType &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ad7f0848a40f57cfad43502b62125b16a">LoadResource</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sResourceID)</td></tr>
<tr class="memdesc:ad7f0848a40f57cfad43502b62125b16a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a handle to the requested resource. szResourceID must uniquely identify the resource, different spellings / casing will result in different resources.  <br /></td></tr>
<tr class="separator:ad7f0848a40f57cfad43502b62125b16a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e4f4b19a3e6f47b2fba01577772e373" id="r_a6e4f4b19a3e6f47b2fba01577772e373"><td class="memTemplParams" colspan="2">template&lt;typename ResourceType &gt; </td></tr>
<tr class="memitem:a6e4f4b19a3e6f47b2fba01577772e373"><td class="memTemplItemLeft" align="right" valign="top">static <a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; ResourceType &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a6e4f4b19a3e6f47b2fba01577772e373">LoadResource</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sResourceID, <a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; ResourceType &gt; hLoadingFallback)</td></tr>
<tr class="memdesc:a6e4f4b19a3e6f47b2fba01577772e373"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="#ad7f0848a40f57cfad43502b62125b16a" title="Returns a handle to the requested resource. szResourceID must uniquely identify the resource,...">LoadResource()</a>, but additionally allows to set a priority on the resource and a custom fallback resource for this instance.  <br /></td></tr>
<tr class="separator:a6e4f4b19a3e6f47b2fba01577772e373"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26aed1552fa513f02ddf4a65df714a62" id="r_a26aed1552fa513f02ddf4a65df714a62"><td class="memItemLeft" align="right" valign="top"><a id="a26aed1552fa513f02ddf4a65df714a62" name="a26aed1552fa513f02ddf4a65df714a62"></a>
static <a class="el" href="../../d1/d91/classpl_typeless_resource_handle.htm">plTypelessResourceHandle</a>&#160;</td><td class="memItemRight" valign="bottom"><b>LoadResourceByType</b> (const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *pResourceType, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sResourceID)</td></tr>
<tr class="memdesc:a26aed1552fa513f02ddf4a65df714a62"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="#ad7f0848a40f57cfad43502b62125b16a" title="Returns a handle to the requested resource. szResourceID must uniquely identify the resource,...">LoadResource()</a>, but instead of a template argument, the resource type to use is given as <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm" title="This class holds information about reflected types. Each instance represents one type that is known t...">plRTTI</a> info. Returns a typeless handle due to the missing template argument. <br /></td></tr>
<tr class="separator:a26aed1552fa513f02ddf4a65df714a62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c92c8d5e52f34b228cffc8876625a8a" id="r_a2c92c8d5e52f34b228cffc8876625a8a"><td class="memItemLeft" align="right" valign="top"><a id="a2c92c8d5e52f34b228cffc8876625a8a" name="a2c92c8d5e52f34b228cffc8876625a8a"></a>
static bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsAnyLoadingInProgress</b> ()</td></tr>
<tr class="memdesc:a2c92c8d5e52f34b228cffc8876625a8a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether any resource loading is in progress. <br /></td></tr>
<tr class="separator:a2c92c8d5e52f34b228cffc8876625a8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d7660fb3d009b30d0655e0dfa71bb10" id="r_a7d7660fb3d009b30d0655e0dfa71bb10"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plString</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7d7660fb3d009b30d0655e0dfa71bb10">GenerateUniqueResourceID</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sResourceIDPrefix)</td></tr>
<tr class="memdesc:a7d7660fb3d009b30d0655e0dfa71bb10"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generates a unique resource ID with the given prefix.  <br /></td></tr>
<tr class="separator:a7d7660fb3d009b30d0655e0dfa71bb10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd34b6e5e86353469f07e6447cae1a97" id="r_afd34b6e5e86353469f07e6447cae1a97"><td class="memTemplParams" colspan="2">template&lt;typename ResourceType , typename DescriptorType &gt; </td></tr>
<tr class="memitem:afd34b6e5e86353469f07e6447cae1a97"><td class="memTemplItemLeft" align="right" valign="top">static <a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; ResourceType &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#afd34b6e5e86353469f07e6447cae1a97">CreateResource</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sResourceID, DescriptorType &amp;&amp;descriptor, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sResourceDescription=nullptr)</td></tr>
<tr class="memdesc:afd34b6e5e86353469f07e6447cae1a97"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a resource from a descriptor.  <br /></td></tr>
<tr class="separator:afd34b6e5e86353469f07e6447cae1a97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0f9ce85e60555347a5dc17213a0d14b" id="r_ad0f9ce85e60555347a5dc17213a0d14b"><td class="memTemplParams" colspan="2">template&lt;typename ResourceType , typename DescriptorType &gt; </td></tr>
<tr class="memitem:ad0f9ce85e60555347a5dc17213a0d14b"><td class="memTemplItemLeft" align="right" valign="top">static <a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; ResourceType &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ad0f9ce85e60555347a5dc17213a0d14b">GetOrCreateResource</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sResourceID, DescriptorType &amp;&amp;descriptor, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sResourceDescription=nullptr)</td></tr>
<tr class="memdesc:ad0f9ce85e60555347a5dc17213a0d14b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a handle to the resource with the given ID if it exists or creates it from a descriptor.  <br /></td></tr>
<tr class="separator:ad0f9ce85e60555347a5dc17213a0d14b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae72cc812be3f4a42f70e0131f8a94663" id="r_ae72cc812be3f4a42f70e0131f8a94663"><td class="memTemplParams" colspan="2">template&lt;typename ResourceType &gt; </td></tr>
<tr class="memitem:ae72cc812be3f4a42f70e0131f8a94663"><td class="memTemplItemLeft" align="right" valign="top">static <a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; ResourceType &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ae72cc812be3f4a42f70e0131f8a94663">GetExistingResource</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sResourceID)</td></tr>
<tr class="memdesc:ae72cc812be3f4a42f70e0131f8a94663"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a handle to the resource with the given ID. If the resource does not exist, the handle is invalid.  <br /></td></tr>
<tr class="separator:ae72cc812be3f4a42f70e0131f8a94663"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba030bd3b81b09694272c8b9684ee182" id="r_aba030bd3b81b09694272c8b9684ee182"><td class="memItemLeft" align="right" valign="top"><a id="aba030bd3b81b09694272c8b9684ee182" name="aba030bd3b81b09694272c8b9684ee182"></a>
static <a class="el" href="../../d1/d91/classpl_typeless_resource_handle.htm">plTypelessResourceHandle</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetExistingResourceByType</b> (const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *pResourceType, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sResourceID)</td></tr>
<tr class="memdesc:aba030bd3b81b09694272c8b9684ee182"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="#aba030bd3b81b09694272c8b9684ee182" title="Same as GetExistingResourceByType() but allows to specify the resource type as an plRTTI.">GetExistingResourceByType()</a> but allows to specify the resource type as an <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm" title="This class holds information about reflected types. Each instance represents one type that is known t...">plRTTI</a>. <br /></td></tr>
<tr class="separator:aba030bd3b81b09694272c8b9684ee182"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ab67b4d41238999306689a7eb37c9b7" id="r_a2ab67b4d41238999306689a7eb37c9b7"><td class="memTemplParams" colspan="2"><a id="a2ab67b4d41238999306689a7eb37c9b7" name="a2ab67b4d41238999306689a7eb37c9b7"></a>
template&lt;typename ResourceType &gt; </td></tr>
<tr class="memitem:a2ab67b4d41238999306689a7eb37c9b7"><td class="memTemplItemLeft" align="right" valign="top">static <a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; ResourceType &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetExistingResourceOrCreateAsync</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sResourceID, <a class="el" href="../../df/d44/classpl_unique_ptr.htm">plUniquePtr</a>&lt; <a class="el" href="../../da/d6b/classpl_resource_type_loader.htm">plResourceTypeLoader</a> &gt; &amp;&amp;pLoader, <a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; ResourceType &gt; hLoadingFallback={})</td></tr>
<tr class="separator:a2ab67b4d41238999306689a7eb37c9b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef3b822267810bb29c49b3f22d895c68" id="r_aef3b822267810bb29c49b3f22d895c68"><td class="memItemLeft" align="right" valign="top"><a id="aef3b822267810bb29c49b3f22d895c68" name="aef3b822267810bb29c49b3f22d895c68"></a>
static <a class="el" href="../../d1/d91/classpl_typeless_resource_handle.htm">plTypelessResourceHandle</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetExistingResourceOrCreateAsync</b> (const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *pResourceType, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sResourceID, <a class="el" href="../../df/d44/classpl_unique_ptr.htm">plUniquePtr</a>&lt; <a class="el" href="../../da/d6b/classpl_resource_type_loader.htm">plResourceTypeLoader</a> &gt; &amp;&amp;pLoader)</td></tr>
<tr class="separator:aef3b822267810bb29c49b3f22d895c68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a486680c83cc69052361d3838bc6c477a" id="r_a486680c83cc69052361d3838bc6c477a"><td class="memItemLeft" align="right" valign="top"><a id="a486680c83cc69052361d3838bc6c477a" name="a486680c83cc69052361d3838bc6c477a"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>PreloadResource</b> (const <a class="el" href="../../d1/d91/classpl_typeless_resource_handle.htm">plTypelessResourceHandle</a> &amp;hResource)</td></tr>
<tr class="memdesc:a486680c83cc69052361d3838bc6c477a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Triggers loading of the given resource. tShouldBeAvailableIn specifies how long the resource is not yet needed, thus allowing other resources to be loaded first. This is only a hint and there are no guarantees when the resource is available. <br /></td></tr>
<tr class="separator:a486680c83cc69052361d3838bc6c477a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71e0efd35713d3d6907b275a2d4b6808" id="r_a71e0efd35713d3d6907b275a2d4b6808"><td class="memItemLeft" align="right" valign="top"><a id="a71e0efd35713d3d6907b275a2d4b6808" name="a71e0efd35713d3d6907b275a2d4b6808"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>ForceLoadResourceNow</b> (const <a class="el" href="../../d1/d91/classpl_typeless_resource_handle.htm">plTypelessResourceHandle</a> &amp;hResource)</td></tr>
<tr class="memdesc:a71e0efd35713d3d6907b275a2d4b6808"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to locking a resource with 'BlockTillLoaded' acquire mode, but can be done with a typeless handle and does not return a result. <br /></td></tr>
<tr class="separator:a71e0efd35713d3d6907b275a2d4b6808"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdb4412af0405a96843338bff88b9a3f" id="r_abdb4412af0405a96843338bff88b9a3f"><td class="memItemLeft" align="right" valign="top"><a id="abdb4412af0405a96843338bff88b9a3f" name="abdb4412af0405a96843338bff88b9a3f"></a>
static plResourceState&#160;</td><td class="memItemRight" valign="bottom"><b>GetLoadingState</b> (const <a class="el" href="../../d1/d91/classpl_typeless_resource_handle.htm">plTypelessResourceHandle</a> &amp;hResource)</td></tr>
<tr class="memdesc:abdb4412af0405a96843338bff88b9a3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the current loading state of the given resource. <br /></td></tr>
<tr class="separator:abdb4412af0405a96843338bff88b9a3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Reloading resources</div></td></tr>
<tr class="memitem:a44bd0b5125a2fcf05555c3651413c58d" id="r_a44bd0b5125a2fcf05555c3651413c58d"><td class="memItemLeft" align="right" valign="top"><a id="a44bd0b5125a2fcf05555c3651413c58d" name="a44bd0b5125a2fcf05555c3651413c58d"></a>
static plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>ReloadAllResources</b> (bool bForce)</td></tr>
<tr class="memdesc:a44bd0b5125a2fcf05555c3651413c58d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Goes through all resources and makes sure they are reloaded, if they have changed. If bForce is true, all resources are updated, even if there is no indication that they have changed. <br /></td></tr>
<tr class="separator:a44bd0b5125a2fcf05555c3651413c58d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae081235c767f525ebdc94d68807d2bcd" id="r_ae081235c767f525ebdc94d68807d2bcd"><td class="memTemplParams" colspan="2"><a id="ae081235c767f525ebdc94d68807d2bcd" name="ae081235c767f525ebdc94d68807d2bcd"></a>
template&lt;typename ResourceType &gt; </td></tr>
<tr class="memitem:ae081235c767f525ebdc94d68807d2bcd"><td class="memTemplItemLeft" align="right" valign="top">static plUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>ReloadResourcesOfType</b> (bool bForce)</td></tr>
<tr class="memdesc:ae081235c767f525ebdc94d68807d2bcd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Goes through all resources of the given type and makes sure they are reloaded, if they have changed. If bForce is true, resources are updated, even if there is no indication that they have changed. <br /></td></tr>
<tr class="separator:ae081235c767f525ebdc94d68807d2bcd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac884ce46ff7c701c288e88490f51491c" id="r_ac884ce46ff7c701c288e88490f51491c"><td class="memItemLeft" align="right" valign="top"><a id="ac884ce46ff7c701c288e88490f51491c" name="ac884ce46ff7c701c288e88490f51491c"></a>
static plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>ReloadResourcesOfType</b> (const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *pType, bool bForce)</td></tr>
<tr class="memdesc:ac884ce46ff7c701c288e88490f51491c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Goes through all resources of the given type and makes sure they are reloaded, if they have changed. If bForce is true, resources are updated, even if there is no indication that they have changed. <br /></td></tr>
<tr class="separator:ac884ce46ff7c701c288e88490f51491c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9b3c82edeaf37b7697744416a11845e" id="r_ab9b3c82edeaf37b7697744416a11845e"><td class="memTemplParams" colspan="2"><a id="ab9b3c82edeaf37b7697744416a11845e" name="ab9b3c82edeaf37b7697744416a11845e"></a>
template&lt;typename ResourceType &gt; </td></tr>
<tr class="memitem:ab9b3c82edeaf37b7697744416a11845e"><td class="memTemplItemLeft" align="right" valign="top">static bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>ReloadResource</b> (const <a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; ResourceType &gt; &amp;hResource, bool bForce)</td></tr>
<tr class="memdesc:ab9b3c82edeaf37b7697744416a11845e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reloads only the one specific resource. If bForce is true, it is updated, even if there is no indication that it has changed. <br /></td></tr>
<tr class="separator:ab9b3c82edeaf37b7697744416a11845e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b46ed4a20d9a309daab08557c7f37a9" id="r_a1b46ed4a20d9a309daab08557c7f37a9"><td class="memItemLeft" align="right" valign="top"><a id="a1b46ed4a20d9a309daab08557c7f37a9" name="a1b46ed4a20d9a309daab08557c7f37a9"></a>
static bool&#160;</td><td class="memItemRight" valign="bottom"><b>ReloadResource</b> (const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *pType, const <a class="el" href="../../d1/d91/classpl_typeless_resource_handle.htm">plTypelessResourceHandle</a> &amp;hResource, bool bForce)</td></tr>
<tr class="memdesc:a1b46ed4a20d9a309daab08557c7f37a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reloads only the one specific resource. If bForce is true, it is updated, even if there is no indication that it has changed. <br /></td></tr>
<tr class="separator:a1b46ed4a20d9a309daab08557c7f37a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9a4c2417970e405eca9389427ed133b" id="r_ac9a4c2417970e405eca9389427ed133b"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac9a4c2417970e405eca9389427ed133b">UpdateResourceWithCustomLoader</a> (const <a class="el" href="../../d1/d91/classpl_typeless_resource_handle.htm">plTypelessResourceHandle</a> &amp;hResource, <a class="el" href="../../df/d44/classpl_unique_ptr.htm">plUniquePtr</a>&lt; <a class="el" href="../../da/d6b/classpl_resource_type_loader.htm">plResourceTypeLoader</a> &gt; &amp;&amp;pLoader)</td></tr>
<tr class="memdesc:ac9a4c2417970e405eca9389427ed133b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calls <a class="el" href="#ab9b3c82edeaf37b7697744416a11845e" title="Reloads only the one specific resource. If bForce is true, it is updated, even if there is no indicat...">ReloadResource()</a> on the given resource, but makes sure that the reload happens with the given custom loader.  <br /></td></tr>
<tr class="separator:ac9a4c2417970e405eca9389427ed133b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9bd7f41d90dbe50fefdb89761ad26a5e" id="r_a9bd7f41d90dbe50fefdb89761ad26a5e"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a9bd7f41d90dbe50fefdb89761ad26a5e">RestoreResource</a> (const <a class="el" href="../../d1/d91/classpl_typeless_resource_handle.htm">plTypelessResourceHandle</a> &amp;hResource)</td></tr>
<tr class="memdesc:a9bd7f41d90dbe50fefdb89761ad26a5e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes the 'PreventFileReload' flag and forces a reload on the resource.  <br /></td></tr>
<tr class="separator:a9bd7f41d90dbe50fefdb89761ad26a5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Acquiring resources</div></td></tr>
<tr class="memitem:a9433d49ea893e1446b19daea5df73871" id="r_a9433d49ea893e1446b19daea5df73871"><td class="memTemplParams" colspan="2">template&lt;typename ResourceType &gt; </td></tr>
<tr class="memitem:a9433d49ea893e1446b19daea5df73871"><td class="memTemplItemLeft" align="right" valign="top">static ResourceType *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a9433d49ea893e1446b19daea5df73871">BeginAcquireResource</a> (const <a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; ResourceType &gt; &amp;hResource, plResourceAcquireMode mode, const <a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; ResourceType &gt; &amp;hLoadingFallback=<a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; ResourceType &gt;(), plResourceAcquireResult *out_pAcquireResult=nullptr)</td></tr>
<tr class="memdesc:a9433d49ea893e1446b19daea5df73871"><td class="mdescLeft">&#160;</td><td class="mdescRight">Acquires a resource pointer from a handle. Prefer to use <a class="el" href="../../d8/d72/classpl_resource_lock.htm" title="Helper class to acquire and release a resource safely.">plResourceLock</a>, which wraps BeginAcquireResource / EndAcquireResource.  <br /></td></tr>
<tr class="separator:a9433d49ea893e1446b19daea5df73871"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abedf3a24d493a2888b2eb132c3c232c6" id="r_abedf3a24d493a2888b2eb132c3c232c6"><td class="memItemLeft" align="right" valign="top"><a id="abedf3a24d493a2888b2eb132c3c232c6" name="abedf3a24d493a2888b2eb132c3c232c6"></a>
static <a class="el" href="../../d8/d1c/classpl_resource.htm">plResource</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>BeginAcquireResourcePointer</b> (const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *pType, const <a class="el" href="../../d1/d91/classpl_typeless_resource_handle.htm">plTypelessResourceHandle</a> &amp;hResource)</td></tr>
<tr class="memdesc:abedf3a24d493a2888b2eb132c3c232c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as BeginAcquireResource but only for the base resource pointer. <br /></td></tr>
<tr class="separator:abedf3a24d493a2888b2eb132c3c232c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06575aa6f350b36bf272782cf312d70f" id="r_a06575aa6f350b36bf272782cf312d70f"><td class="memTemplParams" colspan="2"><a id="a06575aa6f350b36bf272782cf312d70f" name="a06575aa6f350b36bf272782cf312d70f"></a>
template&lt;typename ResourceType &gt; </td></tr>
<tr class="memitem:a06575aa6f350b36bf272782cf312d70f"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EndAcquireResource</b> (ResourceType *pResource)</td></tr>
<tr class="memdesc:a06575aa6f350b36bf272782cf312d70f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Needs to be called in concert with <a class="el" href="#a9433d49ea893e1446b19daea5df73871" title="Acquires a resource pointer from a handle. Prefer to use plResourceLock, which wraps BeginAcquireReso...">BeginAcquireResource()</a> after accessing a resource has been finished. Prefer to use <a class="el" href="../../d8/d72/classpl_resource_lock.htm" title="Helper class to acquire and release a resource safely.">plResourceLock</a> instead. <br /></td></tr>
<tr class="separator:a06575aa6f350b36bf272782cf312d70f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af31bd59960a55a8b64375b28051dc874" id="r_af31bd59960a55a8b64375b28051dc874"><td class="memItemLeft" align="right" valign="top"><a id="af31bd59960a55a8b64375b28051dc874" name="af31bd59960a55a8b64375b28051dc874"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>EndAcquireResourcePointer</b> (<a class="el" href="../../d8/d1c/classpl_resource.htm">plResource</a> *pResource)</td></tr>
<tr class="memdesc:af31bd59960a55a8b64375b28051dc874"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as EndAcquireResource but without the template parameter. See also BeginAcquireResourcePointer. <br /></td></tr>
<tr class="separator:af31bd59960a55a8b64375b28051dc874"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a376baf5a4d27924d1e3d28fdd7cc1a07" id="r_a376baf5a4d27924d1e3d28fdd7cc1a07"><td class="memItemLeft" align="right" valign="top"><a id="a376baf5a4d27924d1e3d28fdd7cc1a07" name="a376baf5a4d27924d1e3d28fdd7cc1a07"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>ForceNoFallbackAcquisition</b> (plUInt32 uiNumFrames=0xFFFFFFFF)</td></tr>
<tr class="memdesc:a376baf5a4d27924d1e3d28fdd7cc1a07"><td class="mdescLeft">&#160;</td><td class="mdescRight">Forces the resource manager to treat plResourceAcquireMode::AllowLoadingFallback as plResourceAcquireMode::BlockTillLoaded on BeginAcquireResource. <br /></td></tr>
<tr class="separator:a376baf5a4d27924d1e3d28fdd7cc1a07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5eba256e5513543a9ea06ddef2f688c" id="r_aa5eba256e5513543a9ea06ddef2f688c"><td class="memItemLeft" align="right" valign="top"><a id="aa5eba256e5513543a9ea06ddef2f688c" name="aa5eba256e5513543a9ea06ddef2f688c"></a>
static plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GetForceNoFallbackAcquisition</b> ()</td></tr>
<tr class="memdesc:aa5eba256e5513543a9ea06ddef2f688c"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the returned number is greater 0 the resource manager treats plResourceAcquireMode::AllowLoadingFallback as plResourceAcquireMode::BlockTillLoaded on BeginAcquireResource. <br /></td></tr>
<tr class="separator:aa5eba256e5513543a9ea06ddef2f688c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5165538c12b0ccc46ed00610e17c6456" id="r_a5165538c12b0ccc46ed00610e17c6456"><td class="memTemplParams" colspan="2"><a id="a5165538c12b0ccc46ed00610e17c6456" name="a5165538c12b0ccc46ed00610e17c6456"></a>
template&lt;typename ResourceType &gt; </td></tr>
<tr class="memitem:a5165538c12b0ccc46ed00610e17c6456"><td class="memTemplItemLeft" align="right" valign="top">static <a class="el" href="../../d3/d21/classpl_locked_object.htm">plLockedObject</a>&lt; <a class="el" href="../../d1/df4/classpl_mutex.htm">plMutex</a>, <a class="el" href="../../d0/d4e/classpl_dynamic_array.htm">plDynamicArray</a>&lt; <a class="el" href="../../d8/d1c/classpl_resource.htm">plResource</a> * &gt; &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetAllResourcesOfType</b> ()</td></tr>
<tr class="memdesc:a5165538c12b0ccc46ed00610e17c6456"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves an array of pointers to resources of the indicated type which are loaded at the moment. Destroy the returned object as soon as possible as it holds the entire resource manager locked. <br /></td></tr>
<tr class="separator:a5165538c12b0ccc46ed00610e17c6456"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Miscellaneous</div></td></tr>
<tr class="memitem:af0b9a92744786810ccfa9b3e04539714" id="r_af0b9a92744786810ccfa9b3e04539714"><td class="memItemLeft" align="right" valign="top"><a id="af0b9a92744786810ccfa9b3e04539714" name="af0b9a92744786810ccfa9b3e04539714"></a>
static <a class="el" href="../../d1/df4/classpl_mutex.htm">plMutex</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>GetMutex</b> ()</td></tr>
<tr class="memdesc:af0b9a92744786810ccfa9b3e04539714"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the resource manager mutex. Allows to lock the manager on a thread when multiple operations need to be done in sequence. <br /></td></tr>
<tr class="separator:af0b9a92744786810ccfa9b3e04539714"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d7ee6aa376b044320f4ede582335f7a" id="r_a6d7ee6aa376b044320f4ede582335f7a"><td class="memItemLeft" align="right" valign="top"><a id="a6d7ee6aa376b044320f4ede582335f7a" name="a6d7ee6aa376b044320f4ede582335f7a"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>PerFrameUpdate</b> ()</td></tr>
<tr class="memdesc:a6d7ee6aa376b044320f4ede582335f7a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Must be called once per frame for some bookkeeping. <br /></td></tr>
<tr class="separator:a6d7ee6aa376b044320f4ede582335f7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc6ecc63591e997294d96dc7ad2b9342" id="r_acc6ecc63591e997294d96dc7ad2b9342"><td class="memItemLeft" align="right" valign="top"><a id="acc6ecc63591e997294d96dc7ad2b9342" name="acc6ecc63591e997294d96dc7ad2b9342"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>EngineAboutToShutdown</b> ()</td></tr>
<tr class="memdesc:acc6ecc63591e997294d96dc7ad2b9342"><td class="mdescLeft">&#160;</td><td class="mdescRight">Makes sure that no further resource loading will take place. <br /></td></tr>
<tr class="separator:acc6ecc63591e997294d96dc7ad2b9342"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aedef177b925d599600e94f760f08f8ac" id="r_aedef177b925d599600e94f760f08f8ac"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aedef177b925d599600e94f760f08f8ac">ResetAllResources</a> ()</td></tr>
<tr class="memdesc:aedef177b925d599600e94f760f08f8ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calls <a class="el" href="../../d8/d1c/classpl_resource.htm#a61a8d04086a7b964035a48fa7180c8f0" title="If the resource has modifications from the original state, it should reset itself to that state now (...">plResource::ResetResource()</a> on all resources.  <br /></td></tr>
<tr class="separator:aedef177b925d599600e94f760f08f8ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f339add381ae9e0dc6a1533cba568ea" id="r_a7f339add381ae9e0dc6a1533cba568ea"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7f339add381ae9e0dc6a1533cba568ea">SetResourceLowResData</a> (const <a class="el" href="../../d1/d91/classpl_typeless_resource_handle.htm">plTypelessResourceHandle</a> &amp;hResource, <a class="el" href="../../df/d3d/classpl_stream_reader.htm">plStreamReader</a> *pStream)</td></tr>
<tr class="memdesc:a7f339add381ae9e0dc6a1533cba568ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calls <a class="el" href="../../d8/d1c/classpl_resource.htm#adc85535c94e33fd749abc70e5cd515e7" title="Called whenever more data for the resource is available. The resource must read the stream to update ...">plResource::UpdateContent()</a> to fill the resource with 'low resolution' data.  <br /></td></tr>
<tr class="separator:a7f339add381ae9e0dc6a1533cba568ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Type specific loaders</div></td></tr>
<tr class="memitem:a17e81ba23f24ee1bcccf9497487fe09b" id="r_a17e81ba23f24ee1bcccf9497487fe09b"><td class="memItemLeft" align="right" valign="top"><a id="a17e81ba23f24ee1bcccf9497487fe09b" name="a17e81ba23f24ee1bcccf9497487fe09b"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>SetDefaultResourceLoader</b> (<a class="el" href="../../da/d6b/classpl_resource_type_loader.htm">plResourceTypeLoader</a> *pDefaultLoader)</td></tr>
<tr class="memdesc:a17e81ba23f24ee1bcccf9497487fe09b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the resource loader to use when no type specific resource loader is available. <br /></td></tr>
<tr class="separator:a17e81ba23f24ee1bcccf9497487fe09b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a122e85447031e701b7837ebd4cb44850" id="r_a122e85447031e701b7837ebd4cb44850"><td class="memItemLeft" align="right" valign="top"><a id="a122e85447031e701b7837ebd4cb44850" name="a122e85447031e701b7837ebd4cb44850"></a>
static <a class="el" href="../../da/d6b/classpl_resource_type_loader.htm">plResourceTypeLoader</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetDefaultResourceLoader</b> ()</td></tr>
<tr class="memdesc:a122e85447031e701b7837ebd4cb44850"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the resource loader to use when no type specific resource loader is available. <br /></td></tr>
<tr class="separator:a122e85447031e701b7837ebd4cb44850"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39fed8a3d2edf3c70b0d7372be47611a" id="r_a39fed8a3d2edf3c70b0d7372be47611a"><td class="memTemplParams" colspan="2">template&lt;typename ResourceType &gt; </td></tr>
<tr class="memitem:a39fed8a3d2edf3c70b0d7372be47611a"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a39fed8a3d2edf3c70b0d7372be47611a">SetResourceTypeLoader</a> (<a class="el" href="../../da/d6b/classpl_resource_type_loader.htm">plResourceTypeLoader</a> *pCreator)</td></tr>
<tr class="memdesc:a39fed8a3d2edf3c70b0d7372be47611a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the resource loader to use for the given resource type.  <br /></td></tr>
<tr class="separator:a39fed8a3d2edf3c70b0d7372be47611a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Named resources</div></td></tr>
<tr class="memitem:a1821b3f90004f7b3d7f1da696d41a103" id="r_a1821b3f90004f7b3d7f1da696d41a103"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a1821b3f90004f7b3d7f1da696d41a103">RegisterNamedResource</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sLookupName, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sRedirectionResource)</td></tr>
<tr class="memdesc:a1821b3f90004f7b3d7f1da696d41a103"><td class="mdescLeft">&#160;</td><td class="mdescRight">Registers a 'named' resource. When a resource is looked up using <em>szLookupName</em>, the lookup will be redirected to <em>szRedirectionResource</em>.  <br /></td></tr>
<tr class="separator:a1821b3f90004f7b3d7f1da696d41a103"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0229201a79ca5788c067d7401a654da4" id="r_a0229201a79ca5788c067d7401a654da4"><td class="memItemLeft" align="right" valign="top"><a id="a0229201a79ca5788c067d7401a654da4" name="a0229201a79ca5788c067d7401a654da4"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>UnregisterNamedResource</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sLookupName)</td></tr>
<tr class="memdesc:a0229201a79ca5788c067d7401a654da4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes a previously registered name from the redirection table. <br /></td></tr>
<tr class="separator:a0229201a79ca5788c067d7401a654da4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Asset system interaction</div></td></tr>
<tr class="memitem:a13d62878d02750967c6f9df158b88856" id="r_a13d62878d02750967c6f9df158b88856"><td class="memItemLeft" align="right" valign="top"><a id="a13d62878d02750967c6f9df158b88856" name="a13d62878d02750967c6f9df158b88856"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>RegisterResourceForAssetType</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sAssetTypeName, const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *pResourceType)</td></tr>
<tr class="memdesc:a13d62878d02750967c6f9df158b88856"><td class="mdescLeft">&#160;</td><td class="mdescRight">Registers which resource type to use to load an asset with the given type name. <br /></td></tr>
<tr class="separator:a13d62878d02750967c6f9df158b88856"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c60d461f8b2019f6aeec63489689408" id="r_a3c60d461f8b2019f6aeec63489689408"><td class="memItemLeft" align="right" valign="top"><a id="a3c60d461f8b2019f6aeec63489689408" name="a3c60d461f8b2019f6aeec63489689408"></a>
static const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>FindResourceForAssetType</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sAssetTypeName)</td></tr>
<tr class="memdesc:a3c60d461f8b2019f6aeec63489689408"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the resource type that was registered to handle the given asset type for loading. nullptr if no resource type was registered for this asset type. <br /></td></tr>
<tr class="separator:a3c60d461f8b2019f6aeec63489689408"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Export mode</div></td></tr>
<tr class="memitem:ad1a6178f7e80d490959af00354b00909" id="r_ad1a6178f7e80d490959af00354b00909"><td class="memItemLeft" align="right" valign="top"><a id="ad1a6178f7e80d490959af00354b00909" name="ad1a6178f7e80d490959af00354b00909"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>EnableExportMode</b> (bool bEnable)</td></tr>
<tr class="memdesc:ad1a6178f7e80d490959af00354b00909"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enables export mode. In this mode the resource manager will assert when it actually tries to load a resource. This can be useful when exporting resource handles but the actual resource content is not needed. <br /></td></tr>
<tr class="separator:ad1a6178f7e80d490959af00354b00909"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e7e438c198ef0ec97a2bc1069193117" id="r_a1e7e438c198ef0ec97a2bc1069193117"><td class="memItemLeft" align="right" valign="top"><a id="a1e7e438c198ef0ec97a2bc1069193117" name="a1e7e438c198ef0ec97a2bc1069193117"></a>
static bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsExportModeEnabled</b> ()</td></tr>
<tr class="memdesc:a1e7e438c198ef0ec97a2bc1069193117"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether export mode is active. <br /></td></tr>
<tr class="separator:a1e7e438c198ef0ec97a2bc1069193117"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7200b4072e32e89e540f7f4183294e66" id="r_a7200b4072e32e89e540f7f4183294e66"><td class="memTemplParams" colspan="2"><a id="a7200b4072e32e89e540f7f4183294e66" name="a7200b4072e32e89e540f7f4183294e66"></a>
template&lt;typename ResourceType &gt; </td></tr>
<tr class="memitem:a7200b4072e32e89e540f7f4183294e66"><td class="memTemplItemLeft" align="right" valign="top">static <a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; ResourceType &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetResourceHandleForExport</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sResourceID)</td></tr>
<tr class="memdesc:a7200b4072e32e89e540f7f4183294e66"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a resource handle for the given resource ID. This method can only be used if export mode is enabled. Internally it will create a resource but does not load the content. This way it can be ensured that the resource handle is always only the size of a pointer. <br /></td></tr>
<tr class="separator:a7200b4072e32e89e540f7f4183294e66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Resource Type Overrides</div></td></tr>
<tr class="memitem:a318a5549e5ff58c851fbb5b4e92aa120" id="r_a318a5549e5ff58c851fbb5b4e92aa120"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a318a5549e5ff58c851fbb5b4e92aa120">RegisterResourceOverrideType</a> (const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *pDerivedTypeToUse, <a class="el" href="../../df/df1/structpl_delegate.htm">plDelegate</a>&lt; bool(const <a class="el" href="../../d3/d2d/classpl_string_builder.htm">plStringBuilder</a> &amp;)&gt; overrideDecider)</td></tr>
<tr class="memdesc:a318a5549e5ff58c851fbb5b4e92aa120"><td class="mdescLeft">&#160;</td><td class="mdescRight">Registers a resource type to be used instead of any of it's base classes, when loading specific data.  <br /></td></tr>
<tr class="separator:a318a5549e5ff58c851fbb5b4e92aa120"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b1ee3ae6e3011f01d39b889a830953c" id="r_a4b1ee3ae6e3011f01d39b889a830953c"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4b1ee3ae6e3011f01d39b889a830953c">UnregisterResourceOverrideType</a> (const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *pDerivedTypeToUse)</td></tr>
<tr class="memdesc:a4b1ee3ae6e3011f01d39b889a830953c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unregisters <em>pDerivedTypeToUse</em> as an override resource.  <br /></td></tr>
<tr class="separator:a4b1ee3ae6e3011f01d39b889a830953c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="friends" name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:ae56ab98bd97bc44e3f8d4640e0e49a4d" id="r_ae56ab98bd97bc44e3f8d4640e0e49a4d"><td class="memItemLeft" align="right" valign="top"><a id="ae56ab98bd97bc44e3f8d4640e0e49a4d" name="ae56ab98bd97bc44e3f8d4640e0e49a4d"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>plResourceManagerState</b></td></tr>
<tr class="separator:ae56ab98bd97bc44e3f8d4640e0e49a4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71bdbfb3be5fd280829667260683f079" id="r_a71bdbfb3be5fd280829667260683f079"><td class="memItemLeft" align="right" valign="top"><a id="a71bdbfb3be5fd280829667260683f079" name="a71bdbfb3be5fd280829667260683f079"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>plResource</b></td></tr>
<tr class="separator:a71bdbfb3be5fd280829667260683f079"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c942d7a51187abc8e65e3d48c126791" id="r_a9c942d7a51187abc8e65e3d48c126791"><td class="memItemLeft" align="right" valign="top"><a id="a9c942d7a51187abc8e65e3d48c126791" name="a9c942d7a51187abc8e65e3d48c126791"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>plResourceManagerWorkerDataLoad</b></td></tr>
<tr class="separator:a9c942d7a51187abc8e65e3d48c126791"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af27a52a71f4a2e0d32f37c55b07d7ad8" id="r_af27a52a71f4a2e0d32f37c55b07d7ad8"><td class="memItemLeft" align="right" valign="top"><a id="af27a52a71f4a2e0d32f37c55b07d7ad8" name="af27a52a71f4a2e0d32f37c55b07d7ad8"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>plResourceManagerWorkerUpdateContent</b></td></tr>
<tr class="separator:af27a52a71f4a2e0d32f37c55b07d7ad8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af51f82022ea6b26ccc2069e436f9cc3e" id="r_af51f82022ea6b26ccc2069e436f9cc3e"><td class="memItemLeft" align="right" valign="top"><a id="af51f82022ea6b26ccc2069e436f9cc3e" name="af51f82022ea6b26ccc2069e436f9cc3e"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>plResourceHandleReadContext</b></td></tr>
<tr class="separator:af51f82022ea6b26ccc2069e436f9cc3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader">Resource Fallbacks</h2></td></tr>
<tr class="memitem:a73c2bf6873599385f3f7884eca4699eb" id="r_a73c2bf6873599385f3f7884eca4699eb"><td class="memItemLeft" align="right" valign="top"><a id="a73c2bf6873599385f3f7884eca4699eb" name="a73c2bf6873599385f3f7884eca4699eb"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>ResourceCleanupCB</b> = <a class="el" href="../../df/df1/structpl_delegate.htm">plDelegate</a>&lt;void()&gt;</td></tr>
<tr class="separator:a73c2bf6873599385f3f7884eca4699eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a694289d07a51ab83ddc9a8ff63487da9" id="r_a694289d07a51ab83ddc9a8ff63487da9"><td class="memTemplParams" colspan="2"><a id="a694289d07a51ab83ddc9a8ff63487da9" name="a694289d07a51ab83ddc9a8ff63487da9"></a>
template&lt;typename RESOURCE_TYPE &gt; </td></tr>
<tr class="memitem:a694289d07a51ab83ddc9a8ff63487da9"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SetResourceTypeLoadingFallback</b> (const <a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; RESOURCE_TYPE &gt; &amp;hResource)</td></tr>
<tr class="memdesc:a694289d07a51ab83ddc9a8ff63487da9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies which resource to use as a loading fallback for the given type, while a resource is not yet loaded. <br /></td></tr>
<tr class="separator:a694289d07a51ab83ddc9a8ff63487da9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeba6bd8ea88096b07d80e5597cb2f42e" id="r_aeba6bd8ea88096b07d80e5597cb2f42e"><td class="memTemplParams" colspan="2">template&lt;typename RESOURCE_TYPE &gt; </td></tr>
<tr class="memitem:aeba6bd8ea88096b07d80e5597cb2f42e"><td class="memTemplItemLeft" align="right" valign="top">static const <a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; RESOURCE_TYPE &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aeba6bd8ea88096b07d80e5597cb2f42e">GetResourceTypeLoadingFallback</a> ()</td></tr>
<tr class="separator:aeba6bd8ea88096b07d80e5597cb2f42e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acdd5a010f3b5441a60e864c0fd75ded7" id="r_acdd5a010f3b5441a60e864c0fd75ded7"><td class="memTemplParams" colspan="2">template&lt;typename RESOURCE_TYPE &gt; </td></tr>
<tr class="memitem:acdd5a010f3b5441a60e864c0fd75ded7"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#acdd5a010f3b5441a60e864c0fd75ded7">SetResourceTypeMissingFallback</a> (const <a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; RESOURCE_TYPE &gt; &amp;hResource)</td></tr>
<tr class="memdesc:acdd5a010f3b5441a60e864c0fd75ded7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies which resource to use as a missing fallback for the given type, when a resource cannot be loaded.  <br /></td></tr>
<tr class="separator:acdd5a010f3b5441a60e864c0fd75ded7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a323819d22182ca9450f4abb02ec8b61e" id="r_a323819d22182ca9450f4abb02ec8b61e"><td class="memTemplParams" colspan="2">template&lt;typename RESOURCE_TYPE &gt; </td></tr>
<tr class="memitem:a323819d22182ca9450f4abb02ec8b61e"><td class="memTemplItemLeft" align="right" valign="top">static const <a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; RESOURCE_TYPE &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a323819d22182ca9450f4abb02ec8b61e">GetResourceTypeMissingFallback</a> ()</td></tr>
<tr class="separator:a323819d22182ca9450f4abb02ec8b61e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf7e3e2945b3829903caeb9481f9cbe4" id="r_aaf7e3e2945b3829903caeb9481f9cbe4"><td class="memItemLeft" align="right" valign="top"><a id="aaf7e3e2945b3829903caeb9481f9cbe4" name="aaf7e3e2945b3829903caeb9481f9cbe4"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>AddResourceCleanupCallback</b> (<a class="el" href="../../df/df1/structpl_delegate.htm">ResourceCleanupCB</a> cb)</td></tr>
<tr class="memdesc:aaf7e3e2945b3829903caeb9481f9cbe4"><td class="mdescLeft">&#160;</td><td class="mdescRight">[internal] Used by <a class="el" href="../../d8/d1c/classpl_resource.htm" title="The base class for all resources.">plResource</a> to register a cleanup function to be called at resource manager shutdown. <br /></td></tr>
<tr class="separator:aaf7e3e2945b3829903caeb9481f9cbe4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7f2d8381b96fd613a0e9424ba848f6b" id="r_ae7f2d8381b96fd613a0e9424ba848f6b"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae7f2d8381b96fd613a0e9424ba848f6b">ClearResourceCleanupCallback</a> (<a class="el" href="../../df/df1/structpl_delegate.htm">ResourceCleanupCB</a> cb)</td></tr>
<tr class="separator:ae7f2d8381b96fd613a0e9424ba848f6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac724cb80e181b2be7bd8722e681be3ef" id="r_ac724cb80e181b2be7bd8722e681be3ef"><td class="memItemLeft" align="right" valign="top"><a id="ac724cb80e181b2be7bd8722e681be3ef" name="ac724cb80e181b2be7bd8722e681be3ef"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>ExecuteAllResourceCleanupCallbacks</b> ()</td></tr>
<tr class="memdesc:ac724cb80e181b2be7bd8722e681be3ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">This will clear ALL resources that were registered as 'missing' or 'loading' fallback resources. This is called early during system shutdown to clean up resources. <br /></td></tr>
<tr class="separator:ac724cb80e181b2be7bd8722e681be3ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader">Unloading resources</h2></td></tr>
<tr class="memitem:a71a7c563c824025473bac45a18c279ba" id="r_a71a7c563c824025473bac45a18c279ba"><td class="memItemLeft" align="right" valign="top"><a id="a71a7c563c824025473bac45a18c279ba" name="a71a7c563c824025473bac45a18c279ba"></a>
static plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>FreeAllUnusedResources</b> ()</td></tr>
<tr class="memdesc:a71a7c563c824025473bac45a18c279ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deallocates all resources whose refcount has reached 0. Returns the number of deleted resources. <br /></td></tr>
<tr class="separator:a71a7c563c824025473bac45a18c279ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a689f6bc9bfefdc45b6fa47396accdc00" id="r_a689f6bc9bfefdc45b6fa47396accdc00"><td class="memItemLeft" align="right" valign="top"><a id="a689f6bc9bfefdc45b6fa47396accdc00" name="a689f6bc9bfefdc45b6fa47396accdc00"></a>
static plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>FreeUnusedResources</b> (<a class="el" href="../../d1/df6/structpl_time.htm">plTime</a> timeout, <a class="el" href="../../d1/df6/structpl_time.htm">plTime</a> lastAcquireThreshold)</td></tr>
<tr class="memdesc:a689f6bc9bfefdc45b6fa47396accdc00"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deallocates resources whose refcount has reached 0. Returns the number of deleted resources. <br /></td></tr>
<tr class="separator:a689f6bc9bfefdc45b6fa47396accdc00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78ab273e5e8680f205f59ca436c9d1b5" id="r_a78ab273e5e8680f205f59ca436c9d1b5"><td class="memItemLeft" align="right" valign="top"><a id="a78ab273e5e8680f205f59ca436c9d1b5" name="a78ab273e5e8680f205f59ca436c9d1b5"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>SetAutoFreeUnused</b> (<a class="el" href="../../d1/df6/structpl_time.htm">plTime</a> timeout, <a class="el" href="../../d1/df6/structpl_time.htm">plTime</a> lastAcquireThreshold)</td></tr>
<tr class="memdesc:a78ab273e5e8680f205f59ca436c9d1b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">If timeout is not zero, <a class="el" href="#a689f6bc9bfefdc45b6fa47396accdc00" title="Deallocates resources whose refcount has reached 0. Returns the number of deleted resources.">FreeUnusedResources()</a> is called once every frame with the given parameters. <br /></td></tr>
<tr class="separator:a78ab273e5e8680f205f59ca436c9d1b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7dfcd8082f95123093068000c240069" id="r_ac7dfcd8082f95123093068000c240069"><td class="memTemplParams" colspan="2"><a id="ac7dfcd8082f95123093068000c240069" name="ac7dfcd8082f95123093068000c240069"></a>
template&lt;typename ResourceType &gt; </td></tr>
<tr class="memitem:ac7dfcd8082f95123093068000c240069"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SetIncrementalUnloadForResourceType</b> (bool bActive)</td></tr>
<tr class="memdesc:ac7dfcd8082f95123093068000c240069"><td class="mdescLeft">&#160;</td><td class="mdescRight">If set to 'false' resources of the given type will not be incrementally unloaded in the background, when they are not referenced anymore. <br /></td></tr>
<tr class="separator:ac7dfcd8082f95123093068000c240069"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a400c6c4c76ec848a819ae985d9828ed2" id="r_a400c6c4c76ec848a819ae985d9828ed2"><td class="memTemplParams" colspan="2"><a id="a400c6c4c76ec848a819ae985d9828ed2" name="a400c6c4c76ec848a819ae985d9828ed2"></a>
template&lt;typename TypeBeingUpdated , typename TypeItWantsToAcquire &gt; </td></tr>
<tr class="memitem:a400c6c4c76ec848a819ae985d9828ed2"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>AllowResourceTypeAcquireDuringUpdateContent</b> ()</td></tr>
<tr class="separator:a400c6c4c76ec848a819ae985d9828ed2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e508a8347ce201904a09d8570c3bd85" id="r_a1e508a8347ce201904a09d8570c3bd85"><td class="memItemLeft" align="right" valign="top"><a id="a1e508a8347ce201904a09d8570c3bd85" name="a1e508a8347ce201904a09d8570c3bd85"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>AllowResourceTypeAcquireDuringUpdateContent</b> (const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *pTypeBeingUpdated, const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *pTypeItWantsToAcquire)</td></tr>
<tr class="separator:a1e508a8347ce201904a09d8570c3bd85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a077bdb9078295afd2f06d7b9fc95666f" id="r_a077bdb9078295afd2f06d7b9fc95666f"><td class="memItemLeft" align="right" valign="top"><a id="a077bdb9078295afd2f06d7b9fc95666f" name="a077bdb9078295afd2f06d7b9fc95666f"></a>
static bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsResourceTypeAcquireDuringUpdateContentAllowed</b> (const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *pTypeBeingUpdated, const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *pTypeItWantsToAcquire)</td></tr>
<tr class="separator:a077bdb9078295afd2f06d7b9fc95666f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader">Resource Priorities</h2></td></tr>
<tr class="memitem:a1913ca0d73dba9324fe98af5eae973b4" id="r_a1913ca0d73dba9324fe98af5eae973b4"><td class="memTemplParams" colspan="2"><a id="a1913ca0d73dba9324fe98af5eae973b4" name="a1913ca0d73dba9324fe98af5eae973b4"></a>
template&lt;typename RESOURCE_TYPE &gt; </td></tr>
<tr class="memitem:a1913ca0d73dba9324fe98af5eae973b4"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SetResourceTypeDefaultPriority</b> (plResourcePriority priority)</td></tr>
<tr class="memdesc:a1913ca0d73dba9324fe98af5eae973b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Specifies which resource to use as a loading fallback for the given type, while a resource is not yet loaded. <br /></td></tr>
<tr class="separator:a1913ca0d73dba9324fe98af5eae973b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The central class for managing all types derived from <a class="el" href="../../d8/d1c/classpl_resource.htm" title="The base class for all resources.">plResource</a>. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a9433d49ea893e1446b19daea5df73871" name="a9433d49ea893e1446b19daea5df73871"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9433d49ea893e1446b19daea5df73871">&#9670;&#160;</a></span>BeginAcquireResource()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ResourceType &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ResourceType * plResourceManager::BeginAcquireResource </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; ResourceType &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>hResource</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plResourceAcquireMode</td>          <td class="paramname"><span class="paramname"><em>mode</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; ResourceType &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>hLoadingFallback</em></span><span class="paramdefsep"> = </span><span class="paramdefval"><a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt;ResourceType&gt;()</span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plResourceAcquireResult *</td>          <td class="paramname"><span class="paramname"><em>out_pAcquireResult</em></span><span class="paramdefsep"> = </span><span class="paramdefval">nullptr</span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Acquires a resource pointer from a handle. Prefer to use <a class="el" href="../../d8/d72/classpl_resource_lock.htm" title="Helper class to acquire and release a resource safely.">plResourceLock</a>, which wraps BeginAcquireResource / EndAcquireResource. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">hResource</td><td>The resource to acquire </td></tr>
    <tr><td class="paramname">mode</td><td>The desired way to acquire the resource. See plResourceAcquireMode for details. </td></tr>
    <tr><td class="paramname">hLoadingFallback</td><td>A custom fallback resource that should be returned if hResource is not yet available. Allows to use domain specific knowledge to get a better fallback. </td></tr>
    <tr><td class="paramname">Priority</td><td>Allows to adjust the priority of the resource. This will affect how fast the resource is loaded, in case it is not yet available. </td></tr>
    <tr><td class="paramname">out_AcquireResult</td><td>Returns how successful the acquisition was. See plResourceAcquireResult for details. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a938264430dce1bfea1f67c4f0738a10c" name="a938264430dce1bfea1f67c4f0738a10c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a938264430dce1bfea1f67c4f0738a10c">&#9670;&#160;</a></span>BroadcastExistsEvent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plResourceManager::BroadcastExistsEvent </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Goes through all existing resources and broadcasts the 'Exists' event. </p>
<p>Used to announce all currently existing resources to interested event listeners (ie tools). </p>

</div>
</div>
<a id="ae7f2d8381b96fd613a0e9424ba848f6b" name="ae7f2d8381b96fd613a0e9424ba848f6b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7f2d8381b96fd613a0e9424ba848f6b">&#9670;&#160;</a></span>ClearResourceCleanupCallback()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plResourceManager::ClearResourceCleanupCallback </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/df1/structpl_delegate.htm">ResourceCleanupCB</a></td>          <td class="paramname"><span class="paramname"><em>cb</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section see"><dt>See also</dt><dd><a class="el" href="#aaf7e3e2945b3829903caeb9481f9cbe4" title="[internal] Used by plResource to register a cleanup function to be called at resource manager shutdow...">AddResourceCleanupCallback()</a> </dd></dl>

</div>
</div>
<a id="afd34b6e5e86353469f07e6447cae1a97" name="afd34b6e5e86353469f07e6447cae1a97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd34b6e5e86353469f07e6447cae1a97">&#9670;&#160;</a></span>CreateResource()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ResourceType , typename DescriptorType &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; ResourceType &gt; plResourceManager::CreateResource </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sResourceID</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DescriptorType &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>descriptor</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sResourceDescription</em></span><span class="paramdefsep"> = </span><span class="paramdefval">nullptr</span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a resource from a descriptor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">szResourceID</td><td>The unique ID by which the resource is identified. E.g. in <a class="el" href="#ae72cc812be3f4a42f70e0131f8a94663" title="Returns a handle to the resource with the given ID. If the resource does not exist,...">GetExistingResource()</a> </td></tr>
    <tr><td class="paramname">descriptor</td><td>A type specific descriptor that holds all the information to create the resource. </td></tr>
    <tr><td class="paramname">szResourceDescription</td><td>An optional description that might help during debugging. Often a human readable name or path is stored here, to make it easier to identify this resource. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a7d7660fb3d009b30d0655e0dfa71bb10" name="a7d7660fb3d009b30d0655e0dfa71bb10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d7660fb3d009b30d0655e0dfa71bb10">&#9670;&#160;</a></span>GenerateUniqueResourceID()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plString</a> plResourceManager::GenerateUniqueResourceID </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sResourceIDPrefix</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generates a unique resource ID with the given prefix. </p>
<p>Provide a prefix that is preferably not used anywhere else (i.e., closely related to your code). If the prefix is not also used to manually generate resource IDs, this function is guaranteed to return a unique resource ID. </p>

</div>
</div>
<a id="ae72cc812be3f4a42f70e0131f8a94663" name="ae72cc812be3f4a42f70e0131f8a94663"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae72cc812be3f4a42f70e0131f8a94663">&#9670;&#160;</a></span>GetExistingResource()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ResourceType &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; ResourceType &gt; plResourceManager::GetExistingResource </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sResourceID</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns a handle to the resource with the given ID. If the resource does not exist, the handle is invalid. </p>
<p>Use this if a resource needs to be created procedurally (with <a class="el" href="#afd34b6e5e86353469f07e6447cae1a97" title="Creates a resource from a descriptor.">CreateResource()</a>), but might already have been created. If the returned handle is invalid, then just go through the resource creation step. </p>

</div>
</div>
<a id="ad0f9ce85e60555347a5dc17213a0d14b" name="ad0f9ce85e60555347a5dc17213a0d14b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0f9ce85e60555347a5dc17213a0d14b">&#9670;&#160;</a></span>GetOrCreateResource()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ResourceType , typename DescriptorType &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; ResourceType &gt; plResourceManager::GetOrCreateResource </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sResourceID</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">DescriptorType &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>descriptor</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sResourceDescription</em></span><span class="paramdefsep"> = </span><span class="paramdefval">nullptr</span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns a handle to the resource with the given ID if it exists or creates it from a descriptor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">szResourceID</td><td>The unique ID by which the resource is identified. E.g. in <a class="el" href="#ae72cc812be3f4a42f70e0131f8a94663" title="Returns a handle to the resource with the given ID. If the resource does not exist,...">GetExistingResource()</a> </td></tr>
    <tr><td class="paramname">descriptor</td><td>A type specific descriptor that holds all the information to create the resource. </td></tr>
    <tr><td class="paramname">szResourceDescription</td><td>An optional description that might help during debugging. Often a human readable name or path is stored here, to make it easier to identify this resource. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a5b6c3de37fa7e6e40f2918c974921697" name="a5b6c3de37fa7e6e40f2918c974921697"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b6c3de37fa7e6e40f2918c974921697">&#9670;&#160;</a></span>GetResourceEvents()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="../../dd/d61/classpl_event.htm">plEvent</a>&lt; const <a class="el" href="../../d5/dc0/structpl_resource_event.htm">plResourceEvent</a> &amp;, <a class="el" href="../../d1/df4/classpl_mutex.htm">plMutex</a> &gt; &amp; plResourceManager::GetResourceEvents </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Events on individual resources. Subscribe to this to get a notification for events happening on any resource. If you are only interested in events for a specific resource, subscribe on directly on that instance. </p>

</div>
</div>
<a id="aeba6bd8ea88096b07d80e5597cb2f42e" name="aeba6bd8ea88096b07d80e5597cb2f42e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeba6bd8ea88096b07d80e5597cb2f42e">&#9670;&#160;</a></span>GetResourceTypeLoadingFallback()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename RESOURCE_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static const <a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; RESOURCE_TYPE &gt; &amp; plResourceManager::GetResourceTypeLoadingFallback </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section see"><dt>See also</dt><dd><a class="el" href="#a694289d07a51ab83ddc9a8ff63487da9" title="Specifies which resource to use as a loading fallback for the given type, while a resource is not yet...">SetResourceTypeLoadingFallback()</a> </dd></dl>

</div>
</div>
<a id="a323819d22182ca9450f4abb02ec8b61e" name="a323819d22182ca9450f4abb02ec8b61e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a323819d22182ca9450f4abb02ec8b61e">&#9670;&#160;</a></span>GetResourceTypeMissingFallback()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename RESOURCE_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static const <a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; RESOURCE_TYPE &gt; &amp; plResourceManager::GetResourceTypeMissingFallback </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section see"><dt>See also</dt><dd><a class="el" href="#acdd5a010f3b5441a60e864c0fd75ded7" title="Specifies which resource to use as a missing fallback for the given type, when a resource cannot be l...">SetResourceTypeMissingFallback()</a> </dd></dl>

</div>
</div>
<a id="ad7f0848a40f57cfad43502b62125b16a" name="ad7f0848a40f57cfad43502b62125b16a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7f0848a40f57cfad43502b62125b16a">&#9670;&#160;</a></span>LoadResource() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ResourceType &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; ResourceType &gt; plResourceManager::LoadResource </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sResourceID</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns a handle to the requested resource. szResourceID must uniquely identify the resource, different spellings / casing will result in different resources. </p>
<p>After the call to this function the resource definitely exists in memory. Upon access through BeginAcquireResource / <a class="el" href="../../d8/d72/classpl_resource_lock.htm" title="Helper class to acquire and release a resource safely.">plResourceLock</a> the resource will be loaded. If it is not possible to load the resource it will change to a 'missing' state. If the code accessing the resource cannot handle that case, the application will 'terminate' (that means crash). </p>

</div>
</div>
<a id="a6e4f4b19a3e6f47b2fba01577772e373" name="a6e4f4b19a3e6f47b2fba01577772e373"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e4f4b19a3e6f47b2fba01577772e373">&#9670;&#160;</a></span>LoadResource() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ResourceType &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; ResourceType &gt; plResourceManager::LoadResource </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sResourceID</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; ResourceType &gt;</td>          <td class="paramname"><span class="paramname"><em>hLoadingFallback</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Same as <a class="el" href="#ad7f0848a40f57cfad43502b62125b16a" title="Returns a handle to the requested resource. szResourceID must uniquely identify the resource,...">LoadResource()</a>, but additionally allows to set a priority on the resource and a custom fallback resource for this instance. </p>
<p>Pass in plResourcePriority::Unchanged, if you only want to specify a custom fallback resource. If a resource priority is specified, the target resource will get that priority. If a valid fallback resource is specified, the resource will store that as its instance specific fallback resource. This will be used when trying to acquire the resource later. </p>

</div>
</div>
<a id="a1821b3f90004f7b3d7f1da696d41a103" name="a1821b3f90004f7b3d7f1da696d41a103"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1821b3f90004f7b3d7f1da696d41a103">&#9670;&#160;</a></span>RegisterNamedResource()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plResourceManager::RegisterNamedResource </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sLookupName</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sRedirectionResource</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Registers a 'named' resource. When a resource is looked up using <em>szLookupName</em>, the lookup will be redirected to <em>szRedirectionResource</em>. </p>
<p>This can be used to register a resource under an easier to use name. For example one can register "MenuBackground" as the name for "{
E50DCC85-D375-4999-9CFE-42F1377FAC85 }". If the lookup name already exists, it will be overwritten. </p>

</div>
</div>
<a id="a318a5549e5ff58c851fbb5b4e92aa120" name="a318a5549e5ff58c851fbb5b4e92aa120"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a318a5549e5ff58c851fbb5b4e92aa120">&#9670;&#160;</a></span>RegisterResourceOverrideType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">plResourceManager::RegisterResourceOverrideType </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *</td>          <td class="paramname"><span class="paramname"><em>pDerivedTypeToUse</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../df/df1/structpl_delegate.htm">plDelegate</a>&lt; bool(const <a class="el" href="../../d3/d2d/classpl_string_builder.htm">plStringBuilder</a> &amp;)&gt;</td>          <td class="paramname"><span class="paramname"><em>overrideDecider</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Registers a resource type to be used instead of any of it's base classes, when loading specific data. </p>
<p>When resource B is derived from A it can be registered to be instantiated when loading data, even if the code specifies to use a resource of type A. Whenever <a class="el" href="#ad7f0848a40f57cfad43502b62125b16a" title="Returns a handle to the requested resource. szResourceID must uniquely identify the resource,...">LoadResource&lt;A&gt;()</a> is executed, the registered callback <em>OverrideDecider</em> is run to figure out whether B should be instantiated instead. If OverrideDecider returns true, B is used.</p>
<p>OverrideDecider is given the resource ID after it has been resolved by the <a class="el" href="../../d5/d08/classpl_file_system.htm" title="The plFileSystem provides high-level functionality to manage files in a virtual file system.">plFileSystem</a>. So it has to be able to make its decision from the file path, name or extension. The override is registered for all base classes of <em>pDerivedTypeToUse</em>, in case the derivation hierarchy is longer.</p>
<p>Without calling this at startup, a derived resource type has to be manually requested in code. </p>

</div>
</div>
<a id="aedef177b925d599600e94f760f08f8ac" name="aedef177b925d599600e94f760f08f8ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aedef177b925d599600e94f760f08f8ac">&#9670;&#160;</a></span>ResetAllResources()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plResourceManager::ResetAllResources </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calls <a class="el" href="../../d8/d1c/classpl_resource.htm#a61a8d04086a7b964035a48fa7180c8f0" title="If the resource has modifications from the original state, it should reset itself to that state now (...">plResource::ResetResource()</a> on all resources. </p>
<p>This is mostly for usage in tools to reset resource whose state can be modified at runtime, to reset them to their original state. </p>

</div>
</div>
<a id="a9bd7f41d90dbe50fefdb89761ad26a5e" name="a9bd7f41d90dbe50fefdb89761ad26a5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9bd7f41d90dbe50fefdb89761ad26a5e">&#9670;&#160;</a></span>RestoreResource()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plResourceManager::RestoreResource </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d1/d91/classpl_typeless_resource_handle.htm">plTypelessResourceHandle</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>hResource</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Removes the 'PreventFileReload' flag and forces a reload on the resource. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="#ac9a4c2417970e405eca9389427ed133b" title="Calls ReloadResource() on the given resource, but makes sure that the reload happens with the given c...">UpdateResourceWithCustomLoader()</a> </dd></dl>

</div>
</div>
<a id="a7f339add381ae9e0dc6a1533cba568ea" name="a7f339add381ae9e0dc6a1533cba568ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f339add381ae9e0dc6a1533cba568ea">&#9670;&#160;</a></span>SetResourceLowResData()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plResourceManager::SetResourceLowResData </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d1/d91/classpl_typeless_resource_handle.htm">plTypelessResourceHandle</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>hResource</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../df/d3d/classpl_stream_reader.htm">plStreamReader</a> *</td>          <td class="paramname"><span class="paramname"><em>pStream</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calls <a class="el" href="../../d8/d1c/classpl_resource.htm#adc85535c94e33fd749abc70e5cd515e7" title="Called whenever more data for the resource is available. The resource must read the stream to update ...">plResource::UpdateContent()</a> to fill the resource with 'low resolution' data. </p>
<p>This will early out, if the resource has gotten low-res data before. The resource itself may ignore the data, if it has already gotten low/high res data before.</p>
<p>The typical use case is, that some other piece of code stores a low-res version of a resource to be able to get a resource into a usable state. For instance, a material may store low resolution texture data for every texture that it references. Then when 'loading' the textures, it can pass this low-res data to the textures, such that rendering can give decent results right away. If the textures have already been loaded before, or some other material already had low-res data, the call exits quickly. </p>

</div>
</div>
<a id="a39fed8a3d2edf3c70b0d7372be47611a" name="a39fed8a3d2edf3c70b0d7372be47611a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39fed8a3d2edf3c70b0d7372be47611a">&#9670;&#160;</a></span>SetResourceTypeLoader()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ResourceType &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">plResourceManager::SetResourceTypeLoader&lt; <a class="el" href="../../d8/d8d/classpl_config_file_resource.htm">plConfigFileResource</a> &gt; </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d6b/classpl_resource_type_loader.htm">plResourceTypeLoader</a> *</td>          <td class="paramname"><span class="paramname"><em>pCreator</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the resource loader to use for the given resource type. </p>
<dl class="section note"><dt>Note</dt><dd>This is bound to one specific type. Derived types do not inherit the type loader. </dd></dl>

</div>
</div>
<a id="acdd5a010f3b5441a60e864c0fd75ded7" name="acdd5a010f3b5441a60e864c0fd75ded7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acdd5a010f3b5441a60e864c0fd75ded7">&#9670;&#160;</a></span>SetResourceTypeMissingFallback()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename RESOURCE_TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">plResourceManager::SetResourceTypeMissingFallback&lt; <a class="el" href="../../dc/d0f/classpl_proc_gen_graph_resource.htm">plProcGenGraphResource</a> &gt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plTypedResourceHandle</a>&lt; RESOURCE_TYPE &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>hResource</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Specifies which resource to use as a missing fallback for the given type, when a resource cannot be loaded. </p>
<dl class="section note"><dt>Note</dt><dd>If no missing fallback is specified, trying to load a resource that does not exist will assert at runtime. </dd></dl>

</div>
</div>
<a id="a4b1ee3ae6e3011f01d39b889a830953c" name="a4b1ee3ae6e3011f01d39b889a830953c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b1ee3ae6e3011f01d39b889a830953c">&#9670;&#160;</a></span>UnregisterResourceOverrideType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plResourceManager::UnregisterResourceOverrideType </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *</td>          <td class="paramname"><span class="paramname"><em>pDerivedTypeToUse</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Unregisters <em>pDerivedTypeToUse</em> as an override resource. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="#a318a5549e5ff58c851fbb5b4e92aa120" title="Registers a resource type to be used instead of any of it&#39;s base classes, when loading specific data.">RegisterResourceOverrideType()</a> </dd></dl>

</div>
</div>
<a id="ac9a4c2417970e405eca9389427ed133b" name="ac9a4c2417970e405eca9389427ed133b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac9a4c2417970e405eca9389427ed133b">&#9670;&#160;</a></span>UpdateResourceWithCustomLoader()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plResourceManager::UpdateResourceWithCustomLoader </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d1/d91/classpl_typeless_resource_handle.htm">plTypelessResourceHandle</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>hResource</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../df/d44/classpl_unique_ptr.htm">plUniquePtr</a>&lt; <a class="el" href="../../da/d6b/classpl_resource_type_loader.htm">plResourceTypeLoader</a> &gt; &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>pLoader</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calls <a class="el" href="#ab9b3c82edeaf37b7697744416a11845e" title="Reloads only the one specific resource. If bForce is true, it is updated, even if there is no indicat...">ReloadResource()</a> on the given resource, but makes sure that the reload happens with the given custom loader. </p>
<p>Use this e.g. with a <a class="el" href="../../d0/dc2/classpl_resource_loader_from_memory.htm" title="A resource loader that is mainly used to update a resource on the fly with custom data,...">plResourceLoaderFromMemory</a> to replace an existing resource with new data that was created on-the-fly. Using this function will set the 'PreventFileReload' flag on the resource and thus prevent further reload actions.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="#a9bd7f41d90dbe50fefdb89761ad26a5e" title="Removes the &#39;PreventFileReload&#39; flag and forces a reload on the resource.">RestoreResource()</a> </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/Engine/Core/ResourceManager/<a class="el" href="../../d1/d46/_resource_manager_8h_source.htm">ResourceManager.h</a></li>
<li>Code/Engine/Core/ResourceManager/Implementation/<b>ResourceLoading.cpp</b></li>
<li>Code/Engine/Core/ResourceManager/Implementation/<b>ResourceManager.cpp</b></li>
<li>Code/Engine/Core/ResourceManager/Implementation/<a class="el" href="../../de/d5e/_resource_manager__inl_8h_source.htm">ResourceManager_inl.h</a></li>
<li>Code/Engine/RendererCore/Decals/Implementation/<b>DecalAtlasResource.cpp</b></li>
<li>Code/Engine/RendererCore/Decals/Implementation/<b>DecalResource.cpp</b></li>
<li>Code/Engine/RendererCore/Textures/<b>TextureLoader.cpp</b></li>
<li>Code/Engine/Utilities/Resources/<b>ConfigFileResource.cpp</b></li>
<li>Code/EnginePlugins/AudioSystem/AmplitudeAudioPlugin/<b>AmplitudeAudioStartup.cpp</b></li>
<li>Code/EnginePlugins/JoltPlugin/<b>Startup.cpp</b></li>
<li>Code/EnginePlugins/KrautPlugin/<b>KrautPluginPCH.cpp</b></li>
<li>Code/EnginePlugins/ParticlePlugin/<b>Startup.cpp</b></li>
<li>Code/EnginePlugins/ProcGenPlugin/<b>Startup.cpp</b></li>
<li>Code/EnginePlugins/VisualScriptPlugin/Resources/<b>VisualScriptClassResource.cpp</b></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d1/d2a/classpl_resource_manager.htm">plResourceManager</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
