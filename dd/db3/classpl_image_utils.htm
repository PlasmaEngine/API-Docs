<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Plasma Engine: plImageUtils Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Plasma Engine<span id="projectnumber">&#160;2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('dd/db3/classpl_image_utils.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="../../d0/d84/classpl_image_utils-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plImageUtils Class Reference</div></div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d05/structpl_image_utils_1_1_mip_map_options.htm">MipMapOptions</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Mip map generation options.  <a href="../../d4/d05/structpl_image_utils_1_1_mip_map_options.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-methods" name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:aebada81ba800b02d9936759c48b8046b" id="r_aebada81ba800b02d9936759c48b8046b"><td class="memItemLeft" align="right" valign="top"><a id="aebada81ba800b02d9936759c48b8046b" name="aebada81ba800b02d9936759c48b8046b"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>ComputeImageDifferenceABS</b> (const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> &amp;imageA, const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> &amp;imageB, <a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;out_difference)</td></tr>
<tr class="memdesc:aebada81ba800b02d9936759c48b8046b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the image with the difference (absolute values) between ImageA and ImageB. <br /></td></tr>
<tr class="separator:aebada81ba800b02d9936759c48b8046b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19c04e907488cd864c6d9c18133fd489" id="r_a19c04e907488cd864c6d9c18133fd489"><td class="memItemLeft" align="right" valign="top"><a id="a19c04e907488cd864c6d9c18133fd489" name="a19c04e907488cd864c6d9c18133fd489"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>ComputeImageDifferenceABSRelaxed</b> (const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> &amp;imageA, const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> &amp;imageB, <a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;out_difference)</td></tr>
<tr class="memdesc:a19c04e907488cd864c6d9c18133fd489"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as ComputeImageDifferenceABS, but for every pixel in imageA, the minimum diff in imageB is searched in a 1-pixel radius, allowing pixels in B to shift slightly without incurring a difference. <br /></td></tr>
<tr class="separator:a19c04e907488cd864c6d9c18133fd489"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c46c4f3edc462a24d99d402fed815b7" id="r_a8c46c4f3edc462a24d99d402fed815b7"><td class="memItemLeft" align="right" valign="top"><a id="a8c46c4f3edc462a24d99d402fed815b7" name="a8c46c4f3edc462a24d99d402fed815b7"></a>
static plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>ComputeMeanSquareError</b> (const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> &amp;differenceImage, plUInt8 uiBlockSize, plUInt32 uiOffsetx, plUInt32 uiOffsety)</td></tr>
<tr class="memdesc:a8c46c4f3edc462a24d99d402fed815b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the mean square error for the block at (offsetx, offsety) to (offsetx + uiBlockSize, offsety + uiBlockSize). DifferenceImage is expected to be an image that represents the difference between two images. <br /></td></tr>
<tr class="separator:a8c46c4f3edc462a24d99d402fed815b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a025191f1539653f0ea4772e230e5d9d8" id="r_a025191f1539653f0ea4772e230e5d9d8"><td class="memItemLeft" align="right" valign="top"><a id="a025191f1539653f0ea4772e230e5d9d8" name="a025191f1539653f0ea4772e230e5d9d8"></a>
static plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>ComputeMeanSquareError</b> (const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> &amp;differenceImage, plUInt8 uiBlockSize)</td></tr>
<tr class="memdesc:a025191f1539653f0ea4772e230e5d9d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the mean square error of DifferenceImage, by computing the MSE for blocks of uiBlockSize and returning the maximum MSE that was found. <br /></td></tr>
<tr class="separator:a025191f1539653f0ea4772e230e5d9d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a221cfd8ccc1ce45084f19f1b698b811f" id="r_a221cfd8ccc1ce45084f19f1b698b811f"><td class="memItemLeft" align="right" valign="top"><a id="a221cfd8ccc1ce45084f19f1b698b811f" name="a221cfd8ccc1ce45084f19f1b698b811f"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>Normalize</b> (<a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;ref_image)</td></tr>
<tr class="memdesc:a221cfd8ccc1ce45084f19f1b698b811f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rescales pixel values to use the full value range by scaling from [min, max] to [0, 255]. Computes combined min/max for RGB and separate min/max for alpha. <br /></td></tr>
<tr class="separator:a221cfd8ccc1ce45084f19f1b698b811f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3742185477ea92ced27a5cf855d6ad7d" id="r_a3742185477ea92ced27a5cf855d6ad7d"><td class="memItemLeft" align="right" valign="top"><a id="a3742185477ea92ced27a5cf855d6ad7d" name="a3742185477ea92ced27a5cf855d6ad7d"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>Normalize</b> (<a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;ref_image, plUInt8 &amp;ref_uiMinRgb, plUInt8 &amp;ref_uiMaxRgb, plUInt8 &amp;ref_uiMinAlpha, plUInt8 &amp;ref_uiMaxAlpha)</td></tr>
<tr class="separator:a3742185477ea92ced27a5cf855d6ad7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4de1b6a18f6f8a385d7ad0189315a623" id="r_a4de1b6a18f6f8a385d7ad0189315a623"><td class="memItemLeft" align="right" valign="top"><a id="a4de1b6a18f6f8a385d7ad0189315a623" name="a4de1b6a18f6f8a385d7ad0189315a623"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>ExtractAlphaChannel</b> (const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> &amp;inputImage, <a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;ref_outputImage)</td></tr>
<tr class="memdesc:a4de1b6a18f6f8a385d7ad0189315a623"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extracts the alpha channel from 8bpp 4 channel images into a 8bpp single channel image. <br /></td></tr>
<tr class="separator:a4de1b6a18f6f8a385d7ad0189315a623"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a586f9e1568690ed69ab98cbbe9b4cd36" id="r_a586f9e1568690ed69ab98cbbe9b4cd36"><td class="memItemLeft" align="right" valign="top"><a id="a586f9e1568690ed69ab98cbbe9b4cd36" name="a586f9e1568690ed69ab98cbbe9b4cd36"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>CropImage</b> (const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> &amp;input, const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2I32</a> &amp;vOffset, const <a class="el" href="../../dd/df9/classpl_size_template.htm">plSizeU32</a> &amp;newsize, <a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;ref_output)</td></tr>
<tr class="memdesc:a586f9e1568690ed69ab98cbbe9b4cd36"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the sub-image of <em>input</em> that starts at <em>offset</em> and has the size <em>newsize</em>. <br /></td></tr>
<tr class="separator:a586f9e1568690ed69ab98cbbe9b4cd36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a998116ca15f53b7ea54f59e09c52e221" id="r_a998116ca15f53b7ea54f59e09c52e221"><td class="memItemLeft" align="right" valign="top"><a id="a998116ca15f53b7ea54f59e09c52e221" name="a998116ca15f53b7ea54f59e09c52e221"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>RotateSubImage180</b> (<a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;ref_image, plUInt32 uiMipLevel=0, plUInt32 uiFace=0, plUInt32 uiArrayIndex=0)</td></tr>
<tr class="memdesc:a998116ca15f53b7ea54f59e09c52e221"><td class="mdescLeft">&#160;</td><td class="mdescRight">rotates a sub image by 180 degrees in place. Only works with uncompressed images. <br /></td></tr>
<tr class="separator:a998116ca15f53b7ea54f59e09c52e221"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1ef401f9dcb7f9ee1c63f0d53ca7e5e" id="r_ae1ef401f9dcb7f9ee1c63f0d53ca7e5e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae1ef401f9dcb7f9ee1c63f0d53ca7e5e">Copy</a> (const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> &amp;srcImg, const <a class="el" href="../../df/dd8/classpl_rect_template.htm">plRectU32</a> &amp;srcRect, <a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;ref_dstImg, const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3U32</a> &amp;vDstOffset, plUInt32 uiDstMipLevel=0, plUInt32 uiDstFace=0, plUInt32 uiDstArrayIndex=0)</td></tr>
<tr class="memdesc:ae1ef401f9dcb7f9ee1c63f0d53ca7e5e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the source image into the destination image at the specified location.  <br /></td></tr>
<tr class="separator:ae1ef401f9dcb7f9ee1c63f0d53ca7e5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18738c8ebdb7f342bfda210e329be863" id="r_a18738c8ebdb7f342bfda210e329be863"><td class="memItemLeft" align="right" valign="top"><a id="a18738c8ebdb7f342bfda210e329be863" name="a18738c8ebdb7f342bfda210e329be863"></a>
static <a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><b>ExtractLowerMipChain</b> (const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> &amp;src, <a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;ref_dst, plUInt32 uiNumMips)</td></tr>
<tr class="memdesc:a18738c8ebdb7f342bfda210e329be863"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the lower uiNumMips data of a 2D image into another one. <br /></td></tr>
<tr class="separator:a18738c8ebdb7f342bfda210e329be863"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac840fef9c0e8cb2c6f14907a595ee236" id="r_ac840fef9c0e8cb2c6f14907a595ee236"><td class="memItemLeft" align="right" valign="top"><a id="ac840fef9c0e8cb2c6f14907a595ee236" name="ac840fef9c0e8cb2c6f14907a595ee236"></a>
static <a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><b>Scale</b> (const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> &amp;source, <a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;ref_target, plUInt32 uiWidth, plUInt32 uiHeight, const <a class="el" href="../../d6/d0f/classpl_image_filter.htm">plImageFilter</a> *pFilter=nullptr, plImageAddressMode::Enum addressModeU=plImageAddressMode::Clamp, plImageAddressMode::Enum addressModeV=plImageAddressMode::Clamp, const <a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a> &amp;borderColor=<a class="el" href="../../d9/d1d/classpl_color.htm#a47538348959481b6aebbff4f409df59a">plColor::Black</a>)</td></tr>
<tr class="memdesc:ac840fef9c0e8cb2c6f14907a595ee236"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scales the image. <br /></td></tr>
<tr class="separator:ac840fef9c0e8cb2c6f14907a595ee236"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ed92bf319c81e7dedffb5ea5666b1b9" id="r_a9ed92bf319c81e7dedffb5ea5666b1b9"><td class="memItemLeft" align="right" valign="top"><a id="a9ed92bf319c81e7dedffb5ea5666b1b9" name="a9ed92bf319c81e7dedffb5ea5666b1b9"></a>
static <a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><b>Scale3D</b> (const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> &amp;source, <a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;ref_target, plUInt32 uiWidth, plUInt32 uiHeight, plUInt32 uiDepth, const <a class="el" href="../../d6/d0f/classpl_image_filter.htm">plImageFilter</a> *pFilter=nullptr, plImageAddressMode::Enum addressModeU=plImageAddressMode::Clamp, plImageAddressMode::Enum addressModeV=plImageAddressMode::Clamp, plImageAddressMode::Enum addressModeW=plImageAddressMode::Clamp, const <a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a> &amp;borderColor=<a class="el" href="../../d9/d1d/classpl_color.htm#a47538348959481b6aebbff4f409df59a">plColor::Black</a>)</td></tr>
<tr class="memdesc:a9ed92bf319c81e7dedffb5ea5666b1b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scales the image. <br /></td></tr>
<tr class="separator:a9ed92bf319c81e7dedffb5ea5666b1b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf814ce1f3936a19cc35b7065df81012" id="r_acf814ce1f3936a19cc35b7065df81012"><td class="memItemLeft" align="right" valign="top"><a id="acf814ce1f3936a19cc35b7065df81012" name="acf814ce1f3936a19cc35b7065df81012"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>GenerateMipMaps</b> (const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> &amp;source, <a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;ref_target, const <a class="el" href="../../d4/d05/structpl_image_utils_1_1_mip_map_options.htm">MipMapOptions</a> &amp;options)</td></tr>
<tr class="memdesc:acf814ce1f3936a19cc35b7065df81012"><td class="mdescLeft">&#160;</td><td class="mdescRight">Genererates the mip maps for the image. The input texture must be in plImageFormat::R32_G32_B32_A32_FLOAT. <br /></td></tr>
<tr class="separator:acf814ce1f3936a19cc35b7065df81012"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1eda94d25b71da0e1ea46d310286972" id="r_ad1eda94d25b71da0e1ea46d310286972"><td class="memItemLeft" align="right" valign="top"><a id="ad1eda94d25b71da0e1ea46d310286972" name="ad1eda94d25b71da0e1ea46d310286972"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>ReconstructNormalZ</b> (<a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;ref_source)</td></tr>
<tr class="memdesc:ad1eda94d25b71da0e1ea46d310286972"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assumes that the Red and Green components of an image contain XY of an unit length normal and reconstructs the Z component into B. <br /></td></tr>
<tr class="separator:ad1eda94d25b71da0e1ea46d310286972"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36e2421812145f2369805c515eaae2a6" id="r_a36e2421812145f2369805c515eaae2a6"><td class="memItemLeft" align="right" valign="top"><a id="a36e2421812145f2369805c515eaae2a6" name="a36e2421812145f2369805c515eaae2a6"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>RenormalizeNormalMap</b> (<a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;ref_image)</td></tr>
<tr class="memdesc:a36e2421812145f2369805c515eaae2a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Renormalizes a normal map to unit length. <br /></td></tr>
<tr class="separator:a36e2421812145f2369805c515eaae2a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a113cf8563e465f9f704bfb5f53c3811c" id="r_a113cf8563e465f9f704bfb5f53c3811c"><td class="memItemLeft" align="right" valign="top"><a id="a113cf8563e465f9f704bfb5f53c3811c" name="a113cf8563e465f9f704bfb5f53c3811c"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>AdjustRoughness</b> (<a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;ref_roughnessMap, const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> &amp;normalMap)</td></tr>
<tr class="memdesc:a113cf8563e465f9f704bfb5f53c3811c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adjust the roughness in lower mip levels so it maintains the same look from all distances. <br /></td></tr>
<tr class="separator:a113cf8563e465f9f704bfb5f53c3811c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0019782c88c18d2bca85fe505813e0ab" id="r_a0019782c88c18d2bca85fe505813e0ab"><td class="memItemLeft" align="right" valign="top"><a id="a0019782c88c18d2bca85fe505813e0ab" name="a0019782c88c18d2bca85fe505813e0ab"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>ChangeExposure</b> (<a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;ref_image, float fBias)</td></tr>
<tr class="memdesc:a0019782c88c18d2bca85fe505813e0ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Changes the exposure of an HDR image by 2^bias. <br /></td></tr>
<tr class="separator:a0019782c88c18d2bca85fe505813e0ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab92a5c059eea4f49adf0853e55535098" id="r_ab92a5c059eea4f49adf0853e55535098"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab92a5c059eea4f49adf0853e55535098">CreateCubemapFromSingleFile</a> (<a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;ref_dstImg, const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> &amp;srcImg)</td></tr>
<tr class="memdesc:ab92a5c059eea4f49adf0853e55535098"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a cubemap from srcImg and stores it in dstImg.  <br /></td></tr>
<tr class="separator:ab92a5c059eea4f49adf0853e55535098"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe3f319a55742b8110c210b2a8c1dcdd" id="r_afe3f319a55742b8110c210b2a8c1dcdd"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#afe3f319a55742b8110c210b2a8c1dcdd">CreateCubemapFrom6Files</a> (<a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;ref_dstImg, const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> *pSourceImages)</td></tr>
<tr class="memdesc:afe3f319a55742b8110c210b2a8c1dcdd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the 6 given source images to the faces of dstImg.  <br /></td></tr>
<tr class="separator:afe3f319a55742b8110c210b2a8c1dcdd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a09b93eb6a8cb48eedaeaffee1786b7" id="r_a3a09b93eb6a8cb48eedaeaffee1786b7"><td class="memItemLeft" align="right" valign="top"><a id="a3a09b93eb6a8cb48eedaeaffee1786b7" name="a3a09b93eb6a8cb48eedaeaffee1786b7"></a>
static <a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><b>CreateVolumeTextureFromSingleFile</b> (<a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;ref_dstImg, const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> &amp;srcImg)</td></tr>
<tr class="separator:a3a09b93eb6a8cb48eedaeaffee1786b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab53b68a5f65d287c6eba9f05ba8f6f20" id="r_ab53b68a5f65d287c6eba9f05ba8f6f20"><td class="memItemLeft" align="right" valign="top"><a id="ab53b68a5f65d287c6eba9f05ba8f6f20" name="ab53b68a5f65d287c6eba9f05ba8f6f20"></a>
static plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GetSampleIndex</b> (plUInt32 uiNumTexels, plInt32 iIndex, plImageAddressMode::Enum addressMode, bool &amp;out_bUseBorderColor)</td></tr>
<tr class="separator:ab53b68a5f65d287c6eba9f05ba8f6f20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa08ae256e44fbebddc7c0cb3b6819344" id="r_aa08ae256e44fbebddc7c0cb3b6819344"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa08ae256e44fbebddc7c0cb3b6819344">NearestSample</a> (const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> &amp;image, plImageAddressMode::Enum addressMode, <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2</a> vUv)</td></tr>
<tr class="memdesc:aa08ae256e44fbebddc7c0cb3b6819344"><td class="mdescLeft">&#160;</td><td class="mdescRight">Samples the image at the given UV coordinates with nearest filtering.  <br /></td></tr>
<tr class="separator:aa08ae256e44fbebddc7c0cb3b6819344"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51e71a7fb9b1d25afc0719ec334af6cb" id="r_a51e71a7fb9b1d25afc0719ec334af6cb"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a51e71a7fb9b1d25afc0719ec334af6cb">NearestSample</a> (const <a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a> *pPixelPointer, plUInt32 uiWidth, plUInt32 uiHeight, plImageAddressMode::Enum addressMode, <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2</a> vUv)</td></tr>
<tr class="memdesc:a51e71a7fb9b1d25afc0719ec334af6cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Samples the image at the given UV coordinates with nearest filtering.  <br /></td></tr>
<tr class="separator:a51e71a7fb9b1d25afc0719ec334af6cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a542b34465bb9ce4449be1d1d7d8a08f5" id="r_a542b34465bb9ce4449be1d1d7d8a08f5"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a542b34465bb9ce4449be1d1d7d8a08f5">BilinearSample</a> (const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> &amp;image, plImageAddressMode::Enum addressMode, <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2</a> vUv)</td></tr>
<tr class="memdesc:a542b34465bb9ce4449be1d1d7d8a08f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Samples the image at the given UV coordinates with bilinear filtering.  <br /></td></tr>
<tr class="separator:a542b34465bb9ce4449be1d1d7d8a08f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3dcbeb4a01000fa60efced99539b5bb9" id="r_a3dcbeb4a01000fa60efced99539b5bb9"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3dcbeb4a01000fa60efced99539b5bb9">BilinearSample</a> (const <a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a> *pPixelPointer, plUInt32 uiWidth, plUInt32 uiHeight, plImageAddressMode::Enum addressMode, <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2</a> vUv)</td></tr>
<tr class="memdesc:a3dcbeb4a01000fa60efced99539b5bb9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Samples the image at the given UV coordinates with bilinear filtering.  <br /></td></tr>
<tr class="separator:a3dcbeb4a01000fa60efced99539b5bb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08726a8d44f48ed7456f0c113333400c" id="r_a08726a8d44f48ed7456f0c113333400c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a08726a8d44f48ed7456f0c113333400c">CopyChannel</a> (<a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;ref_dstImg, plUInt8 uiDstChannelIdx, const <a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;srcImg, plUInt8 uiSrcChannelIdx)</td></tr>
<tr class="memdesc:a08726a8d44f48ed7456f0c113333400c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies channel 0, 1, 2 or 3 from srcImg into dstImg.  <br /></td></tr>
<tr class="separator:a08726a8d44f48ed7456f0c113333400c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64e37872cf514312812ac802a55e5e5f" id="r_a64e37872cf514312812ac802a55e5e5f"><td class="memItemLeft" align="right" valign="top"><a id="a64e37872cf514312812ac802a55e5e5f" name="a64e37872cf514312812ac802a55e5e5f"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>EmbedImageData</b> (<a class="el" href="../../d3/d2d/classpl_string_builder.htm">plStringBuilder</a> &amp;out_sHtml, const <a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;image)</td></tr>
<tr class="memdesc:a64e37872cf514312812ac802a55e5e5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Embeds the image as Base64 encoded text into an HTML file. <br /></td></tr>
<tr class="separator:a64e37872cf514312812ac802a55e5e5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b750fe363de12d1f36ae82605e91afa" id="r_a7b750fe363de12d1f36ae82605e91afa"><td class="memItemLeft" align="right" valign="top"><a id="a7b750fe363de12d1f36ae82605e91afa" name="a7b750fe363de12d1f36ae82605e91afa"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>CreateImageDiffHtml</b> (<a class="el" href="../../d3/d2d/classpl_string_builder.htm">plStringBuilder</a> &amp;out_sHtml, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sTitle, const <a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;referenceImgRgb, const <a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;referenceImgAlpha, const <a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;capturedImgRgb, const <a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;capturedImgAlpha, const <a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;diffImgRgb, const <a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;diffImgAlpha, plUInt32 uiError, plUInt32 uiThreshold, plUInt8 uiMinDiffRgb, plUInt8 uiMaxDiffRgb, plUInt8 uiMinDiffAlpha, plUInt8 uiMaxDiffAlpha)</td></tr>
<tr class="memdesc:a7b750fe363de12d1f36ae82605e91afa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generates an HTML file containing the given images with mouse-over functionality to compare them. <br /></td></tr>
<tr class="separator:a7b750fe363de12d1f36ae82605e91afa"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a3dcbeb4a01000fa60efced99539b5bb9" name="a3dcbeb4a01000fa60efced99539b5bb9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3dcbeb4a01000fa60efced99539b5bb9">&#9670;&#160;</a></span>BilinearSample() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a> plImageUtils::BilinearSample </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a> *</td>          <td class="paramname"><span class="paramname"><em>pPixelPointer</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiWidth</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiHeight</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plImageAddressMode::Enum</td>          <td class="paramname"><span class="paramname"><em>addressMode</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2</a></td>          <td class="paramname"><span class="paramname"><em>vUv</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Samples the image at the given UV coordinates with bilinear filtering. </p>
<p>Prefer this function over the one that takes an <a class="el" href="../../da/d4f/classpl_image_view.htm" title="A class referencing image data and holding metadata about the image.">plImageView</a> when you need to sample the image very often, as it does away with internal validation that would be redundant. Also, the pixel pointer given to this function should be retrieved only once from the source image, as <a class="el" href="../../de/d27/classpl_image.htm#a0aca5ac5db2dd3b74d56bfd7f961de06" title="Returns a pointer to a given pixel or block contained in a sub-image.">plImage::GetPixelPointer()</a> is rather slow due to validation overhead. </p>

</div>
</div>
<a id="a542b34465bb9ce4449be1d1d7d8a08f5" name="a542b34465bb9ce4449be1d1d7d8a08f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a542b34465bb9ce4449be1d1d7d8a08f5">&#9670;&#160;</a></span>BilinearSample() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a> plImageUtils::BilinearSample </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>image</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plImageAddressMode::Enum</td>          <td class="paramname"><span class="paramname"><em>addressMode</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2</a></td>          <td class="paramname"><span class="paramname"><em>vUv</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Samples the image at the given UV coordinates with bilinear filtering. </p>
<p>This function has to validate that the image is of the right format, and has to query the pixel pointer, which is slow. If you need to sample the image very often, use the overload that takes a pixel pointer instead of an image. </p>

</div>
</div>
<a id="ae1ef401f9dcb7f9ee1c63f0d53ca7e5e" name="ae1ef401f9dcb7f9ee1c63f0d53ca7e5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae1ef401f9dcb7f9ee1c63f0d53ca7e5e">&#9670;&#160;</a></span>Copy()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/dce/structpl_result.htm">plResult</a> plImageUtils::Copy </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>srcImg</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../df/dd8/classpl_rect_template.htm">plRectU32</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>srcRect</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>ref_dstImg</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3U32</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>vDstOffset</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiDstMipLevel</em></span><span class="paramdefsep"> = </span><span class="paramdefval">0</span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiDstFace</em></span><span class="paramdefsep"> = </span><span class="paramdefval">0</span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiDstArrayIndex</em></span><span class="paramdefsep"> = </span><span class="paramdefval">0</span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copies the source image into the destination image at the specified location. </p>
<p>The image must fit, no scaling or cropping is done. Image formats must be identical. Compressed formats are not supported. If the target location leaves not enough room for the source image to be copied, bad stuff will happen. </p>

</div>
</div>
<a id="a08726a8d44f48ed7456f0c113333400c" name="a08726a8d44f48ed7456f0c113333400c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08726a8d44f48ed7456f0c113333400c">&#9670;&#160;</a></span>CopyChannel()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/dce/structpl_result.htm">plResult</a> plImageUtils::CopyChannel </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>ref_dstImg</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt8</td>          <td class="paramname"><span class="paramname"><em>uiDstChannelIdx</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>srcImg</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt8</td>          <td class="paramname"><span class="paramname"><em>uiSrcChannelIdx</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copies channel 0, 1, 2 or 3 from srcImg into dstImg. </p>
<p>Currently only supports images of format R32G32B32A32_FLOAT and with identical resolution. Returns failure if any of those requirements are not met. </p>

</div>
</div>
<a id="afe3f319a55742b8110c210b2a8c1dcdd" name="afe3f319a55742b8110c210b2a8c1dcdd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe3f319a55742b8110c210b2a8c1dcdd">&#9670;&#160;</a></span>CreateCubemapFrom6Files()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/dce/structpl_result.htm">plResult</a> plImageUtils::CreateCubemapFrom6Files </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>ref_dstImg</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> *</td>          <td class="paramname"><span class="paramname"><em>pSourceImages</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copies the 6 given source images to the faces of dstImg. </p>
<p>All input images must have the same square, power-of-two dimensions and mustn't be compressed. </p>

</div>
</div>
<a id="ab92a5c059eea4f49adf0853e55535098" name="ab92a5c059eea4f49adf0853e55535098"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab92a5c059eea4f49adf0853e55535098">&#9670;&#160;</a></span>CreateCubemapFromSingleFile()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/dce/structpl_result.htm">plResult</a> plImageUtils::CreateCubemapFromSingleFile </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../de/d27/classpl_image.htm">plImage</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>ref_dstImg</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>srcImg</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a cubemap from srcImg and stores it in dstImg. </p>
<p>If srcImg is already a cubemap, the data will be copied 1:1 to dstImg. If it is a 2D texture, it is analyzed and sub-images are copied to the proper faces of the output cubemap.</p>
<p>Supported input layouts are:</p><ul>
<li>Vertical Cross</li>
<li>Horizontal Cross</li>
<li>Spherical mapping </li>
</ul>

</div>
</div>
<a id="a51e71a7fb9b1d25afc0719ec334af6cb" name="a51e71a7fb9b1d25afc0719ec334af6cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a51e71a7fb9b1d25afc0719ec334af6cb">&#9670;&#160;</a></span>NearestSample() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a> plImageUtils::NearestSample </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a> *</td>          <td class="paramname"><span class="paramname"><em>pPixelPointer</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiWidth</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiHeight</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plImageAddressMode::Enum</td>          <td class="paramname"><span class="paramname"><em>addressMode</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2</a></td>          <td class="paramname"><span class="paramname"><em>vUv</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Samples the image at the given UV coordinates with nearest filtering. </p>
<p>Prefer this function over the one that takes an <a class="el" href="../../da/d4f/classpl_image_view.htm" title="A class referencing image data and holding metadata about the image.">plImageView</a> when you need to sample the image very often, as it does away with internal validation that would be redundant. Also, the pixel pointer given to this function should be retrieved only once from the source image, as <a class="el" href="../../de/d27/classpl_image.htm#a0aca5ac5db2dd3b74d56bfd7f961de06" title="Returns a pointer to a given pixel or block contained in a sub-image.">plImage::GetPixelPointer()</a> is rather slow due to validation overhead. </p>

</div>
</div>
<a id="aa08ae256e44fbebddc7c0cb3b6819344" name="aa08ae256e44fbebddc7c0cb3b6819344"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa08ae256e44fbebddc7c0cb3b6819344">&#9670;&#160;</a></span>NearestSample() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a> plImageUtils::NearestSample </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/d4f/classpl_image_view.htm">plImageView</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>image</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plImageAddressMode::Enum</td>          <td class="paramname"><span class="paramname"><em>addressMode</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2</a></td>          <td class="paramname"><span class="paramname"><em>vUv</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Samples the image at the given UV coordinates with nearest filtering. </p>
<p>This function has to validate that the image is of the right format, and has to query the pixel pointer, which is slow. If you need to sample the image very often, use the overload that takes a pixel pointer instead of an image. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/Engine/Texture/Image/<a class="el" href="../../d9/dfd/_image_utils_8h_source.htm">ImageUtils.h</a></li>
<li>Code/Engine/Texture/Image/Implementation/<b>ImageUtils.cpp</b></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dd/db3/classpl_image_utils.htm">plImageUtils</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
