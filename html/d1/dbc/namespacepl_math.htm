<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Plasma Engine: plMath Namespace Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Plasma Engine<span id="projectnumber">&#160;2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d1/dbc/namespacepl_math.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">plMath Namespace Reference</div></div>
</div><!--header-->
<div class="contents">

<p>This namespace provides common math-functionality as functions.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a04fa861cad77751490be4cdd83983e75" id="r_a04fa861cad77751490be4cdd83983e75"><td class="memTemplParams" colspan="2"><a id="a04fa861cad77751490be4cdd83983e75" name="a04fa861cad77751490be4cdd83983e75"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a04fa861cad77751490be4cdd83983e75"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Pi</b> ()</td></tr>
<tr class="memdesc:a04fa861cad77751490be4cdd83983e75"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the natural constant Pi. <br /></td></tr>
<tr class="separator:a04fa861cad77751490be4cdd83983e75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a827f6e40816fc8c49a34d8871da21965" id="r_a827f6e40816fc8c49a34d8871da21965"><td class="memTemplParams" colspan="2"><a id="a827f6e40816fc8c49a34d8871da21965" name="a827f6e40816fc8c49a34d8871da21965"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a827f6e40816fc8c49a34d8871da21965"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>e</b> ()</td></tr>
<tr class="memdesc:a827f6e40816fc8c49a34d8871da21965"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the natural constant e. <br /></td></tr>
<tr class="separator:a827f6e40816fc8c49a34d8871da21965"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4aedcfcdf6852c57e44b12d06c5ca62" id="r_af4aedcfcdf6852c57e44b12d06c5ca62"><td class="memTemplParams" colspan="2"><a id="af4aedcfcdf6852c57e44b12d06c5ca62" name="af4aedcfcdf6852c57e44b12d06c5ca62"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:af4aedcfcdf6852c57e44b12d06c5ca62"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SupportsNaN</b> ()</td></tr>
<tr class="memdesc:af4aedcfcdf6852c57e44b12d06c5ca62"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the template type supports specialized values to represent NaN. <br /></td></tr>
<tr class="separator:af4aedcfcdf6852c57e44b12d06c5ca62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7452a7f2b15201705625a7cb78723a98" id="r_a7452a7f2b15201705625a7cb78723a98"><td class="memTemplParams" colspan="2">template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a7452a7f2b15201705625a7cb78723a98"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a7452a7f2b15201705625a7cb78723a98">NaN</a> ()</td></tr>
<tr class="memdesc:a7452a7f2b15201705625a7cb78723a98"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the value for NaN as the template type. Returns zero, if the type does not support NaN.  <br /></td></tr>
<tr class="separator:a7452a7f2b15201705625a7cb78723a98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30bc84153fd919905778b56799a72d0a" id="r_a30bc84153fd919905778b56799a72d0a"><td class="memTemplParams" colspan="2"><a id="a30bc84153fd919905778b56799a72d0a" name="a30bc84153fd919905778b56799a72d0a"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a30bc84153fd919905778b56799a72d0a"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SupportsInfinity</b> ()</td></tr>
<tr class="memdesc:a30bc84153fd919905778b56799a72d0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the template type supports specialized values to represent Infinity. <br /></td></tr>
<tr class="separator:a30bc84153fd919905778b56799a72d0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f9da92893e11d0ef431ba710b1ab4aa" id="r_a2f9da92893e11d0ef431ba710b1ab4aa"><td class="memTemplParams" colspan="2"><a id="a2f9da92893e11d0ef431ba710b1ab4aa" name="a2f9da92893e11d0ef431ba710b1ab4aa"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a2f9da92893e11d0ef431ba710b1ab4aa"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Infinity</b> ()</td></tr>
<tr class="memdesc:a2f9da92893e11d0ef431ba710b1ab4aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the value for Infinity as the template type. Returns zero, if the type does not support Infinity. <br /></td></tr>
<tr class="separator:a2f9da92893e11d0ef431ba710b1ab4aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6173d524e4c3564b75deacc577ad176a" id="r_a6173d524e4c3564b75deacc577ad176a"><td class="memTemplParams" colspan="2"><a id="a6173d524e4c3564b75deacc577ad176a" name="a6173d524e4c3564b75deacc577ad176a"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a6173d524e4c3564b75deacc577ad176a"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MaxValue</b> ()</td></tr>
<tr class="memdesc:a6173d524e4c3564b75deacc577ad176a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the largest possible positive value (that is not infinity). <br /></td></tr>
<tr class="separator:a6173d524e4c3564b75deacc577ad176a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac6f2f2b5a2636e8acb3296439d7b10e" id="r_aac6f2f2b5a2636e8acb3296439d7b10e"><td class="memTemplParams" colspan="2"><a id="aac6f2f2b5a2636e8acb3296439d7b10e" name="aac6f2f2b5a2636e8acb3296439d7b10e"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:aac6f2f2b5a2636e8acb3296439d7b10e"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MinValue</b> ()</td></tr>
<tr class="memdesc:aac6f2f2b5a2636e8acb3296439d7b10e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the smallest possible value (that is not -infinity). Usually zero or -<a class="el" href="#a6173d524e4c3564b75deacc577ad176a" title="Returns the largest possible positive value (that is not infinity).">MaxValue()</a>. For signed integers this will be -<a class="el" href="#a6173d524e4c3564b75deacc577ad176a" title="Returns the largest possible positive value (that is not infinity).">MaxValue()</a> - 1. <br /></td></tr>
<tr class="separator:aac6f2f2b5a2636e8acb3296439d7b10e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69a55424bb6b2056e729d877d5ac3394" id="r_a69a55424bb6b2056e729d877d5ac3394"><td class="memTemplParams" colspan="2">template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a69a55424bb6b2056e729d877d5ac3394"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a69a55424bb6b2056e729d877d5ac3394">HighValue</a> ()</td></tr>
<tr class="memdesc:a69a55424bb6b2056e729d877d5ac3394"><td class="mdescLeft">&#160;</td><td class="mdescRight">A very large value, that is slightly smaller than sqrt(MaxValue()).  <br /></td></tr>
<tr class="separator:a69a55424bb6b2056e729d877d5ac3394"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35ed659c1957f4ecdb9e0ac058e8a2ba" id="r_a35ed659c1957f4ecdb9e0ac058e8a2ba"><td class="memTemplParams" colspan="2"><a id="a35ed659c1957f4ecdb9e0ac058e8a2ba" name="a35ed659c1957f4ecdb9e0ac058e8a2ba"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a35ed659c1957f4ecdb9e0ac058e8a2ba"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>FloatEpsilon</b> ()</td></tr>
<tr class="memdesc:a35ed659c1957f4ecdb9e0ac058e8a2ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">The difference between 1.0 and the next representable value for the given type. <br /></td></tr>
<tr class="separator:a35ed659c1957f4ecdb9e0ac058e8a2ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a055085577972a22b18e6ba928094bc21" id="r_a055085577972a22b18e6ba928094bc21"><td class="memTemplParams" colspan="2"><a id="a055085577972a22b18e6ba928094bc21" name="a055085577972a22b18e6ba928094bc21"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a055085577972a22b18e6ba928094bc21"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SmallEpsilon</b> ()</td></tr>
<tr class="separator:a055085577972a22b18e6ba928094bc21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af77212efb5a690a34b12ff6fb6a47c0f" id="r_af77212efb5a690a34b12ff6fb6a47c0f"><td class="memTemplParams" colspan="2"><a id="af77212efb5a690a34b12ff6fb6a47c0f" name="af77212efb5a690a34b12ff6fb6a47c0f"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:af77212efb5a690a34b12ff6fb6a47c0f"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>DefaultEpsilon</b> ()</td></tr>
<tr class="separator:af77212efb5a690a34b12ff6fb6a47c0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a230837d8f32c3054d23f49e0cde9fe" id="r_a6a230837d8f32c3054d23f49e0cde9fe"><td class="memTemplParams" colspan="2"><a id="a6a230837d8f32c3054d23f49e0cde9fe" name="a6a230837d8f32c3054d23f49e0cde9fe"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a6a230837d8f32c3054d23f49e0cde9fe"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>LargeEpsilon</b> ()</td></tr>
<tr class="separator:a6a230837d8f32c3054d23f49e0cde9fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb90c5d5f94d9dd2567c112e3e24bb7b" id="r_adb90c5d5f94d9dd2567c112e3e24bb7b"><td class="memTemplParams" colspan="2"><a id="adb90c5d5f94d9dd2567c112e3e24bb7b" name="adb90c5d5f94d9dd2567c112e3e24bb7b"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:adb90c5d5f94d9dd2567c112e3e24bb7b"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>HugeEpsilon</b> ()</td></tr>
<tr class="separator:adb90c5d5f94d9dd2567c112e3e24bb7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cc360935cc5148e6b5755987b524e52" id="r_a9cc360935cc5148e6b5755987b524e52"><td class="memTemplParams" colspan="2"><a id="a9cc360935cc5148e6b5755987b524e52" name="a9cc360935cc5148e6b5755987b524e52"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a9cc360935cc5148e6b5755987b524e52"><td class="memTemplItemLeft" align="right" valign="top">constexpr plUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits</b> ()</td></tr>
<tr class="memdesc:a9cc360935cc5148e6b5755987b524e52"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of bits in the given type. Mostly useful for unsigned integer types. <br /></td></tr>
<tr class="separator:a9cc360935cc5148e6b5755987b524e52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c51884320ff23417ec494066664f528" id="r_a7c51884320ff23417ec494066664f528"><td class="memItemLeft" align="right" valign="top"><a id="a7c51884320ff23417ec494066664f528" name="a7c51884320ff23417ec494066664f528"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_Linear</b> (double t)</td></tr>
<tr class="separator:a7c51884320ff23417ec494066664f528"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafa76f40c338a3c016508c04aea36549" id="r_aafa76f40c338a3c016508c04aea36549"><td class="memItemLeft" align="right" valign="top"><a id="aafa76f40c338a3c016508c04aea36549" name="aafa76f40c338a3c016508c04aea36549"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_ConstantZero</b> (double t)</td></tr>
<tr class="separator:aafa76f40c338a3c016508c04aea36549"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa593ebdc83b069a366a255caef84cb72" id="r_aa593ebdc83b069a366a255caef84cb72"><td class="memItemLeft" align="right" valign="top"><a id="aa593ebdc83b069a366a255caef84cb72" name="aa593ebdc83b069a366a255caef84cb72"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_ConstantOne</b> (double t)</td></tr>
<tr class="separator:aa593ebdc83b069a366a255caef84cb72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5b51b6d5ee79fdecf110dd45c29763b" id="r_ac5b51b6d5ee79fdecf110dd45c29763b"><td class="memItemLeft" align="right" valign="top"><a id="ac5b51b6d5ee79fdecf110dd45c29763b" name="ac5b51b6d5ee79fdecf110dd45c29763b"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInSine</b> (double t)</td></tr>
<tr class="separator:ac5b51b6d5ee79fdecf110dd45c29763b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d80775ef363686d316e706b963df0bc" id="r_a7d80775ef363686d316e706b963df0bc"><td class="memItemLeft" align="right" valign="top"><a id="a7d80775ef363686d316e706b963df0bc" name="a7d80775ef363686d316e706b963df0bc"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutSine</b> (double t)</td></tr>
<tr class="separator:a7d80775ef363686d316e706b963df0bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19c0bcfe60a56d5c2ac8a816d0ba7cba" id="r_a19c0bcfe60a56d5c2ac8a816d0ba7cba"><td class="memItemLeft" align="right" valign="top"><a id="a19c0bcfe60a56d5c2ac8a816d0ba7cba" name="a19c0bcfe60a56d5c2ac8a816d0ba7cba"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutSine</b> (double t)</td></tr>
<tr class="separator:a19c0bcfe60a56d5c2ac8a816d0ba7cba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52dded1251b5229555c8b4999022ad86" id="r_a52dded1251b5229555c8b4999022ad86"><td class="memItemLeft" align="right" valign="top"><a id="a52dded1251b5229555c8b4999022ad86" name="a52dded1251b5229555c8b4999022ad86"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInQuad</b> (double t)</td></tr>
<tr class="separator:a52dded1251b5229555c8b4999022ad86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace87514adec2f3d0f0a8019edf0f9ef0" id="r_ace87514adec2f3d0f0a8019edf0f9ef0"><td class="memItemLeft" align="right" valign="top"><a id="ace87514adec2f3d0f0a8019edf0f9ef0" name="ace87514adec2f3d0f0a8019edf0f9ef0"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutQuad</b> (double t)</td></tr>
<tr class="separator:ace87514adec2f3d0f0a8019edf0f9ef0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adae0f8e08054f60e7dd71707ae69674a" id="r_adae0f8e08054f60e7dd71707ae69674a"><td class="memItemLeft" align="right" valign="top"><a id="adae0f8e08054f60e7dd71707ae69674a" name="adae0f8e08054f60e7dd71707ae69674a"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutQuad</b> (double t)</td></tr>
<tr class="separator:adae0f8e08054f60e7dd71707ae69674a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4e36d59a70bcedebe42df64365dc378" id="r_af4e36d59a70bcedebe42df64365dc378"><td class="memItemLeft" align="right" valign="top"><a id="af4e36d59a70bcedebe42df64365dc378" name="af4e36d59a70bcedebe42df64365dc378"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInCubic</b> (double t)</td></tr>
<tr class="separator:af4e36d59a70bcedebe42df64365dc378"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2113c301e5c2834c6eaa1f00854aae0" id="r_af2113c301e5c2834c6eaa1f00854aae0"><td class="memItemLeft" align="right" valign="top"><a id="af2113c301e5c2834c6eaa1f00854aae0" name="af2113c301e5c2834c6eaa1f00854aae0"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutCubic</b> (double t)</td></tr>
<tr class="separator:af2113c301e5c2834c6eaa1f00854aae0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0eea0b7d8b7d20b52c012ef837ec0a07" id="r_a0eea0b7d8b7d20b52c012ef837ec0a07"><td class="memItemLeft" align="right" valign="top"><a id="a0eea0b7d8b7d20b52c012ef837ec0a07" name="a0eea0b7d8b7d20b52c012ef837ec0a07"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutCubic</b> (double t)</td></tr>
<tr class="separator:a0eea0b7d8b7d20b52c012ef837ec0a07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada36860507740125ff82055405bab97f" id="r_ada36860507740125ff82055405bab97f"><td class="memItemLeft" align="right" valign="top"><a id="ada36860507740125ff82055405bab97f" name="ada36860507740125ff82055405bab97f"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInQuartic</b> (double t)</td></tr>
<tr class="separator:ada36860507740125ff82055405bab97f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15c71f407dfbf96de379b723fdaf7fca" id="r_a15c71f407dfbf96de379b723fdaf7fca"><td class="memItemLeft" align="right" valign="top"><a id="a15c71f407dfbf96de379b723fdaf7fca" name="a15c71f407dfbf96de379b723fdaf7fca"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutQuartic</b> (double t)</td></tr>
<tr class="separator:a15c71f407dfbf96de379b723fdaf7fca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a704e0465e0947dca30ab715bd8de0de7" id="r_a704e0465e0947dca30ab715bd8de0de7"><td class="memItemLeft" align="right" valign="top"><a id="a704e0465e0947dca30ab715bd8de0de7" name="a704e0465e0947dca30ab715bd8de0de7"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutQuartic</b> (double t)</td></tr>
<tr class="separator:a704e0465e0947dca30ab715bd8de0de7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3df3b38d98a78473815c10a2de66f67" id="r_ae3df3b38d98a78473815c10a2de66f67"><td class="memItemLeft" align="right" valign="top"><a id="ae3df3b38d98a78473815c10a2de66f67" name="ae3df3b38d98a78473815c10a2de66f67"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInQuintic</b> (double t)</td></tr>
<tr class="separator:ae3df3b38d98a78473815c10a2de66f67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97b66e09889bfe4a8a0d49dbd22d2f98" id="r_a97b66e09889bfe4a8a0d49dbd22d2f98"><td class="memItemLeft" align="right" valign="top"><a id="a97b66e09889bfe4a8a0d49dbd22d2f98" name="a97b66e09889bfe4a8a0d49dbd22d2f98"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutQuintic</b> (double t)</td></tr>
<tr class="separator:a97b66e09889bfe4a8a0d49dbd22d2f98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5f839b57f468e0b10419a25152f2ef0" id="r_ae5f839b57f468e0b10419a25152f2ef0"><td class="memItemLeft" align="right" valign="top"><a id="ae5f839b57f468e0b10419a25152f2ef0" name="ae5f839b57f468e0b10419a25152f2ef0"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutQuintic</b> (double t)</td></tr>
<tr class="separator:ae5f839b57f468e0b10419a25152f2ef0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb162bac3a14321d467321f30776dad7" id="r_acb162bac3a14321d467321f30776dad7"><td class="memItemLeft" align="right" valign="top"><a id="acb162bac3a14321d467321f30776dad7" name="acb162bac3a14321d467321f30776dad7"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInExpo</b> (double t)</td></tr>
<tr class="separator:acb162bac3a14321d467321f30776dad7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79a31b1e7596367d28356eb9307442bb" id="r_a79a31b1e7596367d28356eb9307442bb"><td class="memItemLeft" align="right" valign="top"><a id="a79a31b1e7596367d28356eb9307442bb" name="a79a31b1e7596367d28356eb9307442bb"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutExpo</b> (double t)</td></tr>
<tr class="separator:a79a31b1e7596367d28356eb9307442bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35414abeadb58eee4cf9116125b15e64" id="r_a35414abeadb58eee4cf9116125b15e64"><td class="memItemLeft" align="right" valign="top"><a id="a35414abeadb58eee4cf9116125b15e64" name="a35414abeadb58eee4cf9116125b15e64"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutExpo</b> (double t)</td></tr>
<tr class="separator:a35414abeadb58eee4cf9116125b15e64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa112430598938f1b61640cfd82bbad7f" id="r_aa112430598938f1b61640cfd82bbad7f"><td class="memItemLeft" align="right" valign="top"><a id="aa112430598938f1b61640cfd82bbad7f" name="aa112430598938f1b61640cfd82bbad7f"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInCirc</b> (double t)</td></tr>
<tr class="separator:aa112430598938f1b61640cfd82bbad7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a654b9bf5bc3453750390bb96d22d553d" id="r_a654b9bf5bc3453750390bb96d22d553d"><td class="memItemLeft" align="right" valign="top"><a id="a654b9bf5bc3453750390bb96d22d553d" name="a654b9bf5bc3453750390bb96d22d553d"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutCirc</b> (double t)</td></tr>
<tr class="separator:a654b9bf5bc3453750390bb96d22d553d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67901433ea8169f0562675a9d687fc46" id="r_a67901433ea8169f0562675a9d687fc46"><td class="memItemLeft" align="right" valign="top"><a id="a67901433ea8169f0562675a9d687fc46" name="a67901433ea8169f0562675a9d687fc46"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutCirc</b> (double t)</td></tr>
<tr class="separator:a67901433ea8169f0562675a9d687fc46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a960a062cd528f95ea70303a223ecc961" id="r_a960a062cd528f95ea70303a223ecc961"><td class="memItemLeft" align="right" valign="top"><a id="a960a062cd528f95ea70303a223ecc961" name="a960a062cd528f95ea70303a223ecc961"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInBack</b> (double t)</td></tr>
<tr class="separator:a960a062cd528f95ea70303a223ecc961"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a274fffd10571b7b5e4a55cf62fbba6a0" id="r_a274fffd10571b7b5e4a55cf62fbba6a0"><td class="memItemLeft" align="right" valign="top"><a id="a274fffd10571b7b5e4a55cf62fbba6a0" name="a274fffd10571b7b5e4a55cf62fbba6a0"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutBack</b> (double t)</td></tr>
<tr class="separator:a274fffd10571b7b5e4a55cf62fbba6a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acfb0651ccd7e6f8f0de73f91df86124c" id="r_acfb0651ccd7e6f8f0de73f91df86124c"><td class="memItemLeft" align="right" valign="top"><a id="acfb0651ccd7e6f8f0de73f91df86124c" name="acfb0651ccd7e6f8f0de73f91df86124c"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutBack</b> (double t)</td></tr>
<tr class="separator:acfb0651ccd7e6f8f0de73f91df86124c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef38cd5f87b7453c2fc9644728e19d49" id="r_aef38cd5f87b7453c2fc9644728e19d49"><td class="memItemLeft" align="right" valign="top"><a id="aef38cd5f87b7453c2fc9644728e19d49" name="aef38cd5f87b7453c2fc9644728e19d49"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInElastic</b> (double t)</td></tr>
<tr class="separator:aef38cd5f87b7453c2fc9644728e19d49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f066e82106a16e320048cfb8109fab5" id="r_a0f066e82106a16e320048cfb8109fab5"><td class="memItemLeft" align="right" valign="top"><a id="a0f066e82106a16e320048cfb8109fab5" name="a0f066e82106a16e320048cfb8109fab5"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutElastic</b> (double t)</td></tr>
<tr class="separator:a0f066e82106a16e320048cfb8109fab5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e4f5d58bac50a395f1beeb0d8a43e75" id="r_a8e4f5d58bac50a395f1beeb0d8a43e75"><td class="memItemLeft" align="right" valign="top"><a id="a8e4f5d58bac50a395f1beeb0d8a43e75" name="a8e4f5d58bac50a395f1beeb0d8a43e75"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutElastic</b> (double t)</td></tr>
<tr class="separator:a8e4f5d58bac50a395f1beeb0d8a43e75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4716f2888007b212599d8da82ea1affe" id="r_a4716f2888007b212599d8da82ea1affe"><td class="memItemLeft" align="right" valign="top"><a id="a4716f2888007b212599d8da82ea1affe" name="a4716f2888007b212599d8da82ea1affe"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInBounce</b> (double t)</td></tr>
<tr class="separator:a4716f2888007b212599d8da82ea1affe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a02e8fd36a55cb1df416a0b709ae9c304" id="r_a02e8fd36a55cb1df416a0b709ae9c304"><td class="memItemLeft" align="right" valign="top"><a id="a02e8fd36a55cb1df416a0b709ae9c304" name="a02e8fd36a55cb1df416a0b709ae9c304"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseOutBounce</b> (double t)</td></tr>
<tr class="separator:a02e8fd36a55cb1df416a0b709ae9c304"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe664b125a0711d78e8ac0e7485398f8" id="r_afe664b125a0711d78e8ac0e7485398f8"><td class="memItemLeft" align="right" valign="top"><a id="afe664b125a0711d78e8ac0e7485398f8" name="afe664b125a0711d78e8ac0e7485398f8"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_EaseInOutBounce</b> (double t)</td></tr>
<tr class="separator:afe664b125a0711d78e8ac0e7485398f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a878b45d9eb24347f30ea62a1b6d8e5a8" id="r_a878b45d9eb24347f30ea62a1b6d8e5a8"><td class="memItemLeft" align="right" valign="top"><a id="a878b45d9eb24347f30ea62a1b6d8e5a8" name="a878b45d9eb24347f30ea62a1b6d8e5a8"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_Conical</b> (double t)</td></tr>
<tr class="separator:a878b45d9eb24347f30ea62a1b6d8e5a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbc8fb6a1f382310ef51a06f816221e6" id="r_adbc8fb6a1f382310ef51a06f816221e6"><td class="memItemLeft" align="right" valign="top"><a id="adbc8fb6a1f382310ef51a06f816221e6" name="adbc8fb6a1f382310ef51a06f816221e6"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_FadeInHoldFadeOut</b> (double t)</td></tr>
<tr class="separator:adbc8fb6a1f382310ef51a06f816221e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64049cb917275e6a3ba5ea6773010c9c" id="r_a64049cb917275e6a3ba5ea6773010c9c"><td class="memItemLeft" align="right" valign="top"><a id="a64049cb917275e6a3ba5ea6773010c9c" name="a64049cb917275e6a3ba5ea6773010c9c"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_FadeInFadeOut</b> (double t)</td></tr>
<tr class="separator:a64049cb917275e6a3ba5ea6773010c9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54a857da3e57b0cdb2b0bf76aa0a0e2a" id="r_a54a857da3e57b0cdb2b0bf76aa0a0e2a"><td class="memItemLeft" align="right" valign="top"><a id="a54a857da3e57b0cdb2b0bf76aa0a0e2a" name="a54a857da3e57b0cdb2b0bf76aa0a0e2a"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurveValue_Bell</b> (double t)</td></tr>
<tr class="separator:a54a857da3e57b0cdb2b0bf76aa0a0e2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1132ca5e0df9a48d6f68319afd51d571" id="r_a1132ca5e0df9a48d6f68319afd51d571"><td class="memItemLeft" align="right" valign="top"><a id="a1132ca5e0df9a48d6f68319afd51d571" name="a1132ca5e0df9a48d6f68319afd51d571"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a1132ca5e0df9a48d6f68319afd51d571"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Pi</b> ()</td></tr>
<tr class="separator:a1132ca5e0df9a48d6f68319afd51d571"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e92e844d07a6837fe20506653a148ec" id="r_a2e92e844d07a6837fe20506653a148ec"><td class="memItemLeft" align="right" valign="top"><a id="a2e92e844d07a6837fe20506653a148ec" name="a2e92e844d07a6837fe20506653a148ec"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a2e92e844d07a6837fe20506653a148ec"><td class="memTemplItemLeft" align="right" valign="top">constexpr double&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Pi</b> ()</td></tr>
<tr class="separator:a2e92e844d07a6837fe20506653a148ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48f80d1530c35459ace4a0c66d435cc3" id="r_a48f80d1530c35459ace4a0c66d435cc3"><td class="memItemLeft" align="right" valign="top"><a id="a48f80d1530c35459ace4a0c66d435cc3" name="a48f80d1530c35459ace4a0c66d435cc3"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a48f80d1530c35459ace4a0c66d435cc3"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>e</b> ()</td></tr>
<tr class="separator:a48f80d1530c35459ace4a0c66d435cc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09bf6143dffcaa578b93548e392e9725" id="r_a09bf6143dffcaa578b93548e392e9725"><td class="memItemLeft" align="right" valign="top"><a id="a09bf6143dffcaa578b93548e392e9725" name="a09bf6143dffcaa578b93548e392e9725"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a09bf6143dffcaa578b93548e392e9725"><td class="memTemplItemLeft" align="right" valign="top">constexpr double&#160;</td><td class="memTemplItemRight" valign="bottom"><b>e</b> ()</td></tr>
<tr class="separator:a09bf6143dffcaa578b93548e392e9725"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb99cd693c4dae04b4bd5bea4a688136" id="r_abb99cd693c4dae04b4bd5bea4a688136"><td class="memItemLeft" align="right" valign="top"><a id="abb99cd693c4dae04b4bd5bea4a688136" name="abb99cd693c4dae04b4bd5bea4a688136"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:abb99cd693c4dae04b4bd5bea4a688136"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SupportsNaN&lt; float &gt;</b> ()</td></tr>
<tr class="separator:abb99cd693c4dae04b4bd5bea4a688136"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bb4741297c73834d7f384bee7c5d533" id="r_a6bb4741297c73834d7f384bee7c5d533"><td class="memItemLeft" align="right" valign="top"><a id="a6bb4741297c73834d7f384bee7c5d533" name="a6bb4741297c73834d7f384bee7c5d533"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a6bb4741297c73834d7f384bee7c5d533"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SupportsNaN&lt; double &gt;</b> ()</td></tr>
<tr class="separator:a6bb4741297c73834d7f384bee7c5d533"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ed7cfc79f21c6e09cf4eb048b77fed9" id="r_a0ed7cfc79f21c6e09cf4eb048b77fed9"><td class="memItemLeft" align="right" valign="top"><a id="a0ed7cfc79f21c6e09cf4eb048b77fed9" name="a0ed7cfc79f21c6e09cf4eb048b77fed9"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a0ed7cfc79f21c6e09cf4eb048b77fed9"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NaN</b> ()</td></tr>
<tr class="separator:a0ed7cfc79f21c6e09cf4eb048b77fed9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8de03e304bdfa7f7fa09850225e8eb43" id="r_a8de03e304bdfa7f7fa09850225e8eb43"><td class="memItemLeft" align="right" valign="top"><a id="a8de03e304bdfa7f7fa09850225e8eb43" name="a8de03e304bdfa7f7fa09850225e8eb43"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a8de03e304bdfa7f7fa09850225e8eb43"><td class="memTemplItemLeft" align="right" valign="top">constexpr double&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NaN</b> ()</td></tr>
<tr class="separator:a8de03e304bdfa7f7fa09850225e8eb43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0a0d55cce1d2fdb2a5e4c00ddd9db6f" id="r_ad0a0d55cce1d2fdb2a5e4c00ddd9db6f"><td class="memItemLeft" align="right" valign="top"><a id="ad0a0d55cce1d2fdb2a5e4c00ddd9db6f" name="ad0a0d55cce1d2fdb2a5e4c00ddd9db6f"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ad0a0d55cce1d2fdb2a5e4c00ddd9db6f"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SupportsInfinity&lt; float &gt;</b> ()</td></tr>
<tr class="separator:ad0a0d55cce1d2fdb2a5e4c00ddd9db6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafb5f230f2d6e25e58b6862103d52f12" id="r_aafb5f230f2d6e25e58b6862103d52f12"><td class="memItemLeft" align="right" valign="top"><a id="aafb5f230f2d6e25e58b6862103d52f12" name="aafb5f230f2d6e25e58b6862103d52f12"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:aafb5f230f2d6e25e58b6862103d52f12"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SupportsInfinity&lt; double &gt;</b> ()</td></tr>
<tr class="separator:aafb5f230f2d6e25e58b6862103d52f12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef5381d04224450957437fb9397940e4" id="r_aef5381d04224450957437fb9397940e4"><td class="memItemLeft" align="right" valign="top"><a id="aef5381d04224450957437fb9397940e4" name="aef5381d04224450957437fb9397940e4"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:aef5381d04224450957437fb9397940e4"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Infinity</b> ()</td></tr>
<tr class="separator:aef5381d04224450957437fb9397940e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b4a33b2e8fd251642863d7ef65ade8d" id="r_a9b4a33b2e8fd251642863d7ef65ade8d"><td class="memItemLeft" align="right" valign="top"><a id="a9b4a33b2e8fd251642863d7ef65ade8d" name="a9b4a33b2e8fd251642863d7ef65ade8d"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a9b4a33b2e8fd251642863d7ef65ade8d"><td class="memTemplItemLeft" align="right" valign="top">constexpr double&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Infinity</b> ()</td></tr>
<tr class="separator:a9b4a33b2e8fd251642863d7ef65ade8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a169261f2c4a04392926f5dd17b795ebc" id="r_a169261f2c4a04392926f5dd17b795ebc"><td class="memItemLeft" align="right" valign="top"><a id="a169261f2c4a04392926f5dd17b795ebc" name="a169261f2c4a04392926f5dd17b795ebc"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a169261f2c4a04392926f5dd17b795ebc"><td class="memTemplItemLeft" align="right" valign="top">constexpr plUInt8&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MaxValue</b> ()</td></tr>
<tr class="separator:a169261f2c4a04392926f5dd17b795ebc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a432a1a7fd5dffe6fe5378019edcb3845" id="r_a432a1a7fd5dffe6fe5378019edcb3845"><td class="memItemLeft" align="right" valign="top"><a id="a432a1a7fd5dffe6fe5378019edcb3845" name="a432a1a7fd5dffe6fe5378019edcb3845"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a432a1a7fd5dffe6fe5378019edcb3845"><td class="memTemplItemLeft" align="right" valign="top">constexpr plUInt16&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MaxValue</b> ()</td></tr>
<tr class="separator:a432a1a7fd5dffe6fe5378019edcb3845"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61584b334cf91249b6d0ca7414ada317" id="r_a61584b334cf91249b6d0ca7414ada317"><td class="memItemLeft" align="right" valign="top"><a id="a61584b334cf91249b6d0ca7414ada317" name="a61584b334cf91249b6d0ca7414ada317"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a61584b334cf91249b6d0ca7414ada317"><td class="memTemplItemLeft" align="right" valign="top">constexpr plUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MaxValue</b> ()</td></tr>
<tr class="separator:a61584b334cf91249b6d0ca7414ada317"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefc3b05b7f60b20e95d8e226d1e220d8" id="r_aefc3b05b7f60b20e95d8e226d1e220d8"><td class="memItemLeft" align="right" valign="top"><a id="aefc3b05b7f60b20e95d8e226d1e220d8" name="aefc3b05b7f60b20e95d8e226d1e220d8"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:aefc3b05b7f60b20e95d8e226d1e220d8"><td class="memTemplItemLeft" align="right" valign="top">constexpr plUInt64&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MaxValue</b> ()</td></tr>
<tr class="separator:aefc3b05b7f60b20e95d8e226d1e220d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4772cc6d56ef03c3f872aa27bfc15257" id="r_a4772cc6d56ef03c3f872aa27bfc15257"><td class="memItemLeft" align="right" valign="top"><a id="a4772cc6d56ef03c3f872aa27bfc15257" name="a4772cc6d56ef03c3f872aa27bfc15257"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a4772cc6d56ef03c3f872aa27bfc15257"><td class="memTemplItemLeft" align="right" valign="top">constexpr plInt8&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MaxValue</b> ()</td></tr>
<tr class="separator:a4772cc6d56ef03c3f872aa27bfc15257"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28d6b0aaa0cdc0878cda4fdcf6110b14" id="r_a28d6b0aaa0cdc0878cda4fdcf6110b14"><td class="memItemLeft" align="right" valign="top"><a id="a28d6b0aaa0cdc0878cda4fdcf6110b14" name="a28d6b0aaa0cdc0878cda4fdcf6110b14"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a28d6b0aaa0cdc0878cda4fdcf6110b14"><td class="memTemplItemLeft" align="right" valign="top">constexpr plInt16&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MaxValue</b> ()</td></tr>
<tr class="separator:a28d6b0aaa0cdc0878cda4fdcf6110b14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd055442e549c19bfbcd741428e59277" id="r_abd055442e549c19bfbcd741428e59277"><td class="memItemLeft" align="right" valign="top"><a id="abd055442e549c19bfbcd741428e59277" name="abd055442e549c19bfbcd741428e59277"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:abd055442e549c19bfbcd741428e59277"><td class="memTemplItemLeft" align="right" valign="top">constexpr plInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MaxValue</b> ()</td></tr>
<tr class="separator:abd055442e549c19bfbcd741428e59277"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a442ffebcfcf1707a7c417863d7eed400" id="r_a442ffebcfcf1707a7c417863d7eed400"><td class="memItemLeft" align="right" valign="top"><a id="a442ffebcfcf1707a7c417863d7eed400" name="a442ffebcfcf1707a7c417863d7eed400"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a442ffebcfcf1707a7c417863d7eed400"><td class="memTemplItemLeft" align="right" valign="top">constexpr plInt64&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MaxValue</b> ()</td></tr>
<tr class="separator:a442ffebcfcf1707a7c417863d7eed400"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf916f69b4f83d0d505fa75d2e64a778" id="r_abf916f69b4f83d0d505fa75d2e64a778"><td class="memItemLeft" align="right" valign="top"><a id="abf916f69b4f83d0d505fa75d2e64a778" name="abf916f69b4f83d0d505fa75d2e64a778"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:abf916f69b4f83d0d505fa75d2e64a778"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MaxValue</b> ()</td></tr>
<tr class="separator:abf916f69b4f83d0d505fa75d2e64a778"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5f11591ca0b5412911b3f191e7730b2" id="r_ae5f11591ca0b5412911b3f191e7730b2"><td class="memItemLeft" align="right" valign="top"><a id="ae5f11591ca0b5412911b3f191e7730b2" name="ae5f11591ca0b5412911b3f191e7730b2"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ae5f11591ca0b5412911b3f191e7730b2"><td class="memTemplItemLeft" align="right" valign="top">constexpr double&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MaxValue</b> ()</td></tr>
<tr class="separator:ae5f11591ca0b5412911b3f191e7730b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a488c89018b50fe1bfef8f2e8041acf" id="r_a1a488c89018b50fe1bfef8f2e8041acf"><td class="memItemLeft" align="right" valign="top"><a id="a1a488c89018b50fe1bfef8f2e8041acf" name="a1a488c89018b50fe1bfef8f2e8041acf"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a1a488c89018b50fe1bfef8f2e8041acf"><td class="memTemplItemLeft" align="right" valign="top">constexpr plUInt8&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MinValue</b> ()</td></tr>
<tr class="separator:a1a488c89018b50fe1bfef8f2e8041acf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f0b2e65479c8d5644062dba2b9372dd" id="r_a3f0b2e65479c8d5644062dba2b9372dd"><td class="memItemLeft" align="right" valign="top"><a id="a3f0b2e65479c8d5644062dba2b9372dd" name="a3f0b2e65479c8d5644062dba2b9372dd"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a3f0b2e65479c8d5644062dba2b9372dd"><td class="memTemplItemLeft" align="right" valign="top">constexpr plUInt16&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MinValue</b> ()</td></tr>
<tr class="separator:a3f0b2e65479c8d5644062dba2b9372dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57048cd376f84cf52b051e70a0c399f7" id="r_a57048cd376f84cf52b051e70a0c399f7"><td class="memItemLeft" align="right" valign="top"><a id="a57048cd376f84cf52b051e70a0c399f7" name="a57048cd376f84cf52b051e70a0c399f7"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a57048cd376f84cf52b051e70a0c399f7"><td class="memTemplItemLeft" align="right" valign="top">constexpr plUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MinValue</b> ()</td></tr>
<tr class="separator:a57048cd376f84cf52b051e70a0c399f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27dcc48fc950d3dfb7d5237b74223a3a" id="r_a27dcc48fc950d3dfb7d5237b74223a3a"><td class="memItemLeft" align="right" valign="top"><a id="a27dcc48fc950d3dfb7d5237b74223a3a" name="a27dcc48fc950d3dfb7d5237b74223a3a"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a27dcc48fc950d3dfb7d5237b74223a3a"><td class="memTemplItemLeft" align="right" valign="top">constexpr plUInt64&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MinValue</b> ()</td></tr>
<tr class="separator:a27dcc48fc950d3dfb7d5237b74223a3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65615174621085d582edf7b25fd7a8e8" id="r_a65615174621085d582edf7b25fd7a8e8"><td class="memItemLeft" align="right" valign="top"><a id="a65615174621085d582edf7b25fd7a8e8" name="a65615174621085d582edf7b25fd7a8e8"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a65615174621085d582edf7b25fd7a8e8"><td class="memTemplItemLeft" align="right" valign="top">constexpr plInt8&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MinValue</b> ()</td></tr>
<tr class="separator:a65615174621085d582edf7b25fd7a8e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7562c624c7eff5a5369f0f31ee7a7506" id="r_a7562c624c7eff5a5369f0f31ee7a7506"><td class="memItemLeft" align="right" valign="top"><a id="a7562c624c7eff5a5369f0f31ee7a7506" name="a7562c624c7eff5a5369f0f31ee7a7506"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a7562c624c7eff5a5369f0f31ee7a7506"><td class="memTemplItemLeft" align="right" valign="top">constexpr plInt16&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MinValue</b> ()</td></tr>
<tr class="separator:a7562c624c7eff5a5369f0f31ee7a7506"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bd473149366fdaa60bfe908ff2b1cb7" id="r_a2bd473149366fdaa60bfe908ff2b1cb7"><td class="memItemLeft" align="right" valign="top"><a id="a2bd473149366fdaa60bfe908ff2b1cb7" name="a2bd473149366fdaa60bfe908ff2b1cb7"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a2bd473149366fdaa60bfe908ff2b1cb7"><td class="memTemplItemLeft" align="right" valign="top">constexpr plInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MinValue</b> ()</td></tr>
<tr class="separator:a2bd473149366fdaa60bfe908ff2b1cb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34801657d2284b00d5e669a022d5d1cd" id="r_a34801657d2284b00d5e669a022d5d1cd"><td class="memItemLeft" align="right" valign="top"><a id="a34801657d2284b00d5e669a022d5d1cd" name="a34801657d2284b00d5e669a022d5d1cd"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a34801657d2284b00d5e669a022d5d1cd"><td class="memTemplItemLeft" align="right" valign="top">constexpr plInt64&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MinValue</b> ()</td></tr>
<tr class="separator:a34801657d2284b00d5e669a022d5d1cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad049b59158464aea67eeddfe2996bbcc" id="r_ad049b59158464aea67eeddfe2996bbcc"><td class="memItemLeft" align="right" valign="top"><a id="ad049b59158464aea67eeddfe2996bbcc" name="ad049b59158464aea67eeddfe2996bbcc"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ad049b59158464aea67eeddfe2996bbcc"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MinValue</b> ()</td></tr>
<tr class="separator:ad049b59158464aea67eeddfe2996bbcc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5857c33d01ec79a5998f8d8fd3ca10f" id="r_aa5857c33d01ec79a5998f8d8fd3ca10f"><td class="memItemLeft" align="right" valign="top"><a id="aa5857c33d01ec79a5998f8d8fd3ca10f" name="aa5857c33d01ec79a5998f8d8fd3ca10f"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:aa5857c33d01ec79a5998f8d8fd3ca10f"><td class="memTemplItemLeft" align="right" valign="top">constexpr double&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MinValue</b> ()</td></tr>
<tr class="separator:aa5857c33d01ec79a5998f8d8fd3ca10f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af413273970e2c9b0e31481de4f22af74" id="r_af413273970e2c9b0e31481de4f22af74"><td class="memItemLeft" align="right" valign="top"><a id="af413273970e2c9b0e31481de4f22af74" name="af413273970e2c9b0e31481de4f22af74"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:af413273970e2c9b0e31481de4f22af74"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>HighValue</b> ()</td></tr>
<tr class="separator:af413273970e2c9b0e31481de4f22af74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac01c8fdc82993b9c9666f0d7dd28eb1a" id="r_ac01c8fdc82993b9c9666f0d7dd28eb1a"><td class="memItemLeft" align="right" valign="top"><a id="ac01c8fdc82993b9c9666f0d7dd28eb1a" name="ac01c8fdc82993b9c9666f0d7dd28eb1a"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ac01c8fdc82993b9c9666f0d7dd28eb1a"><td class="memTemplItemLeft" align="right" valign="top">constexpr double&#160;</td><td class="memTemplItemRight" valign="bottom"><b>HighValue</b> ()</td></tr>
<tr class="separator:ac01c8fdc82993b9c9666f0d7dd28eb1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58b08a591e476e0059875339e4d39a09" id="r_a58b08a591e476e0059875339e4d39a09"><td class="memItemLeft" align="right" valign="top"><a id="a58b08a591e476e0059875339e4d39a09" name="a58b08a591e476e0059875339e4d39a09"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a58b08a591e476e0059875339e4d39a09"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>FloatEpsilon</b> ()</td></tr>
<tr class="separator:a58b08a591e476e0059875339e4d39a09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae4432f5bc352a1a0a27eaae6541dd17" id="r_aae4432f5bc352a1a0a27eaae6541dd17"><td class="memItemLeft" align="right" valign="top"><a id="aae4432f5bc352a1a0a27eaae6541dd17" name="aae4432f5bc352a1a0a27eaae6541dd17"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:aae4432f5bc352a1a0a27eaae6541dd17"><td class="memTemplItemLeft" align="right" valign="top">constexpr double&#160;</td><td class="memTemplItemRight" valign="bottom"><b>FloatEpsilon</b> ()</td></tr>
<tr class="separator:aae4432f5bc352a1a0a27eaae6541dd17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8fb359acb4d028cb3e77902ce320608" id="r_ac8fb359acb4d028cb3e77902ce320608"><td class="memItemLeft" align="right" valign="top"><a id="ac8fb359acb4d028cb3e77902ce320608" name="ac8fb359acb4d028cb3e77902ce320608"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ac8fb359acb4d028cb3e77902ce320608"><td class="memTemplItemLeft" align="right" valign="top">constexpr plUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; plUInt8 &gt;</b> ()</td></tr>
<tr class="separator:ac8fb359acb4d028cb3e77902ce320608"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53bd93478903bd26694514b44c7c1ce3" id="r_a53bd93478903bd26694514b44c7c1ce3"><td class="memItemLeft" align="right" valign="top"><a id="a53bd93478903bd26694514b44c7c1ce3" name="a53bd93478903bd26694514b44c7c1ce3"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a53bd93478903bd26694514b44c7c1ce3"><td class="memTemplItemLeft" align="right" valign="top">constexpr plUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; plUInt16 &gt;</b> ()</td></tr>
<tr class="separator:a53bd93478903bd26694514b44c7c1ce3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0c37acca774904e185192f235edb6e4" id="r_ae0c37acca774904e185192f235edb6e4"><td class="memItemLeft" align="right" valign="top"><a id="ae0c37acca774904e185192f235edb6e4" name="ae0c37acca774904e185192f235edb6e4"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ae0c37acca774904e185192f235edb6e4"><td class="memTemplItemLeft" align="right" valign="top">constexpr plUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; plUInt32 &gt;</b> ()</td></tr>
<tr class="separator:ae0c37acca774904e185192f235edb6e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab75be3e1d4270f1b9e8a61a3b8f7b2de" id="r_ab75be3e1d4270f1b9e8a61a3b8f7b2de"><td class="memItemLeft" align="right" valign="top"><a id="ab75be3e1d4270f1b9e8a61a3b8f7b2de" name="ab75be3e1d4270f1b9e8a61a3b8f7b2de"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ab75be3e1d4270f1b9e8a61a3b8f7b2de"><td class="memTemplItemLeft" align="right" valign="top">constexpr plUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; plUInt64 &gt;</b> ()</td></tr>
<tr class="separator:ab75be3e1d4270f1b9e8a61a3b8f7b2de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae682a8fd71d5cddb51401c5dc2256a7d" id="r_ae682a8fd71d5cddb51401c5dc2256a7d"><td class="memItemLeft" align="right" valign="top"><a id="ae682a8fd71d5cddb51401c5dc2256a7d" name="ae682a8fd71d5cddb51401c5dc2256a7d"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ae682a8fd71d5cddb51401c5dc2256a7d"><td class="memTemplItemLeft" align="right" valign="top">constexpr plUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; plInt8 &gt;</b> ()</td></tr>
<tr class="separator:ae682a8fd71d5cddb51401c5dc2256a7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e650367e5ecfbc66c26ed132960a652" id="r_a7e650367e5ecfbc66c26ed132960a652"><td class="memItemLeft" align="right" valign="top"><a id="a7e650367e5ecfbc66c26ed132960a652" name="a7e650367e5ecfbc66c26ed132960a652"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a7e650367e5ecfbc66c26ed132960a652"><td class="memTemplItemLeft" align="right" valign="top">constexpr plUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; plInt16 &gt;</b> ()</td></tr>
<tr class="separator:a7e650367e5ecfbc66c26ed132960a652"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af23bd883b4cdbfab764d6ad0608b8498" id="r_af23bd883b4cdbfab764d6ad0608b8498"><td class="memItemLeft" align="right" valign="top"><a id="af23bd883b4cdbfab764d6ad0608b8498" name="af23bd883b4cdbfab764d6ad0608b8498"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:af23bd883b4cdbfab764d6ad0608b8498"><td class="memTemplItemLeft" align="right" valign="top">constexpr plUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; plInt32 &gt;</b> ()</td></tr>
<tr class="separator:af23bd883b4cdbfab764d6ad0608b8498"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf5d216d7e0d05d4c797f85d2195d440" id="r_acf5d216d7e0d05d4c797f85d2195d440"><td class="memItemLeft" align="right" valign="top"><a id="acf5d216d7e0d05d4c797f85d2195d440" name="acf5d216d7e0d05d4c797f85d2195d440"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:acf5d216d7e0d05d4c797f85d2195d440"><td class="memTemplItemLeft" align="right" valign="top">constexpr plUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; plInt64 &gt;</b> ()</td></tr>
<tr class="separator:acf5d216d7e0d05d4c797f85d2195d440"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f82e94f7071fb26cd16f699e44af26b" id="r_a8f82e94f7071fb26cd16f699e44af26b"><td class="memItemLeft" align="right" valign="top"><a id="a8f82e94f7071fb26cd16f699e44af26b" name="a8f82e94f7071fb26cd16f699e44af26b"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a8f82e94f7071fb26cd16f699e44af26b"><td class="memTemplItemLeft" align="right" valign="top">constexpr plUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; float &gt;</b> ()</td></tr>
<tr class="separator:a8f82e94f7071fb26cd16f699e44af26b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9cc747b6e7f1b01919443c2a1858c525" id="r_a9cc747b6e7f1b01919443c2a1858c525"><td class="memItemLeft" align="right" valign="top"><a id="a9cc747b6e7f1b01919443c2a1858c525" name="a9cc747b6e7f1b01919443c2a1858c525"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a9cc747b6e7f1b01919443c2a1858c525"><td class="memTemplItemLeft" align="right" valign="top">constexpr plUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; double &gt;</b> ()</td></tr>
<tr class="separator:a9cc747b6e7f1b01919443c2a1858c525"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25ddcfae0bd88d04d015b266a236065f" id="r_a25ddcfae0bd88d04d015b266a236065f"><td class="memTemplParams" colspan="2"><a id="a25ddcfae0bd88d04d015b266a236065f" name="a25ddcfae0bd88d04d015b266a236065f"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a25ddcfae0bd88d04d015b266a236065f"><td class="memTemplItemLeft" align="right" valign="top">constexpr PL_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Square</b> (T f)</td></tr>
<tr class="memdesc:a25ddcfae0bd88d04d015b266a236065f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns f * f. <br /></td></tr>
<tr class="separator:a25ddcfae0bd88d04d015b266a236065f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3b08ed7dc553561de9b2d8635cc44db" id="r_ab3b08ed7dc553561de9b2d8635cc44db"><td class="memTemplParams" colspan="2"><a id="ab3b08ed7dc553561de9b2d8635cc44db" name="ab3b08ed7dc553561de9b2d8635cc44db"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ab3b08ed7dc553561de9b2d8635cc44db"><td class="memTemplItemLeft" align="right" valign="top">constexpr PL_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Sign</b> (T f)</td></tr>
<tr class="memdesc:ab3b08ed7dc553561de9b2d8635cc44db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the sign of f (i.e: -1, 1 or 0) <br /></td></tr>
<tr class="separator:ab3b08ed7dc553561de9b2d8635cc44db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd0ef20e6710b240c9833acdf6f2f8d7" id="r_abd0ef20e6710b240c9833acdf6f2f8d7"><td class="memTemplParams" colspan="2"><a id="abd0ef20e6710b240c9833acdf6f2f8d7" name="abd0ef20e6710b240c9833acdf6f2f8d7"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:abd0ef20e6710b240c9833acdf6f2f8d7"><td class="memTemplItemLeft" align="right" valign="top">constexpr PL_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Abs</b> (T f)</td></tr>
<tr class="memdesc:abd0ef20e6710b240c9833acdf6f2f8d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the absolute value of f. <br /></td></tr>
<tr class="separator:abd0ef20e6710b240c9833acdf6f2f8d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a314b24989122e22968ae0a11cc872e28" id="r_a314b24989122e22968ae0a11cc872e28"><td class="memTemplParams" colspan="2"><a id="a314b24989122e22968ae0a11cc872e28" name="a314b24989122e22968ae0a11cc872e28"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a314b24989122e22968ae0a11cc872e28"><td class="memTemplItemLeft" align="right" valign="top">constexpr PL_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Min</b> (T f1, T f2)</td></tr>
<tr class="memdesc:a314b24989122e22968ae0a11cc872e28"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the smaller value, f1 or f2. <br /></td></tr>
<tr class="separator:a314b24989122e22968ae0a11cc872e28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a984809c9115e1dfca747e5ae6c888a50" id="r_a984809c9115e1dfca747e5ae6c888a50"><td class="memTemplParams" colspan="2"><a id="a984809c9115e1dfca747e5ae6c888a50" name="a984809c9115e1dfca747e5ae6c888a50"></a>
template&lt;typename T , typename... ARGS&gt; </td></tr>
<tr class="memitem:a984809c9115e1dfca747e5ae6c888a50"><td class="memTemplItemLeft" align="right" valign="top">constexpr PL_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Min</b> (T f1, T f2, ARGS... f)</td></tr>
<tr class="memdesc:a984809c9115e1dfca747e5ae6c888a50"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the smaller value, f1 or f2 or ... <br /></td></tr>
<tr class="separator:a984809c9115e1dfca747e5ae6c888a50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad724a3f51a1faa9bcc3e6a53fd6b9a4f" id="r_ad724a3f51a1faa9bcc3e6a53fd6b9a4f"><td class="memTemplParams" colspan="2"><a id="ad724a3f51a1faa9bcc3e6a53fd6b9a4f" name="ad724a3f51a1faa9bcc3e6a53fd6b9a4f"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ad724a3f51a1faa9bcc3e6a53fd6b9a4f"><td class="memTemplItemLeft" align="right" valign="top">constexpr PL_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Max</b> (T f1, T f2)</td></tr>
<tr class="memdesc:ad724a3f51a1faa9bcc3e6a53fd6b9a4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the greater value, f1 or f2. <br /></td></tr>
<tr class="separator:ad724a3f51a1faa9bcc3e6a53fd6b9a4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25c55b289779c262d22e8baf9d0b15ae" id="r_a25c55b289779c262d22e8baf9d0b15ae"><td class="memTemplParams" colspan="2"><a id="a25c55b289779c262d22e8baf9d0b15ae" name="a25c55b289779c262d22e8baf9d0b15ae"></a>
template&lt;typename T , typename... ARGS&gt; </td></tr>
<tr class="memitem:a25c55b289779c262d22e8baf9d0b15ae"><td class="memTemplItemLeft" align="right" valign="top">constexpr PL_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Max</b> (T f1, T f2, ARGS... f)</td></tr>
<tr class="separator:a25c55b289779c262d22e8baf9d0b15ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e64f45bae1fb8ddbe02e2f5bdf18767" id="r_a5e64f45bae1fb8ddbe02e2f5bdf18767"><td class="memTemplParams" colspan="2"><a id="a5e64f45bae1fb8ddbe02e2f5bdf18767" name="a5e64f45bae1fb8ddbe02e2f5bdf18767"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a5e64f45bae1fb8ddbe02e2f5bdf18767"><td class="memTemplItemLeft" align="right" valign="top">constexpr PL_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Clamp</b> (T value, T min_val, T max_val)</td></tr>
<tr class="memdesc:a5e64f45bae1fb8ddbe02e2f5bdf18767"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clamps "value" to the range [min; max]. Returns "value", if it is inside the range already. <br /></td></tr>
<tr class="separator:a5e64f45bae1fb8ddbe02e2f5bdf18767"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf3240988b12047baffaee141fc8cffb" id="r_acf3240988b12047baffaee141fc8cffb"><td class="memTemplParams" colspan="2"><a id="acf3240988b12047baffaee141fc8cffb" name="acf3240988b12047baffaee141fc8cffb"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:acf3240988b12047baffaee141fc8cffb"><td class="memTemplItemLeft" align="right" valign="top">constexpr PL_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Saturate</b> (T value)</td></tr>
<tr class="memdesc:acf3240988b12047baffaee141fc8cffb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clamps "value" to the range [0; 1]. Returns "value", if it is inside the range already. <br /></td></tr>
<tr class="separator:acf3240988b12047baffaee141fc8cffb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e363339c8dfc76221563df0bf2302b3" id="r_a5e363339c8dfc76221563df0bf2302b3"><td class="memTemplParams" colspan="2"><a id="a5e363339c8dfc76221563df0bf2302b3" name="a5e363339c8dfc76221563df0bf2302b3"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a5e363339c8dfc76221563df0bf2302b3"><td class="memTemplItemLeft" align="right" valign="top">constexpr Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Invert</b> (Type f)</td></tr>
<tr class="memdesc:a5e363339c8dfc76221563df0bf2302b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 1 / f. <br /></td></tr>
<tr class="separator:a5e363339c8dfc76221563df0bf2302b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77a11d9b4e7665621cad426a72f7dca0" id="r_a77a11d9b4e7665621cad426a72f7dca0"><td class="memItemLeft" align="right" valign="top">PL_ALWAYS_INLINE plUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a77a11d9b4e7665621cad426a72f7dca0">FirstBitLow</a> (plUInt32 uiBitmask)</td></tr>
<tr class="memdesc:a77a11d9b4e7665621cad426a72f7dca0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the index of the least significant bit set.  <br /></td></tr>
<tr class="separator:a77a11d9b4e7665621cad426a72f7dca0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a387b958909e087e206b7d217f8005187" id="r_a387b958909e087e206b7d217f8005187"><td class="memItemLeft" align="right" valign="top">PL_ALWAYS_INLINE plUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a387b958909e087e206b7d217f8005187">FirstBitLow</a> (plUInt64 uiBitmask)</td></tr>
<tr class="memdesc:a387b958909e087e206b7d217f8005187"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the index of the least significant bit set.  <br /></td></tr>
<tr class="separator:a387b958909e087e206b7d217f8005187"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4daf0d43b398a7ff4083833b579bb2fc" id="r_a4daf0d43b398a7ff4083833b579bb2fc"><td class="memItemLeft" align="right" valign="top">PL_ALWAYS_INLINE plUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4daf0d43b398a7ff4083833b579bb2fc">FirstBitHigh</a> (plUInt32 uiBitmask)</td></tr>
<tr class="memdesc:a4daf0d43b398a7ff4083833b579bb2fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the index of the most significant bit set.  <br /></td></tr>
<tr class="separator:a4daf0d43b398a7ff4083833b579bb2fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab25cfddd4495b3bd6c92fd8f0cff878b" id="r_ab25cfddd4495b3bd6c92fd8f0cff878b"><td class="memItemLeft" align="right" valign="top">PL_ALWAYS_INLINE plUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab25cfddd4495b3bd6c92fd8f0cff878b">FirstBitHigh</a> (plUInt64 uiBitmask)</td></tr>
<tr class="memdesc:ab25cfddd4495b3bd6c92fd8f0cff878b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the index of the most significant bit set.  <br /></td></tr>
<tr class="separator:ab25cfddd4495b3bd6c92fd8f0cff878b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add691d49a4f270dc22fb918d8ba1ca4f" id="r_add691d49a4f270dc22fb918d8ba1ca4f"><td class="memItemLeft" align="right" valign="top">PL_ALWAYS_INLINE plUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#add691d49a4f270dc22fb918d8ba1ca4f">CountTrailingZeros</a> (plUInt32 uiBitmask)</td></tr>
<tr class="separator:add691d49a4f270dc22fb918d8ba1ca4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bd47191b2c5fb26088ef5c0f52f281c" id="r_a0bd47191b2c5fb26088ef5c0f52f281c"><td class="memItemLeft" align="right" valign="top"><a id="a0bd47191b2c5fb26088ef5c0f52f281c" name="a0bd47191b2c5fb26088ef5c0f52f281c"></a>
PL_ALWAYS_INLINE plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>CountTrailingZeros</b> (plUInt64 uiBitmask)</td></tr>
<tr class="memdesc:a0bd47191b2c5fb26088ef5c0f52f281c"><td class="mdescLeft">&#160;</td><td class="mdescRight">64 bit overload for <a class="el" href="#add691d49a4f270dc22fb918d8ba1ca4f">CountTrailingZeros()</a> <br /></td></tr>
<tr class="separator:a0bd47191b2c5fb26088ef5c0f52f281c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6141bbf80704bdc6ba5a0df73d6e25d" id="r_aa6141bbf80704bdc6ba5a0df73d6e25d"><td class="memItemLeft" align="right" valign="top">PL_ALWAYS_INLINE plUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa6141bbf80704bdc6ba5a0df73d6e25d">CountLeadingZeros</a> (plUInt32 uiBitmask)</td></tr>
<tr class="separator:aa6141bbf80704bdc6ba5a0df73d6e25d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c8b8683756df9047c6a5e4a44f4752f" id="r_a9c8b8683756df9047c6a5e4a44f4752f"><td class="memItemLeft" align="right" valign="top"><a id="a9c8b8683756df9047c6a5e4a44f4752f" name="a9c8b8683756df9047c6a5e4a44f4752f"></a>
PL_ALWAYS_INLINE plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>CountBits</b> (plUInt32 value)</td></tr>
<tr class="memdesc:a9c8b8683756df9047c6a5e4a44f4752f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of bits set. <br /></td></tr>
<tr class="separator:a9c8b8683756df9047c6a5e4a44f4752f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8521c8af0247db3c9653183fae295d67" id="r_a8521c8af0247db3c9653183fae295d67"><td class="memItemLeft" align="right" valign="top"><a id="a8521c8af0247db3c9653183fae295d67" name="a8521c8af0247db3c9653183fae295d67"></a>
PL_ALWAYS_INLINE plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>CountBits</b> (plUInt64 value)</td></tr>
<tr class="memdesc:a8521c8af0247db3c9653183fae295d67"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of bits set. <br /></td></tr>
<tr class="separator:a8521c8af0247db3c9653183fae295d67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3bba00206eaca76b20bb1e131f27138" id="r_aa3bba00206eaca76b20bb1e131f27138"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:aa3bba00206eaca76b20bb1e131f27138"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aa3bba00206eaca76b20bb1e131f27138">Bitmask_LowN</a> (plUInt32 uiNumBitsToSet)</td></tr>
<tr class="memdesc:aa3bba00206eaca76b20bb1e131f27138"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a bitmask in which the low N bits are set. For example for N=5, this would be '0000 ... 0001 1111'.  <br /></td></tr>
<tr class="separator:aa3bba00206eaca76b20bb1e131f27138"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9a3bfad84627afef5616665eecd65e4" id="r_ae9a3bfad84627afef5616665eecd65e4"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ae9a3bfad84627afef5616665eecd65e4"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#ae9a3bfad84627afef5616665eecd65e4">Bitmask_HighN</a> (plUInt32 uiNumBitsToSet)</td></tr>
<tr class="memdesc:ae9a3bfad84627afef5616665eecd65e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a bitmask in which the high N bits are set. For example for N=5, this would be '1111 1000 ... 0000'.  <br /></td></tr>
<tr class="separator:ae9a3bfad84627afef5616665eecd65e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcac254119b9da320b0617b93e40ec9f" id="r_abcac254119b9da320b0617b93e40ec9f"><td class="memTemplParams" colspan="2"><a id="abcac254119b9da320b0617b93e40ec9f" name="abcac254119b9da320b0617b93e40ec9f"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:abcac254119b9da320b0617b93e40ec9f"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Swap</b> (T &amp;ref_f1, T &amp;ref_f2)</td></tr>
<tr class="memdesc:abcac254119b9da320b0617b93e40ec9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Swaps the values in the two variables f1 and f2. <br /></td></tr>
<tr class="separator:abcac254119b9da320b0617b93e40ec9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2898309268211acdbebb498a1f03ce01" id="r_a2898309268211acdbebb498a1f03ce01"><td class="memTemplParams" colspan="2"><a id="a2898309268211acdbebb498a1f03ce01" name="a2898309268211acdbebb498a1f03ce01"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a2898309268211acdbebb498a1f03ce01"><td class="memTemplItemLeft" align="right" valign="top">PL_FORCE_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Lerp</b> (T f1, T f2, float fFactor)</td></tr>
<tr class="memdesc:a2898309268211acdbebb498a1f03ce01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1. <br /></td></tr>
<tr class="separator:a2898309268211acdbebb498a1f03ce01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed967163303c2e74a09da77a7001f117" id="r_aed967163303c2e74a09da77a7001f117"><td class="memTemplParams" colspan="2"><a id="aed967163303c2e74a09da77a7001f117" name="aed967163303c2e74a09da77a7001f117"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aed967163303c2e74a09da77a7001f117"><td class="memTemplItemLeft" align="right" valign="top">PL_FORCE_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Lerp</b> (T f1, T f2, double fFactor)</td></tr>
<tr class="memdesc:aed967163303c2e74a09da77a7001f117"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1. <br /></td></tr>
<tr class="separator:aed967163303c2e74a09da77a7001f117"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b11d14648656b3bfb3529db712169af" id="r_a1b11d14648656b3bfb3529db712169af"><td class="memTemplParams" colspan="2"><a id="a1b11d14648656b3bfb3529db712169af" name="a1b11d14648656b3bfb3529db712169af"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a1b11d14648656b3bfb3529db712169af"><td class="memTemplItemLeft" align="right" valign="top">PL_FORCE_INLINE constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Unlerp</b> (T fMin, T fMax, T fValue)</td></tr>
<tr class="memdesc:a1b11d14648656b3bfb3529db712169af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the interpolation factor such that Lerp(fMin, fMax, factor) == fValue. <br /></td></tr>
<tr class="separator:a1b11d14648656b3bfb3529db712169af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe93e6c96ee4da7fff1ddcdbc81bff31" id="r_afe93e6c96ee4da7fff1ddcdbc81bff31"><td class="memTemplParams" colspan="2"><a id="afe93e6c96ee4da7fff1ddcdbc81bff31" name="afe93e6c96ee4da7fff1ddcdbc81bff31"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:afe93e6c96ee4da7fff1ddcdbc81bff31"><td class="memTemplItemLeft" align="right" valign="top">constexpr PL_FORCE_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Step</b> (T value, T edge)</td></tr>
<tr class="memdesc:afe93e6c96ee4da7fff1ddcdbc81bff31"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 0, if value &lt; edge, and 1, if value &gt;= edge. <br /></td></tr>
<tr class="separator:afe93e6c96ee4da7fff1ddcdbc81bff31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae727cfa25d979e734284dc70e1ebca60" id="r_ae727cfa25d979e734284dc70e1ebca60"><td class="memItemLeft" align="right" valign="top"><a id="ae727cfa25d979e734284dc70e1ebca60" name="ae727cfa25d979e734284dc70e1ebca60"></a>
constexpr PL_FORCE_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsPowerOf2</b> (plInt32 value)</td></tr>
<tr class="memdesc:ae727cfa25d979e734284dc70e1ebca60"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if there exists some x with 2^x == value. <br /></td></tr>
<tr class="separator:ae727cfa25d979e734284dc70e1ebca60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89278fe46001ce96280bc7974e31e677" id="r_a89278fe46001ce96280bc7974e31e677"><td class="memItemLeft" align="right" valign="top"><a id="a89278fe46001ce96280bc7974e31e677" name="a89278fe46001ce96280bc7974e31e677"></a>
constexpr PL_FORCE_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsPowerOf2</b> (plUInt32 value)</td></tr>
<tr class="memdesc:a89278fe46001ce96280bc7974e31e677"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if there exists some x with 2^x == value. <br /></td></tr>
<tr class="separator:a89278fe46001ce96280bc7974e31e677"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a473dfa135ec837e343add8d362a2412a" id="r_a473dfa135ec837e343add8d362a2412a"><td class="memItemLeft" align="right" valign="top"><a id="a473dfa135ec837e343add8d362a2412a" name="a473dfa135ec837e343add8d362a2412a"></a>
constexpr PL_FORCE_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsPowerOf2</b> (plUInt64 value)</td></tr>
<tr class="memdesc:a473dfa135ec837e343add8d362a2412a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if there exists some x with 2^x == value. <br /></td></tr>
<tr class="separator:a473dfa135ec837e343add8d362a2412a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5afdf4907a0a61a687be8a9e1e1f81c" id="r_ab5afdf4907a0a61a687be8a9e1e1f81c"><td class="memTemplParams" colspan="2"><a id="ab5afdf4907a0a61a687be8a9e1e1f81c" name="ab5afdf4907a0a61a687be8a9e1e1f81c"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ab5afdf4907a0a61a687be8a9e1e1f81c"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsEqual</b> (Type lhs, Type rhs, Type fEpsilon)</td></tr>
<tr class="memdesc:ab5afdf4907a0a61a687be8a9e1e1f81c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks, whether fValue is in the range [fDesired - fMaxImprecision; fDesired + fMaxImprecision]. <br /></td></tr>
<tr class="separator:ab5afdf4907a0a61a687be8a9e1e1f81c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8422d1228952cb6d6b061ecb513569ac" id="r_a8422d1228952cb6d6b061ecb513569ac"><td class="memTemplParams" colspan="2"><a id="a8422d1228952cb6d6b061ecb513569ac" name="a8422d1228952cb6d6b061ecb513569ac"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a8422d1228952cb6d6b061ecb513569ac"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsInRange</b> (T value, T minVal, T maxVal)</td></tr>
<tr class="memdesc:a8422d1228952cb6d6b061ecb513569ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the value of the first parameter lies between the value of the second and third. <br /></td></tr>
<tr class="separator:a8422d1228952cb6d6b061ecb513569ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab41c015ef2ef7ea68f915082545755ae" id="r_ab41c015ef2ef7ea68f915082545755ae"><td class="memTemplParams" colspan="2"><a id="ab41c015ef2ef7ea68f915082545755ae" name="ab41c015ef2ef7ea68f915082545755ae"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ab41c015ef2ef7ea68f915082545755ae"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsZero</b> (Type f, Type fEpsilon)</td></tr>
<tr class="memdesc:ab41c015ef2ef7ea68f915082545755ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given number is close to zero. <br /></td></tr>
<tr class="separator:ab41c015ef2ef7ea68f915082545755ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7dd8470053b49d34d72fe1eb0d2ab61" id="r_ab7dd8470053b49d34d72fe1eb0d2ab61"><td class="memTemplParams" colspan="2"><a id="ab7dd8470053b49d34d72fe1eb0d2ab61" name="ab7dd8470053b49d34d72fe1eb0d2ab61"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ab7dd8470053b49d34d72fe1eb0d2ab61"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Trunc</b> (Type f)</td></tr>
<tr class="memdesc:ab7dd8470053b49d34d72fe1eb0d2ab61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the integer-part of f (removes the fraction). <br /></td></tr>
<tr class="separator:ab7dd8470053b49d34d72fe1eb0d2ab61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56d77e019b9b7dcc6c27ef6a5714851d" id="r_a56d77e019b9b7dcc6c27ef6a5714851d"><td class="memTemplParams" colspan="2"><a id="a56d77e019b9b7dcc6c27ef6a5714851d" name="a56d77e019b9b7dcc6c27ef6a5714851d"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a56d77e019b9b7dcc6c27ef6a5714851d"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Fraction</b> (Type f)</td></tr>
<tr class="memdesc:a56d77e019b9b7dcc6c27ef6a5714851d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the fraction-part of f. <br /></td></tr>
<tr class="separator:a56d77e019b9b7dcc6c27ef6a5714851d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae27db066f56ce11ea3b96f8cede4a867" id="r_ae27db066f56ce11ea3b96f8cede4a867"><td class="memTemplParams" colspan="2"><a id="ae27db066f56ce11ea3b96f8cede4a867" name="ae27db066f56ce11ea3b96f8cede4a867"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ae27db066f56ce11ea3b96f8cede4a867"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SmoothStep</b> (Type value, Type edge1, Type edge2)</td></tr>
<tr class="memdesc:ae27db066f56ce11ea3b96f8cede4a867"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 0, if value is &lt;= edge1, 1 if value &gt;= edge2 and the hermite interpolation in between. <br /></td></tr>
<tr class="separator:ae27db066f56ce11ea3b96f8cede4a867"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e7571124eabadd0fa57cffa70b00172" id="r_a8e7571124eabadd0fa57cffa70b00172"><td class="memTemplParams" colspan="2"><a id="a8e7571124eabadd0fa57cffa70b00172" name="a8e7571124eabadd0fa57cffa70b00172"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a8e7571124eabadd0fa57cffa70b00172"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SmootherStep</b> (Type value, Type edge1, Type edge2)</td></tr>
<tr class="memdesc:a8e7571124eabadd0fa57cffa70b00172"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 0, if value is &lt;= edge1, 1 if value &gt;= edge2 and the second order hermite interpolation in between. <br /></td></tr>
<tr class="separator:a8e7571124eabadd0fa57cffa70b00172"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d59d967853711101adff06ccb2e0dd5" id="r_a6d59d967853711101adff06ccb2e0dd5"><td class="memItemLeft" align="right" valign="top"><a id="a6d59d967853711101adff06ccb2e0dd5" name="a6d59d967853711101adff06ccb2e0dd5"></a>
plUInt8&#160;</td><td class="memItemRight" valign="bottom"><b>ColorFloatToByte</b> (float value)</td></tr>
<tr class="memdesc:a6d59d967853711101adff06ccb2e0dd5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from float [0;1] range to unsigned byte [0;255] range, with proper rounding. <br /></td></tr>
<tr class="separator:a6d59d967853711101adff06ccb2e0dd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8859fe4bf482080605dec864a470da45" id="r_a8859fe4bf482080605dec864a470da45"><td class="memItemLeft" align="right" valign="top"><a id="a8859fe4bf482080605dec864a470da45" name="a8859fe4bf482080605dec864a470da45"></a>
plUInt16&#160;</td><td class="memItemRight" valign="bottom"><b>ColorFloatToShort</b> (float value)</td></tr>
<tr class="memdesc:a8859fe4bf482080605dec864a470da45"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from float [0;1] range to unsigned short [0;65535] range, with proper rounding. <br /></td></tr>
<tr class="separator:a8859fe4bf482080605dec864a470da45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0805dbc625c3f1ca235f566b20826dba" id="r_a0805dbc625c3f1ca235f566b20826dba"><td class="memItemLeft" align="right" valign="top"><a id="a0805dbc625c3f1ca235f566b20826dba" name="a0805dbc625c3f1ca235f566b20826dba"></a>
plInt8&#160;</td><td class="memItemRight" valign="bottom"><b>ColorFloatToSignedByte</b> (float value)</td></tr>
<tr class="memdesc:a0805dbc625c3f1ca235f566b20826dba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from float [-1;1] range to signed byte [-127;127] range, with proper rounding. <br /></td></tr>
<tr class="separator:a0805dbc625c3f1ca235f566b20826dba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8147d5ad32b1503e1393c7258e90c3a8" id="r_a8147d5ad32b1503e1393c7258e90c3a8"><td class="memItemLeft" align="right" valign="top"><a id="a8147d5ad32b1503e1393c7258e90c3a8" name="a8147d5ad32b1503e1393c7258e90c3a8"></a>
plInt16&#160;</td><td class="memItemRight" valign="bottom"><b>ColorFloatToSignedShort</b> (float value)</td></tr>
<tr class="memdesc:a8147d5ad32b1503e1393c7258e90c3a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from float [-1;1] range to signed short [-32767;32767] range, with proper rounding. <br /></td></tr>
<tr class="separator:a8147d5ad32b1503e1393c7258e90c3a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b7409f69c51e9b37fd1af282dba5a5f" id="r_a8b7409f69c51e9b37fd1af282dba5a5f"><td class="memItemLeft" align="right" valign="top"><a id="a8b7409f69c51e9b37fd1af282dba5a5f" name="a8b7409f69c51e9b37fd1af282dba5a5f"></a>
constexpr float&#160;</td><td class="memItemRight" valign="bottom"><b>ColorByteToFloat</b> (plUInt8 value)</td></tr>
<tr class="memdesc:a8b7409f69c51e9b37fd1af282dba5a5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from unsigned byte [0;255] range to float [0;1] range, with proper rounding. <br /></td></tr>
<tr class="separator:a8b7409f69c51e9b37fd1af282dba5a5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed0425c9e1f58761cf91e3315d33e139" id="r_aed0425c9e1f58761cf91e3315d33e139"><td class="memItemLeft" align="right" valign="top"><a id="aed0425c9e1f58761cf91e3315d33e139" name="aed0425c9e1f58761cf91e3315d33e139"></a>
constexpr float&#160;</td><td class="memItemRight" valign="bottom"><b>ColorShortToFloat</b> (plUInt16 value)</td></tr>
<tr class="memdesc:aed0425c9e1f58761cf91e3315d33e139"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from unsigned short [0;65535] range to float [0;1] range, with proper rounding. <br /></td></tr>
<tr class="separator:aed0425c9e1f58761cf91e3315d33e139"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e0493d1a4477c91c0cfc260b348dc86" id="r_a7e0493d1a4477c91c0cfc260b348dc86"><td class="memItemLeft" align="right" valign="top"><a id="a7e0493d1a4477c91c0cfc260b348dc86" name="a7e0493d1a4477c91c0cfc260b348dc86"></a>
constexpr float&#160;</td><td class="memItemRight" valign="bottom"><b>ColorSignedByteToFloat</b> (plInt8 value)</td></tr>
<tr class="memdesc:a7e0493d1a4477c91c0cfc260b348dc86"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from signed byte [-128;127] range to float [-1;1] range, with proper rounding. <br /></td></tr>
<tr class="separator:a7e0493d1a4477c91c0cfc260b348dc86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d8fd6ec30ad540237d46f0dc619b261" id="r_a8d8fd6ec30ad540237d46f0dc619b261"><td class="memItemLeft" align="right" valign="top"><a id="a8d8fd6ec30ad540237d46f0dc619b261" name="a8d8fd6ec30ad540237d46f0dc619b261"></a>
constexpr float&#160;</td><td class="memItemRight" valign="bottom"><b>ColorSignedShortToFloat</b> (plInt16 value)</td></tr>
<tr class="memdesc:a8d8fd6ec30ad540237d46f0dc619b261"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from signed short [-32768;32767] range to float [0;1] range, with proper rounding. <br /></td></tr>
<tr class="separator:a8d8fd6ec30ad540237d46f0dc619b261"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c1d1ad70715890caa923b8c1df701d3" id="r_a1c1d1ad70715890caa923b8c1df701d3"><td class="memTemplParams" colspan="2"><a id="a1c1d1ad70715890caa923b8c1df701d3" name="a1c1d1ad70715890caa923b8c1df701d3"></a>
template&lt;typename T , typename T2 &gt; </td></tr>
<tr class="memitem:a1c1d1ad70715890caa923b8c1df701d3"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EvaluateBezierCurve</b> (T2 t, const T &amp;startPoint, const T &amp;controlPoint1, const T &amp;controlPoint2, const T &amp;endPoint)</td></tr>
<tr class="memdesc:a1c1d1ad70715890caa923b8c1df701d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluates the cubic spline defined by four control points at time <em>t</em> and returns the interpolated result. Can be used with T as float, vec2, vec3 or vec4. <br /></td></tr>
<tr class="separator:a1c1d1ad70715890caa923b8c1df701d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3148691a0db0a91eafd8e82a1f263450" id="r_a3148691a0db0a91eafd8e82a1f263450"><td class="memItemLeft" align="right" valign="top"><a id="a3148691a0db0a91eafd8e82a1f263450" name="a3148691a0db0a91eafd8e82a1f263450"></a>
PL_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsFinite</b> (double value)</td></tr>
<tr class="separator:a3148691a0db0a91eafd8e82a1f263450"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8719e26444e66e2915b60d6da4469d4" id="r_ab8719e26444e66e2915b60d6da4469d4"><td class="memItemLeft" align="right" valign="top"><a id="ab8719e26444e66e2915b60d6da4469d4" name="ab8719e26444e66e2915b60d6da4469d4"></a>
PL_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsNaN</b> (double value)</td></tr>
<tr class="separator:ab8719e26444e66e2915b60d6da4469d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca6a90aa180bdc68c67047a93f8d57f1" id="r_aca6a90aa180bdc68c67047a93f8d57f1"><td class="memItemLeft" align="right" valign="top"><a id="aca6a90aa180bdc68c67047a93f8d57f1" name="aca6a90aa180bdc68c67047a93f8d57f1"></a>
PL_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Floor</b> (double f)</td></tr>
<tr class="separator:aca6a90aa180bdc68c67047a93f8d57f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae86a83d6b70d81af93d974cf57bb9fc6" id="r_ae86a83d6b70d81af93d974cf57bb9fc6"><td class="memItemLeft" align="right" valign="top"><a id="ae86a83d6b70d81af93d974cf57bb9fc6" name="ae86a83d6b70d81af93d974cf57bb9fc6"></a>
PL_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Ceil</b> (double f)</td></tr>
<tr class="separator:ae86a83d6b70d81af93d974cf57bb9fc6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a376dececaac1fe979ae20f82fec9018d" id="r_a376dececaac1fe979ae20f82fec9018d"><td class="memItemLeft" align="right" valign="top">PL_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a376dececaac1fe979ae20f82fec9018d">Round</a> (double f)</td></tr>
<tr class="memdesc:a376dececaac1fe979ae20f82fec9018d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rounds f to the next integer.  <br /></td></tr>
<tr class="separator:a376dececaac1fe979ae20f82fec9018d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a104680f37ede9a20239d5aaf56e41eb3" id="r_a104680f37ede9a20239d5aaf56e41eb3"><td class="memItemLeft" align="right" valign="top"><a id="a104680f37ede9a20239d5aaf56e41eb3" name="a104680f37ede9a20239d5aaf56e41eb3"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>RoundDown</b> (double f, double fMultiple)</td></tr>
<tr class="memdesc:a104680f37ede9a20239d5aaf56e41eb3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of fMultiple that is smaller than f. <br /></td></tr>
<tr class="separator:a104680f37ede9a20239d5aaf56e41eb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e8f52b1accac321d1f66662a07edc5e" id="r_a5e8f52b1accac321d1f66662a07edc5e"><td class="memItemLeft" align="right" valign="top"><a id="a5e8f52b1accac321d1f66662a07edc5e" name="a5e8f52b1accac321d1f66662a07edc5e"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><b>RoundUp</b> (double f, double fMultiple)</td></tr>
<tr class="memdesc:a5e8f52b1accac321d1f66662a07edc5e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of fMultiple that is larger than f. <br /></td></tr>
<tr class="separator:a5e8f52b1accac321d1f66662a07edc5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33330db7ba8967ecd07361e20e7c2b1c" id="r_a33330db7ba8967ecd07361e20e7c2b1c"><td class="memItemLeft" align="right" valign="top"><a id="a33330db7ba8967ecd07361e20e7c2b1c" name="a33330db7ba8967ecd07361e20e7c2b1c"></a>
PL_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>RoundToMultiple</b> (double f, double fMultiple)</td></tr>
<tr class="memdesc:a33330db7ba8967ecd07361e20e7c2b1c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rounds f to the closest value of multiple. <br /></td></tr>
<tr class="separator:a33330db7ba8967ecd07361e20e7c2b1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6dda9482ff1f06c28b6507742c9f2cbe" id="r_a6dda9482ff1f06c28b6507742c9f2cbe"><td class="memItemLeft" align="right" valign="top"><a id="a6dda9482ff1f06c28b6507742c9f2cbe" name="a6dda9482ff1f06c28b6507742c9f2cbe"></a>
PL_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Exp</b> (double f)</td></tr>
<tr class="separator:a6dda9482ff1f06c28b6507742c9f2cbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a032f51cf1557fccc3fcc70d63be8f9ef" id="r_a032f51cf1557fccc3fcc70d63be8f9ef"><td class="memItemLeft" align="right" valign="top"><a id="a032f51cf1557fccc3fcc70d63be8f9ef" name="a032f51cf1557fccc3fcc70d63be8f9ef"></a>
PL_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Ln</b> (double f)</td></tr>
<tr class="separator:a032f51cf1557fccc3fcc70d63be8f9ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ef6642fec1559093a241fa75e2d6405" id="r_a3ef6642fec1559093a241fa75e2d6405"><td class="memItemLeft" align="right" valign="top"><a id="a3ef6642fec1559093a241fa75e2d6405" name="a3ef6642fec1559093a241fa75e2d6405"></a>
PL_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Log2</b> (double f)</td></tr>
<tr class="separator:a3ef6642fec1559093a241fa75e2d6405"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f92e3fa881658baa4f2f25227518ddc" id="r_a1f92e3fa881658baa4f2f25227518ddc"><td class="memItemLeft" align="right" valign="top"><a id="a1f92e3fa881658baa4f2f25227518ddc" name="a1f92e3fa881658baa4f2f25227518ddc"></a>
PL_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Log10</b> (double f)</td></tr>
<tr class="separator:a1f92e3fa881658baa4f2f25227518ddc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb3b7ee45b284a70386a75b92c634723" id="r_abb3b7ee45b284a70386a75b92c634723"><td class="memItemLeft" align="right" valign="top"><a id="abb3b7ee45b284a70386a75b92c634723" name="abb3b7ee45b284a70386a75b92c634723"></a>
PL_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Log</b> (double fBase, double f)</td></tr>
<tr class="separator:abb3b7ee45b284a70386a75b92c634723"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e778dded440226ae5802685a0968dab" id="r_a8e778dded440226ae5802685a0968dab"><td class="memItemLeft" align="right" valign="top"><a id="a8e778dded440226ae5802685a0968dab" name="a8e778dded440226ae5802685a0968dab"></a>
PL_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Pow2</b> (double f)</td></tr>
<tr class="separator:a8e778dded440226ae5802685a0968dab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac78cf121d9a0b27b6b8c67f8b79f68eb" id="r_ac78cf121d9a0b27b6b8c67f8b79f68eb"><td class="memItemLeft" align="right" valign="top"><a id="ac78cf121d9a0b27b6b8c67f8b79f68eb" name="ac78cf121d9a0b27b6b8c67f8b79f68eb"></a>
PL_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Pow</b> (double fBase, double fExp)</td></tr>
<tr class="separator:ac78cf121d9a0b27b6b8c67f8b79f68eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59792ab1c6216d42bf61be0d18910534" id="r_a59792ab1c6216d42bf61be0d18910534"><td class="memItemLeft" align="right" valign="top"><a id="a59792ab1c6216d42bf61be0d18910534" name="a59792ab1c6216d42bf61be0d18910534"></a>
PL_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Root</b> (double f, double fNthRoot)</td></tr>
<tr class="separator:a59792ab1c6216d42bf61be0d18910534"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae02023b382e3990f9ebf91f40473310" id="r_aae02023b382e3990f9ebf91f40473310"><td class="memItemLeft" align="right" valign="top"><a id="aae02023b382e3990f9ebf91f40473310" name="aae02023b382e3990f9ebf91f40473310"></a>
PL_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Sqrt</b> (double f)</td></tr>
<tr class="memdesc:aae02023b382e3990f9ebf91f40473310"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the square root of f. <br /></td></tr>
<tr class="separator:aae02023b382e3990f9ebf91f40473310"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a884e26ab20e8aec516126913215a7e18" id="r_a884e26ab20e8aec516126913215a7e18"><td class="memItemLeft" align="right" valign="top"><a id="a884e26ab20e8aec516126913215a7e18" name="a884e26ab20e8aec516126913215a7e18"></a>
PL_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Mod</b> (double f, double fDiv)</td></tr>
<tr class="memdesc:a884e26ab20e8aec516126913215a7e18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns "value mod div" for doubles. This also works with negative numbers, both for value and for div. <br /></td></tr>
<tr class="separator:a884e26ab20e8aec516126913215a7e18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb788a76ed5c1f22b23be5e3188c6a9a" id="r_abb788a76ed5c1f22b23be5e3188c6a9a"><td class="memItemLeft" align="right" valign="top"><a id="abb788a76ed5c1f22b23be5e3188c6a9a" name="abb788a76ed5c1f22b23be5e3188c6a9a"></a>
PL_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsFinite</b> (float value)</td></tr>
<tr class="separator:abb788a76ed5c1f22b23be5e3188c6a9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a690d6f3ee6aef767c250590df033df24" id="r_a690d6f3ee6aef767c250590df033df24"><td class="memItemLeft" align="right" valign="top"><a id="a690d6f3ee6aef767c250590df033df24" name="a690d6f3ee6aef767c250590df033df24"></a>
PL_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsNaN</b> (float value)</td></tr>
<tr class="separator:a690d6f3ee6aef767c250590df033df24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af34908305ab0afc633ef0a13aba195c6" id="r_af34908305ab0afc633ef0a13aba195c6"><td class="memItemLeft" align="right" valign="top"><a id="af34908305ab0afc633ef0a13aba195c6" name="af34908305ab0afc633ef0a13aba195c6"></a>
PL_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Floor</b> (float f)</td></tr>
<tr class="memdesc:af34908305ab0afc633ef0a13aba195c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next smaller integer, closest to f. Also the SMALLER value, if f is negative. <br /></td></tr>
<tr class="separator:af34908305ab0afc633ef0a13aba195c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4151127ef66ef4f29ee676569e461add" id="r_a4151127ef66ef4f29ee676569e461add"><td class="memItemLeft" align="right" valign="top"><a id="a4151127ef66ef4f29ee676569e461add" name="a4151127ef66ef4f29ee676569e461add"></a>
PL_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Ceil</b> (float f)</td></tr>
<tr class="memdesc:a4151127ef66ef4f29ee676569e461add"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next higher integer, closest to f. Also the HIGHER value, if f is negative. <br /></td></tr>
<tr class="separator:a4151127ef66ef4f29ee676569e461add"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93579039ff86b606fc729b4b9fec22b4" id="r_a93579039ff86b606fc729b4b9fec22b4"><td class="memItemLeft" align="right" valign="top">PL_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a93579039ff86b606fc729b4b9fec22b4">Round</a> (float f)</td></tr>
<tr class="memdesc:a93579039ff86b606fc729b4b9fec22b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rounds f to the next integer.  <br /></td></tr>
<tr class="separator:a93579039ff86b606fc729b4b9fec22b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44797ed279d6fea3f17f27c5423bf3a4" id="r_a44797ed279d6fea3f17f27c5423bf3a4"><td class="memItemLeft" align="right" valign="top"><a id="a44797ed279d6fea3f17f27c5423bf3a4" name="a44797ed279d6fea3f17f27c5423bf3a4"></a>
PL_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>RoundToMultiple</b> (float f, float fMultiple)</td></tr>
<tr class="memdesc:a44797ed279d6fea3f17f27c5423bf3a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rounds f to the closest value of multiple. <br /></td></tr>
<tr class="separator:a44797ed279d6fea3f17f27c5423bf3a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e7d7250c8fc228b0b637fbe0be91a01" id="r_a7e7d7250c8fc228b0b637fbe0be91a01"><td class="memItemLeft" align="right" valign="top"><a id="a7e7d7250c8fc228b0b637fbe0be91a01" name="a7e7d7250c8fc228b0b637fbe0be91a01"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>RoundDown</b> (float f, float fMultiple)</td></tr>
<tr class="memdesc:a7e7d7250c8fc228b0b637fbe0be91a01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of fMultiple that is smaller than f. <br /></td></tr>
<tr class="separator:a7e7d7250c8fc228b0b637fbe0be91a01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d930326b86a2ab68fc871556673a3c2" id="r_a4d930326b86a2ab68fc871556673a3c2"><td class="memItemLeft" align="right" valign="top"><a id="a4d930326b86a2ab68fc871556673a3c2" name="a4d930326b86a2ab68fc871556673a3c2"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>RoundUp</b> (float f, float fMultiple)</td></tr>
<tr class="memdesc:a4d930326b86a2ab68fc871556673a3c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of fMultiple that is larger than f. <br /></td></tr>
<tr class="separator:a4d930326b86a2ab68fc871556673a3c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c10f39a9283445ab6001096104bb153" id="r_a3c10f39a9283445ab6001096104bb153"><td class="memItemLeft" align="right" valign="top">PL_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3c10f39a9283445ab6001096104bb153">Sin</a> (<a class="el" href="../../d4/dfd/classpl_angle.htm">plAngle</a> a)</td></tr>
<tr class="memdesc:a3c10f39a9283445ab6001096104bb153"><td class="mdescLeft">&#160;</td><td class="mdescRight">***** Trigonometric Functions *****  <br /></td></tr>
<tr class="separator:a3c10f39a9283445ab6001096104bb153"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9493ece7e4354a37df97ed08bb26eac" id="r_ac9493ece7e4354a37df97ed08bb26eac"><td class="memItemLeft" align="right" valign="top"><a id="ac9493ece7e4354a37df97ed08bb26eac" name="ac9493ece7e4354a37df97ed08bb26eac"></a>
PL_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Cos</b> (<a class="el" href="../../d4/dfd/classpl_angle.htm">plAngle</a> a)</td></tr>
<tr class="memdesc:ac9493ece7e4354a37df97ed08bb26eac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Takes an angle, returns its cosine. <br /></td></tr>
<tr class="separator:ac9493ece7e4354a37df97ed08bb26eac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9642f34bcdd7dae2a75a3b5cd9f944fc" id="r_a9642f34bcdd7dae2a75a3b5cd9f944fc"><td class="memItemLeft" align="right" valign="top"><a id="a9642f34bcdd7dae2a75a3b5cd9f944fc" name="a9642f34bcdd7dae2a75a3b5cd9f944fc"></a>
PL_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Tan</b> (<a class="el" href="../../d4/dfd/classpl_angle.htm">plAngle</a> a)</td></tr>
<tr class="memdesc:a9642f34bcdd7dae2a75a3b5cd9f944fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Takes an angle, returns its tangent. <br /></td></tr>
<tr class="separator:a9642f34bcdd7dae2a75a3b5cd9f944fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16c2c579293ffd5ccb95e7c1521560d7" id="r_a16c2c579293ffd5ccb95e7c1521560d7"><td class="memItemLeft" align="right" valign="top"><a id="a16c2c579293ffd5ccb95e7c1521560d7" name="a16c2c579293ffd5ccb95e7c1521560d7"></a>
PL_ALWAYS_INLINE <a class="el" href="../../d4/dfd/classpl_angle.htm">plAngle</a>&#160;</td><td class="memItemRight" valign="bottom"><b>ASin</b> (float f)</td></tr>
<tr class="memdesc:a16c2c579293ffd5ccb95e7c1521560d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the arcus sinus of f. <br /></td></tr>
<tr class="separator:a16c2c579293ffd5ccb95e7c1521560d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a319a0edc79181e926ee0f6b451407bb6" id="r_a319a0edc79181e926ee0f6b451407bb6"><td class="memItemLeft" align="right" valign="top"><a id="a319a0edc79181e926ee0f6b451407bb6" name="a319a0edc79181e926ee0f6b451407bb6"></a>
PL_ALWAYS_INLINE <a class="el" href="../../d4/dfd/classpl_angle.htm">plAngle</a>&#160;</td><td class="memItemRight" valign="bottom"><b>ACos</b> (float f)</td></tr>
<tr class="memdesc:a319a0edc79181e926ee0f6b451407bb6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the arcus cosinus of f. <br /></td></tr>
<tr class="separator:a319a0edc79181e926ee0f6b451407bb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a236fdd2f75e9643f8c318023a20ee05e" id="r_a236fdd2f75e9643f8c318023a20ee05e"><td class="memItemLeft" align="right" valign="top"><a id="a236fdd2f75e9643f8c318023a20ee05e" name="a236fdd2f75e9643f8c318023a20ee05e"></a>
PL_ALWAYS_INLINE <a class="el" href="../../d4/dfd/classpl_angle.htm">plAngle</a>&#160;</td><td class="memItemRight" valign="bottom"><b>ATan</b> (float f)</td></tr>
<tr class="memdesc:a236fdd2f75e9643f8c318023a20ee05e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the arcus tangent of f. <br /></td></tr>
<tr class="separator:a236fdd2f75e9643f8c318023a20ee05e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d360762da80a2b08e7e3de053d1d839" id="r_a4d360762da80a2b08e7e3de053d1d839"><td class="memItemLeft" align="right" valign="top"><a id="a4d360762da80a2b08e7e3de053d1d839" name="a4d360762da80a2b08e7e3de053d1d839"></a>
PL_ALWAYS_INLINE <a class="el" href="../../d4/dfd/classpl_angle.htm">plAngle</a>&#160;</td><td class="memItemRight" valign="bottom"><b>ATan2</b> (float y, float x)</td></tr>
<tr class="memdesc:a4d360762da80a2b08e7e3de053d1d839"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the atan2 of x and y. <br /></td></tr>
<tr class="separator:a4d360762da80a2b08e7e3de053d1d839"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0016df6c554d18b9463b15cc433db72" id="r_ae0016df6c554d18b9463b15cc433db72"><td class="memItemLeft" align="right" valign="top"><a id="ae0016df6c554d18b9463b15cc433db72" name="ae0016df6c554d18b9463b15cc433db72"></a>
PL_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Exp</b> (float f)</td></tr>
<tr class="memdesc:ae0016df6c554d18b9463b15cc433db72"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns e^f. <br /></td></tr>
<tr class="separator:ae0016df6c554d18b9463b15cc433db72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad19123416a9c07f6637019a5f5a45380" id="r_ad19123416a9c07f6637019a5f5a45380"><td class="memItemLeft" align="right" valign="top"><a id="ad19123416a9c07f6637019a5f5a45380" name="ad19123416a9c07f6637019a5f5a45380"></a>
PL_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Ln</b> (float f)</td></tr>
<tr class="memdesc:ad19123416a9c07f6637019a5f5a45380"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the logarithmus naturalis of f. <br /></td></tr>
<tr class="separator:ad19123416a9c07f6637019a5f5a45380"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afcd718c66d3fa9f54734aa8e77a86e9f" id="r_afcd718c66d3fa9f54734aa8e77a86e9f"><td class="memItemLeft" align="right" valign="top"><a id="afcd718c66d3fa9f54734aa8e77a86e9f" name="afcd718c66d3fa9f54734aa8e77a86e9f"></a>
PL_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Log2</b> (float f)</td></tr>
<tr class="memdesc:afcd718c66d3fa9f54734aa8e77a86e9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns log (f), to the base 2. <br /></td></tr>
<tr class="separator:afcd718c66d3fa9f54734aa8e77a86e9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac297bd498eb7bb306d78cf71d3fc0472" id="r_ac297bd498eb7bb306d78cf71d3fc0472"><td class="memItemLeft" align="right" valign="top"><a id="ac297bd498eb7bb306d78cf71d3fc0472" name="ac297bd498eb7bb306d78cf71d3fc0472"></a>
PL_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Log10</b> (float f)</td></tr>
<tr class="memdesc:ac297bd498eb7bb306d78cf71d3fc0472"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns log (f), to the base 10. <br /></td></tr>
<tr class="separator:ac297bd498eb7bb306d78cf71d3fc0472"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5379bb41cc50a594f1e2a008b2c81205" id="r_a5379bb41cc50a594f1e2a008b2c81205"><td class="memItemLeft" align="right" valign="top"><a id="a5379bb41cc50a594f1e2a008b2c81205" name="a5379bb41cc50a594f1e2a008b2c81205"></a>
PL_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Log</b> (float fBase, float f)</td></tr>
<tr class="memdesc:a5379bb41cc50a594f1e2a008b2c81205"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns log (f), to the base fBase. <br /></td></tr>
<tr class="separator:a5379bb41cc50a594f1e2a008b2c81205"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae228f0f493021a431c5333face7c5404" id="r_ae228f0f493021a431c5333face7c5404"><td class="memItemLeft" align="right" valign="top"><a id="ae228f0f493021a431c5333face7c5404" name="ae228f0f493021a431c5333face7c5404"></a>
PL_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Pow2</b> (float f)</td></tr>
<tr class="memdesc:ae228f0f493021a431c5333face7c5404"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 2^f. <br /></td></tr>
<tr class="separator:ae228f0f493021a431c5333face7c5404"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab47e45022ca311cbb0a66f566f4cc6b1" id="r_ab47e45022ca311cbb0a66f566f4cc6b1"><td class="memItemLeft" align="right" valign="top"><a id="ab47e45022ca311cbb0a66f566f4cc6b1" name="ab47e45022ca311cbb0a66f566f4cc6b1"></a>
PL_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Pow</b> (float fBase, float fExp)</td></tr>
<tr class="memdesc:ab47e45022ca311cbb0a66f566f4cc6b1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns base^exp. <br /></td></tr>
<tr class="separator:ab47e45022ca311cbb0a66f566f4cc6b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a517c2bb9c8caa9d90c9640e46b90e08a" id="r_a517c2bb9c8caa9d90c9640e46b90e08a"><td class="memItemLeft" align="right" valign="top"><a id="a517c2bb9c8caa9d90c9640e46b90e08a" name="a517c2bb9c8caa9d90c9640e46b90e08a"></a>
PL_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Root</b> (float f, float fNthRoot)</td></tr>
<tr class="memdesc:a517c2bb9c8caa9d90c9640e46b90e08a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the n-th root of f. <br /></td></tr>
<tr class="separator:a517c2bb9c8caa9d90c9640e46b90e08a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ea1e1fb780774d5a4e021351bcd6454" id="r_a4ea1e1fb780774d5a4e021351bcd6454"><td class="memItemLeft" align="right" valign="top"><a id="a4ea1e1fb780774d5a4e021351bcd6454" name="a4ea1e1fb780774d5a4e021351bcd6454"></a>
PL_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Sqrt</b> (float f)</td></tr>
<tr class="memdesc:a4ea1e1fb780774d5a4e021351bcd6454"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the square root of f. <br /></td></tr>
<tr class="separator:a4ea1e1fb780774d5a4e021351bcd6454"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a632d536c59bad5cd96dc96a6a15a9c73" id="r_a632d536c59bad5cd96dc96a6a15a9c73"><td class="memItemLeft" align="right" valign="top"><a id="a632d536c59bad5cd96dc96a6a15a9c73" name="a632d536c59bad5cd96dc96a6a15a9c73"></a>
PL_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>Mod</b> (float value, float fDiv)</td></tr>
<tr class="memdesc:a632d536c59bad5cd96dc96a6a15a9c73"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns "value mod div" for floats. This also works with negative numbers, both for value and for div. <br /></td></tr>
<tr class="separator:a632d536c59bad5cd96dc96a6a15a9c73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee1a80a755934c44433bb805f5c1351e" id="r_aee1a80a755934c44433bb805f5c1351e"><td class="memItemLeft" align="right" valign="top"><a id="aee1a80a755934c44433bb805f5c1351e" name="aee1a80a755934c44433bb805f5c1351e"></a>
constexpr PL_ALWAYS_INLINE plInt32&#160;</td><td class="memItemRight" valign="bottom"><b>RoundUp</b> (plInt32 value, plUInt16 uiMultiple)</td></tr>
<tr class="memdesc:aee1a80a755934c44433bb805f5c1351e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of the given multiple that is larger than or equal to value. <br /></td></tr>
<tr class="separator:aee1a80a755934c44433bb805f5c1351e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1164f8aa260323363ced6a71b7fce57e" id="r_a1164f8aa260323363ced6a71b7fce57e"><td class="memItemLeft" align="right" valign="top"><a id="a1164f8aa260323363ced6a71b7fce57e" name="a1164f8aa260323363ced6a71b7fce57e"></a>
constexpr PL_ALWAYS_INLINE plInt32&#160;</td><td class="memItemRight" valign="bottom"><b>RoundDown</b> (plInt32 value, plUInt16 uiMultiple)</td></tr>
<tr class="memdesc:a1164f8aa260323363ced6a71b7fce57e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of the given multiple that is smaller than or equal to value. <br /></td></tr>
<tr class="separator:a1164f8aa260323363ced6a71b7fce57e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e1157cb5c71e2415776fd0e6b77b849" id="r_a3e1157cb5c71e2415776fd0e6b77b849"><td class="memItemLeft" align="right" valign="top"><a id="a3e1157cb5c71e2415776fd0e6b77b849" name="a3e1157cb5c71e2415776fd0e6b77b849"></a>
constexpr PL_ALWAYS_INLINE plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>RoundUp</b> (plUInt32 value, plUInt16 uiMultiple)</td></tr>
<tr class="memdesc:a3e1157cb5c71e2415776fd0e6b77b849"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of the given multiple that is greater than or equal to value. <br /></td></tr>
<tr class="separator:a3e1157cb5c71e2415776fd0e6b77b849"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a69ef92f41358dc13d5dfca5662c972" id="r_a2a69ef92f41358dc13d5dfca5662c972"><td class="memItemLeft" align="right" valign="top"><a id="a2a69ef92f41358dc13d5dfca5662c972" name="a2a69ef92f41358dc13d5dfca5662c972"></a>
constexpr PL_ALWAYS_INLINE plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>RoundDown</b> (plUInt32 value, plUInt16 uiMultiple)</td></tr>
<tr class="memdesc:a2a69ef92f41358dc13d5dfca5662c972"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of the given multiple that is smaller than or equal to value. <br /></td></tr>
<tr class="separator:a2a69ef92f41358dc13d5dfca5662c972"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71f396768b6397dc004eefd47302b79f" id="r_a71f396768b6397dc004eefd47302b79f"><td class="memItemLeft" align="right" valign="top"><a id="a71f396768b6397dc004eefd47302b79f" name="a71f396768b6397dc004eefd47302b79f"></a>
constexpr PL_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsOdd</b> (plInt32 i)</td></tr>
<tr class="memdesc:a71f396768b6397dc004eefd47302b79f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if i is an odd number. <br /></td></tr>
<tr class="separator:a71f396768b6397dc004eefd47302b79f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72a91c11fb31412fdc5cc4d8b474e548" id="r_a72a91c11fb31412fdc5cc4d8b474e548"><td class="memItemLeft" align="right" valign="top"><a id="a72a91c11fb31412fdc5cc4d8b474e548" name="a72a91c11fb31412fdc5cc4d8b474e548"></a>
constexpr PL_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEven</b> (plInt32 i)</td></tr>
<tr class="memdesc:a72a91c11fb31412fdc5cc4d8b474e548"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if i is an even number. <br /></td></tr>
<tr class="separator:a72a91c11fb31412fdc5cc4d8b474e548"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada25e7495cb20e9d0d07f58c735a9115" id="r_ada25e7495cb20e9d0d07f58c735a9115"><td class="memItemLeft" align="right" valign="top"><a id="ada25e7495cb20e9d0d07f58c735a9115" name="ada25e7495cb20e9d0d07f58c735a9115"></a>
PL_ALWAYS_INLINE plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>Log2i</b> (plUInt32 uiVal)</td></tr>
<tr class="memdesc:ada25e7495cb20e9d0d07f58c735a9115"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the integral logarithm to the base 2, that comes closest to the given integer. <br /></td></tr>
<tr class="separator:ada25e7495cb20e9d0d07f58c735a9115"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d95df10b27f3e0b754b055037cec535" id="r_a9d95df10b27f3e0b754b055037cec535"><td class="memItemLeft" align="right" valign="top"><a id="a9d95df10b27f3e0b754b055037cec535" name="a9d95df10b27f3e0b754b055037cec535"></a>
constexpr PL_ALWAYS_INLINE int&#160;</td><td class="memItemRight" valign="bottom"><b>Pow2</b> (int i)</td></tr>
<tr class="separator:a9d95df10b27f3e0b754b055037cec535"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff8032d189dddb619efd08369b0815c1" id="r_aff8032d189dddb619efd08369b0815c1"><td class="memItemLeft" align="right" valign="top"><a id="aff8032d189dddb619efd08369b0815c1" name="aff8032d189dddb619efd08369b0815c1"></a>
int&#160;</td><td class="memItemRight" valign="bottom"><b>Pow</b> (int iBase, int iExp)</td></tr>
<tr class="separator:aff8032d189dddb619efd08369b0815c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65512a9459c3eeea3350b71c5cb61aa4" id="r_a65512a9459c3eeea3350b71c5cb61aa4"><td class="memItemLeft" align="right" valign="top"><a id="a65512a9459c3eeea3350b71c5cb61aa4" name="a65512a9459c3eeea3350b71c5cb61aa4"></a>
constexpr plInt32&#160;</td><td class="memItemRight" valign="bottom"><b>Pow2</b> (plInt32 i)</td></tr>
<tr class="memdesc:a65512a9459c3eeea3350b71c5cb61aa4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 2^f. <br /></td></tr>
<tr class="separator:a65512a9459c3eeea3350b71c5cb61aa4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a666d662a4dbf416f9543d4a21ab501b9" id="r_a666d662a4dbf416f9543d4a21ab501b9"><td class="memItemLeft" align="right" valign="top"><a id="a666d662a4dbf416f9543d4a21ab501b9" name="a666d662a4dbf416f9543d4a21ab501b9"></a>
plInt32&#160;</td><td class="memItemRight" valign="bottom"><b>Pow</b> (plInt32 iBase, plInt32 iExp)</td></tr>
<tr class="memdesc:a666d662a4dbf416f9543d4a21ab501b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns base^exp. <br /></td></tr>
<tr class="separator:a666d662a4dbf416f9543d4a21ab501b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6606612c0e2764a2abc6a1d8a073779e" id="r_a6606612c0e2764a2abc6a1d8a073779e"><td class="memTemplParams" colspan="2"><a id="a6606612c0e2764a2abc6a1d8a073779e" name="a6606612c0e2764a2abc6a1d8a073779e"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a6606612c0e2764a2abc6a1d8a073779e"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Square</b> (T f)</td></tr>
<tr class="memdesc:a6606612c0e2764a2abc6a1d8a073779e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns f * f. <br /></td></tr>
<tr class="separator:a6606612c0e2764a2abc6a1d8a073779e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89fb2473005d42f62ce2aeb634247ffe" id="r_a89fb2473005d42f62ce2aeb634247ffe"><td class="memTemplParams" colspan="2"><a id="a89fb2473005d42f62ce2aeb634247ffe" name="a89fb2473005d42f62ce2aeb634247ffe"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a89fb2473005d42f62ce2aeb634247ffe"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Sign</b> (T f)</td></tr>
<tr class="memdesc:a89fb2473005d42f62ce2aeb634247ffe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the sign of f (i.e: -1, 1 or 0) <br /></td></tr>
<tr class="separator:a89fb2473005d42f62ce2aeb634247ffe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7ea1bfc812f3378edc1ac4e7260ee87" id="r_ab7ea1bfc812f3378edc1ac4e7260ee87"><td class="memTemplParams" colspan="2"><a id="ab7ea1bfc812f3378edc1ac4e7260ee87" name="ab7ea1bfc812f3378edc1ac4e7260ee87"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ab7ea1bfc812f3378edc1ac4e7260ee87"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Abs</b> (T f)</td></tr>
<tr class="memdesc:ab7ea1bfc812f3378edc1ac4e7260ee87"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the absolute value of f. <br /></td></tr>
<tr class="separator:ab7ea1bfc812f3378edc1ac4e7260ee87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0adc91907c51efa73514fdfcfc2fae7d" id="r_a0adc91907c51efa73514fdfcfc2fae7d"><td class="memTemplParams" colspan="2"><a id="a0adc91907c51efa73514fdfcfc2fae7d" name="a0adc91907c51efa73514fdfcfc2fae7d"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a0adc91907c51efa73514fdfcfc2fae7d"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Min</b> (T f1, T f2)</td></tr>
<tr class="memdesc:a0adc91907c51efa73514fdfcfc2fae7d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the smaller value, f1 or f2. <br /></td></tr>
<tr class="separator:a0adc91907c51efa73514fdfcfc2fae7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace7c5cd53a4929c3377c33b2ff20f06b" id="r_ace7c5cd53a4929c3377c33b2ff20f06b"><td class="memTemplParams" colspan="2"><a id="ace7c5cd53a4929c3377c33b2ff20f06b" name="ace7c5cd53a4929c3377c33b2ff20f06b"></a>
template&lt;typename T , typename... ARGS&gt; </td></tr>
<tr class="memitem:ace7c5cd53a4929c3377c33b2ff20f06b"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Min</b> (T f1, T f2, ARGS... f)</td></tr>
<tr class="memdesc:ace7c5cd53a4929c3377c33b2ff20f06b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the smaller value, f1 or f2 or ... <br /></td></tr>
<tr class="separator:ace7c5cd53a4929c3377c33b2ff20f06b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82fd8b9f91f94990750b09802f613e09" id="r_a82fd8b9f91f94990750b09802f613e09"><td class="memTemplParams" colspan="2"><a id="a82fd8b9f91f94990750b09802f613e09" name="a82fd8b9f91f94990750b09802f613e09"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a82fd8b9f91f94990750b09802f613e09"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Max</b> (T f1, T f2)</td></tr>
<tr class="memdesc:a82fd8b9f91f94990750b09802f613e09"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the greater value, f1 or f2. <br /></td></tr>
<tr class="separator:a82fd8b9f91f94990750b09802f613e09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a501d41b9a01cd436fd3d339a7c4c7025" id="r_a501d41b9a01cd436fd3d339a7c4c7025"><td class="memTemplParams" colspan="2"><a id="a501d41b9a01cd436fd3d339a7c4c7025" name="a501d41b9a01cd436fd3d339a7c4c7025"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a501d41b9a01cd436fd3d339a7c4c7025"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Clamp</b> (T value, T min_val, T max_val)</td></tr>
<tr class="memdesc:a501d41b9a01cd436fd3d339a7c4c7025"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clamps "value" to the range [min; max]. Returns "value", if it is inside the range already. <br /></td></tr>
<tr class="separator:a501d41b9a01cd436fd3d339a7c4c7025"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae94e36148a1cf9cb8e1d5d611c28c6ac" id="r_ae94e36148a1cf9cb8e1d5d611c28c6ac"><td class="memTemplParams" colspan="2"><a id="ae94e36148a1cf9cb8e1d5d611c28c6ac" name="ae94e36148a1cf9cb8e1d5d611c28c6ac"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ae94e36148a1cf9cb8e1d5d611c28c6ac"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Saturate</b> (T value)</td></tr>
<tr class="memdesc:ae94e36148a1cf9cb8e1d5d611c28c6ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clamps "value" to the range [0; 1]. Returns "value", if it is inside the range already. <br /></td></tr>
<tr class="separator:ae94e36148a1cf9cb8e1d5d611c28c6ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a816280c323b04f5d09f44a5a4cd5de" id="r_a0a816280c323b04f5d09f44a5a4cd5de"><td class="memTemplParams" colspan="2"><a id="a0a816280c323b04f5d09f44a5a4cd5de" name="a0a816280c323b04f5d09f44a5a4cd5de"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a0a816280c323b04f5d09f44a5a4cd5de"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Trunc</b> (Type f)</td></tr>
<tr class="memdesc:a0a816280c323b04f5d09f44a5a4cd5de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the integer-part of f (removes the fraction). <br /></td></tr>
<tr class="separator:a0a816280c323b04f5d09f44a5a4cd5de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14dcb5c08839e1246369028c1547434f" id="r_a14dcb5c08839e1246369028c1547434f"><td class="memItemLeft" align="right" valign="top">constexpr plInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a14dcb5c08839e1246369028c1547434f">FloatToInt</a> (float value)</td></tr>
<tr class="memdesc:a14dcb5c08839e1246369028c1547434f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Casts the float to an integer, removes the fractional part.  <br /></td></tr>
<tr class="separator:a14dcb5c08839e1246369028c1547434f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55bf4d35ddb68043f06dcffcd25b12cf" id="r_a55bf4d35ddb68043f06dcffcd25b12cf"><td class="memItemLeft" align="right" valign="top">constexpr plInt64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a55bf4d35ddb68043f06dcffcd25b12cf">FloatToInt</a> (double value)</td></tr>
<tr class="memdesc:a55bf4d35ddb68043f06dcffcd25b12cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Casts the float to an integer, removes the fractional part.  <br /></td></tr>
<tr class="separator:a55bf4d35ddb68043f06dcffcd25b12cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aadf9506d53676aeb4dc72dfaf30a48d5" id="r_aadf9506d53676aeb4dc72dfaf30a48d5"><td class="memTemplParams" colspan="2"><a id="aadf9506d53676aeb4dc72dfaf30a48d5" name="aadf9506d53676aeb4dc72dfaf30a48d5"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:aadf9506d53676aeb4dc72dfaf30a48d5"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Fraction</b> (Type f)</td></tr>
<tr class="memdesc:aadf9506d53676aeb4dc72dfaf30a48d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the fraction-part of f. <br /></td></tr>
<tr class="separator:aadf9506d53676aeb4dc72dfaf30a48d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38f8270fe0d3d8507508a620f153407d" id="r_a38f8270fe0d3d8507508a620f153407d"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a38f8270fe0d3d8507508a620f153407d"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a38f8270fe0d3d8507508a620f153407d">Bitmask_LowN</a> (plUInt32 uiNumBitsToSet)</td></tr>
<tr class="memdesc:a38f8270fe0d3d8507508a620f153407d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a bitmask in which the low N bits are set. For example for N=5, this would be '0000 ... 0001 1111'.  <br /></td></tr>
<tr class="separator:a38f8270fe0d3d8507508a620f153407d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96302794ae5a73add0a44d3154f8b81d" id="r_a96302794ae5a73add0a44d3154f8b81d"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a96302794ae5a73add0a44d3154f8b81d"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a96302794ae5a73add0a44d3154f8b81d">Bitmask_HighN</a> (plUInt32 uiNumBitsToSet)</td></tr>
<tr class="memdesc:a96302794ae5a73add0a44d3154f8b81d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a bitmask in which the high N bits are set. For example for N=5, this would be '1111 1000 ... 0000'.  <br /></td></tr>
<tr class="separator:a96302794ae5a73add0a44d3154f8b81d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a799ad695892f1af4ab90c6af39b6ac4f" id="r_a799ad695892f1af4ab90c6af39b6ac4f"><td class="memTemplParams" colspan="2"><a id="a799ad695892f1af4ab90c6af39b6ac4f" name="a799ad695892f1af4ab90c6af39b6ac4f"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a799ad695892f1af4ab90c6af39b6ac4f"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Swap</b> (T &amp;ref_f1, T &amp;ref_f2)</td></tr>
<tr class="memdesc:a799ad695892f1af4ab90c6af39b6ac4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Swaps the values in the two variables f1 and f2. <br /></td></tr>
<tr class="separator:a799ad695892f1af4ab90c6af39b6ac4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad699203ca7d266f82c07775ea3dbb2f2" id="r_ad699203ca7d266f82c07775ea3dbb2f2"><td class="memTemplParams" colspan="2"><a id="ad699203ca7d266f82c07775ea3dbb2f2" name="ad699203ca7d266f82c07775ea3dbb2f2"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ad699203ca7d266f82c07775ea3dbb2f2"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Lerp</b> (T f1, T f2, float fFactor)</td></tr>
<tr class="memdesc:ad699203ca7d266f82c07775ea3dbb2f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1. <br /></td></tr>
<tr class="separator:ad699203ca7d266f82c07775ea3dbb2f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab253bcbb48f93671d91a003a63f149a1" id="r_ab253bcbb48f93671d91a003a63f149a1"><td class="memTemplParams" colspan="2"><a id="ab253bcbb48f93671d91a003a63f149a1" name="ab253bcbb48f93671d91a003a63f149a1"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ab253bcbb48f93671d91a003a63f149a1"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Lerp</b> (T f1, T f2, double fFactor)</td></tr>
<tr class="memdesc:ab253bcbb48f93671d91a003a63f149a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1. <br /></td></tr>
<tr class="separator:ab253bcbb48f93671d91a003a63f149a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1745deb3a7e48a6eb963b0fd8bd1541a" id="r_a1745deb3a7e48a6eb963b0fd8bd1541a"><td class="memTemplParams" colspan="2"><a id="a1745deb3a7e48a6eb963b0fd8bd1541a" name="a1745deb3a7e48a6eb963b0fd8bd1541a"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a1745deb3a7e48a6eb963b0fd8bd1541a"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Unlerp</b> (T fMin, T fMax, T fValue)</td></tr>
<tr class="memdesc:a1745deb3a7e48a6eb963b0fd8bd1541a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the interpolation factor such that Lerp(fMin, fMax, factor) == fValue. <br /></td></tr>
<tr class="separator:a1745deb3a7e48a6eb963b0fd8bd1541a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b403276c0ac84e0bd846d36289fad95" id="r_a2b403276c0ac84e0bd846d36289fad95"><td class="memTemplParams" colspan="2"><a id="a2b403276c0ac84e0bd846d36289fad95" name="a2b403276c0ac84e0bd846d36289fad95"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a2b403276c0ac84e0bd846d36289fad95"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Step</b> (T value, T edge)</td></tr>
<tr class="memdesc:a2b403276c0ac84e0bd846d36289fad95"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 0, if value &lt; edge, and 1, if value &gt;= edge. <br /></td></tr>
<tr class="separator:a2b403276c0ac84e0bd846d36289fad95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4cab8eac68ab0cf7f621d8beefbee6d6" id="r_a4cab8eac68ab0cf7f621d8beefbee6d6"><td class="memItemLeft" align="right" valign="top"><a id="a4cab8eac68ab0cf7f621d8beefbee6d6" name="a4cab8eac68ab0cf7f621d8beefbee6d6"></a>
PL_FOUNDATION_DLL bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsPowerOf</b> (plInt32 value, plInt32 iBase)</td></tr>
<tr class="memdesc:a4cab8eac68ab0cf7f621d8beefbee6d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if there exists some x with base^x == value. <br /></td></tr>
<tr class="separator:a4cab8eac68ab0cf7f621d8beefbee6d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9250e48f91873561d8126090d7b66ee9" id="r_a9250e48f91873561d8126090d7b66ee9"><td class="memItemLeft" align="right" valign="top"><a id="a9250e48f91873561d8126090d7b66ee9" name="a9250e48f91873561d8126090d7b66ee9"></a>
PL_FOUNDATION_DLL plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>PowerOfTwo_Floor</b> (plUInt32 value)</td></tr>
<tr class="memdesc:a9250e48f91873561d8126090d7b66ee9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next power-of-two that is &lt;= value. <br /></td></tr>
<tr class="separator:a9250e48f91873561d8126090d7b66ee9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa51866ea4011f231482df25aa7deda6" id="r_afa51866ea4011f231482df25aa7deda6"><td class="memItemLeft" align="right" valign="top"><a id="afa51866ea4011f231482df25aa7deda6" name="afa51866ea4011f231482df25aa7deda6"></a>
PL_FOUNDATION_DLL plUInt64&#160;</td><td class="memItemRight" valign="bottom"><b>PowerOfTwo_Floor</b> (plUInt64 value)</td></tr>
<tr class="memdesc:afa51866ea4011f231482df25aa7deda6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next power-of-two that is &lt;= value. <br /></td></tr>
<tr class="separator:afa51866ea4011f231482df25aa7deda6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae161b5862a17d95f7cc0011351ffe798" id="r_ae161b5862a17d95f7cc0011351ffe798"><td class="memItemLeft" align="right" valign="top"><a id="ae161b5862a17d95f7cc0011351ffe798" name="ae161b5862a17d95f7cc0011351ffe798"></a>
PL_FOUNDATION_DLL plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>PowerOfTwo_Ceil</b> (plUInt32 value)</td></tr>
<tr class="memdesc:ae161b5862a17d95f7cc0011351ffe798"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next power-of-two that is &gt;= value. <br /></td></tr>
<tr class="separator:ae161b5862a17d95f7cc0011351ffe798"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e45f4816f7ed58043ec381f4ddc82b7" id="r_a0e45f4816f7ed58043ec381f4ddc82b7"><td class="memItemLeft" align="right" valign="top"><a id="a0e45f4816f7ed58043ec381f4ddc82b7" name="a0e45f4816f7ed58043ec381f4ddc82b7"></a>
PL_FOUNDATION_DLL plUInt64&#160;</td><td class="memItemRight" valign="bottom"><b>PowerOfTwo_Ceil</b> (plUInt64 value)</td></tr>
<tr class="memdesc:a0e45f4816f7ed58043ec381f4ddc82b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next power-of-two that is &gt;= value. <br /></td></tr>
<tr class="separator:a0e45f4816f7ed58043ec381f4ddc82b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2525000156b1f0d071e7cb46808a94e0" id="r_a2525000156b1f0d071e7cb46808a94e0"><td class="memItemLeft" align="right" valign="top"><a id="a2525000156b1f0d071e7cb46808a94e0" name="a2525000156b1f0d071e7cb46808a94e0"></a>
PL_FOUNDATION_DLL plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GreatestCommonDivisor</b> (plUInt32 a, plUInt32 b)</td></tr>
<tr class="memdesc:a2525000156b1f0d071e7cb46808a94e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the greatest common divisor. <br /></td></tr>
<tr class="separator:a2525000156b1f0d071e7cb46808a94e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03c7d2cff6b57d914e5bf082bf8fad98" id="r_a03c7d2cff6b57d914e5bf082bf8fad98"><td class="memItemLeft" align="right" valign="top"><a id="a03c7d2cff6b57d914e5bf082bf8fad98" name="a03c7d2cff6b57d914e5bf082bf8fad98"></a>
PL_FOUNDATION_DLL <a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><b>TryMultiply32</b> (plUInt32 &amp;out_uiResult, plUInt32 a, plUInt32 b, plUInt32 c=1, plUInt32 d=1)</td></tr>
<tr class="memdesc:a03c7d2cff6b57d914e5bf082bf8fad98"><td class="mdescLeft">&#160;</td><td class="mdescRight">out_Result = <em>a</em> * <em>b</em>. If an overflow happens, PL_FAILURE is returned. <br /></td></tr>
<tr class="separator:a03c7d2cff6b57d914e5bf082bf8fad98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6a0264a015d3aa5c4fe8cfdafb0791a" id="r_af6a0264a015d3aa5c4fe8cfdafb0791a"><td class="memItemLeft" align="right" valign="top"><a id="af6a0264a015d3aa5c4fe8cfdafb0791a" name="af6a0264a015d3aa5c4fe8cfdafb0791a"></a>
PL_FOUNDATION_DLL plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>SafeMultiply32</b> (plUInt32 a, plUInt32 b, plUInt32 c=1, plUInt32 d=1)</td></tr>
<tr class="memdesc:af6a0264a015d3aa5c4fe8cfdafb0791a"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns <em>a</em> * <em>b</em>. If an overflow happens, the program is terminated. <br /></td></tr>
<tr class="separator:af6a0264a015d3aa5c4fe8cfdafb0791a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5117cb9b4940f721a3446111953cd43d" id="r_a5117cb9b4940f721a3446111953cd43d"><td class="memItemLeft" align="right" valign="top"><a id="a5117cb9b4940f721a3446111953cd43d" name="a5117cb9b4940f721a3446111953cd43d"></a>
PL_FOUNDATION_DLL <a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><b>TryMultiply64</b> (plUInt64 &amp;out_uiResult, plUInt64 a, plUInt64 b, plUInt64 c=1, plUInt64 d=1)</td></tr>
<tr class="memdesc:a5117cb9b4940f721a3446111953cd43d"><td class="mdescLeft">&#160;</td><td class="mdescRight">out_Result = <em>a</em> * <em>b</em>. If an overflow happens, PL_FAILURE is returned. <br /></td></tr>
<tr class="separator:a5117cb9b4940f721a3446111953cd43d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00334dd03f3d352cf3b0a617e0a40016" id="r_a00334dd03f3d352cf3b0a617e0a40016"><td class="memItemLeft" align="right" valign="top"><a id="a00334dd03f3d352cf3b0a617e0a40016" name="a00334dd03f3d352cf3b0a617e0a40016"></a>
PL_FOUNDATION_DLL plUInt64&#160;</td><td class="memItemRight" valign="bottom"><b>SafeMultiply64</b> (plUInt64 a, plUInt64 b, plUInt64 c=1, plUInt64 d=1)</td></tr>
<tr class="memdesc:a00334dd03f3d352cf3b0a617e0a40016"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns <em>a</em> * <em>b</em>. If an overflow happens, the program is terminated. <br /></td></tr>
<tr class="separator:a00334dd03f3d352cf3b0a617e0a40016"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4d40297dae8b10147595d88400a785e" id="r_ac4d40297dae8b10147595d88400a785e"><td class="memItemLeft" align="right" valign="top"><a id="ac4d40297dae8b10147595d88400a785e" name="ac4d40297dae8b10147595d88400a785e"></a>
<a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><b>TryConvertToSizeT</b> (size_t &amp;out_uiResult, plUInt64 uiValue)</td></tr>
<tr class="memdesc:ac4d40297dae8b10147595d88400a785e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given 64bit value actually fits into size_t, If it doesn't PL_FAILURE is returned. <br /></td></tr>
<tr class="separator:ac4d40297dae8b10147595d88400a785e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80257a94c132df487cfdc93fefa72644" id="r_a80257a94c132df487cfdc93fefa72644"><td class="memItemLeft" align="right" valign="top"><a id="a80257a94c132df487cfdc93fefa72644" name="a80257a94c132df487cfdc93fefa72644"></a>
PL_FOUNDATION_DLL size_t&#160;</td><td class="memItemRight" valign="bottom"><b>SafeConvertToSizeT</b> (plUInt64 uiValue)</td></tr>
<tr class="memdesc:a80257a94c132df487cfdc93fefa72644"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given 64bit value actually fits into size_t, If it doesn't the program is terminated. <br /></td></tr>
<tr class="separator:a80257a94c132df487cfdc93fefa72644"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a039e0900027555ec0dc4aeb59d47da4e" id="r_a039e0900027555ec0dc4aeb59d47da4e"><td class="memItemLeft" align="right" valign="top"><a id="a039e0900027555ec0dc4aeb59d47da4e" name="a039e0900027555ec0dc4aeb59d47da4e"></a>
PL_FOUNDATION_DLL float&#160;</td><td class="memItemRight" valign="bottom"><b>ReplaceNaN</b> (float fValue, float fFallback)</td></tr>
<tr class="memdesc:a039e0900027555ec0dc4aeb59d47da4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">If 'value' is not-a-number (NaN) 'fallback' is returned, otherwise 'value' is passed through unmodified. <br /></td></tr>
<tr class="separator:a039e0900027555ec0dc4aeb59d47da4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d01ab7ebca71f0a44c548e31124fef7" id="r_a6d01ab7ebca71f0a44c548e31124fef7"><td class="memItemLeft" align="right" valign="top"><a id="a6d01ab7ebca71f0a44c548e31124fef7" name="a6d01ab7ebca71f0a44c548e31124fef7"></a>
PL_FOUNDATION_DLL double&#160;</td><td class="memItemRight" valign="bottom"><b>ReplaceNaN</b> (double fValue, double fFallback)</td></tr>
<tr class="memdesc:a6d01ab7ebca71f0a44c548e31124fef7"><td class="mdescLeft">&#160;</td><td class="mdescRight">If 'value' is not-a-number (NaN) 'fallback' is returned, otherwise 'value' is passed through unmodified. <br /></td></tr>
<tr class="separator:a6d01ab7ebca71f0a44c548e31124fef7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2300fed59ced4ac082df00ca51e6439e" id="r_a2300fed59ced4ac082df00ca51e6439e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/d4c/classpl_variant.htm">plVariant</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2300fed59ced4ac082df00ca51e6439e">Lerp</a> (const <a class="el" href="../../da/d4c/classpl_variant.htm">plVariant</a> &amp;a, const <a class="el" href="../../da/d4c/classpl_variant.htm">plVariant</a> &amp;b, double fFactor)</td></tr>
<tr class="memdesc:a2300fed59ced4ac082df00ca51e6439e"><td class="mdescLeft">&#160;</td><td class="mdescRight">An overload of <a class="el" href="#a2898309268211acdbebb498a1f03ce01" title="Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1.">plMath::Lerp</a> to interpolate variants. A and b must have the same type.  <br /></td></tr>
<tr class="separator:a2300fed59ced4ac082df00ca51e6439e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This namespace provides common math-functionality as functions. </p>
<p>It is a namespace, instead of a static class, because that allows it to be extended at other locations, which is especially useful when adding custom types. </p>
</div><h2 class="groupheader">Function Documentation</h2>
<a id="ae9a3bfad84627afef5616665eecd65e4" name="ae9a3bfad84627afef5616665eecd65e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9a3bfad84627afef5616665eecd65e4">&#9670;&#160;</a></span>Bitmask_HighN() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">PL_ALWAYS_INLINE Type plMath::Bitmask_HighN </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiNumBitsToSet</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a bitmask in which the high N bits are set. For example for N=5, this would be '1111 1000 ... 0000'. </p>
<p>For N &gt;= 32 all bits will be set. </p>

</div>
</div>
<a id="a96302794ae5a73add0a44d3154f8b81d" name="a96302794ae5a73add0a44d3154f8b81d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a96302794ae5a73add0a44d3154f8b81d">&#9670;&#160;</a></span>Bitmask_HighN() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Type plMath::Bitmask_HighN </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiNumBitsToSet</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a bitmask in which the high N bits are set. For example for N=5, this would be '1111 1000 ... 0000'. </p>
<p>For N &gt;= 32 all bits will be set. </p>

</div>
</div>
<a id="aa3bba00206eaca76b20bb1e131f27138" name="aa3bba00206eaca76b20bb1e131f27138"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3bba00206eaca76b20bb1e131f27138">&#9670;&#160;</a></span>Bitmask_LowN() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">PL_ALWAYS_INLINE Type plMath::Bitmask_LowN </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiNumBitsToSet</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a bitmask in which the low N bits are set. For example for N=5, this would be '0000 ... 0001 1111'. </p>
<p>For N &gt;= 32 all bits will be set. </p>

</div>
</div>
<a id="a38f8270fe0d3d8507508a620f153407d" name="a38f8270fe0d3d8507508a620f153407d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38f8270fe0d3d8507508a620f153407d">&#9670;&#160;</a></span>Bitmask_LowN() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Type plMath::Bitmask_LowN </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiNumBitsToSet</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a bitmask in which the low N bits are set. For example for N=5, this would be '0000 ... 0001 1111'. </p>
<p>For N &gt;= 32 all bits will be set. </p>

</div>
</div>
<a id="aa6141bbf80704bdc6ba5a0df73d6e25d" name="aa6141bbf80704bdc6ba5a0df73d6e25d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6141bbf80704bdc6ba5a0df73d6e25d">&#9670;&#160;</a></span>CountLeadingZeros()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">plUInt32 plMath::CountLeadingZeros </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiBitmask</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Returns the number of zeros at the start (most significant part) of a bitmask.</p>
<p>E.g. 0b0111 -&gt; 29 0b0011 -&gt; 30 0b0001 -&gt; 31 0b0000 -&gt; 32 Returns 32 when the input is 0 </p>

</div>
</div>
<a id="add691d49a4f270dc22fb918d8ba1ca4f" name="add691d49a4f270dc22fb918d8ba1ca4f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add691d49a4f270dc22fb918d8ba1ca4f">&#9670;&#160;</a></span>CountTrailingZeros()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">plUInt32 plMath::CountTrailingZeros </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiBitmask</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Returns the number of zeros at the end (least significant part) of a bitmask.</p>
<p>E.g. 0b0111 -&gt; 0 0b0110 -&gt; 1 0b0100 -&gt; 2 Returns 32 when the input is 0 </p>

</div>
</div>
<a id="a4daf0d43b398a7ff4083833b579bb2fc" name="a4daf0d43b398a7ff4083833b579bb2fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4daf0d43b398a7ff4083833b579bb2fc">&#9670;&#160;</a></span>FirstBitHigh() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">plUInt32 plMath::FirstBitHigh </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiBitmask</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the index of the most significant bit set. </p>
<p>Asserts that bitmask is not 0. </p>

</div>
</div>
<a id="ab25cfddd4495b3bd6c92fd8f0cff878b" name="ab25cfddd4495b3bd6c92fd8f0cff878b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab25cfddd4495b3bd6c92fd8f0cff878b">&#9670;&#160;</a></span>FirstBitHigh() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">plUInt32 plMath::FirstBitHigh </td>
          <td>(</td>
          <td class="paramtype">plUInt64</td>          <td class="paramname"><span class="paramname"><em>uiBitmask</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the index of the most significant bit set. </p>
<p>Asserts that bitmask is not 0. </p>

</div>
</div>
<a id="a77a11d9b4e7665621cad426a72f7dca0" name="a77a11d9b4e7665621cad426a72f7dca0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77a11d9b4e7665621cad426a72f7dca0">&#9670;&#160;</a></span>FirstBitLow() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">plUInt32 plMath::FirstBitLow </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiBitmask</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the index of the least significant bit set. </p>
<p>Asserts that bitmask is not 0. </p>

</div>
</div>
<a id="a387b958909e087e206b7d217f8005187" name="a387b958909e087e206b7d217f8005187"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a387b958909e087e206b7d217f8005187">&#9670;&#160;</a></span>FirstBitLow() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">plUInt32 plMath::FirstBitLow </td>
          <td>(</td>
          <td class="paramtype">plUInt64</td>          <td class="paramname"><span class="paramname"><em>uiBitmask</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the index of the least significant bit set. </p>
<p>Asserts that bitmask is not 0. </p>

</div>
</div>
<a id="a55bf4d35ddb68043f06dcffcd25b12cf" name="a55bf4d35ddb68043f06dcffcd25b12cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55bf4d35ddb68043f06dcffcd25b12cf">&#9670;&#160;</a></span>FloatToInt() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">PL_FORCE_INLINE plInt64 plMath::FloatToInt </td>
          <td>(</td>
          <td class="paramtype">double</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Casts the float to an integer, removes the fractional part. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="#ab7dd8470053b49d34d72fe1eb0d2ab61" title="Returns the integer-part of f (removes the fraction).">Trunc</a>, <a class="el" href="#a376dececaac1fe979ae20f82fec9018d" title="Rounds f to the next integer.">Round</a>, Floor, Ceil </dd></dl>

</div>
</div>
<a id="a14dcb5c08839e1246369028c1547434f" name="a14dcb5c08839e1246369028c1547434f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a14dcb5c08839e1246369028c1547434f">&#9670;&#160;</a></span>FloatToInt() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">PL_FORCE_INLINE plInt32 plMath::FloatToInt </td>
          <td>(</td>
          <td class="paramtype">float</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Casts the float to an integer, removes the fractional part. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="#ab7dd8470053b49d34d72fe1eb0d2ab61" title="Returns the integer-part of f (removes the fraction).">Trunc</a>, <a class="el" href="#a376dececaac1fe979ae20f82fec9018d" title="Rounds f to the next integer.">Round</a>, Floor, Ceil </dd></dl>

</div>
</div>
<a id="a69a55424bb6b2056e729d877d5ac3394" name="a69a55424bb6b2056e729d877d5ac3394"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69a55424bb6b2056e729d877d5ac3394">&#9670;&#160;</a></span>HighValue()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">TYPE plMath::HighValue </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A very large value, that is slightly smaller than sqrt(MaxValue()). </p>
<p>Useful to default initialize values, that may get squared in subsequent operations. </p>

</div>
</div>
<a id="a2300fed59ced4ac082df00ca51e6439e" name="a2300fed59ced4ac082df00ca51e6439e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2300fed59ced4ac082df00ca51e6439e">&#9670;&#160;</a></span>Lerp()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">PL_FOUNDATION_DLL <a class="el" href="../../da/d4c/classpl_variant.htm">plVariant</a> plMath::Lerp </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/d4c/classpl_variant.htm">plVariant</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>a</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../da/d4c/classpl_variant.htm">plVariant</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>b</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double</td>          <td class="paramname"><span class="paramname"><em>fFactor</em></span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>An overload of <a class="el" href="#a2898309268211acdbebb498a1f03ce01" title="Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1.">plMath::Lerp</a> to interpolate variants. A and b must have the same type. </p>
<p>If the type can't be interpolated like e.g. strings, a is returned for a fFactor less than 0.5, b is returned for a fFactor greater or equal to 0.5. </p>

</div>
</div>
<a id="a7452a7f2b15201705625a7cb78723a98" name="a7452a7f2b15201705625a7cb78723a98"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7452a7f2b15201705625a7cb78723a98">&#9670;&#160;</a></span>NaN()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">TYPE plMath::NaN </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the value for NaN as the template type. Returns zero, if the type does not support NaN. </p>
<p>Do not use this for comparisons, it will fail. Use it to initialize data (e.g. in debug builds), to detect uninitialized variables. Use the function IsNaN() to check whether a value is not a number. </p>

</div>
</div>
<a id="a376dececaac1fe979ae20f82fec9018d" name="a376dececaac1fe979ae20f82fec9018d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a376dececaac1fe979ae20f82fec9018d">&#9670;&#160;</a></span>Round() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double plMath::Round </td>
          <td>(</td>
          <td class="paramtype">double</td>          <td class="paramname"><span class="paramname"><em>f</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Rounds f to the next integer. </p>
<p>If f is positive 0.5 is rounded UP (i.e. to 1), if f is negative, -0.5 is rounded DOWN (i.e. to -1). </p>

</div>
</div>
<a id="a93579039ff86b606fc729b4b9fec22b4" name="a93579039ff86b606fc729b4b9fec22b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a93579039ff86b606fc729b4b9fec22b4">&#9670;&#160;</a></span>Round() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float plMath::Round </td>
          <td>(</td>
          <td class="paramtype">float</td>          <td class="paramname"><span class="paramname"><em>f</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Rounds f to the next integer. </p>
<p>If f is positive 0.5 is rounded UP (i.e. to 1), if f is negative, -0.5 is rounded DOWN (i.e. to -1). </p>

</div>
</div>
<a id="a3c10f39a9283445ab6001096104bb153" name="a3c10f39a9283445ab6001096104bb153"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c10f39a9283445ab6001096104bb153">&#9670;&#160;</a></span>Sin()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float plMath::Sin </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d4/dfd/classpl_angle.htm">plAngle</a></td>          <td class="paramname"><span class="paramname"><em>a</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">nodiscard</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>***** Trigonometric Functions ***** </p>
<p>Takes an angle, returns its sine </p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d1/dbc/namespacepl_math.htm">plMath</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
