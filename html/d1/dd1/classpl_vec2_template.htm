<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>plEngine: plVec2Template&lt; Type &gt; Class Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only-darkmode-toggle.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">plEngine<span id="projectnumber">&#160;Release 2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d1/dd1/classpl_vec2_template.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="../../db/d92/classpl_vec2_template-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plVec2Template&lt; Type &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p>A 2-component vector class.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d1/d8e/_vec2_8h_source.htm">Vec2.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a2b83e044b2d175ca02db1df4ca64c996" id="r_a2b83e044b2d175ca02db1df4ca64c996"><td class="memItemLeft" align="right" valign="top"><a id="a2b83e044b2d175ca02db1df4ca64c996" name="a2b83e044b2d175ca02db1df4ca64c996"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>ComponentType</b> = Type</td></tr>
<tr class="separator:a2b83e044b2d175ca02db1df4ca64c996"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a6f4cac6709ee6f4bd6447a4a7abc5c9f" id="r_a6f4cac6709ee6f4bd6447a4a7abc5c9f"><td class="memItemLeft" align="right" valign="top"><a id="a6f4cac6709ee6f4bd6447a4a7abc5c9f" name="a6f4cac6709ee6f4bd6447a4a7abc5c9f"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>PL_DECLARE_POD_TYPE</b> ()</td></tr>
<tr class="separator:a6f4cac6709ee6f4bd6447a4a7abc5c9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6db14a374f79d188d6975a8233bf4f8" id="r_ab6db14a374f79d188d6975a8233bf4f8"><td class="memItemLeft" align="right" valign="top"><a id="ab6db14a374f79d188d6975a8233bf4f8" name="ab6db14a374f79d188d6975a8233bf4f8"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plVec2Template</b> ()</td></tr>
<tr class="memdesc:ab6db14a374f79d188d6975a8233bf4f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">default-constructed vector is uninitialized (for speed) <br /></td></tr>
<tr class="separator:ab6db14a374f79d188d6975a8233bf4f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b8717a5e4a1701347da154647d87b90" id="r_a7b8717a5e4a1701347da154647d87b90"><td class="memItemLeft" align="right" valign="top"><a id="a7b8717a5e4a1701347da154647d87b90" name="a7b8717a5e4a1701347da154647d87b90"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plVec2Template</b> (Type x, Type y)</td></tr>
<tr class="memdesc:a7b8717a5e4a1701347da154647d87b90"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the vector with x,y. <br /></td></tr>
<tr class="separator:a7b8717a5e4a1701347da154647d87b90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1755dd13d11397e40d3db60ebb25e6ef" id="r_a1755dd13d11397e40d3db60ebb25e6ef"><td class="memItemLeft" align="right" valign="top"><a id="a1755dd13d11397e40d3db60ebb25e6ef" name="a1755dd13d11397e40d3db60ebb25e6ef"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plVec2Template</b> (Type v)</td></tr>
<tr class="memdesc:a1755dd13d11397e40d3db60ebb25e6ef"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes all components with xy. <br /></td></tr>
<tr class="separator:a1755dd13d11397e40d3db60ebb25e6ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c38bf3c87db4d01dc1830b8c2aafe8f" id="r_a3c38bf3c87db4d01dc1830b8c2aafe8f"><td class="memItemLeft" align="right" valign="top"><a id="a3c38bf3c87db4d01dc1830b8c2aafe8f" name="a3c38bf3c87db4d01dc1830b8c2aafe8f"></a>
const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>GetAsVec3</b> (Type z) const</td></tr>
<tr class="memdesc:a3c38bf3c87db4d01dc1830b8c2aafe8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an <a class="el" href="../../df/d1f/classpl_vec3_template.htm" title="A 3-component vector class.">plVec3Template</a> with x,y from this vector and z set by the parameter. <br /></td></tr>
<tr class="separator:a3c38bf3c87db4d01dc1830b8c2aafe8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a421992f56792f5f13a3712100ca31884" id="r_a421992f56792f5f13a3712100ca31884"><td class="memItemLeft" align="right" valign="top"><a id="a421992f56792f5f13a3712100ca31884" name="a421992f56792f5f13a3712100ca31884"></a>
const <a class="el" href="../../d1/d4b/classpl_vec4_template.htm">plVec4Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>GetAsVec4</b> (Type z, Type w) const</td></tr>
<tr class="memdesc:a421992f56792f5f13a3712100ca31884"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an <a class="el" href="../../d1/d4b/classpl_vec4_template.htm" title="A 4-component vector class.">plVec4Template</a> with x,y from this vector and z and w set by the parameters. <br /></td></tr>
<tr class="separator:a421992f56792f5f13a3712100ca31884"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0edecf8fc41be773adc6460dac15191" id="r_af0edecf8fc41be773adc6460dac15191"><td class="memItemLeft" align="right" valign="top"><a id="af0edecf8fc41be773adc6460dac15191" name="af0edecf8fc41be773adc6460dac15191"></a>
const Type *&#160;</td><td class="memItemRight" valign="bottom"><b>GetData</b> () const</td></tr>
<tr class="memdesc:af0edecf8fc41be773adc6460dac15191"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the data as an array. <br /></td></tr>
<tr class="separator:af0edecf8fc41be773adc6460dac15191"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76d1f5ef99f2d273162cb5cbe3e37f7c" id="r_a76d1f5ef99f2d273162cb5cbe3e37f7c"><td class="memItemLeft" align="right" valign="top"><a id="a76d1f5ef99f2d273162cb5cbe3e37f7c" name="a76d1f5ef99f2d273162cb5cbe3e37f7c"></a>
Type *&#160;</td><td class="memItemRight" valign="bottom"><b>GetData</b> ()</td></tr>
<tr class="memdesc:a76d1f5ef99f2d273162cb5cbe3e37f7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the data as an array. <br /></td></tr>
<tr class="separator:a76d1f5ef99f2d273162cb5cbe3e37f7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d4541092348cd65fc9d3211c33075d3" id="r_a3d4541092348cd65fc9d3211c33075d3"><td class="memItemLeft" align="right" valign="top"><a id="a3d4541092348cd65fc9d3211c33075d3" name="a3d4541092348cd65fc9d3211c33075d3"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Set</b> (Type xy)</td></tr>
<tr class="memdesc:a3d4541092348cd65fc9d3211c33075d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets all components to this value. <br /></td></tr>
<tr class="separator:a3d4541092348cd65fc9d3211c33075d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdba413c4e0ae23e8fd497f3601ddc43" id="r_afdba413c4e0ae23e8fd497f3601ddc43"><td class="memItemLeft" align="right" valign="top"><a id="afdba413c4e0ae23e8fd497f3601ddc43" name="afdba413c4e0ae23e8fd497f3601ddc43"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Set</b> (Type x, Type y)</td></tr>
<tr class="memdesc:afdba413c4e0ae23e8fd497f3601ddc43"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the vector to these values. <br /></td></tr>
<tr class="separator:afdba413c4e0ae23e8fd497f3601ddc43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a520b49746db2cbc020b3ce36a65fa26a" id="r_a520b49746db2cbc020b3ce36a65fa26a"><td class="memItemLeft" align="right" valign="top"><a id="a520b49746db2cbc020b3ce36a65fa26a" name="a520b49746db2cbc020b3ce36a65fa26a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetZero</b> ()</td></tr>
<tr class="memdesc:a520b49746db2cbc020b3ce36a65fa26a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the vector to all zero. <br /></td></tr>
<tr class="separator:a520b49746db2cbc020b3ce36a65fa26a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a298e3e69c8ece3e985ee46774e24a838" id="r_a298e3e69c8ece3e985ee46774e24a838"><td class="memItemLeft" align="right" valign="top"><a id="a298e3e69c8ece3e985ee46774e24a838" name="a298e3e69c8ece3e985ee46774e24a838"></a>
PL_DECLARE_IF_FLOAT_TYPE Type&#160;</td><td class="memItemRight" valign="bottom"><b>GetLength</b> () const</td></tr>
<tr class="memdesc:a298e3e69c8ece3e985ee46774e24a838"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the length of the vector. <br /></td></tr>
<tr class="separator:a298e3e69c8ece3e985ee46774e24a838"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad556353aad696dde88a48e62d4245c3a" id="r_ad556353aad696dde88a48e62d4245c3a"><td class="memItemLeft" align="right" valign="top"><a id="ad556353aad696dde88a48e62d4245c3a" name="ad556353aad696dde88a48e62d4245c3a"></a>
PL_DECLARE_IF_FLOAT_TYPE <a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><b>SetLength</b> (Type fNewLength, Type fEpsilon=plMath::DefaultEpsilon&lt; Type &gt;())</td></tr>
<tr class="memdesc:ad556353aad696dde88a48e62d4245c3a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tries to rescale the vector to the given length. If the vector is too close to zero, PL_FAILURE is returned and the vector is set to zero. <br /></td></tr>
<tr class="separator:ad556353aad696dde88a48e62d4245c3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad772dc852440d1bf9bfdbdbbd6b19585" id="r_ad772dc852440d1bf9bfdbdbbd6b19585"><td class="memItemLeft" align="right" valign="top"><a id="ad772dc852440d1bf9bfdbdbbd6b19585" name="ad772dc852440d1bf9bfdbdbbd6b19585"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><b>GetLengthSquared</b> () const</td></tr>
<tr class="memdesc:ad772dc852440d1bf9bfdbdbbd6b19585"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the squared length. Faster, since no square-root is taken. Useful, if one only wants to compare the lengths of two vectors. <br /></td></tr>
<tr class="separator:ad772dc852440d1bf9bfdbdbbd6b19585"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4607d8873a35cb1719878b2b2849e3d" id="r_ac4607d8873a35cb1719878b2b2849e3d"><td class="memItemLeft" align="right" valign="top"><a id="ac4607d8873a35cb1719878b2b2849e3d" name="ac4607d8873a35cb1719878b2b2849e3d"></a>
PL_DECLARE_IF_FLOAT_TYPE Type&#160;</td><td class="memItemRight" valign="bottom"><b>GetLengthAndNormalize</b> ()</td></tr>
<tr class="memdesc:ac4607d8873a35cb1719878b2b2849e3d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Normalizes this vector and returns its previous length in one operation. More efficient than calling GetLength and then Normalize. <br /></td></tr>
<tr class="separator:ac4607d8873a35cb1719878b2b2849e3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8453e711e79c7580d00a602397ff467a" id="r_a8453e711e79c7580d00a602397ff467a"><td class="memItemLeft" align="right" valign="top"><a id="a8453e711e79c7580d00a602397ff467a" name="a8453e711e79c7580d00a602397ff467a"></a>
PL_DECLARE_IF_FLOAT_TYPE const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>GetNormalized</b> () const</td></tr>
<tr class="memdesc:a8453e711e79c7580d00a602397ff467a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a normalized version of this vector, leaves the vector itself unchanged. <br /></td></tr>
<tr class="separator:a8453e711e79c7580d00a602397ff467a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a873792d799aa8c86987cf2d10ed6ff94" id="r_a873792d799aa8c86987cf2d10ed6ff94"><td class="memItemLeft" align="right" valign="top"><a id="a873792d799aa8c86987cf2d10ed6ff94" name="a873792d799aa8c86987cf2d10ed6ff94"></a>
PL_DECLARE_IF_FLOAT_TYPE void&#160;</td><td class="memItemRight" valign="bottom"><b>Normalize</b> ()</td></tr>
<tr class="memdesc:a873792d799aa8c86987cf2d10ed6ff94"><td class="mdescLeft">&#160;</td><td class="mdescRight">Normalizes this vector. <br /></td></tr>
<tr class="separator:a873792d799aa8c86987cf2d10ed6ff94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a991a3a38116cb76cebbd64a048779b23" id="r_a991a3a38116cb76cebbd64a048779b23"><td class="memItemLeft" align="right" valign="top"><a id="a991a3a38116cb76cebbd64a048779b23" name="a991a3a38116cb76cebbd64a048779b23"></a>
PL_DECLARE_IF_FLOAT_TYPE <a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><b>NormalizeIfNotZero</b> (const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt; &amp;vFallback=<a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt;(1, 0), Type fEpsilon=plMath::DefaultEpsilon&lt; Type &gt;())</td></tr>
<tr class="memdesc:a991a3a38116cb76cebbd64a048779b23"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tries to normalize this vector. If the vector is too close to zero, PL_FAILURE is returned and the vector is set to the given fallback value. <br /></td></tr>
<tr class="separator:a991a3a38116cb76cebbd64a048779b23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3bf3078685a8b692ccadc2c63841001" id="r_aa3bf3078685a8b692ccadc2c63841001"><td class="memItemLeft" align="right" valign="top"><a id="aa3bf3078685a8b692ccadc2c63841001" name="aa3bf3078685a8b692ccadc2c63841001"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsZero</b> () const</td></tr>
<tr class="memdesc:aa3bf3078685a8b692ccadc2c63841001"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns, whether this vector is (0, 0). <br /></td></tr>
<tr class="separator:aa3bf3078685a8b692ccadc2c63841001"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a325ac5e5c2f0fd0690af56a362516b5c" id="r_a325ac5e5c2f0fd0690af56a362516b5c"><td class="memItemLeft" align="right" valign="top"><a id="a325ac5e5c2f0fd0690af56a362516b5c" name="a325ac5e5c2f0fd0690af56a362516b5c"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsZero</b> (Type fEpsilon) const</td></tr>
<tr class="memdesc:a325ac5e5c2f0fd0690af56a362516b5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns, whether this vector is (0, 0) within a certain threshold. <br /></td></tr>
<tr class="separator:a325ac5e5c2f0fd0690af56a362516b5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac9846d96ecda0045dee4306f7fd775b" id="r_aac9846d96ecda0045dee4306f7fd775b"><td class="memItemLeft" align="right" valign="top">PL_DECLARE_IF_FLOAT_TYPE bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aac9846d96ecda0045dee4306f7fd775b">IsNormalized</a> (Type fEpsilon=plMath::HugeEpsilon&lt; Type &gt;()) const</td></tr>
<tr class="memdesc:aac9846d96ecda0045dee4306f7fd775b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns, whether the squared length of this vector is between 0.999f and 1.001f.  <br /></td></tr>
<tr class="separator:aac9846d96ecda0045dee4306f7fd775b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab41f6eafd6ae2ea5bc29f9e2d326e2bb" id="r_ab41f6eafd6ae2ea5bc29f9e2d326e2bb"><td class="memItemLeft" align="right" valign="top"><a id="ab41f6eafd6ae2ea5bc29f9e2d326e2bb" name="ab41f6eafd6ae2ea5bc29f9e2d326e2bb"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsNaN</b> () const</td></tr>
<tr class="memdesc:ab41f6eafd6ae2ea5bc29f9e2d326e2bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if any of x or y is NaN. <br /></td></tr>
<tr class="separator:ab41f6eafd6ae2ea5bc29f9e2d326e2bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a734b479872b2c442248caab002bb98d6" id="r_a734b479872b2c442248caab002bb98d6"><td class="memItemLeft" align="right" valign="top"><a id="a734b479872b2c442248caab002bb98d6" name="a734b479872b2c442248caab002bb98d6"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsValid</b> () const</td></tr>
<tr class="memdesc:a734b479872b2c442248caab002bb98d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks that all components are finite numbers. <br /></td></tr>
<tr class="separator:a734b479872b2c442248caab002bb98d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afea5028966c2ca7f7fa53319a097e2da" id="r_afea5028966c2ca7f7fa53319a097e2da"><td class="memItemLeft" align="right" valign="top"><a id="afea5028966c2ca7f7fa53319a097e2da" name="afea5028966c2ca7f7fa53319a097e2da"></a>
const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>operator-</b> () const</td></tr>
<tr class="memdesc:afea5028966c2ca7f7fa53319a097e2da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the negation of this vector. <br /></td></tr>
<tr class="separator:afea5028966c2ca7f7fa53319a097e2da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3311a3769c0318f69c417daebdb95c29" id="r_a3311a3769c0318f69c417daebdb95c29"><td class="memItemLeft" align="right" valign="top"><a id="a3311a3769c0318f69c417daebdb95c29" name="a3311a3769c0318f69c417daebdb95c29"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator+=</b> (const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt; &amp;vCc)</td></tr>
<tr class="memdesc:a3311a3769c0318f69c417daebdb95c29"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds cc component-wise to this vector. <br /></td></tr>
<tr class="separator:a3311a3769c0318f69c417daebdb95c29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a210416c425a079d4d7ac8f0a9d86f604" id="r_a210416c425a079d4d7ac8f0a9d86f604"><td class="memItemLeft" align="right" valign="top"><a id="a210416c425a079d4d7ac8f0a9d86f604" name="a210416c425a079d4d7ac8f0a9d86f604"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator-=</b> (const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt; &amp;vCc)</td></tr>
<tr class="memdesc:a210416c425a079d4d7ac8f0a9d86f604"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts cc component-wise from this vector. <br /></td></tr>
<tr class="separator:a210416c425a079d4d7ac8f0a9d86f604"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae561d4aff16e8c2344aeee7a24b4a4f5" id="r_ae561d4aff16e8c2344aeee7a24b4a4f5"><td class="memItemLeft" align="right" valign="top"><a id="ae561d4aff16e8c2344aeee7a24b4a4f5" name="ae561d4aff16e8c2344aeee7a24b4a4f5"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator*=</b> (Type f)</td></tr>
<tr class="memdesc:ae561d4aff16e8c2344aeee7a24b4a4f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies all components of this vector with f. <br /></td></tr>
<tr class="separator:ae561d4aff16e8c2344aeee7a24b4a4f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8602e3e9251f68317fc88f1e59a3294f" id="r_a8602e3e9251f68317fc88f1e59a3294f"><td class="memItemLeft" align="right" valign="top"><a id="a8602e3e9251f68317fc88f1e59a3294f" name="a8602e3e9251f68317fc88f1e59a3294f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator/=</b> (Type f)</td></tr>
<tr class="memdesc:a8602e3e9251f68317fc88f1e59a3294f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides all components of this vector by f. <br /></td></tr>
<tr class="separator:a8602e3e9251f68317fc88f1e59a3294f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c0243d5033f421d17819da1c1829eba" id="r_a9c0243d5033f421d17819da1c1829eba"><td class="memItemLeft" align="right" valign="top"><a id="a9c0243d5033f421d17819da1c1829eba" name="a9c0243d5033f421d17819da1c1829eba"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsIdentical</b> (const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a9c0243d5033f421d17819da1c1829eba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Equality Check (bitwise) <br /></td></tr>
<tr class="separator:a9c0243d5033f421d17819da1c1829eba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3e8bfd5b71f119c5e82d87dfb63fae6" id="r_af3e8bfd5b71f119c5e82d87dfb63fae6"><td class="memItemLeft" align="right" valign="top"><a id="af3e8bfd5b71f119c5e82d87dfb63fae6" name="af3e8bfd5b71f119c5e82d87dfb63fae6"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEqual</b> (const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt; &amp;rhs, Type fEpsilon) const</td></tr>
<tr class="memdesc:af3e8bfd5b71f119c5e82d87dfb63fae6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Equality Check with epsilon. <br /></td></tr>
<tr class="separator:af3e8bfd5b71f119c5e82d87dfb63fae6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b79f6adfab50cd48d34c9b26e27ba91" id="r_a0b79f6adfab50cd48d34c9b26e27ba91"><td class="memItemLeft" align="right" valign="top"><a id="a0b79f6adfab50cd48d34c9b26e27ba91" name="a0b79f6adfab50cd48d34c9b26e27ba91"></a>
<a class="el" href="../../d4/dfd/classpl_angle.htm">plAngle</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetAngleBetween</b> (const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a0b79f6adfab50cd48d34c9b26e27ba91"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the positive angle between *this and rhs. <br /></td></tr>
<tr class="separator:a0b79f6adfab50cd48d34c9b26e27ba91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3c2d034f673d91bab3f0e8f15dd5521" id="r_ab3c2d034f673d91bab3f0e8f15dd5521"><td class="memItemLeft" align="right" valign="top"><a id="ab3c2d034f673d91bab3f0e8f15dd5521" name="ab3c2d034f673d91bab3f0e8f15dd5521"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><b>Dot</b> (const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:ab3c2d034f673d91bab3f0e8f15dd5521"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the Dot-product of the two vectors (commutative, order does not matter) <br /></td></tr>
<tr class="separator:ab3c2d034f673d91bab3f0e8f15dd5521"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe1f9af38bd66656667586216832eee3" id="r_afe1f9af38bd66656667586216832eee3"><td class="memItemLeft" align="right" valign="top"><a id="afe1f9af38bd66656667586216832eee3" name="afe1f9af38bd66656667586216832eee3"></a>
const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>CompMin</b> (const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:afe1f9af38bd66656667586216832eee3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the component-wise minimum of *this and rhs. <br /></td></tr>
<tr class="separator:afe1f9af38bd66656667586216832eee3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab48f2fb1c8e45c601676e3dbe77ac45f" id="r_ab48f2fb1c8e45c601676e3dbe77ac45f"><td class="memItemLeft" align="right" valign="top"><a id="ab48f2fb1c8e45c601676e3dbe77ac45f" name="ab48f2fb1c8e45c601676e3dbe77ac45f"></a>
const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>CompMax</b> (const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:ab48f2fb1c8e45c601676e3dbe77ac45f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the component-wise maximum of *this and rhs. <br /></td></tr>
<tr class="separator:ab48f2fb1c8e45c601676e3dbe77ac45f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42a1bb3a9907ccd6d3951777a1f25feb" id="r_a42a1bb3a9907ccd6d3951777a1f25feb"><td class="memItemLeft" align="right" valign="top"><a id="a42a1bb3a9907ccd6d3951777a1f25feb" name="a42a1bb3a9907ccd6d3951777a1f25feb"></a>
const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>CompClamp</b> (const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt; &amp;vLow, const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt; &amp;vHigh) const</td></tr>
<tr class="memdesc:a42a1bb3a9907ccd6d3951777a1f25feb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the component-wise clamped value of *this between low and high. <br /></td></tr>
<tr class="separator:a42a1bb3a9907ccd6d3951777a1f25feb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a621267559d3373d0c545bdc48b3eb813" id="r_a621267559d3373d0c545bdc48b3eb813"><td class="memItemLeft" align="right" valign="top"><a id="a621267559d3373d0c545bdc48b3eb813" name="a621267559d3373d0c545bdc48b3eb813"></a>
const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>CompMul</b> (const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a621267559d3373d0c545bdc48b3eb813"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the component-wise multiplication of *this and rhs. <br /></td></tr>
<tr class="separator:a621267559d3373d0c545bdc48b3eb813"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae2d3cd94c7aafee4e27b27f25b092aa" id="r_aae2d3cd94c7aafee4e27b27f25b092aa"><td class="memItemLeft" align="right" valign="top"><a id="aae2d3cd94c7aafee4e27b27f25b092aa" name="aae2d3cd94c7aafee4e27b27f25b092aa"></a>
const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>CompDiv</b> (const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:aae2d3cd94c7aafee4e27b27f25b092aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the component-wise division of *this and rhs. <br /></td></tr>
<tr class="separator:aae2d3cd94c7aafee4e27b27f25b092aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adca30e31708e0d454ac221847a0c56e3" id="r_adca30e31708e0d454ac221847a0c56e3"><td class="memItemLeft" align="right" valign="top"><a id="adca30e31708e0d454ac221847a0c56e3" name="adca30e31708e0d454ac221847a0c56e3"></a>
const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>Abs</b> () const</td></tr>
<tr class="memdesc:adca30e31708e0d454ac221847a0c56e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">brief Returns the component-wise absolute of *this. <br /></td></tr>
<tr class="separator:adca30e31708e0d454ac221847a0c56e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fd9299311c8551b39b05d409a872022" id="r_a3fd9299311c8551b39b05d409a872022"><td class="memItemLeft" align="right" valign="top">PL_DECLARE_IF_FLOAT_TYPE void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3fd9299311c8551b39b05d409a872022">MakeOrthogonalTo</a> (const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt; &amp;vNormal)</td></tr>
<tr class="memdesc:a3fd9299311c8551b39b05d409a872022"><td class="mdescLeft">&#160;</td><td class="mdescRight">Modifies this direction vector to be orthogonal to the given (normalized) direction vector. The result is NOT normalized.  <br /></td></tr>
<tr class="separator:a3fd9299311c8551b39b05d409a872022"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f54a3b0ccb0b8329ed02a2e044e4924" id="r_a3f54a3b0ccb0b8329ed02a2e044e4924"><td class="memItemLeft" align="right" valign="top"><a id="a3f54a3b0ccb0b8329ed02a2e044e4924" name="a3f54a3b0ccb0b8329ed02a2e044e4924"></a>
const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>GetOrthogonalVector</b> () const</td></tr>
<tr class="memdesc:a3f54a3b0ccb0b8329ed02a2e044e4924"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns some arbitrary vector orthogonal to this one. The vector is NOT normalized. <br /></td></tr>
<tr class="separator:a3f54a3b0ccb0b8329ed02a2e044e4924"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a495ba9581822c01db636b34a94b51d" id="r_a9a495ba9581822c01db636b34a94b51d"><td class="memItemLeft" align="right" valign="top"><a id="a9a495ba9581822c01db636b34a94b51d" name="a9a495ba9581822c01db636b34a94b51d"></a>
PL_DECLARE_IF_FLOAT_TYPE const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>GetReflectedVector</b> (const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt; &amp;vNormal) const</td></tr>
<tr class="memdesc:a9a495ba9581822c01db636b34a94b51d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns this vector reflected at vNormal. <br /></td></tr>
<tr class="separator:a9a495ba9581822c01db636b34a94b51d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-methods" name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ab83eed14b9fb7a31d45fab5d4552ac10" id="r_ab83eed14b9fb7a31d45fab5d4552ac10"><td class="memItemLeft" align="right" valign="top"><a id="ab83eed14b9fb7a31d45fab5d4552ac10" name="ab83eed14b9fb7a31d45fab5d4552ac10"></a>
static PL_DECLARE_IF_FLOAT_TYPE const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>MakeNaN</b> ()</td></tr>
<tr class="memdesc:ab83eed14b9fb7a31d45fab5d4552ac10"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a vector with all components set to Not-a-Number (NaN). <br /></td></tr>
<tr class="separator:ab83eed14b9fb7a31d45fab5d4552ac10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a715d7506547cbafea5d021b48106db4e" id="r_a715d7506547cbafea5d021b48106db4e"><td class="memItemLeft" align="right" valign="top"><a id="a715d7506547cbafea5d021b48106db4e" name="a715d7506547cbafea5d021b48106db4e"></a>
static constexpr <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>MakeZero</b> ()</td></tr>
<tr class="memdesc:a715d7506547cbafea5d021b48106db4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Static function that returns a zero-vector. <br /></td></tr>
<tr class="separator:a715d7506547cbafea5d021b48106db4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-attribs" name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a7244d8bc3b68a107076e0fdd18d9d089" id="r_a7244d8bc3b68a107076e0fdd18d9d089"><td class="memItemLeft" align="right" valign="top"><a id="a7244d8bc3b68a107076e0fdd18d9d089" name="a7244d8bc3b68a107076e0fdd18d9d089"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><b>x</b></td></tr>
<tr class="separator:a7244d8bc3b68a107076e0fdd18d9d089"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd06e2b52fd5e968d4de283a5f69d860" id="r_abd06e2b52fd5e968d4de283a5f69d860"><td class="memItemLeft" align="right" valign="top"><a id="abd06e2b52fd5e968d4de283a5f69d860" name="abd06e2b52fd5e968d4de283a5f69d860"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><b>y</b></td></tr>
<tr class="separator:abd06e2b52fd5e968d4de283a5f69d860"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><div class="compoundTemplParams">template&lt;typename Type&gt;<br />
class plVec2Template&lt; Type &gt;</div><p>A 2-component vector class. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="aac9846d96ecda0045dee4306f7fd775b" name="aac9846d96ecda0045dee4306f7fd775b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac9846d96ecda0045dee4306f7fd775b">&#9670;&#160;</a></span>IsNormalized()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">PL_IMPLEMENT_IF_FLOAT_TYPE bool <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt;::IsNormalized </td>
          <td>(</td>
          <td class="paramtype">Type</td>          <td class="paramname"><span class="paramname"><em>fEpsilon</em></span><span class="paramdefsep"> = </span><span class="paramdefval">plMath::HugeEpsilon&lt;Type&gt;()</span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns, whether the squared length of this vector is between 0.999f and 1.001f. </p>
<dl class="section note"><dt>Note</dt><dd>Normalization, especially with SSE is not very precise. So this function checks whether the (squared) length is between a lower and upper limit. </dd></dl>

</div>
</div>
<a id="a3fd9299311c8551b39b05d409a872022" name="a3fd9299311c8551b39b05d409a872022"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3fd9299311c8551b39b05d409a872022">&#9670;&#160;</a></span>MakeOrthogonalTo()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">PL_IMPLEMENT_IF_FLOAT_TYPE void <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt;::MakeOrthogonalTo </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a>&lt; Type &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>vNormal</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Modifies this direction vector to be orthogonal to the given (normalized) direction vector. The result is NOT normalized. </p>
<dl class="section note"><dt>Note</dt><dd>This function may fail, e.g. create a vector that is zero, if the given normal is parallel to the vector itself. If you need to handle such cases, you should manually check afterwards, whether the result is zero, or cannot be normalized. </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/Engine/Foundation/Math/<a class="el" href="../../d4/dbc/_engine_2_foundation_2_math_2_declarations_8h_source.htm">Declarations.h</a></li>
<li>Code/Engine/Foundation/Math/<a class="el" href="../../d1/d8e/_vec2_8h_source.htm">Vec2.h</a></li>
<li>Code/Engine/Foundation/Math/Implementation/<a class="el" href="../../d1/d09/_vec2__inl_8h_source.htm">Vec2_inl.h</a></li>
<li>Code/Engine/Foundation/Math/Implementation/<a class="el" href="../../db/dba/_vec4__inl_8h_source.htm">Vec4_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
