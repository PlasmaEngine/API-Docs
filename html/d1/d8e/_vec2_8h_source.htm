<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<!-- BEGIN opengraph metadata -->
<meta property="og:title" content="Doxygen Awesome" />
<meta property="og:image" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta property="og:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<meta property="og:url" content="https://jothepro.github.io/doxygen-awesome-css/" />
<!-- END opengraph metadata -->
<!-- BEGIN twitter metadata -->
<meta name="twitter:image:src" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta name="twitter:title" content="Doxygen Awesome" />
<meta name="twitter:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<!-- END twitter metadata -->
<title>Plasma Engine: Code/Engine/Foundation/Math/Vec2.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link rel="icon" type="image/svg+xml" href="logo.drawio.svg"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-paragraph-link.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-tabs.js"></script>
<script type="text/javascript" src="../../toggle-alternative-theme.js"></script>
<script type="text/javascript">
    DoxygenAwesomeFragmentCopyButton.init()
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeParagraphLink.init()
    DoxygenAwesomeInteractiveToc.init()
    DoxygenAwesomeTabs.init()
</script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Plasma Engine
   &#160;<span id="projectnumber">2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d1/d8e/_vec2_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Vec2.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;Foundation/Math/Math.h&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span> </div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#if PL_ENABLED(PL_MATH_CHECK_FOR_NAN)</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">#  define PL_VEC2_CHECK_FOR_NAN(obj) (obj)-&gt;AssertNotNaN();</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="preprocessor">#else</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="preprocessor">#  define PL_VEC2_CHECK_FOR_NAN(obj)</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span> </div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00013" data-start="{" data-end="};">
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm">   13</a></span><span class="keyword">class </span><a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a></div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>{</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span>  <span class="comment">// Means that vectors can be copied using memcpy instead of copy construction.</span></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>  PL_DECLARE_POD_TYPE();</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span> </div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>  <span class="keyword">using </span>ComponentType = Type;</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span> </div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span> </div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>  <span class="comment">// *** Data ***</span></div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>  Type x;</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>  Type y;</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span> </div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>  <span class="comment">// *** Constructors ***</span></div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>  <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ab6db14a374f79d188d6975a8233bf4f8">plVec2Template</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span> </div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>  <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ab6db14a374f79d188d6975a8233bf4f8">plVec2Template</a>(Type x, Type y); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span> </div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>  <span class="keyword">explicit</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ab6db14a374f79d188d6975a8233bf4f8">plVec2Template</a>(Type v); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span> </div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>  <span class="comment">// no copy-constructor and operator= since the default-generated ones will be faster</span></div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span> </div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>  [[nodiscard]] <span class="keyword">static</span> <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a></div>
<div class="foldopen" id="foldopen00043" data-start="{" data-end="}">
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#ab83eed14b9fb7a31d45fab5d4552ac10">   43</a></span>  <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ab83eed14b9fb7a31d45fab5d4552ac10">MakeNaN</a>()</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>  {</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>    <span class="keywordflow">return</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ab6db14a374f79d188d6975a8233bf4f8">plVec2Template&lt;Type&gt;</a>(<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a7452a7f2b15201705625a7cb78723a98">plMath::NaN&lt;Type&gt;</a>());</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>  }</div>
</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span> </div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a715d7506547cbafea5d021b48106db4e">   49</a></span>  [[nodiscard]] <span class="keyword">static</span> <span class="keyword">constexpr</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a715d7506547cbafea5d021b48106db4e">MakeZero</a>() { <span class="keywordflow">return</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ab6db14a374f79d188d6975a8233bf4f8">plVec2Template</a>(0); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span> </div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span><span class="preprocessor">#if PL_ENABLED(PL_MATH_CHECK_FOR_NAN)</span></div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>  <span class="keywordtype">void</span> AssertNotNaN()<span class="keyword"> const</span></div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>    PL_ASSERT_ALWAYS(!<a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ab41f6eafd6ae2ea5bc29f9e2d326e2bb">IsNaN</a>(), <span class="stringliteral">&quot;This object contains NaN values. This can happen when you forgot to initialize it before using it. Please &quot;</span></div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>                               <span class="stringliteral">&quot;check that all code-paths properly initialize this object.&quot;</span>);</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>  }</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span> </div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>  <span class="comment">// *** Conversions ***</span></div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a3c38bf3c87db4d01dc1830b8c2aafe8f">GetAsVec3</a>(Type z) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span> </div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d1/d4b/classpl_vec4_template.htm">plVec4Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a421992f56792f5f13a3712100ca31884">GetAsVec4</a>(Type z, Type w) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span> </div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#af0edecf8fc41be773adc6460dac15191">   68</a></span>  <span class="keyword">const</span> Type* <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#af0edecf8fc41be773adc6460dac15191">GetData</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> &amp;x; }</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span> </div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a76d1f5ef99f2d273162cb5cbe3e37f7c">   71</a></span>  Type* <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a76d1f5ef99f2d273162cb5cbe3e37f7c">GetData</a>() { <span class="keywordflow">return</span> &amp;x; }</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span> </div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>  <span class="comment">// *** Functions to set the vector to specific values ***</span></div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a3d4541092348cd65fc9d3211c33075d3">Set</a>(Type xy); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span> </div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a3d4541092348cd65fc9d3211c33075d3">Set</a>(Type x, Type y); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span> </div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a520b49746db2cbc020b3ce36a65fa26a">SetZero</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span> </div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>  <span class="comment">// *** Functions dealing with length ***</span></div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>  Type <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a298e3e69c8ece3e985ee46774e24a838">GetLength</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span> </div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>  <a class="code hl_struct" href="../../da/dce/structpl_result.htm">plResult</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ad556353aad696dde88a48e62d4245c3a">SetLength</a>(Type fNewLength, Type fEpsilon = plMath::DefaultEpsilon&lt;Type&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span> </div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>  Type <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ad772dc852440d1bf9bfdbdbbd6b19585">GetLengthSquared</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span> </div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>  Type <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ac4607d8873a35cb1719878b2b2849e3d">GetLengthAndNormalize</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span> </div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a8453e711e79c7580d00a602397ff467a">GetNormalized</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span> </div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a873792d799aa8c86987cf2d10ed6ff94">Normalize</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span> </div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>  <a class="code hl_struct" href="../../da/dce/structpl_result.htm">plResult</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a991a3a38116cb76cebbd64a048779b23">NormalizeIfNotZero</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; vFallback = <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>(1, 0), Type fEpsilon = plMath::DefaultEpsilon&lt;Type&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span> </div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#aa3bf3078685a8b692ccadc2c63841001">IsZero</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span> </div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#aa3bf3078685a8b692ccadc2c63841001">IsZero</a>(Type fEpsilon) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span> </div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#aac9846d96ecda0045dee4306f7fd775b">IsNormalized</a>(Type fEpsilon = plMath::HugeEpsilon&lt;Type&gt;()) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span> </div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ab41f6eafd6ae2ea5bc29f9e2d326e2bb">IsNaN</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span> </div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a734b479872b2c442248caab002bb98d6">IsValid</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span> </div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span> </div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>  <span class="comment">// *** Operators ***</span></div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#afea5028966c2ca7f7fa53319a097e2da">operator-</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span> </div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a3311a3769c0318f69c417daebdb95c29">operator+=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; vCc); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span> </div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a210416c425a079d4d7ac8f0a9d86f604">operator-=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; vCc); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span> </div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ae561d4aff16e8c2344aeee7a24b4a4f5">operator*=</a>(Type f); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span> </div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a8602e3e9251f68317fc88f1e59a3294f">operator/=</a>(Type f); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span> </div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a9c0243d5033f421d17819da1c1829eba">IsIdentical</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span> </div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#af3e8bfd5b71f119c5e82d87dfb63fae6">IsEqual</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; rhs, Type fEpsilon) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span> </div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span> </div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>  <span class="comment">// *** Common vector operations ***</span></div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>  <a class="code hl_class" href="../../d4/dfd/classpl_angle.htm">plAngle</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a0b79f6adfab50cd48d34c9b26e27ba91">GetAngleBetween</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span> </div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>  Type <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ab3c2d034f673d91bab3f0e8f15dd5521">Dot</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span> </div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#afe1f9af38bd66656667586216832eee3">CompMin</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span> </div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ab48f2fb1c8e45c601676e3dbe77ac45f">CompMax</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span> </div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a42a1bb3a9907ccd6d3951777a1f25feb">CompClamp</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; vLow, <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; vHigh) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span> </div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a621267559d3373d0c545bdc48b3eb813">CompMul</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span> </div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#aae2d3cd94c7aafee4e27b27f25b092aa">CompDiv</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span> </div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#adca30e31708e0d454ac221847a0c56e3">Abs</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span> </div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span> </div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>  <span class="comment">// *** Other common operations ***</span></div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a3fd9299311c8551b39b05d409a872022">MakeOrthogonalTo</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; vNormal); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span> </div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a3f54a3b0ccb0b8329ed02a2e044e4924">GetOrthogonalVector</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span> </div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>  PL_DECLARE_IF_FLOAT_TYPE</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a9a495ba9581822c01db636b34a94b51d">GetReflectedVector</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; vNormal) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>};</div>
</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span> </div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span><span class="comment">// *** Operators ***</span></div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span> </div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span><span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> operator+(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v2); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span> </div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span><span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> operator-(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v2); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span> </div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span><span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> operator*(Type f, <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span> </div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span><span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> operator*(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v, Type f); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span> </div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span><span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> operator/(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v, Type f); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span> </div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span><span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v2); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span> </div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span><span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v2); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span> </div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span><span class="keywordtype">bool</span> operator&lt;(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v2);</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span> </div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span><span class="preprocessor">#include &lt;Foundation/Math/Implementation/Vec2_inl.h&gt;</span></div>
<div class="ttc" id="aclasspl_angle_htm"><div class="ttname"><a href="../../d4/dfd/classpl_angle.htm">plAngle</a></div><div class="ttdoc">Float wrapper struct for a safe usage and conversions of angles.</div><div class="ttdef"><b>Definition</b> Angle.h:10</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a></div><div class="ttdoc">A 2-component vector class.</div><div class="ttdef"><b>Definition</b> Vec2.h:14</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a0b79f6adfab50cd48d34c9b26e27ba91"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a0b79f6adfab50cd48d34c9b26e27ba91">plVec2Template::GetAngleBetween</a></div><div class="ttdeci">plAngle GetAngleBetween(const plVec2Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the positive angle between *this and rhs.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:245</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a210416c425a079d4d7ac8f0a9d86f604"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a210416c425a079d4d7ac8f0a9d86f604">plVec2Template::operator-=</a></div><div class="ttdeci">void operator-=(const plVec2Template&lt; Type &gt; &amp;vCc)</div><div class="ttdoc">Subtracts cc component-wise from this vector.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:174</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a298e3e69c8ece3e985ee46774e24a838"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a298e3e69c8ece3e985ee46774e24a838">plVec2Template::GetLength</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE Type GetLength() const</div><div class="ttdoc">Returns the length of the vector.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:49</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a3311a3769c0318f69c417daebdb95c29"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a3311a3769c0318f69c417daebdb95c29">plVec2Template::operator+=</a></div><div class="ttdeci">void operator+=(const plVec2Template&lt; Type &gt; &amp;vCc)</div><div class="ttdoc">Adds cc component-wise to this vector.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:165</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a3c38bf3c87db4d01dc1830b8c2aafe8f"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a3c38bf3c87db4d01dc1830b8c2aafe8f">plVec2Template::GetAsVec3</a></div><div class="ttdeci">const plVec3Template&lt; Type &gt; GetAsVec3(Type z) const</div><div class="ttdoc">Returns an plVec3Template with x,y from this vector and z set by the parameter.</div><div class="ttdef"><b>Definition</b> Vec4_inl.h:10</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a3d4541092348cd65fc9d3211c33075d3"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a3d4541092348cd65fc9d3211c33075d3">plVec2Template::Set</a></div><div class="ttdeci">void Set(Type xy)</div><div class="ttdoc">Sets all components to this value.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:29</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a3f54a3b0ccb0b8329ed02a2e044e4924"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a3f54a3b0ccb0b8329ed02a2e044e4924">plVec2Template::GetOrthogonalVector</a></div><div class="ttdeci">const plVec2Template&lt; Type &gt; GetOrthogonalVector() const</div><div class="ttdoc">Returns some arbitrary vector orthogonal to this one. The vector is NOT normalized.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:219</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a3fd9299311c8551b39b05d409a872022"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a3fd9299311c8551b39b05d409a872022">plVec2Template::MakeOrthogonalTo</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE void MakeOrthogonalTo(const plVec2Template&lt; Type &gt; &amp;vNormal)</div><div class="ttdoc">Modifies this direction vector to be orthogonal to the given (normalized) direction vector....</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:210</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a421992f56792f5f13a3712100ca31884"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a421992f56792f5f13a3712100ca31884">plVec2Template::GetAsVec4</a></div><div class="ttdeci">const plVec4Template&lt; Type &gt; GetAsVec4(Type z, Type w) const</div><div class="ttdoc">Returns an plVec4Template with x,y from this vector and z and w set by the parameters.</div><div class="ttdef"><b>Definition</b> Vec4_inl.h:18</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a42a1bb3a9907ccd6d3951777a1f25feb"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a42a1bb3a9907ccd6d3951777a1f25feb">plVec2Template::CompClamp</a></div><div class="ttdeci">const plVec2Template&lt; Type &gt; CompClamp(const plVec2Template&lt; Type &gt; &amp;vLow, const plVec2Template&lt; Type &gt; &amp;vHigh) const</div><div class="ttdoc">Returns the component-wise clamped value of *this between low and high.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:272</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a520b49746db2cbc020b3ce36a65fa26a"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a520b49746db2cbc020b3ce36a65fa26a">plVec2Template::SetZero</a></div><div class="ttdeci">void SetZero()</div><div class="ttdoc">Sets the vector to all zero.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:43</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a621267559d3373d0c545bdc48b3eb813"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a621267559d3373d0c545bdc48b3eb813">plVec2Template::CompMul</a></div><div class="ttdeci">const plVec2Template&lt; Type &gt; CompMul(const plVec2Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise multiplication of *this and rhs.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:282</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a715d7506547cbafea5d021b48106db4e"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a715d7506547cbafea5d021b48106db4e">plVec2Template::MakeZero</a></div><div class="ttdeci">static constexpr plVec2Template&lt; Type &gt; MakeZero()</div><div class="ttdoc">Static function that returns a zero-vector.</div><div class="ttdef"><b>Definition</b> Vec2.h:49</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a734b479872b2c442248caab002bb98d6"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a734b479872b2c442248caab002bb98d6">plVec2Template::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdoc">Checks that all components are finite numbers.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:146</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a76d1f5ef99f2d273162cb5cbe3e37f7c"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a76d1f5ef99f2d273162cb5cbe3e37f7c">plVec2Template::GetData</a></div><div class="ttdeci">Type * GetData()</div><div class="ttdoc">Returns the data as an array.</div><div class="ttdef"><b>Definition</b> Vec2.h:71</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a8453e711e79c7580d00a602397ff467a"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a8453e711e79c7580d00a602397ff467a">plVec2Template::GetNormalized</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE const plVec2Template&lt; Type &gt; GetNormalized() const</div><div class="ttdoc">Returns a normalized version of this vector, leaves the vector itself unchanged.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:79</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a8602e3e9251f68317fc88f1e59a3294f"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a8602e3e9251f68317fc88f1e59a3294f">plVec2Template::operator/=</a></div><div class="ttdeci">void operator/=(Type f)</div><div class="ttdoc">Divides all components of this vector by f.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:192</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a873792d799aa8c86987cf2d10ed6ff94"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a873792d799aa8c86987cf2d10ed6ff94">plVec2Template::Normalize</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE void Normalize()</div><div class="ttdoc">Normalizes this vector.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:88</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a991a3a38116cb76cebbd64a048779b23"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a991a3a38116cb76cebbd64a048779b23">plVec2Template::NormalizeIfNotZero</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE plResult NormalizeIfNotZero(const plVec2Template&lt; Type &gt; &amp;vFallback=plVec2Template&lt; Type &gt;(1, 0), Type fEpsilon=plMath::DefaultEpsilon&lt; Type &gt;())</div><div class="ttdoc">Tries to normalize this vector. If the vector is too close to zero, PL_FAILURE is returned and the ve...</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:94</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a9a495ba9581822c01db636b34a94b51d"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a9a495ba9581822c01db636b34a94b51d">plVec2Template::GetReflectedVector</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE const plVec2Template&lt; Type &gt; GetReflectedVector(const plVec2Template&lt; Type &gt; &amp;vNormal) const</div><div class="ttdoc">Returns this vector reflected at vNormal.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:228</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a9c0243d5033f421d17819da1c1829eba"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a9c0243d5033f421d17819da1c1829eba">plVec2Template::IsIdentical</a></div><div class="ttdeci">bool IsIdentical(const plVec2Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Equality Check (bitwise)</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:359</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_aa3bf3078685a8b692ccadc2c63841001"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#aa3bf3078685a8b692ccadc2c63841001">plVec2Template::IsZero</a></div><div class="ttdeci">bool IsZero() const</div><div class="ttdoc">Returns, whether this vector is (0, 0).</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:121</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_aac9846d96ecda0045dee4306f7fd775b"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#aac9846d96ecda0045dee4306f7fd775b">plVec2Template::IsNormalized</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE bool IsNormalized(Type fEpsilon=plMath::HugeEpsilon&lt; Type &gt;()) const</div><div class="ttdoc">Returns, whether the squared length of this vector is between 0.999f and 1.001f.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:114</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_aae2d3cd94c7aafee4e27b27f25b092aa"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#aae2d3cd94c7aafee4e27b27f25b092aa">plVec2Template::CompDiv</a></div><div class="ttdeci">const plVec2Template&lt; Type &gt; CompDiv(const plVec2Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise division of *this and rhs.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:291</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_ab3c2d034f673d91bab3f0e8f15dd5521"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#ab3c2d034f673d91bab3f0e8f15dd5521">plVec2Template::Dot</a></div><div class="ttdeci">Type Dot(const plVec2Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the Dot-product of the two vectors (commutative, order does not matter)</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:236</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_ab41f6eafd6ae2ea5bc29f9e2d326e2bb"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#ab41f6eafd6ae2ea5bc29f9e2d326e2bb">plVec2Template::IsNaN</a></div><div class="ttdeci">bool IsNaN() const</div><div class="ttdoc">Returns true, if any of x or y is NaN.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:135</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_ab48f2fb1c8e45c601676e3dbe77ac45f"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#ab48f2fb1c8e45c601676e3dbe77ac45f">plVec2Template::CompMax</a></div><div class="ttdeci">const plVec2Template&lt; Type &gt; CompMax(const plVec2Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise maximum of *this and rhs.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:263</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_ab6db14a374f79d188d6975a8233bf4f8"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#ab6db14a374f79d188d6975a8233bf4f8">plVec2Template::plVec2Template</a></div><div class="ttdeci">plVec2Template()</div><div class="ttdoc">default-constructed vector is uninitialized (for speed)</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:4</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_ab83eed14b9fb7a31d45fab5d4552ac10"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#ab83eed14b9fb7a31d45fab5d4552ac10">plVec2Template::MakeNaN</a></div><div class="ttdeci">static PL_DECLARE_IF_FLOAT_TYPE const plVec2Template&lt; Type &gt; MakeNaN()</div><div class="ttdoc">Returns a vector with all components set to Not-a-Number (NaN).</div><div class="ttdef"><b>Definition</b> Vec2.h:43</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_ac4607d8873a35cb1719878b2b2849e3d"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#ac4607d8873a35cb1719878b2b2849e3d">plVec2Template::GetLengthAndNormalize</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE Type GetLengthAndNormalize()</div><div class="ttdoc">Normalizes this vector and returns its previous length in one operation. More efficient than calling ...</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:71</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_ad556353aad696dde88a48e62d4245c3a"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#ad556353aad696dde88a48e62d4245c3a">plVec2Template::SetLength</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE plResult SetLength(Type fNewLength, Type fEpsilon=plMath::DefaultEpsilon&lt; Type &gt;())</div><div class="ttdoc">Tries to rescale the vector to the given length. If the vector is too close to zero,...</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:55</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_ad772dc852440d1bf9bfdbdbbd6b19585"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#ad772dc852440d1bf9bfdbdbbd6b19585">plVec2Template::GetLengthSquared</a></div><div class="ttdeci">Type GetLengthSquared() const</div><div class="ttdoc">Returns the squared length. Faster, since no square-root is taken. Useful, if one only wants to compa...</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:65</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_adca30e31708e0d454ac221847a0c56e3"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#adca30e31708e0d454ac221847a0c56e3">plVec2Template::Abs</a></div><div class="ttdeci">const plVec2Template&lt; Type &gt; Abs() const</div><div class="ttdoc">brief Returns the component-wise absolute of *this.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:300</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_ae561d4aff16e8c2344aeee7a24b4a4f5"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#ae561d4aff16e8c2344aeee7a24b4a4f5">plVec2Template::operator*=</a></div><div class="ttdeci">void operator*=(Type f)</div><div class="ttdoc">Multiplies all components of this vector with f.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:183</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_af0edecf8fc41be773adc6460dac15191"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#af0edecf8fc41be773adc6460dac15191">plVec2Template::GetData</a></div><div class="ttdeci">const Type * GetData() const</div><div class="ttdoc">Returns the data as an array.</div><div class="ttdef"><b>Definition</b> Vec2.h:68</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_af3e8bfd5b71f119c5e82d87dfb63fae6"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#af3e8bfd5b71f119c5e82d87dfb63fae6">plVec2Template::IsEqual</a></div><div class="ttdeci">bool IsEqual(const plVec2Template&lt; Type &gt; &amp;rhs, Type fEpsilon) const</div><div class="ttdoc">Equality Check with epsilon.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:368</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_afe1f9af38bd66656667586216832eee3"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#afe1f9af38bd66656667586216832eee3">plVec2Template::CompMin</a></div><div class="ttdeci">const plVec2Template&lt; Type &gt; CompMin(const plVec2Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise minimum of *this and rhs.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:254</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_afea5028966c2ca7f7fa53319a097e2da"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#afea5028966c2ca7f7fa53319a097e2da">plVec2Template::operator-</a></div><div class="ttdeci">const plVec2Template&lt; Type &gt; operator-() const</div><div class="ttdoc">Returns the negation of this vector.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:157</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm">plVec3Template</a></div><div class="ttdoc">A 3-component vector class.</div><div class="ttdef"><b>Definition</b> Vec3.h:9</div></div>
<div class="ttc" id="aclasspl_vec4_template_htm"><div class="ttname"><a href="../../d1/d4b/classpl_vec4_template.htm">plVec4Template</a></div><div class="ttdoc">A 4-component vector class.</div><div class="ttdef"><b>Definition</b> Vec4.h:9</div></div>
<div class="ttc" id="anamespacepl_math_htm_a7452a7f2b15201705625a7cb78723a98"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a7452a7f2b15201705625a7cb78723a98">plMath::NaN</a></div><div class="ttdeci">constexpr TYPE NaN()</div><div class="ttdoc">Returns the value for NaN as the template type. Returns zero, if the type does not support NaN.</div><div class="ttdef"><b>Definition</b> Constants_inl.h:58</div></div>
<div class="ttc" id="astructpl_result_htm"><div class="ttname"><a href="../../da/dce/structpl_result.htm">plResult</a></div><div class="ttdoc">Default enum for returning failure or success, instead of using a bool.</div><div class="ttdef"><b>Definition</b> Types.h:54</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_b421fc8dbee4bf114051d293564697bb.htm">Math</a></li><li class="navelem"><b>Vec2.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
