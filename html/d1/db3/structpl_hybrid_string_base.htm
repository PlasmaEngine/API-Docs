<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Plasma Engine: plHybridStringBase&lt; Size &gt; Struct Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Plasma Engine<span id="projectnumber">&#160;2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d1/db3/structpl_hybrid_string_base.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="../../df/d52/structpl_hybrid_string_base-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plHybridStringBase&lt; Size &gt; Struct Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p>A string class for storing and passing around strings.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../db/db5/_string_8h_source.htm">String.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for plHybridStringBase&lt; Size &gt;:</div>
<div class="dyncontent">
<div class="center"><img src="../../d1/dd6/structpl_hybrid_string_base__inherit__graph.png" border="0" usemap="#apl_hybrid_string_base_3_01_size_01_4_inherit__map" alt="Inheritance graph"/></div>
<map name="apl_hybrid_string_base_3_01_size_01_4_inherit__map" id="apl_hybrid_string_base_3_01_size_01_4_inherit__map">
<area shape="rect" title="A string class for storing and passing around strings." alt="" coords="398,156,530,199"/>
<area shape="rect" href="../../d2/dea/structpl_hybrid_string.htm" title=" " alt="" coords="579,5,766,48"/>
<area shape="poly" title=" " alt="" coords="489,142,528,98,577,58,598,46,601,51,580,62,531,102,493,145"/>
<area shape="rect" href="../../d2/dea/structpl_hybrid_string.htm" title=" " alt="" coords="578,72,767,115"/>
<area shape="poly" title=" " alt="" coords="525,147,577,124,607,113,609,118,579,129,527,152"/>
<area shape="rect" href="../../d2/dea/structpl_hybrid_string.htm" title=" " alt="" coords="599,139,746,165"/>
<area shape="poly" title=" " alt="" coords="545,165,598,158,599,164,546,170"/>
<area shape="rect" href="../../d2/dea/structpl_hybrid_string.htm" title=" " alt="" coords="602,189,743,216"/>
<area shape="poly" title=" " alt="" coords="546,185,602,191,602,197,545,190"/>
<area shape="rect" href="../../d2/dea/structpl_hybrid_string.htm" title=" " alt="" coords="602,240,743,267"/>
<area shape="poly" title=" " alt="" coords="524,203,579,225,616,237,614,242,577,231,522,208"/>
<area shape="rect" href="../../d2/dea/structpl_hybrid_string.htm" title=" " alt="" coords="600,291,745,333"/>
<area shape="poly" title=" " alt="" coords="497,208,535,243,580,276,602,288,600,292,577,281,531,247,493,212"/>
<area shape="rect" href="../../de/d73/structpl_string_base.htm" title=" " alt="" coords="162,156,350,199"/>
<area shape="poly" title=" " alt="" coords="365,175,398,175,398,180,365,180"/>
<area shape="rect" href="../../da/d54/structpl_this_is_a_string.htm" title="Base class which marks a class as containing string data." alt="" coords="5,164,114,191"/>
<area shape="poly" title=" " alt="" coords="129,175,161,175,161,180,129,180"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a6dc4bd4cf0b2bda613396e87d27df9c6" id="r_a6dc4bd4cf0b2bda613396e87d27df9c6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6dc4bd4cf0b2bda613396e87d27df9c6">Clear</a> ()</td></tr>
<tr class="memdesc:a6dc4bd4cf0b2bda613396e87d27df9c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resets this string to an empty string.  <br /></td></tr>
<tr class="separator:a6dc4bd4cf0b2bda613396e87d27df9c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06c17e3b0fbddb8388534e8b94422d16" id="r_a06c17e3b0fbddb8388534e8b94422d16"><td class="memItemLeft" align="right" valign="top"><a id="a06c17e3b0fbddb8388534e8b94422d16" name="a06c17e3b0fbddb8388534e8b94422d16"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><b>GetData</b> () const</td></tr>
<tr class="memdesc:a06c17e3b0fbddb8388534e8b94422d16"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the internal Utf8 string. <br /></td></tr>
<tr class="separator:a06c17e3b0fbddb8388534e8b94422d16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13ca7b0c2437b3c6d86417e614f826bc" id="r_a13ca7b0c2437b3c6d86417e614f826bc"><td class="memItemLeft" align="right" valign="top"><a id="a13ca7b0c2437b3c6d86417e614f826bc" name="a13ca7b0c2437b3c6d86417e614f826bc"></a>
plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GetElementCount</b> () const</td></tr>
<tr class="memdesc:a13ca7b0c2437b3c6d86417e614f826bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the amount of bytes that this string takes (excluding the '\0' terminator). <br /></td></tr>
<tr class="separator:a13ca7b0c2437b3c6d86417e614f826bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e226b7e502bfc6f0f9f9dd05e4ce236" id="r_a2e226b7e502bfc6f0f9f9dd05e4ce236"><td class="memItemLeft" align="right" valign="top">plUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2e226b7e502bfc6f0f9f9dd05e4ce236">GetCharacterCount</a> () const</td></tr>
<tr class="memdesc:a2e226b7e502bfc6f0f9f9dd05e4ce236"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of characters in this string. Might be less than GetElementCount, if it contains Utf8 multi-byte characters.  <br /></td></tr>
<tr class="separator:a2e226b7e502bfc6f0f9f9dd05e4ce236"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bc55a0680f91d3cc243e4a1c65996a6" id="r_a4bc55a0680f91d3cc243e4a1c65996a6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4bc55a0680f91d3cc243e4a1c65996a6">GetSubString</a> (plUInt32 uiFirstCharacter, plUInt32 uiNumCharacters) const</td></tr>
<tr class="memdesc:a4bc55a0680f91d3cc243e4a1c65996a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a view to a sub-string of this string, starting at character uiFirstCharacter, up until uiFirstCharacter + uiNumCharacters.  <br /></td></tr>
<tr class="separator:a4bc55a0680f91d3cc243e4a1c65996a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a220cf5af489f0f185b304c2a9388b8de" id="r_a220cf5af489f0f185b304c2a9388b8de"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a220cf5af489f0f185b304c2a9388b8de">GetFirst</a> (plUInt32 uiNumCharacters) const</td></tr>
<tr class="memdesc:a220cf5af489f0f185b304c2a9388b8de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a view to the sub-string containing the first uiNumCharacters characters of this string.  <br /></td></tr>
<tr class="separator:a220cf5af489f0f185b304c2a9388b8de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5edcf5340b17ed493558ce3f9555294" id="r_ae5edcf5340b17ed493558ce3f9555294"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae5edcf5340b17ed493558ce3f9555294">GetLast</a> (plUInt32 uiNumCharacters) const</td></tr>
<tr class="memdesc:ae5edcf5340b17ed493558ce3f9555294"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a view to the sub-string containing the last uiNumCharacters characters of this string.  <br /></td></tr>
<tr class="separator:ae5edcf5340b17ed493558ce3f9555294"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ace821c1da8c69eced69584dee1f63b" id="r_a5ace821c1da8c69eced69584dee1f63b"><td class="memItemLeft" align="right" valign="top"><a id="a5ace821c1da8c69eced69584dee1f63b" name="a5ace821c1da8c69eced69584dee1f63b"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>ReadAll</b> (<a class="el" href="../../df/d3d/classpl_stream_reader.htm">plStreamReader</a> &amp;inout_stream)</td></tr>
<tr class="memdesc:a5ace821c1da8c69eced69584dee1f63b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces the current string with the content from the stream. Reads the stream to its end. <br /></td></tr>
<tr class="separator:a5ace821c1da8c69eced69584dee1f63b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf2858e6c7fe5a8ca5500476243ab59a" id="r_abf2858e6c7fe5a8ca5500476243ab59a"><td class="memItemLeft" align="right" valign="top"><a id="abf2858e6c7fe5a8ca5500476243ab59a" name="abf2858e6c7fe5a8ca5500476243ab59a"></a>
plUInt64&#160;</td><td class="memItemRight" valign="bottom"><b>GetHeapMemoryUsage</b> () const</td></tr>
<tr class="memdesc:abf2858e6c7fe5a8ca5500476243ab59a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the amount of bytes that are currently allocated on the heap. <br /></td></tr>
<tr class="separator:abf2858e6c7fe5a8ca5500476243ab59a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_structpl_string_base"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_structpl_string_base')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../de/d73/structpl_string_base.htm">plStringBase&lt; plHybridStringBase&lt; Size &gt; &gt;</a></td></tr>
<tr class="memitem:a7ac3a243ee9ea1f99f7d82dd8e1d60b5 inherit pub_methods_structpl_string_base" id="r_a7ac3a243ee9ea1f99f7d82dd8e1d60b5"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEmpty</b> () const</td></tr>
<tr class="memdesc:a7ac3a243ee9ea1f99f7d82dd8e1d60b5 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the string is an empty string. <br /></td></tr>
<tr class="separator:a7ac3a243ee9ea1f99f7d82dd8e1d60b5 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ae403b4b3e534b94edd50edd888b4f0 inherit pub_methods_structpl_string_base" id="r_a6ae403b4b3e534b94edd50edd888b4f0"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>StartsWith</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStartsWith) const</td></tr>
<tr class="memdesc:a6ae403b4b3e534b94edd50edd888b4f0 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string starts with the given string. <br /></td></tr>
<tr class="separator:a6ae403b4b3e534b94edd50edd888b4f0 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4af994336831ee8ce7ea1aa392388ed6 inherit pub_methods_structpl_string_base" id="r_a4af994336831ee8ce7ea1aa392388ed6"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>StartsWith_NoCase</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStartsWith) const</td></tr>
<tr class="memdesc:a4af994336831ee8ce7ea1aa392388ed6 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string starts with the given string. Case insensitive. <br /></td></tr>
<tr class="separator:a4af994336831ee8ce7ea1aa392388ed6 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6961a7b6896b3b482b20df06de7c689 inherit pub_methods_structpl_string_base" id="r_ab6961a7b6896b3b482b20df06de7c689"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>EndsWith</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sEndsWith) const</td></tr>
<tr class="memdesc:ab6961a7b6896b3b482b20df06de7c689 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string ends with the given string. <br /></td></tr>
<tr class="separator:ab6961a7b6896b3b482b20df06de7c689 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8986dab73aa8d7095b79ddf761cf6b0d inherit pub_methods_structpl_string_base" id="r_a8986dab73aa8d7095b79ddf761cf6b0d"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>EndsWith_NoCase</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sEndsWith) const</td></tr>
<tr class="memdesc:a8986dab73aa8d7095b79ddf761cf6b0d inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string ends with the given string. Case insensitive. <br /></td></tr>
<tr class="separator:a8986dab73aa8d7095b79ddf761cf6b0d inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb80af12ae97555d0870359e86bd1a68 inherit pub_methods_structpl_string_base" id="r_afb80af12ae97555d0870359e86bd1a68"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#afb80af12ae97555d0870359e86bd1a68">FindSubString</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:afb80af12ae97555d0870359e86bd1a68 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8972e55722d17be6604b1df08082cf83 inherit pub_methods_structpl_string_base" id="r_a8972e55722d17be6604b1df08082cf83"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#a8972e55722d17be6604b1df08082cf83">FindSubString_NoCase</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a8972e55722d17be6604b1df08082cf83 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d116e5f43c0ae774c2346b5f94a992c inherit pub_methods_structpl_string_base" id="r_a2d116e5f43c0ae774c2346b5f94a992c"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#a2d116e5f43c0ae774c2346b5f94a992c">FindLastSubString</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a2d116e5f43c0ae774c2346b5f94a992c inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54c2b870afa5c0a2fb437e32219eb7d1 inherit pub_methods_structpl_string_base" id="r_a54c2b870afa5c0a2fb437e32219eb7d1"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#a54c2b870afa5c0a2fb437e32219eb7d1">FindLastSubString_NoCase</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a54c2b870afa5c0a2fb437e32219eb7d1 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af40ca95f7c2b77e18266ffe6ff7483a8 inherit pub_methods_structpl_string_base" id="r_af40ca95f7c2b77e18266ffe6ff7483a8"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#af40ca95f7c2b77e18266ffe6ff7483a8">FindWholeWord</a> (const char *szSearchFor, <a class="el" href="../../de/d4d/classpl_string_utils.htm#a8bc7e3a526fc09382eaa1276895f3266">plStringUtils::PL_CHARACTER_FILTER</a> isDelimiterCB, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:af40ca95f7c2b77e18266ffe6ff7483a8 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b6659ee0b76480c3ba534f74a4089fa inherit pub_methods_structpl_string_base" id="r_a8b6659ee0b76480c3ba534f74a4089fa"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#a8b6659ee0b76480c3ba534f74a4089fa">FindWholeWord_NoCase</a> (const char *szSearchFor, <a class="el" href="../../de/d4d/classpl_string_utils.htm#a8bc7e3a526fc09382eaa1276895f3266">plStringUtils::PL_CHARACTER_FILTER</a> isDelimiterCB, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a8b6659ee0b76480c3ba534f74a4089fa inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71ac29b18708a376ce3e9f03bb756a82 inherit pub_methods_structpl_string_base" id="r_a71ac29b18708a376ce3e9f03bb756a82"><td class="memItemLeft" align="right" valign="top">
plInt32&#160;</td><td class="memItemRight" valign="bottom"><b>Compare</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther) const</td></tr>
<tr class="memdesc:a71ac29b18708a376ce3e9f03bb756a82 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. <br /></td></tr>
<tr class="separator:a71ac29b18708a376ce3e9f03bb756a82 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a946009c071c70e5b2ad616a16213d113 inherit pub_methods_structpl_string_base" id="r_a946009c071c70e5b2ad616a16213d113"><td class="memItemLeft" align="right" valign="top">plInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#a946009c071c70e5b2ad616a16213d113">CompareN</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther, plUInt32 uiCharsToCompare) const</td></tr>
<tr class="separator:a946009c071c70e5b2ad616a16213d113 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91a71d7390204850be0e8fc9193e0f31 inherit pub_methods_structpl_string_base" id="r_a91a71d7390204850be0e8fc9193e0f31"><td class="memItemLeft" align="right" valign="top">
plInt32&#160;</td><td class="memItemRight" valign="bottom"><b>Compare_NoCase</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther) const</td></tr>
<tr class="memdesc:a91a71d7390204850be0e8fc9193e0f31 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. Case insensitive. <br /></td></tr>
<tr class="separator:a91a71d7390204850be0e8fc9193e0f31 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4af63c140fc4fe56e1a290df992cec7e inherit pub_methods_structpl_string_base" id="r_a4af63c140fc4fe56e1a290df992cec7e"><td class="memItemLeft" align="right" valign="top">plInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#a4af63c140fc4fe56e1a290df992cec7e">CompareN_NoCase</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther, plUInt32 uiCharsToCompare) const</td></tr>
<tr class="separator:a4af63c140fc4fe56e1a290df992cec7e inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a928260385c9a80109751fbdb1849b321 inherit pub_methods_structpl_string_base" id="r_a928260385c9a80109751fbdb1849b321"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEqual</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther) const</td></tr>
<tr class="memdesc:a928260385c9a80109751fbdb1849b321 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other string for equality. <br /></td></tr>
<tr class="separator:a928260385c9a80109751fbdb1849b321 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1854b21f65a086f15e164f739d53950d inherit pub_methods_structpl_string_base" id="r_a1854b21f65a086f15e164f739d53950d"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEqualN</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther, plUInt32 uiCharsToCompare) const</td></tr>
<tr class="memdesc:a1854b21f65a086f15e164f739d53950d inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares up to a given number of characters of this string with the other string for equality. Case insensitive. <br /></td></tr>
<tr class="separator:a1854b21f65a086f15e164f739d53950d inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0801b3fafc90b1beba38313c205e704 inherit pub_methods_structpl_string_base" id="r_ad0801b3fafc90b1beba38313c205e704"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEqual_NoCase</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther) const</td></tr>
<tr class="memdesc:ad0801b3fafc90b1beba38313c205e704 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other string for equality. <br /></td></tr>
<tr class="separator:ad0801b3fafc90b1beba38313c205e704 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a632d41fe7d33c9e42391ee905a361b06 inherit pub_methods_structpl_string_base" id="r_a632d41fe7d33c9e42391ee905a361b06"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEqualN_NoCase</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther, plUInt32 uiCharsToCompare) const</td></tr>
<tr class="memdesc:a632d41fe7d33c9e42391ee905a361b06 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares up to a given number of characters of this string with the other string for equality. Case insensitive. <br /></td></tr>
<tr class="separator:a632d41fe7d33c9e42391ee905a361b06 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5dc9b2300f37b7bb4a42999870e6092 inherit pub_methods_structpl_string_base" id="r_aa5dc9b2300f37b7bb4a42999870e6092"><td class="memItemLeft" align="right" valign="top">
const char *&#160;</td><td class="memItemRight" valign="bottom"><b>ComputeCharacterPosition</b> (plUInt32 uiCharacterIndex) const</td></tr>
<tr class="memdesc:aa5dc9b2300f37b7bb4a42999870e6092 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the pointer to the n-th character in the string. This is a linear search from the start. <br /></td></tr>
<tr class="separator:aa5dc9b2300f37b7bb4a42999870e6092 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5f533a25843450da719ad9c78827c29 inherit pub_methods_structpl_string_base" id="r_ac5f533a25843450da719ad9c78827c29"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d3/da5/structpl_string_iterator.htm">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#ac5f533a25843450da719ad9c78827c29">GetIteratorFront</a> () const</td></tr>
<tr class="memdesc:ac5f533a25843450da719ad9c78827c29 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to this string, which points to the very first character.  <br /></td></tr>
<tr class="separator:ac5f533a25843450da719ad9c78827c29 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97bd0de57b678794224901f970b864b7 inherit pub_methods_structpl_string_base" id="r_a97bd0de57b678794224901f970b864b7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d8/d32/structpl_string_reverse_iterator.htm">reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#a97bd0de57b678794224901f970b864b7">GetIteratorBack</a> () const</td></tr>
<tr class="memdesc:a97bd0de57b678794224901f970b864b7 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to this string, which points to the very last character (NOT the end).  <br /></td></tr>
<tr class="separator:a97bd0de57b678794224901f970b864b7 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8edc0eeb6a433a7397215106abd0f39f inherit pub_methods_structpl_string_base" id="r_a8edc0eeb6a433a7397215106abd0f39f"><td class="memItemLeft" align="right" valign="top">
&#160;</td><td class="memItemRight" valign="bottom"><b>operator plStringView</b> () const</td></tr>
<tr class="memdesc:a8edc0eeb6a433a7397215106abd0f39f inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string view to this string's data. <br /></td></tr>
<tr class="separator:a8edc0eeb6a433a7397215106abd0f39f inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae137b75721c90c6ca1b8aec2b9fa7653 inherit pub_methods_structpl_string_base" id="r_ae137b75721c90c6ca1b8aec2b9fa7653"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetView</b> () const</td></tr>
<tr class="memdesc:ae137b75721c90c6ca1b8aec2b9fa7653 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string view to this string's data. <br /></td></tr>
<tr class="separator:ae137b75721c90c6ca1b8aec2b9fa7653 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ac5057709ce4884266502eb53a12a2b inherit pub_methods_structpl_string_base" id="r_a7ac5057709ce4884266502eb53a12a2b"><td class="memItemLeft" align="right" valign="top">
PL_ALWAYS_INLINE&#160;</td><td class="memItemRight" valign="bottom"><b>operator const char *</b> () const</td></tr>
<tr class="memdesc:a7ac5057709ce4884266502eb53a12a2b inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the internal Utf8 string. <br /></td></tr>
<tr class="separator:a7ac5057709ce4884266502eb53a12a2b inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a9997394d0cbb4121601246cfd910c6 inherit pub_methods_structpl_string_base" id="r_a9a9997394d0cbb4121601246cfd910c6"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>Split</b> (bool bReturnEmptyStrings, Container &amp;ref_output, const char *szSeparator1, const char *szSeparator2=nullptr, const char *szSeparator3=nullptr, const char *szSeparator4=nullptr, const char *szSeparator5=nullptr, const char *szSeparator6=nullptr) const</td></tr>
<tr class="memdesc:a9a9997394d0cbb4121601246cfd910c6 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fills the given container with <a class="el" href="../../d6/d79/classpl_string_view.htm" title="plStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">plStringView</a>'s which represent each found substring. If bReturnEmptyStrings is true, even empty strings between separators are returned. Output must be a container that stores <a class="el" href="../../d6/d79/classpl_string_view.htm" title="plStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...">plStringView</a>'s and provides the functions 'Clear' and 'Append'. szSeparator1 to szSeparator6 are strings which act as separators and indicate where to split the string. This string itself will not be modified. <br /></td></tr>
<tr class="separator:a9a9997394d0cbb4121601246cfd910c6 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99dd48e46918eea24a01ee4893f8301a inherit pub_methods_structpl_string_base" id="r_a99dd48e46918eea24a01ee4893f8301a"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>HasAnyExtension</b> () const</td></tr>
<tr class="memdesc:a99dd48e46918eea24a01ee4893f8301a inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given path has any file extension. <br /></td></tr>
<tr class="separator:a99dd48e46918eea24a01ee4893f8301a inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdbf19533811ec120710ad7caffe7ad0 inherit pub_methods_structpl_string_base" id="r_abdbf19533811ec120710ad7caffe7ad0"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>HasExtension</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sExtension) const</td></tr>
<tr class="memdesc:abdbf19533811ec120710ad7caffe7ad0 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given path ends with the given extension. szExtension should start with a '.' for performance reasons, but it will work without a '.' too. <br /></td></tr>
<tr class="separator:abdbf19533811ec120710ad7caffe7ad0 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0543d52d510868337e70f18ab4467a6 inherit pub_methods_structpl_string_base" id="r_ad0543d52d510868337e70f18ab4467a6"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetFileExtension</b> () const</td></tr>
<tr class="memdesc:ad0543d52d510868337e70f18ab4467a6 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the file extension of the given path. Will be empty, if the path does not end with a proper extension. <br /></td></tr>
<tr class="separator:ad0543d52d510868337e70f18ab4467a6 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b26dfed7384bb3264d3f134648396f9 inherit pub_methods_structpl_string_base" id="r_a8b26dfed7384bb3264d3f134648396f9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#a8b26dfed7384bb3264d3f134648396f9">GetFileName</a> () const</td></tr>
<tr class="memdesc:a8b26dfed7384bb3264d3f134648396f9 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the file name of a path, excluding the path and extension.  <br /></td></tr>
<tr class="separator:a8b26dfed7384bb3264d3f134648396f9 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5be3ebeaf3a8e57322061b6424ca25a8 inherit pub_methods_structpl_string_base" id="r_a5be3ebeaf3a8e57322061b6424ca25a8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#a5be3ebeaf3a8e57322061b6424ca25a8">GetFileNameAndExtension</a> () const</td></tr>
<tr class="memdesc:a5be3ebeaf3a8e57322061b6424ca25a8 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the substring that represents the file name including the file extension.  <br /></td></tr>
<tr class="separator:a5be3ebeaf3a8e57322061b6424ca25a8 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8352abf502483f0e4e10c6733bde642 inherit pub_methods_structpl_string_base" id="r_ad8352abf502483f0e4e10c6733bde642"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#ad8352abf502483f0e4e10c6733bde642">GetFileDirectory</a> () const</td></tr>
<tr class="memdesc:ad8352abf502483f0e4e10c6733bde642 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the directory of the given file, which is the substring up to the last path separator.  <br /></td></tr>
<tr class="separator:ad8352abf502483f0e4e10c6733bde642 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a275c7069b3e5ddd9daf7ea75352128a3 inherit pub_methods_structpl_string_base" id="r_a275c7069b3e5ddd9daf7ea75352128a3"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsAbsolutePath</b> () const</td></tr>
<tr class="memdesc:a275c7069b3e5ddd9daf7ea75352128a3 inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the given path represents an absolute path on the current OS. <br /></td></tr>
<tr class="separator:a275c7069b3e5ddd9daf7ea75352128a3 inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a340cb26613564b37461946d685215f inherit pub_methods_structpl_string_base" id="r_a4a340cb26613564b37461946d685215f"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsRelativePath</b> () const</td></tr>
<tr class="memdesc:a4a340cb26613564b37461946d685215f inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the given path represents a relative path on the current OS. <br /></td></tr>
<tr class="separator:a4a340cb26613564b37461946d685215f inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef9d9918c2d608eb5451b735057a272f inherit pub_methods_structpl_string_base" id="r_aef9d9918c2d608eb5451b735057a272f"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsRootedPath</b> () const</td></tr>
<tr class="memdesc:aef9d9918c2d608eb5451b735057a272f inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the given path represents a 'rooted' path. See <a class="el" href="../../d5/d08/classpl_file_system.htm" title="The plFileSystem provides high-level functionality to manage files in a virtual file system.">plFileSystem</a> for details. <br /></td></tr>
<tr class="separator:aef9d9918c2d608eb5451b735057a272f inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97a42649db4dba41449786ad43a237cf inherit pub_methods_structpl_string_base" id="r_a97a42649db4dba41449786ad43a237cf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d73/structpl_string_base.htm#a97a42649db4dba41449786ad43a237cf">GetRootedPathRootName</a> () const</td></tr>
<tr class="memdesc:a97a42649db4dba41449786ad43a237cf inherit pub_methods_structpl_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extracts the root name from a rooted path.  <br /></td></tr>
<tr class="separator:a97a42649db4dba41449786ad43a237cf inherit pub_methods_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-methods" name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a053f80fb8a515e0f0155f780b22b7deb" id="r_a053f80fb8a515e0f0155f780b22b7deb"><td class="memItemLeft" align="right" valign="top"><a id="a053f80fb8a515e0f0155f780b22b7deb" name="a053f80fb8a515e0f0155f780b22b7deb"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plHybridStringBase</b> (<a class="el" href="../../da/df3/classpl_allocator.htm">plAllocator</a> *pAllocator)</td></tr>
<tr class="memdesc:a053f80fb8a515e0f0155f780b22b7deb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an empty string. <br /></td></tr>
<tr class="separator:a053f80fb8a515e0f0155f780b22b7deb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f8227c7fe6ba70eb6e283c6c5bb0298" id="r_a0f8227c7fe6ba70eb6e283c6c5bb0298"><td class="memItemLeft" align="right" valign="top"><a id="a0f8227c7fe6ba70eb6e283c6c5bb0298" name="a0f8227c7fe6ba70eb6e283c6c5bb0298"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plHybridStringBase</b> (const <a class="el" href="../../d1/db3/structpl_hybrid_string_base.htm">plHybridStringBase</a> &amp;rhs, <a class="el" href="../../da/df3/classpl_allocator.htm">plAllocator</a> *pAllocator)</td></tr>
<tr class="memdesc:a0f8227c7fe6ba70eb6e283c6c5bb0298"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:a0f8227c7fe6ba70eb6e283c6c5bb0298"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a254652fbcb4be2d5a6483ae8cab67cac" id="r_a254652fbcb4be2d5a6483ae8cab67cac"><td class="memItemLeft" align="right" valign="top"><a id="a254652fbcb4be2d5a6483ae8cab67cac" name="a254652fbcb4be2d5a6483ae8cab67cac"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plHybridStringBase</b> (<a class="el" href="../../d1/db3/structpl_hybrid_string_base.htm">plHybridStringBase</a> &amp;&amp;rhs, <a class="el" href="../../da/df3/classpl_allocator.htm">plAllocator</a> *pAllocator)</td></tr>
<tr class="memdesc:a254652fbcb4be2d5a6483ae8cab67cac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:a254652fbcb4be2d5a6483ae8cab67cac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb8e11edbef53315cfc6137d4b6021c7" id="r_adb8e11edbef53315cfc6137d4b6021c7"><td class="memItemLeft" align="right" valign="top"><a id="adb8e11edbef53315cfc6137d4b6021c7" name="adb8e11edbef53315cfc6137d4b6021c7"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plHybridStringBase</b> (const char *rhs, <a class="el" href="../../da/df3/classpl_allocator.htm">plAllocator</a> *pAllocator)</td></tr>
<tr class="memdesc:adb8e11edbef53315cfc6137d4b6021c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:adb8e11edbef53315cfc6137d4b6021c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12ccd2d3723e7c201baf99957035849b" id="r_a12ccd2d3723e7c201baf99957035849b"><td class="memItemLeft" align="right" valign="top"><a id="a12ccd2d3723e7c201baf99957035849b" name="a12ccd2d3723e7c201baf99957035849b"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plHybridStringBase</b> (const wchar_t *rhs, <a class="el" href="../../da/df3/classpl_allocator.htm">plAllocator</a> *pAllocator)</td></tr>
<tr class="memdesc:a12ccd2d3723e7c201baf99957035849b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:a12ccd2d3723e7c201baf99957035849b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf9bb642282fd51e4869267702b1be18" id="r_acf9bb642282fd51e4869267702b1be18"><td class="memItemLeft" align="right" valign="top"><a id="acf9bb642282fd51e4869267702b1be18" name="acf9bb642282fd51e4869267702b1be18"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plHybridStringBase</b> (const <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> &amp;rhs, <a class="el" href="../../da/df3/classpl_allocator.htm">plAllocator</a> *pAllocator)</td></tr>
<tr class="memdesc:acf9bb642282fd51e4869267702b1be18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:acf9bb642282fd51e4869267702b1be18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0f1b63be41827a75cb0b30360afc393" id="r_ac0f1b63be41827a75cb0b30360afc393"><td class="memItemLeft" align="right" valign="top"><a id="ac0f1b63be41827a75cb0b30360afc393" name="ac0f1b63be41827a75cb0b30360afc393"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plHybridStringBase</b> (const <a class="el" href="../../d3/d2d/classpl_string_builder.htm">plStringBuilder</a> &amp;rhs, <a class="el" href="../../da/df3/classpl_allocator.htm">plAllocator</a> *pAllocator)</td></tr>
<tr class="memdesc:ac0f1b63be41827a75cb0b30360afc393"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:ac0f1b63be41827a75cb0b30360afc393"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a239a135a5de5a16519c920a3df329dfb" id="r_a239a135a5de5a16519c920a3df329dfb"><td class="memItemLeft" align="right" valign="top"><a id="a239a135a5de5a16519c920a3df329dfb" name="a239a135a5de5a16519c920a3df329dfb"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plHybridStringBase</b> (<a class="el" href="../../d3/d2d/classpl_string_builder.htm">plStringBuilder</a> &amp;&amp;rhs, <a class="el" href="../../da/df3/classpl_allocator.htm">plAllocator</a> *pAllocator)</td></tr>
<tr class="memdesc:a239a135a5de5a16519c920a3df329dfb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:a239a135a5de5a16519c920a3df329dfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ec1f4eea25a8bd2701dafb0cb13effe" id="r_a2ec1f4eea25a8bd2701dafb0cb13effe"><td class="memItemLeft" align="right" valign="top"><a id="a2ec1f4eea25a8bd2701dafb0cb13effe" name="a2ec1f4eea25a8bd2701dafb0cb13effe"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>~plHybridStringBase</b> ()</td></tr>
<tr class="memdesc:a2ec1f4eea25a8bd2701dafb0cb13effe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor. <br /></td></tr>
<tr class="separator:a2ec1f4eea25a8bd2701dafb0cb13effe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3039814de70e3a231619331b30de11c" id="r_ab3039814de70e3a231619331b30de11c"><td class="memItemLeft" align="right" valign="top"><a id="ab3039814de70e3a231619331b30de11c" name="ab3039814de70e3a231619331b30de11c"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="../../d1/db3/structpl_hybrid_string_base.htm">plHybridStringBase</a> &amp;rhs)</td></tr>
<tr class="memdesc:ab3039814de70e3a231619331b30de11c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:ab3039814de70e3a231619331b30de11c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18336dffdc3c1de88271c4e09987fba6" id="r_a18336dffdc3c1de88271c4e09987fba6"><td class="memItemLeft" align="right" valign="top"><a id="a18336dffdc3c1de88271c4e09987fba6" name="a18336dffdc3c1de88271c4e09987fba6"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="../../d1/db3/structpl_hybrid_string_base.htm">plHybridStringBase</a> &amp;&amp;rhs)</td></tr>
<tr class="memdesc:a18336dffdc3c1de88271c4e09987fba6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:a18336dffdc3c1de88271c4e09987fba6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a277309f215794ab66ed86d1969fdff61" id="r_a277309f215794ab66ed86d1969fdff61"><td class="memItemLeft" align="right" valign="top"><a id="a277309f215794ab66ed86d1969fdff61" name="a277309f215794ab66ed86d1969fdff61"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const char *rhs)</td></tr>
<tr class="memdesc:a277309f215794ab66ed86d1969fdff61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:a277309f215794ab66ed86d1969fdff61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade2007f94afff5f2136b396e960ec1c4" id="r_ade2007f94afff5f2136b396e960ec1c4"><td class="memItemLeft" align="right" valign="top"><a id="ade2007f94afff5f2136b396e960ec1c4" name="ade2007f94afff5f2136b396e960ec1c4"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const wchar_t *rhs)</td></tr>
<tr class="memdesc:ade2007f94afff5f2136b396e960ec1c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:ade2007f94afff5f2136b396e960ec1c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8654e89b57979b6db81346d3eb9d7928" id="r_a8654e89b57979b6db81346d3eb9d7928"><td class="memItemLeft" align="right" valign="top"><a id="a8654e89b57979b6db81346d3eb9d7928" name="a8654e89b57979b6db81346d3eb9d7928"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> &amp;rhs)</td></tr>
<tr class="memdesc:a8654e89b57979b6db81346d3eb9d7928"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:a8654e89b57979b6db81346d3eb9d7928"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8267a10e45b2c851e0de024a1c7e3a7e" id="r_a8267a10e45b2c851e0de024a1c7e3a7e"><td class="memItemLeft" align="right" valign="top"><a id="a8267a10e45b2c851e0de024a1c7e3a7e" name="a8267a10e45b2c851e0de024a1c7e3a7e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="../../d3/d2d/classpl_string_builder.htm">plStringBuilder</a> &amp;rhs)</td></tr>
<tr class="memdesc:a8267a10e45b2c851e0de024a1c7e3a7e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:a8267a10e45b2c851e0de024a1c7e3a7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66808900535b7aa3857016eaaa717562" id="r_a66808900535b7aa3857016eaaa717562"><td class="memItemLeft" align="right" valign="top"><a id="a66808900535b7aa3857016eaaa717562" name="a66808900535b7aa3857016eaaa717562"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="../../d3/d2d/classpl_string_builder.htm">plStringBuilder</a> &amp;&amp;rhs)</td></tr>
<tr class="memdesc:a66808900535b7aa3857016eaaa717562"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the data from <em>rhs</em>. <br /></td></tr>
<tr class="separator:a66808900535b7aa3857016eaaa717562"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="friends" name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a39038504a5113b0143cb6cd6c67c958d" id="r_a39038504a5113b0143cb6cd6c67c958d"><td class="memItemLeft" align="right" valign="top"><a id="a39038504a5113b0143cb6cd6c67c958d" name="a39038504a5113b0143cb6cd6c67c958d"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>plStringBuilder</b></td></tr>
<tr class="separator:a39038504a5113b0143cb6cd6c67c958d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="inherited" name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_structpl_string_base"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_types_structpl_string_base')"><img src="../../closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="../../de/d73/structpl_string_base.htm">plStringBase&lt; plHybridStringBase&lt; Size &gt; &gt;</a></td></tr>
<tr class="memitem:af25a0f1818a027657bf933b2bb334cb5 inherit pub_types_structpl_string_base" id="r_af25a0f1818a027657bf933b2bb334cb5"><td class="memItemLeft" align="right" valign="top">
using&#160;</td><td class="memItemRight" valign="bottom"><b>iterator</b></td></tr>
<tr class="separator:af25a0f1818a027657bf933b2bb334cb5 inherit pub_types_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a218db55e130cefa8bbef146fb7d96b94 inherit pub_types_structpl_string_base" id="r_a218db55e130cefa8bbef146fb7d96b94"><td class="memItemLeft" align="right" valign="top">
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_iterator</b></td></tr>
<tr class="separator:a218db55e130cefa8bbef146fb7d96b94 inherit pub_types_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7d23dc3ab75161d8f82218db1251e3f inherit pub_types_structpl_string_base" id="r_ae7d23dc3ab75161d8f82218db1251e3f"><td class="memItemLeft" align="right" valign="top">
using&#160;</td><td class="memItemRight" valign="bottom"><b>reverse_iterator</b></td></tr>
<tr class="separator:ae7d23dc3ab75161d8f82218db1251e3f inherit pub_types_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0e2162084911821c55d0f7a429da78a inherit pub_types_structpl_string_base" id="r_aa0e2162084911821c55d0f7a429da78a"><td class="memItemLeft" align="right" valign="top">
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_reverse_iterator</b></td></tr>
<tr class="separator:aa0e2162084911821c55d0f7a429da78a inherit pub_types_structpl_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><div class="compoundTemplParams">template&lt;plUInt16 Size&gt;<br />
struct plHybridStringBase&lt; Size &gt;</div><p>A string class for storing and passing around strings. </p>
<p>This class only allows read-access to its data. It does not allow modifications. To build / modify strings, use the <a class="el" href="../../d3/d2d/classpl_string_builder.htm" title="plStringBuilder is a class that is meant for creating and modifying strings.">plStringBuilder</a> class. <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plHybridString</a> has an internal array to store short strings without any memory allocations, it will dynamically allocate additional memory, if that cache is insufficient. Thus a hybrid string will always take up a certain amount of memory, which might be of concern when it is used as a member variable, in such cases you might want to use an <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plHybridString</a> with a very small internal array (1 would basically make it into a completely dynamic string). On the other hand, creating <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plHybridString</a> instances on the stack and working locally with them, is quite fast. Prefer to use the typedef'd string types <em>plString</em>, <em>plDynamicString</em>, <em>plString32</em> etc. Most strings in an application are rather short, typically shorter than 20 characters. Use <em>plString</em>, which is a typedef'd <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plHybridString</a> to use a cache size that is sufficient for more than 90% of all use cases. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a6dc4bd4cf0b2bda613396e87d27df9c6" name="a6dc4bd4cf0b2bda613396e87d27df9c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6dc4bd4cf0b2bda613396e87d27df9c6">&#9670;&#160;</a></span>Clear()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;plUInt16 Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d1/db3/structpl_hybrid_string_base.htm">plHybridStringBase</a>&lt; Size &gt;::Clear </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Resets this string to an empty string. </p>
<p>This will not deallocate any previously allocated data, but reuse that memory. </p>

</div>
</div>
<a id="a2e226b7e502bfc6f0f9f9dd05e4ce236" name="a2e226b7e502bfc6f0f9f9dd05e4ce236"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e226b7e502bfc6f0f9f9dd05e4ce236">&#9670;&#160;</a></span>GetCharacterCount()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;plUInt16 Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">PL_ALWAYS_INLINE plUInt32 <a class="el" href="../../d1/db3/structpl_hybrid_string_base.htm">plHybridStringBase</a>&lt; Size &gt;::GetCharacterCount </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the number of characters in this string. Might be less than GetElementCount, if it contains Utf8 multi-byte characters. </p>
<dl class="section note"><dt>Note</dt><dd>This is a slow operation, as it has to run through the entire string to count the Unicode characters. Only call this once and use the result as long as the string doesn't change. Don't call this in a loop. </dd></dl>

</div>
</div>
<a id="a220cf5af489f0f185b304c2a9388b8de" name="a220cf5af489f0f185b304c2a9388b8de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a220cf5af489f0f185b304c2a9388b8de">&#9670;&#160;</a></span>GetFirst()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;plUInt16 Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> <a class="el" href="../../d1/db3/structpl_hybrid_string_base.htm">plHybridStringBase</a>&lt; Size &gt;::GetFirst </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiNumCharacters</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a view to the sub-string containing the first uiNumCharacters characters of this string. </p>
<p>Note that this view will only be valid as long as this <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plHybridString</a> lives. Once the original string is destroyed, all views to them will point into invalid memory. </p>

</div>
</div>
<a id="ae5edcf5340b17ed493558ce3f9555294" name="ae5edcf5340b17ed493558ce3f9555294"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5edcf5340b17ed493558ce3f9555294">&#9670;&#160;</a></span>GetLast()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;plUInt16 Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> <a class="el" href="../../d1/db3/structpl_hybrid_string_base.htm">plHybridStringBase</a>&lt; Size &gt;::GetLast </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiNumCharacters</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a view to the sub-string containing the last uiNumCharacters characters of this string. </p>
<p>Note that this view will only be valid as long as this <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plHybridString</a> lives. Once the original string is destroyed, all views to them will point into invalid memory. </p>

</div>
</div>
<a id="a4bc55a0680f91d3cc243e4a1c65996a6" name="a4bc55a0680f91d3cc243e4a1c65996a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4bc55a0680f91d3cc243e4a1c65996a6">&#9670;&#160;</a></span>GetSubString()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;plUInt16 Size&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> <a class="el" href="../../d1/db3/structpl_hybrid_string_base.htm">plHybridStringBase</a>&lt; Size &gt;::GetSubString </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiFirstCharacter</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiNumCharacters</em></span>&#160;) const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a view to a sub-string of this string, starting at character uiFirstCharacter, up until uiFirstCharacter + uiNumCharacters. </p>
<p>Note that this view will only be valid as long as this <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plHybridString</a> lives. Once the original string is destroyed, all views to them will point into invalid memory. </p>

</div>
</div>
<hr/>The documentation for this struct was generated from the following files:<ul>
<li>Code/Engine/Foundation/Strings/<a class="el" href="../../db/db5/_string_8h_source.htm">String.h</a></li>
<li>Code/Engine/Foundation/Strings/Implementation/<a class="el" href="../../d7/dec/_all_strings__inl_8h_source.htm">AllStrings_inl.h</a></li>
<li>Code/Engine/Foundation/Strings/Implementation/<a class="el" href="../../d7/d4f/_string__inl_8h_source.htm">String_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d1/db3/structpl_hybrid_string_base.htm">plHybridStringBase</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
