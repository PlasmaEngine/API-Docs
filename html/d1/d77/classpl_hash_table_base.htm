<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>plEngine: plHashTableBase&lt; KeyType, ValueType, Hasher &gt; Class Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only-darkmode-toggle.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">plEngine<span id="projectnumber">&#160;Release 2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d1/d77/classpl_hash_table_base.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="../../db/d95/classpl_hash_table_base-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plHashTableBase&lt; KeyType, ValueType, Hasher &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p>Implementation of a hashtable which stores key/value pairs.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../de/def/_hash_table_8h_source.htm">HashTable.h</a>&gt;</code></p>

<p>Inherited by <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUuid, plSubAsset &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; const char *, plActionDescriptorHandle &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHybridString, plSharedPtr&lt; plAnimGraphSharedBoneWeights &gt; &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHashedString, plAnimController::AnimClipInfo &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plArchiveStoredString, plUInt32 &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUuid, plAssetInfo * &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUuid, plEditorEngineSyncObject * &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHashedString, plBlackboard::Entry &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHashedString, plSharedPtr&lt; plBlackboard &gt; &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHashedString, plInt32 &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHashedString, float &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHashedString, plHybridString &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHashedString, bool &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plVariant, plPropertyUiState &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; const void *, plUInt32 &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHybridString, DependencyListType &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; vk::DescriptorType, float &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUuid, plDocumentNodeManager::NodeInternal &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUuid, plUniquePtr&lt; plConnection &gt; &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUuid, const plDocumentObject * &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUuid, plAssetDocument * &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUuid, HandleType &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; const plRTTI *, ShapeIconInfo &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUuid, plEngineProcessDocumentContext * &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUInt32, plSmallArray&lt; plExpressionAST::Node *, 1 &gt; &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; const plExpressionAST::Node *, plUInt32 &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plExpressionAST::Node *, plExpressionAST::Node * &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHashedString, plUInt32 &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHashedString, plExpressionAST::Node * &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHashedString, plHybridArray&lt; plExpression::FunctionDesc, 1 &gt; &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUInt32, plFileserveClientContext &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUInt32, plGALBufferResourceViewHandle &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUInt32, plGALBufferUnorderedAccessViewHandle &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHashedString, plGALSamplerStateCreationDescription &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUInt32, plGALTextureResourceViewHandle &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUInt32, plGALRenderTargetViewHandle &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUInt32, plGALTextureUnorderedAccessViewHandle &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHashedString, plTypeVersionInfo &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; void *, plUInt32 &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHybridString, plGALTextureHandle &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plGALShaderHandle, plGALVertexDeclarationHandle &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plImageCopyVulkan::RenderPassCacheKey, vk::RenderPass &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plImageCopyVulkan::ImageViewCacheKey, vk::ImageView &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; vk::Image, plImageCopyVulkan::ImageViewCacheValue &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plImageCopyVulkan::FramebufferCacheKey, vk::Framebuffer &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plShaderUtils::plBuiltinShaderType, plShaderUtils::plBuiltinShader &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plTypelessResourceHandle, plHybridArray &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; T, typename DataMap::Iterator &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plString, plVariant &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; const plRTTI *, CreateObjectFunc &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHashedString, plHashedString &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHashedString, plVariant &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHashedString, plTypedResourceHandle&lt; class plTexture2DResource &gt; &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHashedString, plTypedResourceHandle &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; uint32_t, ExportedSharedPool &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHashedString, plMeshResourceDescriptor::BoneData &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; KEY, VALUE &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; XrPath, plHybridString &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; const plRTTI *, plWorldModule * &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plInt64, PathStateType &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plStringView, plPhantomRTTI * &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; const plDocumentObject *, plUniquePtr&lt; plProcGenNodeBase &gt; &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; DocObjAndOutput, plExpressionAST::Node * &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUInt64, plProcPlacementComponent::OutputContext::TileIndexAndAge &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUInt32, float &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUuid, plHybridArray&lt; plPropertyReference, 1 &gt; &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; const plRTTI *, plQtDocumentTreeModelAdapter * &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUInt32, FileOpData &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUInt32, ClientData &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUuid, plUInt32 &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUuid, QSharedPointer&lt; plQtProxy &gt; &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUInt64, ResourceData &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHybridString, plReflectedTypeStorageManager::ReflectedTypeStorageMapping::StorageInfo &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUInt32, plRemoteMessageQueue &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUInt64, plGALTextureResourceViewHandle &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUInt64, plGALTextureUnorderedAccessViewHandle &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUInt64, plGALSamplerStateHandle &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUInt64, plGALBufferResourceViewHandle &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUInt64, plGALBufferUnorderedAccessViewHandle &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUInt64, BoundConstantBuffer &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; const plRTTI *, plUInt32 &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plRenderPipelinePassConnection *, plUInt32 &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHashedString, const plRenderPipelineNodePin * &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plTempHashedString, plResource * &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; const plRTTI *, plResourceManager::LoadedResources &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plTempHashedString, const plRTTI * &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plTempHashedString, plHashedString &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHashedString, plDelegate &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUuid, plRttiConverterObject &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; const void *, plUuid &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUuid, LayerInfo &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plScriptWorldModule::FunctionContext, typename DataMap::Iterator &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plScriptInstance *, plSmallArray&lt; plScriptCoroutineHandle, 8 &gt; &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plComponentHandle, typename DataMap::Iterator &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; LightAndRefView, plUInt32 &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plTempHashedString, bool &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plTempHashedString, plInt64 &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plTempHashedString, double &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plTempHashedString, plVec3Template &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plTempHashedString, plColor &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plTempHashedString, plHybridString &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUInt32, plTypeScriptBinding::FunctionBinding &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUInt32, plTypeScriptBinding::PropertyBinding &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; duk_context *, plWorld * &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; const plRTTI *, const plVariantTypeInfo * &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; const plRTTI *, DefaultInput &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; const plVisualScriptPin *, plUInt32 &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUInt32, DataDesc &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plVariant, plUInt32 &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHashedString, plVisualScriptInstanceData &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; const plDocumentObject *, plEnum&lt; plVisualScriptDataType &gt; &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; const plVisualScriptPin *, plEnum&lt; plVisualScriptDataType &gt; &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHashedString, Value &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; const plRTTI *, plWorldModuleTypeId &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plHybridString, plHybridString &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUuid, plGameObjectHandle &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; plUuid, plComponentHandle &gt;</a>, <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; const plRTTI *, Components &gt;</a>, and <a class="el" href="../../dd/d55/classpl_hash_table.htm">plHashTable&lt; KeyType, ValueType, Hasher, AllocatorWrapper &gt;</a>.</p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ad15c7be492b4dbf1cdebf1032205eed2" id="r_ad15c7be492b4dbf1cdebf1032205eed2"><td class="memItemLeft" align="right" valign="top"><a id="ad15c7be492b4dbf1cdebf1032205eed2" name="ad15c7be492b4dbf1cdebf1032205eed2"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>Iterator</b> = <a class="el" href="../../d3/ddb/structpl_hash_table_base_iterator.htm">plHashTableBaseIterator</a>&lt;KeyType, ValueType, Hasher&gt;</td></tr>
<tr class="separator:ad15c7be492b4dbf1cdebf1032205eed2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58931aeb6c184be00e6d98b6106db51c" id="r_a58931aeb6c184be00e6d98b6106db51c"><td class="memItemLeft" align="right" valign="top"><a id="a58931aeb6c184be00e6d98b6106db51c" name="a58931aeb6c184be00e6d98b6106db51c"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>ConstIterator</b> = <a class="el" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">plHashTableBaseConstIterator</a>&lt;KeyType, ValueType, Hasher&gt;</td></tr>
<tr class="separator:a58931aeb6c184be00e6d98b6106db51c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a05c7e8fd2c45ca40b3e06854165202ae" id="r_a05c7e8fd2c45ca40b3e06854165202ae"><td class="memItemLeft" align="right" valign="top"><a id="a05c7e8fd2c45ca40b3e06854165202ae" name="a05c7e8fd2c45ca40b3e06854165202ae"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator==</b> (const <a class="el" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a05c7e8fd2c45ca40b3e06854165202ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this table to another table. <br /></td></tr>
<tr class="separator:a05c7e8fd2c45ca40b3e06854165202ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a1e18f7414cce03426a7ed116bdea0a" id="r_a9a1e18f7414cce03426a7ed116bdea0a"><td class="memItemLeft" align="right" valign="top"><a id="a9a1e18f7414cce03426a7ed116bdea0a" name="a9a1e18f7414cce03426a7ed116bdea0a"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>PL_ADD_DEFAULT_OPERATOR_NOTEQUAL</b> (const <a class="el" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt; &amp;)</td></tr>
<tr class="separator:a9a1e18f7414cce03426a7ed116bdea0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99fbca5d62f7ce498d8a89711ad0b6b4" id="r_a99fbca5d62f7ce498d8a89711ad0b6b4"><td class="memItemLeft" align="right" valign="top"><a id="a99fbca5d62f7ce498d8a89711ad0b6b4" name="a99fbca5d62f7ce498d8a89711ad0b6b4"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Reserve</b> (plUInt32 uiCapacity)</td></tr>
<tr class="memdesc:a99fbca5d62f7ce498d8a89711ad0b6b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Expands the hashtable by over-allocating the internal storage so that the load factor is lower or equal to 60% when inserting the given number of entries. <br /></td></tr>
<tr class="separator:a99fbca5d62f7ce498d8a89711ad0b6b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74ac90be885466fb0773ad979afd6b28" id="r_a74ac90be885466fb0773ad979afd6b28"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a74ac90be885466fb0773ad979afd6b28">Compact</a> ()</td></tr>
<tr class="memdesc:a74ac90be885466fb0773ad979afd6b28"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tries to compact the hashtable to avoid wasting memory.  <br /></td></tr>
<tr class="separator:a74ac90be885466fb0773ad979afd6b28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c2a07024da01255c3c0503e6d82ffcd" id="r_a3c2a07024da01255c3c0503e6d82ffcd"><td class="memItemLeft" align="right" valign="top"><a id="a3c2a07024da01255c3c0503e6d82ffcd" name="a3c2a07024da01255c3c0503e6d82ffcd"></a>
plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GetCount</b> () const</td></tr>
<tr class="memdesc:a3c2a07024da01255c3c0503e6d82ffcd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of active entries in the table. <br /></td></tr>
<tr class="separator:a3c2a07024da01255c3c0503e6d82ffcd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8838409dbd1dce42124bb74824c0d6b4" id="r_a8838409dbd1dce42124bb74824c0d6b4"><td class="memItemLeft" align="right" valign="top"><a id="a8838409dbd1dce42124bb74824c0d6b4" name="a8838409dbd1dce42124bb74824c0d6b4"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEmpty</b> () const</td></tr>
<tr class="memdesc:a8838409dbd1dce42124bb74824c0d6b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the hashtable does not contain any elements. <br /></td></tr>
<tr class="separator:a8838409dbd1dce42124bb74824c0d6b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95c6a29c1fdd09be149dde078baa3b89" id="r_a95c6a29c1fdd09be149dde078baa3b89"><td class="memItemLeft" align="right" valign="top"><a id="a95c6a29c1fdd09be149dde078baa3b89" name="a95c6a29c1fdd09be149dde078baa3b89"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Clear</b> ()</td></tr>
<tr class="memdesc:a95c6a29c1fdd09be149dde078baa3b89"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clears the table. <br /></td></tr>
<tr class="separator:a95c6a29c1fdd09be149dde078baa3b89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a907117a01c398b2cdb7e632406cd9652" id="r_a907117a01c398b2cdb7e632406cd9652"><td class="memTemplParams" colspan="2">template&lt;typename CompatibleKeyType , typename CompatibleValueType &gt; </td></tr>
<tr class="memitem:a907117a01c398b2cdb7e632406cd9652"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a907117a01c398b2cdb7e632406cd9652">Insert</a> (CompatibleKeyType &amp;&amp;key, CompatibleValueType &amp;&amp;value, ValueType *out_pOldValue=nullptr)</td></tr>
<tr class="memdesc:a907117a01c398b2cdb7e632406cd9652"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inserts the key value pair or replaces value if an entry with the given key already exists.  <br /></td></tr>
<tr class="separator:a907117a01c398b2cdb7e632406cd9652"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa03f76a0cc178f84de2c32937c9ace5c" id="r_aa03f76a0cc178f84de2c32937c9ace5c"><td class="memTemplParams" colspan="2"><a id="aa03f76a0cc178f84de2c32937c9ace5c" name="aa03f76a0cc178f84de2c32937c9ace5c"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:aa03f76a0cc178f84de2c32937c9ace5c"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Remove</b> (const CompatibleKeyType &amp;key, ValueType *out_pOldValue=nullptr)</td></tr>
<tr class="memdesc:aa03f76a0cc178f84de2c32937c9ace5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes the entry with the given key. Returns whether an entry was removed and optionally writes out the old value to out_oldValue. <br /></td></tr>
<tr class="separator:aa03f76a0cc178f84de2c32937c9ace5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5990d39d061691183bdad676e1e9636a" id="r_a5990d39d061691183bdad676e1e9636a"><td class="memItemLeft" align="right" valign="top"><a id="a5990d39d061691183bdad676e1e9636a" name="a5990d39d061691183bdad676e1e9636a"></a>
<a class="el" href="../../d3/ddb/structpl_hash_table_base_iterator.htm">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><b>Remove</b> (const <a class="el" href="../../d3/ddb/structpl_hash_table_base_iterator.htm">Iterator</a> &amp;pos)</td></tr>
<tr class="memdesc:a5990d39d061691183bdad676e1e9636a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erases the key/value pair at the given Iterator. Returns an iterator to the element after the given iterator. <br /></td></tr>
<tr class="separator:a5990d39d061691183bdad676e1e9636a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fcc1390a0f3116321acad8dde202adf" id="r_a2fcc1390a0f3116321acad8dde202adf"><td class="memItemLeft" align="right" valign="top"><a id="a2fcc1390a0f3116321acad8dde202adf" name="a2fcc1390a0f3116321acad8dde202adf"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Remove</b> (const <a class="el" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">ConstIterator</a> &amp;pos)=delete</td></tr>
<tr class="memdesc:a2fcc1390a0f3116321acad8dde202adf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Cannot remove an element with just a <a class="el" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm" title="Const iterator.">plHashTableBaseConstIterator</a>. <br /></td></tr>
<tr class="separator:a2fcc1390a0f3116321acad8dde202adf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48353ae8728017bf107e01ba0b8b3841" id="r_a48353ae8728017bf107e01ba0b8b3841"><td class="memTemplParams" colspan="2"><a id="a48353ae8728017bf107e01ba0b8b3841" name="a48353ae8728017bf107e01ba0b8b3841"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a48353ae8728017bf107e01ba0b8b3841"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, ValueType &amp;out_value) const</td></tr>
<tr class="memdesc:a48353ae8728017bf107e01ba0b8b3841"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether an entry with the given key was found and if found writes out the corresponding value to out_value. <br /></td></tr>
<tr class="separator:a48353ae8728017bf107e01ba0b8b3841"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0156dd65557d6d35549df881c10eb8c7" id="r_a0156dd65557d6d35549df881c10eb8c7"><td class="memTemplParams" colspan="2"><a id="a0156dd65557d6d35549df881c10eb8c7" name="a0156dd65557d6d35549df881c10eb8c7"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a0156dd65557d6d35549df881c10eb8c7"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, const ValueType *&amp;out_pValue) const</td></tr>
<tr class="memdesc:a0156dd65557d6d35549df881c10eb8c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether an entry with the given key was found and if found writes out the pointer to the corresponding value to out_pValue. <br /></td></tr>
<tr class="separator:a0156dd65557d6d35549df881c10eb8c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa37f0b3b8d47aac58e27c0b0a5926c7f" id="r_aa37f0b3b8d47aac58e27c0b0a5926c7f"><td class="memTemplParams" colspan="2"><a id="aa37f0b3b8d47aac58e27c0b0a5926c7f" name="aa37f0b3b8d47aac58e27c0b0a5926c7f"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:aa37f0b3b8d47aac58e27c0b0a5926c7f"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, ValueType *&amp;out_pValue) const</td></tr>
<tr class="memdesc:aa37f0b3b8d47aac58e27c0b0a5926c7f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether an entry with the given key was found and if found writes out the pointer to the corresponding value to out_pValue. <br /></td></tr>
<tr class="separator:aa37f0b3b8d47aac58e27c0b0a5926c7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a583c37867460a802d93c0b5fff6633ac" id="r_a583c37867460a802d93c0b5fff6633ac"><td class="memTemplParams" colspan="2"><a id="a583c37867460a802d93c0b5fff6633ac" name="a583c37867460a802d93c0b5fff6633ac"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a583c37867460a802d93c0b5fff6633ac"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">ConstIterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Find</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="memdesc:a583c37867460a802d93c0b5fff6633ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Searches for key, returns a <a class="el" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm" title="Const iterator.">plHashTableBaseConstIterator</a> to it or an invalid iterator, if no such key is found. O(1) operation. <br /></td></tr>
<tr class="separator:a583c37867460a802d93c0b5fff6633ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae129dae949850f3ca9e8beb54adb6725" id="r_ae129dae949850f3ca9e8beb54adb6725"><td class="memTemplParams" colspan="2"><a id="ae129dae949850f3ca9e8beb54adb6725" name="ae129dae949850f3ca9e8beb54adb6725"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:ae129dae949850f3ca9e8beb54adb6725"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d3/ddb/structpl_hash_table_base_iterator.htm">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Find</b> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="memdesc:ae129dae949850f3ca9e8beb54adb6725"><td class="mdescLeft">&#160;</td><td class="mdescRight">Searches for key, returns an Iterator to it or an invalid iterator, if no such key is found. O(1) operation. <br /></td></tr>
<tr class="separator:ae129dae949850f3ca9e8beb54adb6725"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a548dfa76aefe2b718a6fbc4859e9395d" id="r_a548dfa76aefe2b718a6fbc4859e9395d"><td class="memTemplParams" colspan="2"><a id="a548dfa76aefe2b718a6fbc4859e9395d" name="a548dfa76aefe2b718a6fbc4859e9395d"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a548dfa76aefe2b718a6fbc4859e9395d"><td class="memTemplItemLeft" align="right" valign="top">const ValueType *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetValue</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="memdesc:a548dfa76aefe2b718a6fbc4859e9395d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the value of the entry with the given key if found, otherwise returns nullptr. <br /></td></tr>
<tr class="separator:a548dfa76aefe2b718a6fbc4859e9395d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed8989fcf6f7b9536995482f6b00853c" id="r_aed8989fcf6f7b9536995482f6b00853c"><td class="memTemplParams" colspan="2"><a id="aed8989fcf6f7b9536995482f6b00853c" name="aed8989fcf6f7b9536995482f6b00853c"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:aed8989fcf6f7b9536995482f6b00853c"><td class="memTemplItemLeft" align="right" valign="top">ValueType *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetValue</b> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="memdesc:aed8989fcf6f7b9536995482f6b00853c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the value of the entry with the given key if found, otherwise returns nullptr. <br /></td></tr>
<tr class="separator:aed8989fcf6f7b9536995482f6b00853c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50c9809342771e08cdb1d89f451c78be" id="r_a50c9809342771e08cdb1d89f451c78be"><td class="memItemLeft" align="right" valign="top"><a id="a50c9809342771e08cdb1d89f451c78be" name="a50c9809342771e08cdb1d89f451c78be"></a>
ValueType &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator[]</b> (const KeyType &amp;key)</td></tr>
<tr class="memdesc:a50c9809342771e08cdb1d89f451c78be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the value to the given key if found or creates a new entry with the given key and a default constructed value. <br /></td></tr>
<tr class="separator:a50c9809342771e08cdb1d89f451c78be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cec740f28f835aae6170dfb648e8c89" id="r_a0cec740f28f835aae6170dfb648e8c89"><td class="memItemLeft" align="right" valign="top"><a id="a0cec740f28f835aae6170dfb648e8c89" name="a0cec740f28f835aae6170dfb648e8c89"></a>
ValueType &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>FindOrAdd</b> (const KeyType &amp;key, bool *out_pExisted=nullptr)</td></tr>
<tr class="memdesc:a0cec740f28f835aae6170dfb648e8c89"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the value stored at the given key. If none exists, one is created. <em>bExisted</em> indicates whether an element needed to be created. <br /></td></tr>
<tr class="separator:a0cec740f28f835aae6170dfb648e8c89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a180f72af49b7753a2c816b18a478103b" id="r_a180f72af49b7753a2c816b18a478103b"><td class="memTemplParams" colspan="2"><a id="a180f72af49b7753a2c816b18a478103b" name="a180f72af49b7753a2c816b18a478103b"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a180f72af49b7753a2c816b18a478103b"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Contains</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="memdesc:a180f72af49b7753a2c816b18a478103b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns if an entry with given key exists in the table. <br /></td></tr>
<tr class="separator:a180f72af49b7753a2c816b18a478103b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cf98e9e9adc3c0d822cb4c7124e8b9a" id="r_a0cf98e9e9adc3c0d822cb4c7124e8b9a"><td class="memItemLeft" align="right" valign="top"><a id="a0cf98e9e9adc3c0d822cb4c7124e8b9a" name="a0cf98e9e9adc3c0d822cb4c7124e8b9a"></a>
<a class="el" href="../../d3/ddb/structpl_hash_table_base_iterator.htm">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetIterator</b> ()</td></tr>
<tr class="memdesc:a0cf98e9e9adc3c0d822cb4c7124e8b9a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an Iterator to the very first element. <br /></td></tr>
<tr class="separator:a0cf98e9e9adc3c0d822cb4c7124e8b9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a606266af037d66bb3cc32ef406e3e257" id="r_a606266af037d66bb3cc32ef406e3e257"><td class="memItemLeft" align="right" valign="top"><a id="a606266af037d66bb3cc32ef406e3e257" name="a606266af037d66bb3cc32ef406e3e257"></a>
<a class="el" href="../../d3/ddb/structpl_hash_table_base_iterator.htm">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetEndIterator</b> ()</td></tr>
<tr class="memdesc:a606266af037d66bb3cc32ef406e3e257"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an Iterator to the first element that is not part of the hash-table. Needed to support range based for loops. <br /></td></tr>
<tr class="separator:a606266af037d66bb3cc32ef406e3e257"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d7c95e3cb82005822e4ad6122125628" id="r_a9d7c95e3cb82005822e4ad6122125628"><td class="memItemLeft" align="right" valign="top"><a id="a9d7c95e3cb82005822e4ad6122125628" name="a9d7c95e3cb82005822e4ad6122125628"></a>
<a class="el" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetIterator</b> () const</td></tr>
<tr class="memdesc:a9d7c95e3cb82005822e4ad6122125628"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a constant Iterator to the very first element. <br /></td></tr>
<tr class="separator:a9d7c95e3cb82005822e4ad6122125628"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13dc4ae012913012382b0002c562c48b" id="r_a13dc4ae012913012382b0002c562c48b"><td class="memItemLeft" align="right" valign="top"><a id="a13dc4ae012913012382b0002c562c48b" name="a13dc4ae012913012382b0002c562c48b"></a>
<a class="el" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetEndIterator</b> () const</td></tr>
<tr class="memdesc:a13dc4ae012913012382b0002c562c48b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a <a class="el" href="../../d0/d8c/structpl_hash_table_base_const_iterator.htm" title="Const iterator.">plHashTableBaseConstIterator</a> to the first element that is not part of the hash-table. Needed to support range based for loops. <br /></td></tr>
<tr class="separator:a13dc4ae012913012382b0002c562c48b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12cf789b156309f4bf0e734832c10c1c" id="r_a12cf789b156309f4bf0e734832c10c1c"><td class="memItemLeft" align="right" valign="top"><a id="a12cf789b156309f4bf0e734832c10c1c" name="a12cf789b156309f4bf0e734832c10c1c"></a>
<a class="el" href="../../da/df3/classpl_allocator.htm">plAllocator</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetAllocator</b> () const</td></tr>
<tr class="memdesc:a12cf789b156309f4bf0e734832c10c1c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the allocator that is used by this instance. <br /></td></tr>
<tr class="separator:a12cf789b156309f4bf0e734832c10c1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a301f4fa645010a5852d88abea52543d9" id="r_a301f4fa645010a5852d88abea52543d9"><td class="memItemLeft" align="right" valign="top"><a id="a301f4fa645010a5852d88abea52543d9" name="a301f4fa645010a5852d88abea52543d9"></a>
plUInt64&#160;</td><td class="memItemRight" valign="bottom"><b>GetHeapMemoryUsage</b> () const</td></tr>
<tr class="memdesc:a301f4fa645010a5852d88abea52543d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the amount of bytes that are currently allocated on the heap. <br /></td></tr>
<tr class="separator:a301f4fa645010a5852d88abea52543d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad665625f4f7468ad658d5f3bf000f5e" id="r_aad665625f4f7468ad658d5f3bf000f5e"><td class="memItemLeft" align="right" valign="top"><a id="aad665625f4f7468ad658d5f3bf000f5e" name="aad665625f4f7468ad658d5f3bf000f5e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Swap</b> (<a class="el" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt; &amp;other)</td></tr>
<tr class="memdesc:aad665625f4f7468ad658d5f3bf000f5e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Swaps this map with the other one. <br /></td></tr>
<tr class="separator:aad665625f4f7468ad658d5f3bf000f5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20d8d5fdaa0dd584295337b9a2a1f0b3" id="r_a20d8d5fdaa0dd584295337b9a2a1f0b3"><td class="memTemplParams" colspan="2"><a id="a20d8d5fdaa0dd584295337b9a2a1f0b3" name="a20d8d5fdaa0dd584295337b9a2a1f0b3"></a>
template&lt;typename CompatibleKeyType , typename CompatibleValueType &gt; </td></tr>
<tr class="memitem:a20d8d5fdaa0dd584295337b9a2a1f0b3"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Insert</b> (CompatibleKeyType &amp;&amp;key, CompatibleValueType &amp;&amp;value, V *out_pOldValue)</td></tr>
<tr class="separator:a20d8d5fdaa0dd584295337b9a2a1f0b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2682edf642219196f06397fca7470126" id="r_a2682edf642219196f06397fca7470126"><td class="memTemplParams" colspan="2"><a id="a2682edf642219196f06397fca7470126" name="a2682edf642219196f06397fca7470126"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a2682edf642219196f06397fca7470126"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Remove</b> (const CompatibleKeyType &amp;key, V *out_pOldValue)</td></tr>
<tr class="separator:a2682edf642219196f06397fca7470126"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a146ccb6cf10d994b1f23f2add6e51182" id="r_a146ccb6cf10d994b1f23f2add6e51182"><td class="memTemplParams" colspan="2"><a id="a146ccb6cf10d994b1f23f2add6e51182" name="a146ccb6cf10d994b1f23f2add6e51182"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a146ccb6cf10d994b1f23f2add6e51182"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, V &amp;out_value) const</td></tr>
<tr class="separator:a146ccb6cf10d994b1f23f2add6e51182"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c47d8896908df1cac41c118b8854533" id="r_a1c47d8896908df1cac41c118b8854533"><td class="memTemplParams" colspan="2"><a id="a1c47d8896908df1cac41c118b8854533" name="a1c47d8896908df1cac41c118b8854533"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a1c47d8896908df1cac41c118b8854533"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, const V *&amp;out_pValue) const</td></tr>
<tr class="separator:a1c47d8896908df1cac41c118b8854533"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0431fe484460c7b0c4e6264f77fed400" id="r_a0431fe484460c7b0c4e6264f77fed400"><td class="memTemplParams" colspan="2"><a id="a0431fe484460c7b0c4e6264f77fed400" name="a0431fe484460c7b0c4e6264f77fed400"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a0431fe484460c7b0c4e6264f77fed400"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, V *&amp;out_pValue) const</td></tr>
<tr class="separator:a0431fe484460c7b0c4e6264f77fed400"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0cdf00f049aa5b3982ac1b90302aec3" id="r_af0cdf00f049aa5b3982ac1b90302aec3"><td class="memTemplParams" colspan="2"><a id="af0cdf00f049aa5b3982ac1b90302aec3" name="af0cdf00f049aa5b3982ac1b90302aec3"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:af0cdf00f049aa5b3982ac1b90302aec3"><td class="memTemplItemLeft" align="right" valign="top">const V *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetValue</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="separator:af0cdf00f049aa5b3982ac1b90302aec3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4f3c23a69a2c566e2bc306bd88f4e6b" id="r_ae4f3c23a69a2c566e2bc306bd88f4e6b"><td class="memTemplParams" colspan="2"><a id="ae4f3c23a69a2c566e2bc306bd88f4e6b" name="ae4f3c23a69a2c566e2bc306bd88f4e6b"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:ae4f3c23a69a2c566e2bc306bd88f4e6b"><td class="memTemplItemLeft" align="right" valign="top">V *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetValue</b> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="separator:ae4f3c23a69a2c566e2bc306bd88f4e6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52df8ba3d29655d9ebceb03335cbe389" id="r_a52df8ba3d29655d9ebceb03335cbe389"><td class="memTemplParams" colspan="2"><a id="a52df8ba3d29655d9ebceb03335cbe389" name="a52df8ba3d29655d9ebceb03335cbe389"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a52df8ba3d29655d9ebceb03335cbe389"><td class="memTemplItemLeft" align="right" valign="top">PL_FORCE_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Contains</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="separator:a52df8ba3d29655d9ebceb03335cbe389"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3d6b1b131214ea3dc719f9db1b482dc" id="r_ae3d6b1b131214ea3dc719f9db1b482dc"><td class="memTemplParams" colspan="2"><a id="ae3d6b1b131214ea3dc719f9db1b482dc" name="ae3d6b1b131214ea3dc719f9db1b482dc"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:ae3d6b1b131214ea3dc719f9db1b482dc"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE plUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>FindEntry</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="separator:ae3d6b1b131214ea3dc719f9db1b482dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-methods" name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:ad6c5f5741011d0ef32a95275acd83b7a" id="r_ad6c5f5741011d0ef32a95275acd83b7a"><td class="memItemLeft" align="right" valign="top"><a id="ad6c5f5741011d0ef32a95275acd83b7a" name="ad6c5f5741011d0ef32a95275acd83b7a"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plHashTableBase</b> (<a class="el" href="../../da/df3/classpl_allocator.htm">plAllocator</a> *pAllocator)</td></tr>
<tr class="memdesc:ad6c5f5741011d0ef32a95275acd83b7a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an empty hashtable. Does not allocate any data yet. <br /></td></tr>
<tr class="separator:ad6c5f5741011d0ef32a95275acd83b7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a953b155c2f90e619f282d723089aceb4" id="r_a953b155c2f90e619f282d723089aceb4"><td class="memItemLeft" align="right" valign="top"><a id="a953b155c2f90e619f282d723089aceb4" name="a953b155c2f90e619f282d723089aceb4"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plHashTableBase</b> (const <a class="el" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt; &amp;rhs, <a class="el" href="../../da/df3/classpl_allocator.htm">plAllocator</a> *pAllocator)</td></tr>
<tr class="memdesc:a953b155c2f90e619f282d723089aceb4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a copy of the given hashtable. <br /></td></tr>
<tr class="separator:a953b155c2f90e619f282d723089aceb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8296996164544fe91759837172b18c36" id="r_a8296996164544fe91759837172b18c36"><td class="memItemLeft" align="right" valign="top"><a id="a8296996164544fe91759837172b18c36" name="a8296996164544fe91759837172b18c36"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plHashTableBase</b> (<a class="el" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt; &amp;&amp;rhs, <a class="el" href="../../da/df3/classpl_allocator.htm">plAllocator</a> *pAllocator)</td></tr>
<tr class="memdesc:a8296996164544fe91759837172b18c36"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves data from an existing hashtable into this one. <br /></td></tr>
<tr class="separator:a8296996164544fe91759837172b18c36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b07f15fd03d8afdca553fcaea84706d" id="r_a5b07f15fd03d8afdca553fcaea84706d"><td class="memItemLeft" align="right" valign="top"><a id="a5b07f15fd03d8afdca553fcaea84706d" name="a5b07f15fd03d8afdca553fcaea84706d"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>~plHashTableBase</b> ()</td></tr>
<tr class="memdesc:a5b07f15fd03d8afdca553fcaea84706d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor. <br /></td></tr>
<tr class="separator:a5b07f15fd03d8afdca553fcaea84706d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a4a8b87717eee0a9d12e7f39323a8e2" id="r_a3a4a8b87717eee0a9d12e7f39323a8e2"><td class="memItemLeft" align="right" valign="top"><a id="a3a4a8b87717eee0a9d12e7f39323a8e2" name="a3a4a8b87717eee0a9d12e7f39323a8e2"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt; &amp;rhs)</td></tr>
<tr class="memdesc:a3a4a8b87717eee0a9d12e7f39323a8e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from another hashtable into this one. <br /></td></tr>
<tr class="separator:a3a4a8b87717eee0a9d12e7f39323a8e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b0a18a834a42eec0211e40e52990d17" id="r_a9b0a18a834a42eec0211e40e52990d17"><td class="memItemLeft" align="right" valign="top"><a id="a9b0a18a834a42eec0211e40e52990d17" name="a9b0a18a834a42eec0211e40e52990d17"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt; &amp;&amp;rhs)</td></tr>
<tr class="memdesc:a9b0a18a834a42eec0211e40e52990d17"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves data from an existing hashtable into this one. <br /></td></tr>
<tr class="separator:a9b0a18a834a42eec0211e40e52990d17"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="friends" name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a71fa3b75c3f406c6bff11991d93dbe4c" id="r_a71fa3b75c3f406c6bff11991d93dbe4c"><td class="memItemLeft" align="right" valign="top"><a id="a71fa3b75c3f406c6bff11991d93dbe4c" name="a71fa3b75c3f406c6bff11991d93dbe4c"></a>
struct&#160;</td><td class="memItemRight" valign="bottom"><b>plHashTableBaseConstIterator&lt; KeyType, ValueType, Hasher &gt;</b></td></tr>
<tr class="separator:a71fa3b75c3f406c6bff11991d93dbe4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88e649c96477a68e2635bbbaf18016e7" id="r_a88e649c96477a68e2635bbbaf18016e7"><td class="memItemLeft" align="right" valign="top"><a id="a88e649c96477a68e2635bbbaf18016e7" name="a88e649c96477a68e2635bbbaf18016e7"></a>
struct&#160;</td><td class="memItemRight" valign="bottom"><b>plHashTableBaseIterator&lt; KeyType, ValueType, Hasher &gt;</b></td></tr>
<tr class="separator:a88e649c96477a68e2635bbbaf18016e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><div class="compoundTemplParams">template&lt;typename KeyType, typename ValueType, typename Hasher&gt;<br />
class plHashTableBase&lt; KeyType, ValueType, Hasher &gt;</div><p>Implementation of a hashtable which stores key/value pairs. </p>
<p>The hashtable maps keys to values by using the hash of the key as an index into the table. This implementation uses linear-probing to resolve hash collisions which means all key/value pairs are stored in a linear array. All insertion/erasure/lookup functions take O(1) time if the table does not need to be expanded, which happens when the load gets greater than 60%. The hash function can be customized by providing a Hasher helper class like <a class="el" href="../../db/dd0/structpl_hash_helper.htm" title="Helper struct to calculate the Hash of different types.">plHashHelper</a>. </p><dl class="section see"><dt>See also</dt><dd><a class="el" href="../../db/dd0/structpl_hash_helper.htm" title="Helper struct to calculate the Hash of different types.">plHashHelper</a> </dd></dl>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a74ac90be885466fb0773ad979afd6b28" name="a74ac90be885466fb0773ad979afd6b28"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74ac90be885466fb0773ad979afd6b28">&#9670;&#160;</a></span>Compact()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename K , typename V , typename H &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase</a>&lt; K, V, H &gt;::Compact </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tries to compact the hashtable to avoid wasting memory. </p>
<p>The resulting capacity is at least 'GetCount' (no elements get removed). Will deallocate all data, if the hashtable is empty. </p>

</div>
</div>
<a id="a907117a01c398b2cdb7e632406cd9652" name="a907117a01c398b2cdb7e632406cd9652"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a907117a01c398b2cdb7e632406cd9652">&#9670;&#160;</a></span>Insert()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename KeyType , typename ValueType , typename Hasher &gt; </div>
<div class="memtemplate">
template&lt;typename CompatibleKeyType , typename CompatibleValueType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt;::Insert </td>
          <td>(</td>
          <td class="paramtype">CompatibleKeyType &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>key</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">CompatibleValueType &amp;&amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ValueType *</td>          <td class="paramname"><span class="paramname"><em>out_pOldValue</em></span><span class="paramdefsep"> = </span><span class="paramdefval">nullptr</span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Inserts the key value pair or replaces value if an entry with the given key already exists. </p>
<p>Returns true if an existing value was replaced and optionally writes out the old value to out_oldValue. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/Engine/Foundation/Containers/<a class="el" href="../../de/def/_hash_table_8h_source.htm">HashTable.h</a></li>
<li>Code/Engine/Foundation/Containers/Implementation/<a class="el" href="../../d9/d2b/_hash_table__inl_8h_source.htm">HashTable_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d1/d77/classpl_hash_table_base.htm">plHashTableBase</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
