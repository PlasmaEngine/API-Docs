<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Plasma Engine: Code/Engine/Foundation/Math/Implementation/Vec2_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Plasma Engine<span id="projectnumber">&#160;2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d1/d09/_vec2__inl_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Vec2_inl.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00004" data-start="{" data-end="}">
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#ab6db14a374f79d188d6975a8233bf4f8">    4</a></span>PL_ALWAYS_INLINE <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ab6db14a374f79d188d6975a8233bf4f8">plVec2Template&lt;Type&gt;::plVec2Template</a>()</div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span>{</div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">#if PL_ENABLED(PL_MATH_CHECK_FOR_NAN)</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span>  <span class="comment">// Initialize all data to NaN in debug mode to find problems with uninitialized data easier.</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span>  <span class="keyword">const</span> Type TypeNaN = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a7452a7f2b15201705625a7cb78723a98">plMath::NaN&lt;Type&gt;</a>();</div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span>  x = TypeNaN;</div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span>  y = TypeNaN;</div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>}</div>
</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span> </div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00015" data-start="{" data-end="}">
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a7b8717a5e4a1701347da154647d87b90">   15</a></span>PL_ALWAYS_INLINE <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ab6db14a374f79d188d6975a8233bf4f8">plVec2Template&lt;Type&gt;::plVec2Template</a>(Type x, Type y)</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span>  : x(x)</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>  , y(y)</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>{</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>}</div>
</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span> </div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00022" data-start="{" data-end="}">
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a1755dd13d11397e40d3db60ebb25e6ef">   22</a></span>PL_ALWAYS_INLINE <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ab6db14a374f79d188d6975a8233bf4f8">plVec2Template&lt;Type&gt;::plVec2Template</a>(Type v)</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>  : x(v)</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>  , y(v)</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>{</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>}</div>
</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span> </div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00029" data-start="{" data-end="}">
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a3d4541092348cd65fc9d3211c33075d3">   29</a></span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a3d4541092348cd65fc9d3211c33075d3">plVec2Template&lt;Type&gt;::Set</a>(Type xy)</div>
<div class="foldopen" id="foldopen00030" data-start="{" data-end="}">
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#ab6db14a374f79d188d6975a8233bf4f8">   30</a></span>{</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>  x = xy;</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span>  y = xy;</div>
<div class="foldopen" id="foldopen00033" data-start="{" data-end="}">
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a7b8717a5e4a1701347da154647d87b90">   33</a></span>}</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span> </div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00036" data-start="{" data-end="}">
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#afdba413c4e0ae23e8fd497f3601ddc43">   36</a></span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a3d4541092348cd65fc9d3211c33075d3">plVec2Template&lt;Type&gt;::Set</a>(Type inX, Type inY)</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>{</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>  x = inX;</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>  y = inY;</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span>}</div>
</div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span> </div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00043" data-start="{" data-end="}">
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a520b49746db2cbc020b3ce36a65fa26a">   43</a></span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a520b49746db2cbc020b3ce36a65fa26a">plVec2Template&lt;Type&gt;::SetZero</a>()</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>{</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>  x = y = 0;</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>}</div>
</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span> </div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00049" data-start="{" data-end="}">
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a298e3e69c8ece3e985ee46774e24a838">   49</a></span>PL_IMPLEMENT_IF_FLOAT_TYPE PL_ALWAYS_INLINE Type <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a298e3e69c8ece3e985ee46774e24a838">plVec2Template&lt;Type&gt;::GetLength</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>  <span class="keywordflow">return</span> (<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#aae02023b382e3990f9ebf91f40473310">plMath::Sqrt</a>(GetLengthSquared()));</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>}</div>
</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span> </div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00055" data-start="{" data-end="}">
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#ad556353aad696dde88a48e62d4245c3a">   55</a></span>PL_IMPLEMENT_IF_FLOAT_TYPE <a class="code hl_struct" href="../../da/dce/structpl_result.htm">plResult</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ad556353aad696dde88a48e62d4245c3a">plVec2Template&lt;Type&gt;::SetLength</a>(Type fNewLength, Type fEpsilon <span class="comment">/* = plMath::DefaultEpsilon&lt;Type&gt;() */</span>)</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>{</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>  <span class="keywordflow">if</span> (NormalizeIfNotZero(<a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;::MakeZero</a>(), fEpsilon) == PL_FAILURE)</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>    <span class="keywordflow">return</span> PL_FAILURE;</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span> </div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>  *<span class="keyword">this</span> *= fNewLength;</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>  <span class="keywordflow">return</span> PL_SUCCESS;</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>}</div>
</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span> </div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00065" data-start="{" data-end="}">
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#ad772dc852440d1bf9bfdbdbbd6b19585">   65</a></span>PL_ALWAYS_INLINE Type <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ad772dc852440d1bf9bfdbdbbd6b19585">plVec2Template&lt;Type&gt;::GetLengthSquared</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>  <span class="keywordflow">return</span> (x * x + y * y);</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>}</div>
</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span> </div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00071" data-start="{" data-end="}">
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#ac4607d8873a35cb1719878b2b2849e3d">   71</a></span>PL_IMPLEMENT_IF_FLOAT_TYPE PL_FORCE_INLINE Type <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ac4607d8873a35cb1719878b2b2849e3d">plVec2Template&lt;Type&gt;::GetLengthAndNormalize</a>()</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>{</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>  <span class="keyword">const</span> Type fLength = GetLength();</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>  *<span class="keyword">this</span> /= fLength;</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>  <span class="keywordflow">return</span> fLength;</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a3d4541092348cd65fc9d3211c33075d3">   76</a></span>}</div>
</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span> </div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00079" data-start="{" data-end="}">
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a8453e711e79c7580d00a602397ff467a">   79</a></span>PL_IMPLEMENT_IF_FLOAT_TYPE PL_FORCE_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a8453e711e79c7580d00a602397ff467a">plVec2Template&lt;Type&gt;::GetNormalized</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>  <span class="keyword">const</span> Type fLen = GetLength();</div>
<div class="foldopen" id="foldopen00082" data-start="{" data-end="}">
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a520b49746db2cbc020b3ce36a65fa26a">   82</a></span> </div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>  <span class="keyword">const</span> Type fLengthInv = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a5e363339c8dfc76221563df0bf2302b3">plMath::Invert</a>(fLen);</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>(x * fLengthInv, y * fLengthInv);</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>}</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span> </div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00088" data-start="{" data-end="}">
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a298e3e69c8ece3e985ee46774e24a838">   88</a></span>PL_IMPLEMENT_IF_FLOAT_TYPE PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a873792d799aa8c86987cf2d10ed6ff94">plVec2Template&lt;Type&gt;::Normalize</a>()</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>{</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>  *<span class="keyword">this</span> /= GetLength();</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>}</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span> </div>
<div class="foldopen" id="foldopen00093" data-start="{" data-end="}">
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#ad556353aad696dde88a48e62d4245c3a">   93</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00094" data-start="{" data-end="}">
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a991a3a38116cb76cebbd64a048779b23">   94</a></span>PL_IMPLEMENT_IF_FLOAT_TYPE <span class="keyword">inline</span> <a class="code hl_struct" href="../../da/dce/structpl_result.htm">plResult</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a991a3a38116cb76cebbd64a048779b23">plVec2Template&lt;Type&gt;::NormalizeIfNotZero</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; vFallback, Type fEpsilon)</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>{</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>  PL_NAN_ASSERT(&amp;vFallback);</div>
<div class="foldopen" id="foldopen00097" data-start="{" data-end="}">
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#ad772dc852440d1bf9bfdbdbbd6b19585">   97</a></span> </div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>  <span class="keyword">const</span> Type fLength = GetLength();</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span> </div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>  <span class="keywordflow">if</span> (!plMath::IsFinite(fLength) || <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ab41c015ef2ef7ea68f915082545755ae">plMath::IsZero</a>(fLength, fEpsilon))</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>  {</div>
<div class="foldopen" id="foldopen00102" data-start="{" data-end="}">
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#ac4607d8873a35cb1719878b2b2849e3d">  102</a></span>    *<span class="keyword">this</span> = vFallback;</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>    <span class="keywordflow">return</span> PL_FAILURE;</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>  }</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span> </div>
<div class="foldopen" id="foldopen00106" data-start="{" data-end="}">
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a8453e711e79c7580d00a602397ff467a">  106</a></span>  *<span class="keyword">this</span> /= fLength;</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>  <span class="keywordflow">return</span> PL_SUCCESS;</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>}</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span> </div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00114" data-start="{" data-end="}">
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#aac9846d96ecda0045dee4306f7fd775b">  114</a></span>PL_IMPLEMENT_IF_FLOAT_TYPE <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#aac9846d96ecda0045dee4306f7fd775b">plVec2Template&lt;Type&gt;::IsNormalized</a>(Type fEpsilon <span class="comment">/* = plMath::HugeEpsilon&lt;Type&gt;() */</span>)<span class="keyword"> const</span></div>
<div class="foldopen" id="foldopen00115" data-start="{" data-end="}">
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a991a3a38116cb76cebbd64a048779b23">  115</a></span><span class="keyword"></span>{</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>  <span class="keyword">const</span> Type t = GetLengthSquared();</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ab5afdf4907a0a61a687be8a9e1e1f81c">plMath::IsEqual</a>(t, (Type)(1), fEpsilon);</div>
<div class="foldopen" id="foldopen00118" data-start="{" data-end="}">
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#aa3bf3078685a8b692ccadc2c63841001">  118</a></span>}</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span> </div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00121" data-start="{" data-end="}">
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#aa3bf3078685a8b692ccadc2c63841001">  121</a></span><span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#aa3bf3078685a8b692ccadc2c63841001">plVec2Template&lt;Type&gt;::IsZero</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>  <span class="keywordflow">return</span> (x == 0 &amp;&amp; y == 0);</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>}</div>
</div>
</div>
<div class="foldopen" id="foldopen00125" data-start="{" data-end="}">
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#aac9846d96ecda0045dee4306f7fd775b">  125</a></span> </div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00127" data-start="{" data-end="}">
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a325ac5e5c2f0fd0690af56a362516b5c">  127</a></span><span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#aa3bf3078685a8b692ccadc2c63841001">plVec2Template&lt;Type&gt;::IsZero</a>(Type fEpsilon)<span class="keyword"> const</span></div>
<div class="foldopen" id="foldopen00128" data-start="{" data-end="}">
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#ab41f6eafd6ae2ea5bc29f9e2d326e2bb">  128</a></span><span class="keyword"></span>{</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>  PL_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span> </div>
<div class="foldopen" id="foldopen00131" data-start="{" data-end="}">
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a734b479872b2c442248caab002bb98d6">  131</a></span>  <span class="keywordflow">return</span> (<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ab41c015ef2ef7ea68f915082545755ae">plMath::IsZero</a>(x, fEpsilon) &amp;&amp; <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ab41c015ef2ef7ea68f915082545755ae">plMath::IsZero</a>(y, fEpsilon));</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>}</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span> </div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00135" data-start="{" data-end="}">
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#ab41f6eafd6ae2ea5bc29f9e2d326e2bb">  135</a></span><span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ab41f6eafd6ae2ea5bc29f9e2d326e2bb">plVec2Template&lt;Type&gt;::IsNaN</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span><span class="keyword"></span>{</div>
<div class="foldopen" id="foldopen00137" data-start="{" data-end="}">
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#afea5028966c2ca7f7fa53319a097e2da">  137</a></span>  <span class="keywordflow">if</span> (plMath::IsNaN(x))</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>  <span class="keywordflow">if</span> (plMath::IsNaN(y))</div>
<div class="foldopen" id="foldopen00140" data-start="{" data-end="}">
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a3311a3769c0318f69c417daebdb95c29">  140</a></span>    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span> </div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="foldopen" id="foldopen00143" data-start="{" data-end="}">
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a210416c425a079d4d7ac8f0a9d86f604">  143</a></span>}</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span> </div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00146" data-start="{" data-end="}">
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a734b479872b2c442248caab002bb98d6">  146</a></span><span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a734b479872b2c442248caab002bb98d6">plVec2Template&lt;Type&gt;::IsValid</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>  <span class="keywordflow">if</span> (!plMath::IsFinite(x))</div>
<div class="foldopen" id="foldopen00149" data-start="{" data-end="}">
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a8602e3e9251f68317fc88f1e59a3294f">  149</a></span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>  <span class="keywordflow">if</span> (!plMath::IsFinite(y))</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="foldopen" id="foldopen00152" data-start="{" data-end="}">
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a9c0243d5033f421d17819da1c1829eba">  152</a></span> </div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>}</div>
<div class="foldopen" id="foldopen00155" data-start="{" data-end="}">
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#af3e8bfd5b71f119c5e82d87dfb63fae6">  155</a></span> </div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00157" data-start="{" data-end="}">
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#afea5028966c2ca7f7fa53319a097e2da">  157</a></span>PL_FORCE_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#afea5028966c2ca7f7fa53319a097e2da">plVec2Template&lt;Type&gt;::operator-</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>  PL_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span> </div>
<div class="foldopen" id="foldopen00161" data-start="{" data-end="}">
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a0b79f6adfab50cd48d34c9b26e27ba91">  161</a></span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>(-x, -y);</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>}</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span> </div>
<div class="foldopen" id="foldopen00164" data-start="{" data-end="}">
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#ab3c2d034f673d91bab3f0e8f15dd5521">  164</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00165" data-start="{" data-end="}">
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a3311a3769c0318f69c417daebdb95c29">  165</a></span>PL_FORCE_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a3311a3769c0318f69c417daebdb95c29">plVec2Template&lt;Type&gt;::operator+=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; rhs)</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>{</div>
<div class="foldopen" id="foldopen00167" data-start="{" data-end="}">
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#afe1f9af38bd66656667586216832eee3">  167</a></span>  x += rhs.x;</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>  y += rhs.y;</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span> </div>
<div class="foldopen" id="foldopen00170" data-start="{" data-end="}">
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#ab48f2fb1c8e45c601676e3dbe77ac45f">  170</a></span>  PL_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>}</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span> </div>
<div class="foldopen" id="foldopen00173" data-start="{" data-end="}">
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a42a1bb3a9907ccd6d3951777a1f25feb">  173</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00174" data-start="{" data-end="}">
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a210416c425a079d4d7ac8f0a9d86f604">  174</a></span>PL_FORCE_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a210416c425a079d4d7ac8f0a9d86f604">plVec2Template&lt;Type&gt;::operator-=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; rhs)</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>{</div>
<div class="foldopen" id="foldopen00176" data-start="{" data-end="}">
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a621267559d3373d0c545bdc48b3eb813">  176</a></span>  x -= rhs.x;</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>  y -= rhs.y;</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span> </div>
<div class="foldopen" id="foldopen00179" data-start="{" data-end="}">
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#aae2d3cd94c7aafee4e27b27f25b092aa">  179</a></span>  PL_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>}</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span> </div>
<div class="foldopen" id="foldopen00182" data-start="{" data-end="}">
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#adca30e31708e0d454ac221847a0c56e3">  182</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00183" data-start="{" data-end="}">
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#ae561d4aff16e8c2344aeee7a24b4a4f5">  183</a></span>PL_FORCE_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ae561d4aff16e8c2344aeee7a24b4a4f5">plVec2Template&lt;Type&gt;::operator*=</a>(Type f)</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>{</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>  x *= f;</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>  y *= f;</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span> </div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>  PL_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>}</div>
</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span> </div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00192" data-start="{" data-end="}">
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a3fd9299311c8551b39b05d409a872022">  192</a></span>PL_FORCE_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a8602e3e9251f68317fc88f1e59a3294f">plVec2Template&lt;Type&gt;::operator/=</a>(Type f)</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>{</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (std::is_floating_point_v&lt;Type&gt;)</div>
<div class="foldopen" id="foldopen00195" data-start="{" data-end="}">
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a3f54a3b0ccb0b8329ed02a2e044e4924">  195</a></span>  {</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>    <span class="keyword">const</span> Type f_inv = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a5e363339c8dfc76221563df0bf2302b3">plMath::Invert</a>(f);</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>    x *= f_inv;</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>    y *= f_inv;</div>
<div class="foldopen" id="foldopen00199" data-start="{" data-end="}">
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a9a495ba9581822c01db636b34a94b51d">  199</a></span>  }</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>  <span class="keywordflow">else</span></div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>  {</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>    x /= f;</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>    y /= f;</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>  }</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span> </div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>  PL_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>}</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span> </div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00210" data-start="{" data-end="}">
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a3fd9299311c8551b39b05d409a872022">  210</a></span>PL_IMPLEMENT_IF_FLOAT_TYPE <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a3fd9299311c8551b39b05d409a872022">plVec2Template&lt;Type&gt;::MakeOrthogonalTo</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; vNormal)</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span>{</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>  PL_ASSERT_DEBUG(vNormal.<a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#aac9846d96ecda0045dee4306f7fd775b">IsNormalized</a>(), <span class="stringliteral">&quot;The normal must be normalized.&quot;</span>);</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span> </div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>  <span class="keyword">const</span> Type fDot = this-&gt;Dot(vNormal);</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>  *<span class="keyword">this</span> -= fDot * vNormal;</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>}</div>
</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span> </div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00219" data-start="{" data-end="}">
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a3f54a3b0ccb0b8329ed02a2e044e4924">  219</a></span>PL_FORCE_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a3f54a3b0ccb0b8329ed02a2e044e4924">plVec2Template&lt;Type&gt;::GetOrthogonalVector</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>  PL_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>  PL_ASSERT_DEBUG(!IsZero(plMath::SmallEpsilon&lt;Type&gt;()), <span class="stringliteral">&quot;The vector must not be zero to be able to compute an orthogonal vector.&quot;</span>);</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span> </div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>(-y, x);</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>}</div>
</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span> </div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00228" data-start="{" data-end="}">
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a9a495ba9581822c01db636b34a94b51d">  228</a></span>PL_IMPLEMENT_IF_FLOAT_TYPE <span class="keyword">inline</span> <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a9a495ba9581822c01db636b34a94b51d">plVec2Template&lt;Type&gt;::GetReflectedVector</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; vNormal)<span class="keyword"> const</span></div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span>  PL_ASSERT_DEBUG(vNormal.<a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#aac9846d96ecda0045dee4306f7fd775b">IsNormalized</a>(), <span class="stringliteral">&quot;vNormal must be normalized.&quot;</span>);</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span> </div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>  <span class="keywordflow">return</span> ((*<span class="keyword">this</span>) - (2 * this-&gt;Dot(vNormal) * vNormal));</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>}</div>
</div>
</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span> </div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00236" data-start="{" data-end="}">
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#ab3c2d034f673d91bab3f0e8f15dd5521">  236</a></span>PL_FORCE_INLINE Type <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ab3c2d034f673d91bab3f0e8f15dd5521">plVec2Template&lt;Type&gt;::Dot</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>  PL_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>  PL_NAN_ASSERT(&amp;rhs);</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span> </div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>  <span class="keywordflow">return</span> ((x * rhs.x) + (y * rhs.y));</div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>}</div>
</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span> </div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00245" data-start="{" data-end="}">
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a0b79f6adfab50cd48d34c9b26e27ba91">  245</a></span><span class="keyword">inline</span> <a class="code hl_class" href="../../d4/dfd/classpl_angle.htm">plAngle</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a0b79f6adfab50cd48d34c9b26e27ba91">plVec2Template&lt;Type&gt;::GetAngleBetween</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>  PL_ASSERT_DEBUG(this-&gt;IsNormalized(), <span class="stringliteral">&quot;This vector must be normalized.&quot;</span>);</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>  PL_ASSERT_DEBUG(rhs.<a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#aac9846d96ecda0045dee4306f7fd775b">IsNormalized</a>(), <span class="stringliteral">&quot;The other vector must be normalized.&quot;</span>);</div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span> </div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a319a0edc79181e926ee0f6b451407bb6">plMath::ACos</a>(<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a5e64f45bae1fb8ddbe02e2f5bdf18767">plMath::Clamp&lt;Type&gt;</a>(this-&gt;Dot(rhs), (Type)-1, (Type)1)));</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>}</div>
</div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span> </div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00254" data-start="{" data-end="}">
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#afe1f9af38bd66656667586216832eee3">  254</a></span>PL_FORCE_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#afe1f9af38bd66656667586216832eee3">plVec2Template&lt;Type&gt;::CompMin</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span>  PL_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span>  PL_NAN_ASSERT(&amp;rhs);</div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span> </div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>(<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a314b24989122e22968ae0a11cc872e28">plMath::Min</a>(x, rhs.x), <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a314b24989122e22968ae0a11cc872e28">plMath::Min</a>(y, rhs.y));</div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span>}</div>
</div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span> </div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00263" data-start="{" data-end="}">
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#ab48f2fb1c8e45c601676e3dbe77ac45f">  263</a></span>PL_FORCE_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#ab48f2fb1c8e45c601676e3dbe77ac45f">plVec2Template&lt;Type&gt;::CompMax</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span>  PL_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span>  PL_NAN_ASSERT(&amp;rhs);</div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span> </div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>(<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">plMath::Max</a>(x, rhs.x), <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">plMath::Max</a>(y, rhs.y));</div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>}</div>
</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span> </div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00272" data-start="{" data-end="}">
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a42a1bb3a9907ccd6d3951777a1f25feb">  272</a></span>PL_FORCE_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a42a1bb3a9907ccd6d3951777a1f25feb">plVec2Template&lt;Type&gt;::CompClamp</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; vLow, <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; vHigh)<span class="keyword"> const</span></div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span>  PL_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span>  PL_NAN_ASSERT(&amp;vLow);</div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span>  PL_NAN_ASSERT(&amp;vHigh);</div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span> </div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>(<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a5e64f45bae1fb8ddbe02e2f5bdf18767">plMath::Clamp</a>(x, vLow.x, vHigh.x), <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a5e64f45bae1fb8ddbe02e2f5bdf18767">plMath::Clamp</a>(y, vLow.y, vHigh.y));</div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span>}</div>
</div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span> </div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00282" data-start="{" data-end="}">
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a621267559d3373d0c545bdc48b3eb813">  282</a></span>PL_FORCE_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a621267559d3373d0c545bdc48b3eb813">plVec2Template&lt;Type&gt;::CompMul</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span>  PL_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span>  PL_NAN_ASSERT(&amp;rhs);</div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span> </div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>(x * rhs.x, y * rhs.y);</div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span>}</div>
</div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span> </div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00291" data-start="{" data-end="}">
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#aae2d3cd94c7aafee4e27b27f25b092aa">  291</a></span>PL_FORCE_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#aae2d3cd94c7aafee4e27b27f25b092aa">plVec2Template&lt;Type&gt;::CompDiv</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span>  PL_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span>  PL_NAN_ASSERT(&amp;rhs);</div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span> </div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>(x / rhs.x, y / rhs.y);</div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span>}</div>
</div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span> </div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00300" data-start="{" data-end="}">
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#adca30e31708e0d454ac221847a0c56e3">  300</a></span><span class="keyword">inline</span> <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#adca30e31708e0d454ac221847a0c56e3">plVec2Template&lt;Type&gt;::Abs</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span>  PL_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span> </div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>(<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#abd0ef20e6710b240c9833acdf6f2f8d7">plMath::Abs</a>(x), <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#abd0ef20e6710b240c9833acdf6f2f8d7">plMath::Abs</a>(y));</div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span>}</div>
</div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span> </div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span>PL_FORCE_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> operator+(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v2)</div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span>{</div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span>  PL_NAN_ASSERT(&amp;v1);</div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span>  PL_NAN_ASSERT(&amp;v2);</div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span> </div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>(v1.x + v2.x, v1.y + v2.y);</div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span>}</div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span> </div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span>PL_FORCE_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> operator-(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v2)</div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>{</div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span>  PL_NAN_ASSERT(&amp;v1);</div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span>  PL_NAN_ASSERT(&amp;v2);</div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span> </div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>(v1.x - v2.x, v1.y - v2.y);</div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span>}</div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span> </div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span>PL_FORCE_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> operator*(Type f, <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v)</div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span>{</div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span>  PL_NAN_ASSERT(&amp;v);</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span> </div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>(v.x * f, v.y * f);</div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span>}</div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span> </div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span>PL_FORCE_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> operator*(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v, Type f)</div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span>{</div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span>  PL_NAN_ASSERT(&amp;v);</div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span> </div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>(v.x * f, v.y * f);</div>
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno">  339</span>}</div>
<div class="line"><a id="l00340" name="l00340"></a><span class="lineno">  340</span> </div>
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno">  341</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno">  342</span>PL_FORCE_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a> operator/(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v, Type f)</div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span>{</div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span>  PL_NAN_ASSERT(&amp;v);</div>
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno">  345</span> </div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span>  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (std::is_floating_point_v&lt;Type&gt;)</div>
<div class="line"><a id="l00347" name="l00347"></a><span class="lineno">  347</span>  {</div>
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno">  348</span>    <span class="comment">// multiplication is much faster than division</span></div>
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno">  349</span>    <span class="keyword">const</span> Type f_inv = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a5e363339c8dfc76221563df0bf2302b3">plMath::Invert</a>(f);</div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span>    <span class="keywordflow">return</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>(v.x * f_inv, v.y * f_inv);</div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span>  }</div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span>  <span class="keywordflow">else</span></div>
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno">  353</span>  {</div>
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno">  354</span>    <span class="keywordflow">return</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>(v.x / f, v.y / f);</div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno">  355</span>  }</div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span>}</div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span> </div>
<div class="line"><a id="l00358" name="l00358"></a><span class="lineno">  358</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00359" data-start="{" data-end="}">
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#a9c0243d5033f421d17819da1c1829eba">  359</a></span><span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a9c0243d5033f421d17819da1c1829eba">plVec2Template&lt;Type&gt;::IsIdentical</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno">  360</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno">  361</span>  PL_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno">  362</span>  PL_NAN_ASSERT(&amp;rhs);</div>
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno">  363</span> </div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span>  <span class="keywordflow">return</span> ((x == rhs.x) &amp;&amp; (y == rhs.y));</div>
<div class="line"><a id="l00365" name="l00365"></a><span class="lineno">  365</span>}</div>
</div>
<div class="line"><a id="l00366" name="l00366"></a><span class="lineno">  366</span> </div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00368" data-start="{" data-end="}">
<div class="line"><a id="l00368" name="l00368"></a><span class="lineno"><a class="line" href="../../d1/dd1/classpl_vec2_template.htm#af3e8bfd5b71f119c5e82d87dfb63fae6">  368</a></span><span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#af3e8bfd5b71f119c5e82d87dfb63fae6">plVec2Template&lt;Type&gt;::IsEqual</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; rhs, Type fEpsilon)<span class="keyword"> const</span></div>
<div class="line"><a id="l00369" name="l00369"></a><span class="lineno">  369</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00370" name="l00370"></a><span class="lineno">  370</span>  PL_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00371" name="l00371"></a><span class="lineno">  371</span>  PL_NAN_ASSERT(&amp;rhs);</div>
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno">  372</span> </div>
<div class="line"><a id="l00373" name="l00373"></a><span class="lineno">  373</span>  <span class="keywordflow">return</span> (<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ab5afdf4907a0a61a687be8a9e1e1f81c">plMath::IsEqual</a>(x, rhs.x, fEpsilon) &amp;&amp; <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ab5afdf4907a0a61a687be8a9e1e1f81c">plMath::IsEqual</a>(y, rhs.y, fEpsilon));</div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno">  374</span>}</div>
</div>
<div class="line"><a id="l00375" name="l00375"></a><span class="lineno">  375</span> </div>
<div class="line"><a id="l00376" name="l00376"></a><span class="lineno">  376</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00377" name="l00377"></a><span class="lineno">  377</span>PL_FORCE_INLINE <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v2)</div>
<div class="line"><a id="l00378" name="l00378"></a><span class="lineno">  378</span>{</div>
<div class="line"><a id="l00379" name="l00379"></a><span class="lineno">  379</span>  <span class="keywordflow">return</span> v1.<a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a9c0243d5033f421d17819da1c1829eba">IsIdentical</a>(v2);</div>
<div class="line"><a id="l00380" name="l00380"></a><span class="lineno">  380</span>}</div>
<div class="line"><a id="l00381" name="l00381"></a><span class="lineno">  381</span> </div>
<div class="line"><a id="l00382" name="l00382"></a><span class="lineno">  382</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00383" name="l00383"></a><span class="lineno">  383</span>PL_FORCE_INLINE <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v2)</div>
<div class="line"><a id="l00384" name="l00384"></a><span class="lineno">  384</span>{</div>
<div class="line"><a id="l00385" name="l00385"></a><span class="lineno">  385</span>  <span class="keywordflow">return</span> !v1.<a class="code hl_function" href="../../d1/dd1/classpl_vec2_template.htm#a9c0243d5033f421d17819da1c1829eba">IsIdentical</a>(v2);</div>
<div class="line"><a id="l00386" name="l00386"></a><span class="lineno">  386</span>}</div>
<div class="line"><a id="l00387" name="l00387"></a><span class="lineno">  387</span> </div>
<div class="line"><a id="l00388" name="l00388"></a><span class="lineno">  388</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00389" name="l00389"></a><span class="lineno">  389</span>PL_FORCE_INLINE <span class="keywordtype">bool</span> operator&lt;(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code hl_class" href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template&lt;Type&gt;</a>&amp; v2)</div>
<div class="line"><a id="l00390" name="l00390"></a><span class="lineno">  390</span>{</div>
<div class="line"><a id="l00391" name="l00391"></a><span class="lineno">  391</span>  PL_NAN_ASSERT(&amp;v1);</div>
<div class="line"><a id="l00392" name="l00392"></a><span class="lineno">  392</span>  PL_NAN_ASSERT(&amp;v2);</div>
<div class="line"><a id="l00393" name="l00393"></a><span class="lineno">  393</span> </div>
<div class="line"><a id="l00394" name="l00394"></a><span class="lineno">  394</span>  <span class="keywordflow">if</span> (v1.x &lt; v2.x)</div>
<div class="line"><a id="l00395" name="l00395"></a><span class="lineno">  395</span>    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00396" name="l00396"></a><span class="lineno">  396</span>  <span class="keywordflow">if</span> (v1.x &gt; v2.x)</div>
<div class="line"><a id="l00397" name="l00397"></a><span class="lineno">  397</span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00398" name="l00398"></a><span class="lineno">  398</span> </div>
<div class="line"><a id="l00399" name="l00399"></a><span class="lineno">  399</span>  <span class="keywordflow">return</span> (v1.y &lt; v2.y);</div>
<div class="line"><a id="l00400" name="l00400"></a><span class="lineno">  400</span>}</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="ttc" id="aclasspl_angle_htm"><div class="ttname"><a href="../../d4/dfd/classpl_angle.htm">plAngle</a></div><div class="ttdoc">Float wrapper struct for a safe usage and conversions of angles.</div><div class="ttdef"><b>Definition</b> Angle.h:10</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm">plVec2Template</a></div><div class="ttdoc">A 2-component vector class.</div><div class="ttdef"><b>Definition</b> Vec2.h:14</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a0b79f6adfab50cd48d34c9b26e27ba91"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a0b79f6adfab50cd48d34c9b26e27ba91">plVec2Template::GetAngleBetween</a></div><div class="ttdeci">plAngle GetAngleBetween(const plVec2Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the positive angle between *this and rhs.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:245</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a210416c425a079d4d7ac8f0a9d86f604"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a210416c425a079d4d7ac8f0a9d86f604">plVec2Template::operator-=</a></div><div class="ttdeci">void operator-=(const plVec2Template&lt; Type &gt; &amp;vCc)</div><div class="ttdoc">Subtracts cc component-wise from this vector.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:174</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a298e3e69c8ece3e985ee46774e24a838"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a298e3e69c8ece3e985ee46774e24a838">plVec2Template::GetLength</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE Type GetLength() const</div><div class="ttdoc">Returns the length of the vector.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:49</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a3311a3769c0318f69c417daebdb95c29"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a3311a3769c0318f69c417daebdb95c29">plVec2Template::operator+=</a></div><div class="ttdeci">void operator+=(const plVec2Template&lt; Type &gt; &amp;vCc)</div><div class="ttdoc">Adds cc component-wise to this vector.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:165</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a3d4541092348cd65fc9d3211c33075d3"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a3d4541092348cd65fc9d3211c33075d3">plVec2Template::Set</a></div><div class="ttdeci">void Set(Type xy)</div><div class="ttdoc">Sets all components to this value.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:29</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a3f54a3b0ccb0b8329ed02a2e044e4924"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a3f54a3b0ccb0b8329ed02a2e044e4924">plVec2Template::GetOrthogonalVector</a></div><div class="ttdeci">const plVec2Template&lt; Type &gt; GetOrthogonalVector() const</div><div class="ttdoc">Returns some arbitrary vector orthogonal to this one. The vector is NOT normalized.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:219</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a3fd9299311c8551b39b05d409a872022"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a3fd9299311c8551b39b05d409a872022">plVec2Template::MakeOrthogonalTo</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE void MakeOrthogonalTo(const plVec2Template&lt; Type &gt; &amp;vNormal)</div><div class="ttdoc">Modifies this direction vector to be orthogonal to the given (normalized) direction vector....</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:210</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a42a1bb3a9907ccd6d3951777a1f25feb"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a42a1bb3a9907ccd6d3951777a1f25feb">plVec2Template::CompClamp</a></div><div class="ttdeci">const plVec2Template&lt; Type &gt; CompClamp(const plVec2Template&lt; Type &gt; &amp;vLow, const plVec2Template&lt; Type &gt; &amp;vHigh) const</div><div class="ttdoc">Returns the component-wise clamped value of *this between low and high.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:272</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a520b49746db2cbc020b3ce36a65fa26a"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a520b49746db2cbc020b3ce36a65fa26a">plVec2Template::SetZero</a></div><div class="ttdeci">void SetZero()</div><div class="ttdoc">Sets the vector to all zero.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:43</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a621267559d3373d0c545bdc48b3eb813"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a621267559d3373d0c545bdc48b3eb813">plVec2Template::CompMul</a></div><div class="ttdeci">const plVec2Template&lt; Type &gt; CompMul(const plVec2Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise multiplication of *this and rhs.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:282</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a734b479872b2c442248caab002bb98d6"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a734b479872b2c442248caab002bb98d6">plVec2Template::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdoc">Checks that all components are finite numbers.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:146</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a8453e711e79c7580d00a602397ff467a"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a8453e711e79c7580d00a602397ff467a">plVec2Template::GetNormalized</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE const plVec2Template&lt; Type &gt; GetNormalized() const</div><div class="ttdoc">Returns a normalized version of this vector, leaves the vector itself unchanged.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:79</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a8602e3e9251f68317fc88f1e59a3294f"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a8602e3e9251f68317fc88f1e59a3294f">plVec2Template::operator/=</a></div><div class="ttdeci">void operator/=(Type f)</div><div class="ttdoc">Divides all components of this vector by f.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:192</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a873792d799aa8c86987cf2d10ed6ff94"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a873792d799aa8c86987cf2d10ed6ff94">plVec2Template::Normalize</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE void Normalize()</div><div class="ttdoc">Normalizes this vector.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:88</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a991a3a38116cb76cebbd64a048779b23"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a991a3a38116cb76cebbd64a048779b23">plVec2Template::NormalizeIfNotZero</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE plResult NormalizeIfNotZero(const plVec2Template&lt; Type &gt; &amp;vFallback=plVec2Template&lt; Type &gt;(1, 0), Type fEpsilon=plMath::DefaultEpsilon&lt; Type &gt;())</div><div class="ttdoc">Tries to normalize this vector. If the vector is too close to zero, PL_FAILURE is returned and the ve...</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:94</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a9a495ba9581822c01db636b34a94b51d"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a9a495ba9581822c01db636b34a94b51d">plVec2Template::GetReflectedVector</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE const plVec2Template&lt; Type &gt; GetReflectedVector(const plVec2Template&lt; Type &gt; &amp;vNormal) const</div><div class="ttdoc">Returns this vector reflected at vNormal.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:228</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_a9c0243d5033f421d17819da1c1829eba"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#a9c0243d5033f421d17819da1c1829eba">plVec2Template::IsIdentical</a></div><div class="ttdeci">bool IsIdentical(const plVec2Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Equality Check (bitwise)</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:359</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_aa3bf3078685a8b692ccadc2c63841001"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#aa3bf3078685a8b692ccadc2c63841001">plVec2Template::IsZero</a></div><div class="ttdeci">bool IsZero() const</div><div class="ttdoc">Returns, whether this vector is (0, 0).</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:121</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_aac9846d96ecda0045dee4306f7fd775b"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#aac9846d96ecda0045dee4306f7fd775b">plVec2Template::IsNormalized</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE bool IsNormalized(Type fEpsilon=plMath::HugeEpsilon&lt; Type &gt;()) const</div><div class="ttdoc">Returns, whether the squared length of this vector is between 0.999f and 1.001f.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:114</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_aae2d3cd94c7aafee4e27b27f25b092aa"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#aae2d3cd94c7aafee4e27b27f25b092aa">plVec2Template::CompDiv</a></div><div class="ttdeci">const plVec2Template&lt; Type &gt; CompDiv(const plVec2Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise division of *this and rhs.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:291</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_ab3c2d034f673d91bab3f0e8f15dd5521"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#ab3c2d034f673d91bab3f0e8f15dd5521">plVec2Template::Dot</a></div><div class="ttdeci">Type Dot(const plVec2Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the Dot-product of the two vectors (commutative, order does not matter)</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:236</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_ab41f6eafd6ae2ea5bc29f9e2d326e2bb"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#ab41f6eafd6ae2ea5bc29f9e2d326e2bb">plVec2Template::IsNaN</a></div><div class="ttdeci">bool IsNaN() const</div><div class="ttdoc">Returns true, if any of x or y is NaN.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:135</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_ab48f2fb1c8e45c601676e3dbe77ac45f"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#ab48f2fb1c8e45c601676e3dbe77ac45f">plVec2Template::CompMax</a></div><div class="ttdeci">const plVec2Template&lt; Type &gt; CompMax(const plVec2Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise maximum of *this and rhs.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:263</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_ab6db14a374f79d188d6975a8233bf4f8"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#ab6db14a374f79d188d6975a8233bf4f8">plVec2Template::plVec2Template</a></div><div class="ttdeci">plVec2Template()</div><div class="ttdoc">default-constructed vector is uninitialized (for speed)</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:4</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_ac4607d8873a35cb1719878b2b2849e3d"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#ac4607d8873a35cb1719878b2b2849e3d">plVec2Template::GetLengthAndNormalize</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE Type GetLengthAndNormalize()</div><div class="ttdoc">Normalizes this vector and returns its previous length in one operation. More efficient than calling ...</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:71</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_ad556353aad696dde88a48e62d4245c3a"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#ad556353aad696dde88a48e62d4245c3a">plVec2Template::SetLength</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE plResult SetLength(Type fNewLength, Type fEpsilon=plMath::DefaultEpsilon&lt; Type &gt;())</div><div class="ttdoc">Tries to rescale the vector to the given length. If the vector is too close to zero,...</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:55</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_ad772dc852440d1bf9bfdbdbbd6b19585"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#ad772dc852440d1bf9bfdbdbbd6b19585">plVec2Template::GetLengthSquared</a></div><div class="ttdeci">Type GetLengthSquared() const</div><div class="ttdoc">Returns the squared length. Faster, since no square-root is taken. Useful, if one only wants to compa...</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:65</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_adca30e31708e0d454ac221847a0c56e3"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#adca30e31708e0d454ac221847a0c56e3">plVec2Template::Abs</a></div><div class="ttdeci">const plVec2Template&lt; Type &gt; Abs() const</div><div class="ttdoc">brief Returns the component-wise absolute of *this.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:300</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_ae561d4aff16e8c2344aeee7a24b4a4f5"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#ae561d4aff16e8c2344aeee7a24b4a4f5">plVec2Template::operator*=</a></div><div class="ttdeci">void operator*=(Type f)</div><div class="ttdoc">Multiplies all components of this vector with f.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:183</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_af3e8bfd5b71f119c5e82d87dfb63fae6"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#af3e8bfd5b71f119c5e82d87dfb63fae6">plVec2Template::IsEqual</a></div><div class="ttdeci">bool IsEqual(const plVec2Template&lt; Type &gt; &amp;rhs, Type fEpsilon) const</div><div class="ttdoc">Equality Check with epsilon.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:368</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_afe1f9af38bd66656667586216832eee3"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#afe1f9af38bd66656667586216832eee3">plVec2Template::CompMin</a></div><div class="ttdeci">const plVec2Template&lt; Type &gt; CompMin(const plVec2Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise minimum of *this and rhs.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:254</div></div>
<div class="ttc" id="aclasspl_vec2_template_htm_afea5028966c2ca7f7fa53319a097e2da"><div class="ttname"><a href="../../d1/dd1/classpl_vec2_template.htm#afea5028966c2ca7f7fa53319a097e2da">plVec2Template::operator-</a></div><div class="ttdeci">const plVec2Template&lt; Type &gt; operator-() const</div><div class="ttdoc">Returns the negation of this vector.</div><div class="ttdef"><b>Definition</b> Vec2_inl.h:157</div></div>
<div class="ttc" id="anamespacepl_math_htm_a314b24989122e22968ae0a11cc872e28"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a314b24989122e22968ae0a11cc872e28">plMath::Min</a></div><div class="ttdeci">constexpr PL_ALWAYS_INLINE T Min(T f1, T f2)</div><div class="ttdoc">Returns the smaller value, f1 or f2.</div><div class="ttdef"><b>Definition</b> Math_inl.h:27</div></div>
<div class="ttc" id="anamespacepl_math_htm_a319a0edc79181e926ee0f6b451407bb6"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a319a0edc79181e926ee0f6b451407bb6">plMath::ACos</a></div><div class="ttdeci">PL_ALWAYS_INLINE plAngle ACos(float f)</div><div class="ttdoc">Returns the arcus cosinus of f.</div><div class="ttdef"><b>Definition</b> MathFloat_inl.h:82</div></div>
<div class="ttc" id="anamespacepl_math_htm_a5e363339c8dfc76221563df0bf2302b3"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a5e363339c8dfc76221563df0bf2302b3">plMath::Invert</a></div><div class="ttdeci">constexpr Type Invert(Type f)</div><div class="ttdoc">Returns 1 / f.</div><div class="ttdef"><b>Definition</b> Math_inl.h:63</div></div>
<div class="ttc" id="anamespacepl_math_htm_a5e64f45bae1fb8ddbe02e2f5bdf18767"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a5e64f45bae1fb8ddbe02e2f5bdf18767">plMath::Clamp</a></div><div class="ttdeci">constexpr PL_ALWAYS_INLINE T Clamp(T value, T min_val, T max_val)</div><div class="ttdoc">Clamps &quot;value&quot; to the range [min; max]. Returns &quot;value&quot;, if it is inside the range already.</div><div class="ttdef"><b>Definition</b> Math_inl.h:51</div></div>
<div class="ttc" id="anamespacepl_math_htm_a7452a7f2b15201705625a7cb78723a98"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a7452a7f2b15201705625a7cb78723a98">plMath::NaN</a></div><div class="ttdeci">constexpr TYPE NaN()</div><div class="ttdoc">Returns the value for NaN as the template type. Returns zero, if the type does not support NaN.</div><div class="ttdef"><b>Definition</b> Constants_inl.h:58</div></div>
<div class="ttc" id="anamespacepl_math_htm_aae02023b382e3990f9ebf91f40473310"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#aae02023b382e3990f9ebf91f40473310">plMath::Sqrt</a></div><div class="ttdeci">PL_ALWAYS_INLINE double Sqrt(double f)</div><div class="ttdoc">Returns the square root of f.</div><div class="ttdef"><b>Definition</b> MathDouble_inl.h:99</div></div>
<div class="ttc" id="anamespacepl_math_htm_ab41c015ef2ef7ea68f915082545755ae"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#ab41c015ef2ef7ea68f915082545755ae">plMath::IsZero</a></div><div class="ttdeci">bool IsZero(Type f, Type fEpsilon)</div><div class="ttdoc">Checks whether the given number is close to zero.</div><div class="ttdef"><b>Definition</b> Math_inl.h:288</div></div>
<div class="ttc" id="anamespacepl_math_htm_ab5afdf4907a0a61a687be8a9e1e1f81c"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#ab5afdf4907a0a61a687be8a9e1e1f81c">plMath::IsEqual</a></div><div class="ttdeci">constexpr bool IsEqual(Type lhs, Type rhs, Type fEpsilon)</div><div class="ttdoc">Checks, whether fValue is in the range [fDesired - fMaxImprecision; fDesired + fMaxImprecision].</div><div class="ttdef"><b>Definition</b> Math_inl.h:276</div></div>
<div class="ttc" id="anamespacepl_math_htm_abd0ef20e6710b240c9833acdf6f2f8d7"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#abd0ef20e6710b240c9833acdf6f2f8d7">plMath::Abs</a></div><div class="ttdeci">constexpr PL_ALWAYS_INLINE T Abs(T f)</div><div class="ttdoc">Returns the absolute value of f.</div><div class="ttdef"><b>Definition</b> Math_inl.h:21</div></div>
<div class="ttc" id="anamespacepl_math_htm_ad724a3f51a1faa9bcc3e6a53fd6b9a4f"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">plMath::Max</a></div><div class="ttdeci">constexpr PL_ALWAYS_INLINE T Max(T f1, T f2)</div><div class="ttdoc">Returns the greater value, f1 or f2.</div><div class="ttdef"><b>Definition</b> Math_inl.h:39</div></div>
<div class="ttc" id="astructpl_result_htm"><div class="ttname"><a href="../../da/dce/structpl_result.htm">plResult</a></div><div class="ttdoc">Default enum for returning failure or success, instead of using a bool.</div><div class="ttdef"><b>Definition</b> Types.h:54</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_b421fc8dbee4bf114051d293564697bb.htm">Math</a></li><li class="navelem"><a class="el" href="../../dir_7df9876b976cc75bc915cc1184bc6f86.htm">Implementation</a></li><li class="navelem"><b>Vec2_inl.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
