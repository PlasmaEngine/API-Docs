<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Plasma Engine: Code/Engine/Foundation/Containers/SmallArray.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Plasma Engine<span id="projectnumber">&#160;2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d6/d8d/_small_array_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">SmallArray.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;Foundation/Algorithm/Sorting.h&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="preprocessor">#include &lt;Foundation/Math/Math.h&gt;</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#include &lt;Foundation/Memory/AllocatorWrapper.h&gt;</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">#include &lt;Foundation/Types/ArrayPtr.h&gt;</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span> </div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="keyword">constexpr</span> plUInt32 plSmallInvalidIndex = 0xFFFF;</div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span> </div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00016" data-start="{" data-end="};">
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm">   16</a></span><span class="keyword">class </span><a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase</a></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>{</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>  <span class="comment">// Only if the stored type is either POD or relocatable the hybrid array itself is also relocatable.</span></div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>  PL_DECLARE_MEM_RELOCATABLE_TYPE_CONDITIONAL(T);</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span> </div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>  <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase</a>();                                                                <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>  <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>&amp; other, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>  <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const T&gt;</a>&amp; other, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator);       <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>  <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase</a>(<a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>&amp;&amp; other, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator);      <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span> </div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>  <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">~plSmallArrayBase</a>();                                                               <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span> </div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>  <span class="comment">// Can&#39;t use regular assignment operators since we need to pass an allocator. Use CopyFrom or MoveFrom methods instead.</span></div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>&amp; rhs) = <span class="keyword">delete</span>;</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>  <span class="keywordtype">void</span> operator=(<a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>&amp;&amp; rhs) = <span class="keyword">delete</span>;</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span> </div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a7bdb7ccdd99b15c07c61f179436d63a8">CopyFrom</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const T&gt;</a>&amp; other, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span> </div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a429bf06f44557e9e94d93bcee6cb8631">MoveFrom</a>(<a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>&amp;&amp; other, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span> </div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span>  <span class="keyword">operator</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const T&gt;</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span> </div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>  <span class="keyword">operator</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;T&gt;</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span> </div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#ae10acb56265e7505bf03cc5c90e8fc09">operator==</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>  PL_ADD_DEFAULT_OPERATOR_NOTEQUAL(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>&amp;);</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span> </div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span><span class="preprocessor">#if PL_DISABLED(PL_USE_CPP20_OPERATORS)</span></div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#ae10acb56265e7505bf03cc5c90e8fc09">operator==</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const T&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>  PL_ADD_DEFAULT_OPERATOR_NOTEQUAL(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const T&gt;</a>&amp;);</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>  <span class="keyword">const</span> T&amp; <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#ab139b09923133b72fabb28a2fae3e4f4">operator[]</a>(plUInt32 uiIndex) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span> </div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>  T&amp; <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#ab139b09923133b72fabb28a2fae3e4f4">operator[]</a>(plUInt32 uiIndex); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span> </div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a132a3c1de704395663e3ffeafeff482e">SetCount</a>(plUInt16 uiCount, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span> </div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a132a3c1de704395663e3ffeafeff482e">SetCount</a>(plUInt16 uiCount, <span class="keyword">const</span> T&amp; fillValue, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span> </div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> = <span class="keywordtype">void</span>&gt;                                             <span class="comment">// Template is used to only conditionally compile this function in when it is actually used.</span></div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a55c33bfdeaaa99c1331a8a8fe2ee9e10">SetCountUninitialized</a>(plUInt16 uiCount, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span> </div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a8cee3cefaff8bc613de722a43025ceca">EnsureCount</a>(plUInt16 uiCount, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span> </div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>  plUInt32 <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#aaadcac566b72769bc7881e1daadb63c7">GetCount</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span> </div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#ac5e8a1f919fa2e2be0f7737874d661fc">IsEmpty</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span> </div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a1105ef94e1b2228e67ecfe976f151e13">Clear</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span> </div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#af1f603e32fd9d8e5d01ac453c9a3f898">Contains</a>(<span class="keyword">const</span> T&amp; value) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span> </div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a70cb0225a3ab95e62a1b8b3793e3d01b">Insert</a>(<span class="keyword">const</span> T&amp; value, plUInt32 uiIndex, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span> </div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a70cb0225a3ab95e62a1b8b3793e3d01b">Insert</a>(T&amp;&amp; value, plUInt32 uiIndex, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span> </div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a819a8168e990edb947bdfc68783067d2">RemoveAndCopy</a>(<span class="keyword">const</span> T&amp; value); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span> </div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#ae496c8f3895f5c72d78e17e7936ec8d3">RemoveAndSwap</a>(<span class="keyword">const</span> T&amp; value); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span> </div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#abaa3bfea372deca3ac86eaf52e1e6885">RemoveAtAndCopy</a>(plUInt32 uiIndex, plUInt16 uiNumElements = 1); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span> </div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a4225e8476f7118a0a4220bbd2ea69c27">RemoveAtAndSwap</a>(plUInt32 uiIndex, plUInt16 uiNumElements = 1); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span> </div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>  plUInt32 <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#ae0c4dfc056dcc0d9739e6ed397dcd583">IndexOf</a>(<span class="keyword">const</span> T&amp; value, plUInt32 uiStartIndex = 0) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span> </div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>  plUInt32 <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#aa61f12c4ae9a08d46f309e7f5379a748">LastIndexOf</a>(<span class="keyword">const</span> T&amp; value, plUInt32 uiStartIndex = plSmallInvalidIndex) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span> </div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>  T&amp; <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a9ff3a42c1621c781821554113bf61918">ExpandAndGetRef</a>(<a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span> </div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#ac950cb444242c44a3e2f4b428deb357d">PushBack</a>(<span class="keyword">const</span> T&amp; value, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span> </div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#ac950cb444242c44a3e2f4b428deb357d">PushBack</a>(T&amp;&amp; value, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span> </div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#ac416170760d69eb6792c4a9e0926449e">PushBackUnchecked</a>(<span class="keyword">const</span> T&amp; value); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span> </div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#ac416170760d69eb6792c4a9e0926449e">PushBackUnchecked</a>(T&amp;&amp; value); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span> </div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a0e083b79e10f09bd20ac388a61bccb51">PushBackRange</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const T&gt;</a>&amp; range, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span> </div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a014b7fc2ba69771cf680857045655a71">PopBack</a>(plUInt32 uiCountToRemove = 1); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span> </div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>  T&amp; <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a9641463b1b2674974d6f5af15e6161d1">PeekBack</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span> </div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>  <span class="keyword">const</span> T&amp; <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a9641463b1b2674974d6f5af15e6161d1">PeekBack</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span> </div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a6718419bdff0ce164ae62177cb886de6">Sort</a>(<span class="keyword">const</span> Comparer&amp; comparer); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span> </div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a6718419bdff0ce164ae62177cb886de6">Sort</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span> </div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>  T* <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a8d296d79cfc46a7daa2e5f63aec5594f">GetData</a>();</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span> </div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>  <span class="keyword">const</span> T* <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a8d296d79cfc46a7daa2e5f63aec5594f">GetData</a>() <span class="keyword">const</span>;</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span> </div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>  <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;T&gt;</a> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#aaa15d1b49967ceb624cbc58fb65606da">GetArrayPtr</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span> </div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>  <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const T&gt;</a> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#aaa15d1b49967ceb624cbc58fb65606da">GetArrayPtr</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span> </div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>  <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;typename plArrayPtr&lt;T&gt;::ByteType</a>&gt; <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a827d52bbc2f8b77ce74bee1e2a960d7d">GetByteArrayPtr</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span> </div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>  <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;typename plArrayPtr&lt;const T&gt;::ByteType</a>&gt; <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a827d52bbc2f8b77ce74bee1e2a960d7d">GetByteArrayPtr</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span> </div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a6f8e3c811f1a36986107131c01820426">Reserve</a>(plUInt16 uiCapacity, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span> </div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a6c9ccc27d42825a50c849e2d8b4d6be2">Compact</a>(<a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span> </div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno"><a class="line" href="../../d7/de3/classpl_small_array_base.htm#aef1a6d049970c942380c0b76626ea746">  169</a></span>  plUInt32 <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#aef1a6d049970c942380c0b76626ea746">GetCapacity</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_uiCapacity; }</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span> </div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>  plUInt64 <a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#a918972762638a07472ad288f59d7bd7b">GetHeapMemoryUsage</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span> </div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>  <span class="keyword">using </span>value_type = T;</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>  <span class="keyword">using </span>const_reference = <span class="keyword">const</span> T&amp;;</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>  <span class="keyword">using </span>const_iterator = <span class="keyword">const</span> T*;</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>  <span class="keyword">using </span>const_reverse_iterator = <a class="code hl_struct" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">const_reverse_pointer_iterator&lt;T&gt;</a>;</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>  <span class="keyword">using </span>iterator = T*;</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>  <span class="keyword">using </span>reverse_iterator = <a class="code hl_struct" href="../../d3/df2/structreverse__pointer__iterator.htm">reverse_pointer_iterator&lt;T&gt;</a>;</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span> </div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>  <span class="keyword">const</span> U&amp; GetUserData() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span> </div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>  U&amp; GetUserData();             <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span> </div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span><span class="keyword">protected</span>:</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>  <span class="keyword">enum</span></div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>  {</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>    CAPACITY_ALIGNMENT = 4</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>  };</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span> </div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>  <span class="keywordtype">void</span> SetCapacity(plUInt16 uiCapacity, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator);</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span> </div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>  T* GetElementsPtr();</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>  <span class="keyword">const</span> T* GetElementsPtr() <span class="keyword">const</span>;</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span> </div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>  plUInt16 m_uiCount = 0;</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>  plUInt16 m_uiCapacity = Size;</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span> </div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>  plUInt32 m_uiUserData = 0;</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span> </div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>  <span class="keyword">union</span></div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>  {</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>    <span class="keyword">struct </span><span class="keyword">alignas</span>(PL_ALIGNMENT_OF(T))</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>    {</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>      plUInt8 m_StaticData[Size * <span class="keyword">sizeof</span>(T)];</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>    };</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span> </div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>    T* m_pElements = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span>  };</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>};</div>
</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span> </div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span> </div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, plUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper = plDefaultAllocatorWrapper&gt;</div>
<div class="foldopen" id="foldopen00218" data-start="{" data-end="};">
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno"><a class="line" href="../../df/dd9/classpl_small_array.htm">  218</a></span><span class="keyword">class </span><a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase</a>&lt;T, Size&gt;</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>{</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>  <span class="keyword">using </span><a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">SUPER</a> = <a class="code hl_class" href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase&lt;T, Size&gt;</a>;</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span> </div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>  <span class="comment">// Only if the stored type is either POD or relocatable the hybrid array itself is also relocatable.</span></div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span>  PL_DECLARE_MEM_RELOCATABLE_TYPE_CONDITIONAL(T);</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span> </div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>  <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray</a>();</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span> </div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>  <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;</a>&amp; other);</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>  <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const T&gt;</a>&amp; other);</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span>  <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray</a>(<a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;</a>&amp;&amp; other);</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span> </div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>  <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">~plSmallArray</a>();</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span> </div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span>  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;</a>&amp; rhs);</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const T&gt;</a>&amp; rhs);</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>  <span class="keywordtype">void</span> operator=(<a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;T, Size, AllocatorWrapper&gt;</a>&amp;&amp; rhs) <span class="keyword">noexcept</span>;</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span> </div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>  <span class="keywordtype">void</span> SetCount(plUInt16 uiCount);                      <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>  <span class="keywordtype">void</span> SetCount(plUInt16 uiCount, <span class="keyword">const</span> T&amp; fillValue);  <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span>  <span class="keywordtype">void</span> EnsureCount(plUInt16 uiCount);                   <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span> </div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> = <span class="keywordtype">void</span>&gt;</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>  <span class="keywordtype">void</span> SetCountUninitialized(plUInt16 uiCount);         <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span> </div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>  <span class="keywordtype">void</span> InsertAt(plUInt32 uiIndex, <span class="keyword">const</span> T&amp; value);      <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span>  <span class="keywordtype">void</span> InsertAt(plUInt32 uiIndex, T&amp;&amp; value);           <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span> </div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>  T&amp; ExpandAndGetRef();                                 <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span>  <span class="keywordtype">void</span> PushBack(<span class="keyword">const</span> T&amp; value);                        <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>  <span class="keywordtype">void</span> PushBack(T&amp;&amp; value);                             <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>  <span class="keywordtype">void</span> PushBackRange(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const T&gt;</a>&amp; range); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span> </div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span>  <span class="keywordtype">void</span> Reserve(plUInt16 uiCapacity);</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span>  <span class="keywordtype">void</span> Compact();</div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span>};</div>
</div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span> </div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span><span class="preprocessor">#include &lt;Foundation/Containers/Implementation/SmallArray_inl.h&gt;</span></div>
<div class="ttc" id="aclasspl_allocator_htm"><div class="ttname"><a href="../../da/df3/classpl_allocator.htm">plAllocator</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition</b> Allocator.h:23</div></div>
<div class="ttc" id="aclasspl_array_ptr_htm"><div class="ttname"><a href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a></div><div class="ttdoc">This class encapsulates an array and it's size. It is recommended to use this class instead of plain ...</div><div class="ttdef"><b>Definition</b> ArrayPtr.h:37</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm">plSmallArrayBase</a></div><div class="ttdoc">Implementation of a dynamically growing array with in-place storage and small memory overhead.</div><div class="ttdef"><b>Definition</b> SmallArray.h:17</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a014b7fc2ba69771cf680857045655a71"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a014b7fc2ba69771cf680857045655a71">plSmallArrayBase::PopBack</a></div><div class="ttdeci">void PopBack(plUInt32 uiCountToRemove=1)</div><div class="ttdoc">Removes count elements from the end of the array.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:400</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a0e083b79e10f09bd20ac388a61bccb51"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a0e083b79e10f09bd20ac388a61bccb51">plSmallArrayBase::PushBackRange</a></div><div class="ttdeci">void PushBackRange(const plArrayPtr&lt; const T &gt; &amp;range, plAllocator *pAllocator)</div><div class="ttdoc">Pushes all elements in range at the end of the array. Increases the capacity if necessary.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:390</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a1105ef94e1b2228e67ecfe976f151e13"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a1105ef94e1b2228e67ecfe976f151e13">plSmallArrayBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Clears the array.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:222</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a132a3c1de704395663e3ffeafeff482e"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a132a3c1de704395663e3ffeafeff482e">plSmallArrayBase::SetCount</a></div><div class="ttdeci">void SetCount(plUInt16 uiCount, plAllocator *pAllocator)</div><div class="ttdoc">Resizes the array to have exactly uiCount elements. Default constructs extra elements if the array is...</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:142</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a4225e8476f7118a0a4220bbd2ea69c27"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a4225e8476f7118a0a4220bbd2ea69c27">plSmallArrayBase::RemoveAtAndSwap</a></div><div class="ttdeci">void RemoveAtAndSwap(plUInt32 uiIndex, plUInt16 uiNumElements=1)</div><div class="ttdoc">Removes the element at index and fills the gap by swapping in the last element.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:292</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a429bf06f44557e9e94d93bcee6cb8631"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a429bf06f44557e9e94d93bcee6cb8631">plSmallArrayBase::MoveFrom</a></div><div class="ttdeci">void MoveFrom(plSmallArrayBase&lt; T, Size &gt; &amp;&amp;other, plAllocator *pAllocator)</div><div class="ttdoc">Moves the data from some other array into this one.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:69</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a55c33bfdeaaa99c1331a8a8fe2ee9e10"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a55c33bfdeaaa99c1331a8a8fe2ee9e10">plSmallArrayBase::SetCountUninitialized</a></div><div class="ttdeci">void SetCountUninitialized(plUInt16 uiCount, plAllocator *pAllocator)</div><div class="ttdoc">Resizes the array to have exactly uiCount elements. Extra elements might be uninitialized.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:190</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a6718419bdff0ce164ae62177cb886de6"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a6718419bdff0ce164ae62177cb886de6">plSmallArrayBase::Sort</a></div><div class="ttdeci">void Sort()</div><div class="ttdoc">Sort with default comparer.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:434</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a6c9ccc27d42825a50c849e2d8b4d6be2"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a6c9ccc27d42825a50c849e2d8b4d6be2">plSmallArrayBase::Compact</a></div><div class="ttdeci">void Compact(plAllocator *pAllocator)</div><div class="ttdoc">Tries to compact the array to avoid wasting memory. The resulting capacity is at least 'GetCount' (no...</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:502</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a6f8e3c811f1a36986107131c01820426"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a6f8e3c811f1a36986107131c01820426">plSmallArrayBase::Reserve</a></div><div class="ttdeci">void Reserve(plUInt16 uiCapacity, plAllocator *pAllocator)</div><div class="ttdoc">Expands the array so it can at least store the given capacity.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:486</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a70cb0225a3ab95e62a1b8b3793e3d01b"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a70cb0225a3ab95e62a1b8b3793e3d01b">plSmallArrayBase::Insert</a></div><div class="ttdeci">void Insert(const T &amp;value, plUInt32 uiIndex, plAllocator *pAllocator)</div><div class="ttdoc">Inserts value at index by shifting all following elements.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:235</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a7bdb7ccdd99b15c07c61f179436d63a8"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a7bdb7ccdd99b15c07c61f179436d63a8">plSmallArrayBase::CopyFrom</a></div><div class="ttdeci">void CopyFrom(const plArrayPtr&lt; const T &gt; &amp;other, plAllocator *pAllocator)</div><div class="ttdoc">Copies the data from some other array into this one.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:32</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a819a8168e990edb947bdfc68783067d2"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a819a8168e990edb947bdfc68783067d2">plSmallArrayBase::RemoveAndCopy</a></div><div class="ttdeci">bool RemoveAndCopy(const T &amp;value)</div><div class="ttdoc">Removes the first occurrence of value and fills the gap by shifting all following elements.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:257</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a827d52bbc2f8b77ce74bee1e2a960d7d"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a827d52bbc2f8b77ce74bee1e2a960d7d">plSmallArrayBase::GetByteArrayPtr</a></div><div class="ttdeci">plArrayPtr&lt; typename plArrayPtr&lt; T &gt;::ByteType &gt; GetByteArrayPtr()</div><div class="ttdoc">Returns a byte array pointer to the array data, or an empty array pointer if the array is empty.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:474</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a8cee3cefaff8bc613de722a43025ceca"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a8cee3cefaff8bc613de722a43025ceca">plSmallArrayBase::EnsureCount</a></div><div class="ttdeci">void EnsureCount(plUInt16 uiCount, plAllocator *pAllocator)</div><div class="ttdoc">Ensures the container has at least uiCount elements. Ie. calls SetCount() if the container has fewer ...</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:180</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a8d296d79cfc46a7daa2e5f63aec5594f"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a8d296d79cfc46a7daa2e5f63aec5594f">plSmallArrayBase::GetData</a></div><div class="ttdeci">T * GetData()</div><div class="ttdoc">Returns a pointer to the array data, or nullptr if the array is empty.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:444</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a918972762638a07472ad288f59d7bd7b"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a918972762638a07472ad288f59d7bd7b">plSmallArrayBase::GetHeapMemoryUsage</a></div><div class="ttdeci">plUInt64 GetHeapMemoryUsage() const</div><div class="ttdoc">Returns the amount of bytes that are currently allocated on the heap.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:526</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a9641463b1b2674974d6f5af15e6161d1"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a9641463b1b2674974d6f5af15e6161d1">plSmallArrayBase::PeekBack</a></div><div class="ttdeci">T &amp; PeekBack()</div><div class="ttdoc">Returns the last element of the array.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:409</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_a9ff3a42c1621c781821554113bf61918"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#a9ff3a42c1621c781821554113bf61918">plSmallArrayBase::ExpandAndGetRef</a></div><div class="ttdeci">T &amp; ExpandAndGetRef(plAllocator *pAllocator)</div><div class="ttdoc">Grows the array by one element and returns a reference to the newly created element.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:338</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_aa61f12c4ae9a08d46f309e7f5379a748"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#aa61f12c4ae9a08d46f309e7f5379a748">plSmallArrayBase::LastIndexOf</a></div><div class="ttdeci">plUInt32 LastIndexOf(const T &amp;value, plUInt32 uiStartIndex=plSmallInvalidIndex) const</div><div class="ttdoc">Searches for the last occurrence of the given value and returns its index or plInvalidIndex if not fo...</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:325</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_aaa15d1b49967ceb624cbc58fb65606da"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#aaa15d1b49967ceb624cbc58fb65606da">plSmallArrayBase::GetArrayPtr</a></div><div class="ttdeci">plArrayPtr&lt; T &gt; GetArrayPtr()</div><div class="ttdoc">Returns an array pointer to the array data, or an empty array pointer if the array is empty.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:462</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_aaadcac566b72769bc7881e1daadb63c7"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#aaadcac566b72769bc7881e1daadb63c7">plSmallArrayBase::GetCount</a></div><div class="ttdeci">plUInt32 GetCount() const</div><div class="ttdoc">Returns the number of active elements in the array.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:210</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_ab139b09923133b72fabb28a2fae3e4f4"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#ab139b09923133b72fabb28a2fae3e4f4">plSmallArrayBase::operator[]</a></div><div class="ttdeci">const T &amp; operator[](plUInt32 uiIndex) const</div><div class="ttdoc">Returns the element at the given index. Does bounds checks in debug builds.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:128</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_abaa3bfea372deca3ac86eaf52e1e6885"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#abaa3bfea372deca3ac86eaf52e1e6885">plSmallArrayBase::RemoveAtAndCopy</a></div><div class="ttdeci">void RemoveAtAndCopy(plUInt32 uiIndex, plUInt16 uiNumElements=1)</div><div class="ttdoc">Removes the element at index and fills the gap by shifting all following elements.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:281</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_ac416170760d69eb6792c4a9e0926449e"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#ac416170760d69eb6792c4a9e0926449e">plSmallArrayBase::PushBackUnchecked</a></div><div class="ttdeci">void PushBackUnchecked(const T &amp;value)</div><div class="ttdoc">Pushes value at the end of the array. Does NOT ensure capacity.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:372</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_ac5e8a1f919fa2e2be0f7737874d661fc"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#ac5e8a1f919fa2e2be0f7737874d661fc">plSmallArrayBase::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns true, if the array does not contain any elements.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:216</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_ac950cb444242c44a3e2f4b428deb357d"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#ac950cb444242c44a3e2f4b428deb357d">plSmallArrayBase::PushBack</a></div><div class="ttdeci">void PushBack(const T &amp;value, plAllocator *pAllocator)</div><div class="ttdoc">Pushes value at the end of the array.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:354</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_ae0c4dfc056dcc0d9739e6ed397dcd583"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#ae0c4dfc056dcc0d9739e6ed397dcd583">plSmallArrayBase::IndexOf</a></div><div class="ttdeci">plUInt32 IndexOf(const T &amp;value, plUInt32 uiStartIndex=0) const</div><div class="ttdoc">Searches for the first occurrence of the given value and returns its index or plInvalidIndex if not f...</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:312</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_ae10acb56265e7505bf03cc5c90e8fc09"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#ae10acb56265e7505bf03cc5c90e8fc09">plSmallArrayBase::operator==</a></div><div class="ttdeci">bool operator==(const plSmallArrayBase&lt; T, Size &gt; &amp;rhs) const</div><div class="ttdoc">Compares this array to another contiguous array type.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:111</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_ae496c8f3895f5c72d78e17e7936ec8d3"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#ae496c8f3895f5c72d78e17e7936ec8d3">plSmallArrayBase::RemoveAndSwap</a></div><div class="ttdeci">bool RemoveAndSwap(const T &amp;value)</div><div class="ttdoc">Removes the first occurrence of value and fills the gap by swapping in the last element.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:269</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_aef1a6d049970c942380c0b76626ea746"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#aef1a6d049970c942380c0b76626ea746">plSmallArrayBase::GetCapacity</a></div><div class="ttdeci">plUInt32 GetCapacity() const</div><div class="ttdoc">Returns the reserved number of elements that the array can hold without reallocating.</div><div class="ttdef"><b>Definition</b> SmallArray.h:169</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_af1f603e32fd9d8e5d01ac453c9a3f898"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#af1f603e32fd9d8e5d01ac453c9a3f898">plSmallArrayBase::Contains</a></div><div class="ttdeci">bool Contains(const T &amp;value) const</div><div class="ttdoc">Checks whether the given value can be found in the array. O(n) complexity.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:229</div></div>
<div class="ttc" id="aclasspl_small_array_htm"><div class="ttname"><a href="../../df/dd9/classpl_small_array.htm">plSmallArray</a></div><div class="ttdef"><b>Definition</b> SmallArray.h:219</div></div>
<div class="ttc" id="astructconst__reverse__pointer__iterator_htm"><div class="ttname"><a href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">const_reverse_pointer_iterator</a></div><div class="ttdoc">Base class for Pointer like reverse iterators.</div><div class="ttdef"><b>Definition</b> ArrayIterator.h:152</div></div>
<div class="ttc" id="astructreverse__pointer__iterator_htm"><div class="ttname"><a href="../../d3/df2/structreverse__pointer__iterator.htm">reverse_pointer_iterator</a></div><div class="ttdoc">Non-Const class for Pointer like reverse iterators.</div><div class="ttdef"><b>Definition</b> ArrayIterator.h:216</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_3416883c1320ec68c4d0694befd114fc.htm">Containers</a></li><li class="navelem"><b>SmallArray.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
