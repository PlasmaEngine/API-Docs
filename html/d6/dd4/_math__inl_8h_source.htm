<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<!-- BEGIN opengraph metadata -->
<meta property="og:title" content="Doxygen Awesome" />
<meta property="og:image" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta property="og:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<meta property="og:url" content="https://jothepro.github.io/doxygen-awesome-css/" />
<!-- END opengraph metadata -->
<!-- BEGIN twitter metadata -->
<meta name="twitter:image:src" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta name="twitter:title" content="Doxygen Awesome" />
<meta name="twitter:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<!-- END twitter metadata -->
<title>Plasma Engine: Code/Engine/Foundation/Math/Implementation/Math_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link rel="icon" type="image/svg+xml" href="logo.drawio.svg"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-paragraph-link.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-tabs.js"></script>
<script type="text/javascript" src="../../toggle-alternative-theme.js"></script>
<script type="text/javascript">
    DoxygenAwesomeFragmentCopyButton.init()
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeParagraphLink.init()
    DoxygenAwesomeInteractiveToc.init()
    DoxygenAwesomeTabs.init()
</script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Plasma Engine
   &#160;<span id="projectnumber">2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d6/dd4/_math__inl_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Math_inl.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;algorithm&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span> </div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="keyword">namespace </span><a class="code hl_namespace" href="../../d1/dbc/namespacepl_math.htm">plMath</a></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span>{</div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00008" data-start="{" data-end="}">
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a25ddcfae0bd88d04d015b266a236065f">    8</a></span>  <span class="keyword">constexpr</span> PL_ALWAYS_INLINE T <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a25ddcfae0bd88d04d015b266a236065f">Square</a>(T f)</div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span>  {</div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span>    <span class="keywordflow">return</span> (f * f);</div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span>  }</div>
</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span> </div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00014" data-start="{" data-end="}">
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#ab3b08ed7dc553561de9b2d8635cc44db">   14</a></span>  <span class="keyword">constexpr</span> PL_ALWAYS_INLINE T <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ab3b08ed7dc553561de9b2d8635cc44db">Sign</a>(T f)</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span>  {</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span>    <span class="keywordflow">return</span> (f &lt; 0 ? T(-1) : f &gt; 0 ? T(1)</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>                                  : 0);</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>  }</div>
</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span> </div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00021" data-start="{" data-end="}">
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#abd0ef20e6710b240c9833acdf6f2f8d7">   21</a></span>  <span class="keyword">constexpr</span> PL_ALWAYS_INLINE T <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#abd0ef20e6710b240c9833acdf6f2f8d7">Abs</a>(T f)</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>  {</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>    <span class="keywordflow">return</span> (f &lt; 0 ? -f : f);</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>  }</div>
</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span> </div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00027" data-start="{" data-end="}">
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a314b24989122e22968ae0a11cc872e28">   27</a></span>  <span class="keyword">constexpr</span> PL_ALWAYS_INLINE T <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a314b24989122e22968ae0a11cc872e28">Min</a>(T f1, T f2)</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>  {</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>    <span class="keywordflow">return</span> (f2 &lt; f1 ? f2 : f1);</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>  }</div>
</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span> </div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... ARGS&gt;</div>
<div class="foldopen" id="foldopen00033" data-start="{" data-end="}">
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a984809c9115e1dfca747e5ae6c888a50">   33</a></span>  <span class="keyword">constexpr</span> PL_ALWAYS_INLINE T <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a314b24989122e22968ae0a11cc872e28">Min</a>(T f1, T f2, ARGS... f)</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>  {</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span>    <span class="keywordflow">return</span> <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a314b24989122e22968ae0a11cc872e28">Min</a>(<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a314b24989122e22968ae0a11cc872e28">Min</a>(f1, f2), f...);</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>  }</div>
</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span> </div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00039" data-start="{" data-end="}">
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">   39</a></span>  <span class="keyword">constexpr</span> PL_ALWAYS_INLINE T <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">Max</a>(T f1, T f2)</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span>  {</div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span>    <span class="keywordflow">return</span> (f1 &lt; f2 ? f2 : f1);</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>  }</div>
</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span> </div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... ARGS&gt;</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>  <span class="keyword">constexpr</span> PL_ALWAYS_INLINE T <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">Max</a>(T f1, T f2, ARGS... f)</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>  {</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>    <span class="keywordflow">return</span> <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">Max</a>(<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">Max</a>(f1, f2), f...);</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>  }</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span> </div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00051" data-start="{" data-end="}">
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a5e64f45bae1fb8ddbe02e2f5bdf18767">   51</a></span>  <span class="keyword">constexpr</span> PL_ALWAYS_INLINE T <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a5e64f45bae1fb8ddbe02e2f5bdf18767">Clamp</a>(T value, T min_val, T max_val)</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>  {</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span>    <span class="keywordflow">return</span> value &lt; min_val ? min_val : (max_val &lt; value ? max_val : value);</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>  }</div>
</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span> </div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00057" data-start="{" data-end="}">
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#acf3240988b12047baffaee141fc8cffb">   57</a></span>  <span class="keyword">constexpr</span> PL_ALWAYS_INLINE T <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#acf3240988b12047baffaee141fc8cffb">Saturate</a>(T value)</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>  {</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>    <span class="keywordflow">return</span> <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a5e64f45bae1fb8ddbe02e2f5bdf18767">Clamp</a>(value, T(0), T(1));</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>  }</div>
</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span> </div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00063" data-start="{" data-end="}">
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a5e363339c8dfc76221563df0bf2302b3">   63</a></span>  <span class="keyword">constexpr</span> Type <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a5e363339c8dfc76221563df0bf2302b3">Invert</a>(Type f)</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>  {</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>    <span class="keyword">static_assert</span>(std::is_floating_point_v&lt;Type&gt;);</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span> </div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>    <span class="keywordflow">return</span> ((Type)1) / f;</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>  }</div>
</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span> </div>
<div class="foldopen" id="foldopen00070" data-start="{" data-end="}">
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a77a11d9b4e7665621cad426a72f7dca0">   70</a></span>  PL_ALWAYS_INLINE plUInt32 <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a77a11d9b4e7665621cad426a72f7dca0">FirstBitLow</a>(plUInt32 value)</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>  {</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>    PL_ASSERT_DEBUG(value != 0, <span class="stringliteral">&quot;FirstBitLow is undefined for 0&quot;</span>);</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span> </div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span><span class="preprocessor">#if PL_ENABLED(PL_PLATFORM_WINDOWS)</span></div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> uiIndex = 0;</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>    _BitScanForward(&amp;uiIndex, value);</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>    <span class="keywordflow">return</span> uiIndex;</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span><span class="preprocessor">#elif PL_ENABLED(PL_COMPILER_GCC) || PL_ENABLED(PL_COMPILER_CLANG)</span></div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>    <span class="keywordflow">return</span> __builtin_ctz(value);</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span><span class="preprocessor">#else</span></div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>    PL_ASSERT_NOT_IMPLEMENTED;</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>  }</div>
</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span> </div>
<div class="foldopen" id="foldopen00086" data-start="{" data-end="}">
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a387b958909e087e206b7d217f8005187">   86</a></span>  PL_ALWAYS_INLINE plUInt32 <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a77a11d9b4e7665621cad426a72f7dca0">FirstBitLow</a>(plUInt64 value)</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>  {</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>    PL_ASSERT_DEBUG(value != 0, <span class="stringliteral">&quot;FirstBitLow is undefined for 0&quot;</span>);</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span> </div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span><span class="preprocessor">#if __castxml__</span></div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span><span class="preprocessor">#elif PL_ENABLED(PL_PLATFORM_WINDOWS)</span></div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> uiIndex = 0;</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span><span class="preprocessor">#  if PL_ENABLED(PL_PLATFORM_64BIT)</span></div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span> </div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>    _BitScanForward64(&amp;uiIndex, value);</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span><span class="preprocessor">#  else</span></div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>    uint32_t lower = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(value);</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> returnCode = _BitScanForward(&amp;uiIndex, lower);</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>    <span class="keywordflow">if</span> (returnCode == 0)</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>    {</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>      uint32_t upper = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(value &gt;&gt; 32);</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>      returnCode = _BitScanForward(&amp;uiIndex, upper);</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>      <span class="keywordflow">if</span> (returnCode &gt; 0) <span class="comment">// Only can happen in Release build when PL_ASSERT_DEBUG(value != 0) would fail.</span></div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>      {</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>        uiIndex += 32;    <span class="comment">// Add length of lower to index.</span></div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>      }</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>    }</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span><span class="preprocessor">#  endif</span></div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>    <span class="keywordflow">return</span> uiIndex;</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span><span class="preprocessor">#elif PL_ENABLED(PL_COMPILER_GCC) || PL_ENABLED(PL_COMPILER_CLANG)</span></div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>    <span class="keywordflow">return</span> __builtin_ctzll(value);</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span><span class="preprocessor">#else</span></div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>    PL_ASSERT_NOT_IMPLEMENTED;</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>  }</div>
</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span> </div>
<div class="foldopen" id="foldopen00119" data-start="{" data-end="}">
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a4daf0d43b398a7ff4083833b579bb2fc">  119</a></span>  PL_ALWAYS_INLINE plUInt32 <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a4daf0d43b398a7ff4083833b579bb2fc">FirstBitHigh</a>(plUInt32 value)</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>  {</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>    PL_ASSERT_DEBUG(value != 0, <span class="stringliteral">&quot;FirstBitHigh is undefined for 0&quot;</span>);</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span> </div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span><span class="preprocessor">#if PL_ENABLED(PL_PLATFORM_WINDOWS)</span></div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> uiIndex = 0;</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>    _BitScanReverse(&amp;uiIndex, value);</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>    <span class="keywordflow">return</span> uiIndex;</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span><span class="preprocessor">#elif PL_ENABLED(PL_COMPILER_GCC) || PL_ENABLED(PL_COMPILER_CLANG)</span></div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>    <span class="keywordflow">return</span> 31 - __builtin_clz(value);</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span><span class="preprocessor">#else</span></div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>    PL_ASSERT_NOT_IMPLEMENTED;</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>  }</div>
</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span> </div>
<div class="foldopen" id="foldopen00135" data-start="{" data-end="}">
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#ab25cfddd4495b3bd6c92fd8f0cff878b">  135</a></span>  PL_ALWAYS_INLINE plUInt32 <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a4daf0d43b398a7ff4083833b579bb2fc">FirstBitHigh</a>(plUInt64 value)</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>  {</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>    PL_ASSERT_DEBUG(value != 0, <span class="stringliteral">&quot;FirstBitHigh is undefined for 0&quot;</span>);</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span> </div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span><span class="preprocessor">#if __castxml__</span></div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span><span class="preprocessor">#elif PL_ENABLED(PL_PLATFORM_WINDOWS)</span></div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> uiIndex = 0;</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span><span class="preprocessor">#  if PL_ENABLED(PL_PLATFORM_64BIT)</span></div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>    _BitScanReverse64(&amp;uiIndex, value);</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span><span class="preprocessor">#  else</span></div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>    uint32_t upper = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(value &gt;&gt; 32);</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> returnCode = _BitScanReverse(&amp;uiIndex, upper);</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>    <span class="keywordflow">if</span> (returnCode == 0)</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>    {</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>      uint32_t lower = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(value);</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>      returnCode = _BitScanReverse(&amp;uiIndex, lower);</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>    }</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>    <span class="keywordflow">else</span></div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>    {</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>      uiIndex += 32; <span class="comment">// Add length of upper to index.</span></div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>    }</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span><span class="preprocessor">#  endif</span></div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>    <span class="keywordflow">return</span> uiIndex;</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span><span class="preprocessor">#elif PL_ENABLED(PL_COMPILER_GCC) || PL_ENABLED(PL_COMPILER_CLANG)</span></div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>    <span class="keywordflow">return</span> 63 - __builtin_clzll(value);</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span><span class="preprocessor">#else</span></div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>    PL_ASSERT_NOT_IMPLEMENTED;</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>  }</div>
</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span> </div>
<div class="foldopen" id="foldopen00167" data-start="{" data-end="}">
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#add691d49a4f270dc22fb918d8ba1ca4f">  167</a></span>  PL_ALWAYS_INLINE plUInt32 <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#add691d49a4f270dc22fb918d8ba1ca4f">CountTrailingZeros</a>(plUInt32 uiBitmask)</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>  {</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>    <span class="keywordflow">return</span> (uiBitmask == 0) ? 32 : <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a77a11d9b4e7665621cad426a72f7dca0">FirstBitLow</a>(uiBitmask);</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>  }</div>
</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span> </div>
<div class="foldopen" id="foldopen00172" data-start="{" data-end="}">
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a0bd47191b2c5fb26088ef5c0f52f281c">  172</a></span>  PL_ALWAYS_INLINE plUInt32 <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#add691d49a4f270dc22fb918d8ba1ca4f">CountTrailingZeros</a>(plUInt64 uiBitmask)</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>  {</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>    <span class="keyword">const</span> plUInt32 numLow = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#add691d49a4f270dc22fb918d8ba1ca4f">CountTrailingZeros</a>(<span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(uiBitmask &amp; 0xFFFFFFFF));</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>    <span class="keyword">const</span> plUInt32 numHigh = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#add691d49a4f270dc22fb918d8ba1ca4f">CountTrailingZeros</a>(<span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>((uiBitmask &gt;&gt; 32u) &amp; 0xFFFFFFFF));</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span> </div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>    <span class="keywordflow">return</span> (numLow == 32) ? (32 + numHigh) : numLow;</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>  }</div>
</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span> </div>
<div class="foldopen" id="foldopen00180" data-start="{" data-end="}">
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#aa6141bbf80704bdc6ba5a0df73d6e25d">  180</a></span>  PL_ALWAYS_INLINE plUInt32 <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#aa6141bbf80704bdc6ba5a0df73d6e25d">CountLeadingZeros</a>(plUInt32 uiBitmask)</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>  {</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>    <span class="keywordflow">return</span> (uiBitmask == 0) ? 32 : (31u - <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a4daf0d43b398a7ff4083833b579bb2fc">FirstBitHigh</a>(uiBitmask));</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>  }</div>
</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span> </div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span> </div>
<div class="foldopen" id="foldopen00186" data-start="{" data-end="}">
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a9c8b8683756df9047c6a5e4a44f4752f">  186</a></span>  PL_ALWAYS_INLINE plUInt32 <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a9c8b8683756df9047c6a5e4a44f4752f">CountBits</a>(plUInt32 value)</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>  {</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span><span class="preprocessor">#if PL_ENABLED(PL_COMPILER_MSVC) &amp;&amp; (PL_ENABLED(PL_PLATFORM_ARCH_X86) || (PL_ENABLED(PL_PLATFORM_ARCH_ARM) &amp;&amp; PL_ENABLED(PL_PLATFORM_32BIT)))</span></div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span><span class="preprocessor">#  if PL_ENABLED(PL_PLATFORM_ARCH_X86)</span></div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>    <span class="keywordflow">return</span> __popcnt(value);</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span><span class="preprocessor">#  else</span></div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>    <span class="keywordflow">return</span> _CountOneBits(value);</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span><span class="preprocessor">#  endif</span></div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span><span class="preprocessor">#elif PL_ENABLED(PL_COMPILER_GCC) || PL_ENABLED(PL_COMPILER_CLANG)</span></div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>    <span class="keywordflow">return</span> __builtin_popcount(value);</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span><span class="preprocessor">#else</span></div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>    value = value - ((value &gt;&gt; 1) &amp; 0x55555555u);</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>    value = (value &amp; 0x33333333u) + ((value &gt;&gt; 2) &amp; 0x33333333u);</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>    <span class="keywordflow">return</span> ((value + (value &gt;&gt; 4) &amp; 0xF0F0F0Fu) * 0x1010101u) &gt;&gt; 24;</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>  }</div>
</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span> </div>
<div class="foldopen" id="foldopen00203" data-start="{" data-end="}">
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a8521c8af0247db3c9653183fae295d67">  203</a></span>  PL_ALWAYS_INLINE plUInt32 <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a9c8b8683756df9047c6a5e4a44f4752f">CountBits</a>(plUInt64 value)</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>  {</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>    plUInt32 result = 0;</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>    result += <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a9c8b8683756df9047c6a5e4a44f4752f">CountBits</a>(plUInt32(value));</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>    result += <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a9c8b8683756df9047c6a5e4a44f4752f">CountBits</a>(plUInt32(value &gt;&gt; 32));</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>    <span class="keywordflow">return</span> result;</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span>  }</div>
</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span> </div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00212" data-start="{" data-end="}">
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#aa3bba00206eaca76b20bb1e131f27138">  212</a></span>  PL_ALWAYS_INLINE Type <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#aa3bba00206eaca76b20bb1e131f27138">Bitmask_LowN</a>(plUInt32 uiNumBitsToSet)</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>  {</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>    <span class="keywordflow">return</span> (uiNumBitsToSet &gt;= <span class="keyword">sizeof</span>(Type) * 8) ? ~static_cast&lt;Type&gt;(0) : ((<span class="keyword">static_cast&lt;</span>Type<span class="keyword">&gt;</span>(1) &lt;&lt; uiNumBitsToSet) - <span class="keyword">static_cast&lt;</span>Type<span class="keyword">&gt;</span>(1));</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>  }</div>
</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span> </div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00218" data-start="{" data-end="}">
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#ae9a3bfad84627afef5616665eecd65e4">  218</a></span>  PL_ALWAYS_INLINE Type <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ae9a3bfad84627afef5616665eecd65e4">Bitmask_HighN</a>(plUInt32 uiNumBitsToSet)</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>  {</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>    <span class="keywordflow">return</span> (uiNumBitsToSet == 0) ? 0 : ~static_cast&lt;Type&gt;(0) &lt;&lt; ((<span class="keyword">sizeof</span>(Type) * 8) - <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a314b24989122e22968ae0a11cc872e28">plMath::Min&lt;plUInt32&gt;</a>(uiNumBitsToSet, <span class="keyword">sizeof</span>(Type) * 8));</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>  }</div>
</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span> </div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00224" data-start="{" data-end="}">
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#abcac254119b9da320b0617b93e40ec9f">  224</a></span>  PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#abcac254119b9da320b0617b93e40ec9f">Swap</a>(T&amp; ref_f1, T&amp; ref_f2)</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>  {</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>    std::swap(ref_f1, ref_f2);</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>  }</div>
</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span> </div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00230" data-start="{" data-end="}">
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a2898309268211acdbebb498a1f03ce01">  230</a></span>  PL_FORCE_INLINE T <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a2898309268211acdbebb498a1f03ce01">Lerp</a>(T f1, T f2, <span class="keywordtype">float</span> fFactor)</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>  {</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>    <span class="comment">// value is not included in format string, to prevent requirement on FormatString.h, to break #include cycles</span></div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>    PL_ASSERT_DEBUG((fFactor &gt;= -0.00001f) &amp;&amp; (fFactor &lt;= 1.0f + 0.00001f), <span class="stringliteral">&quot;lerp: factor is not in the range [0; 1]&quot;</span>);</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span> </div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>    <span class="keywordflow">return</span> (T)(f1 + (fFactor * (f2 - f1)));</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>  }</div>
</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span> </div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00239" data-start="{" data-end="}">
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#aed967163303c2e74a09da77a7001f117">  239</a></span>  PL_FORCE_INLINE T <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a2898309268211acdbebb498a1f03ce01">Lerp</a>(T f1, T f2, <span class="keywordtype">double</span> fFactor)</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span>  {</div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>    <span class="comment">// value is not included in format string, to prevent requirement on FormatString.h, to break #include cycles</span></div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>    PL_ASSERT_DEBUG((fFactor &gt;= -0.00001) &amp;&amp; (fFactor &lt;= 1.0 + 0.00001), <span class="stringliteral">&quot;lerp: factor is not in the range [0; 1]&quot;</span>);</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span> </div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>    <span class="keywordflow">return</span> (T)(f1 + (fFactor * (f2 - f1)));</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>  }</div>
</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span> </div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00248" data-start="{" data-end="}">
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a1b11d14648656b3bfb3529db712169af">  248</a></span>  PL_FORCE_INLINE <span class="keyword">constexpr</span> <span class="keywordtype">float</span> <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a1b11d14648656b3bfb3529db712169af">Unlerp</a>(T fMin, T fMax, T fValue)</div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span>  {</div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(fValue - fMin) / <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(fMax - fMin);</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>  }</div>
</div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span> </div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00255" data-start="{" data-end="}">
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#afe93e6c96ee4da7fff1ddcdbc81bff31">  255</a></span>  <span class="keyword">constexpr</span> PL_FORCE_INLINE T <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#afe93e6c96ee4da7fff1ddcdbc81bff31">Step</a>(T value, T edge)</div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span>  {</div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span>    <span class="keywordflow">return</span> (value &gt;= edge ? T(1) : T(0));</div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span>  }</div>
</div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span> </div>
<div class="foldopen" id="foldopen00260" data-start="{" data-end="}">
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#ae727cfa25d979e734284dc70e1ebca60">  260</a></span>  <span class="keyword">constexpr</span> PL_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ae727cfa25d979e734284dc70e1ebca60">IsPowerOf2</a>(plInt32 value)</div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span>  {</div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span>    <span class="keywordflow">return</span> (value &lt; 1) ? false : ((value &amp; (value - 1)) == 0);</div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span>  }</div>
</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span> </div>
<div class="foldopen" id="foldopen00265" data-start="{" data-end="}">
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a89278fe46001ce96280bc7974e31e677">  265</a></span>  <span class="keyword">constexpr</span> PL_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ae727cfa25d979e734284dc70e1ebca60">IsPowerOf2</a>(plUInt32 value)</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span>  {</div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span>    <span class="keywordflow">return</span> (value &lt; 1) ? false : ((value &amp; (value - 1)) == 0);</div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span>  }</div>
</div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span> </div>
<div class="foldopen" id="foldopen00270" data-start="{" data-end="}">
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a473dfa135ec837e343add8d362a2412a">  270</a></span>  <span class="keyword">constexpr</span> PL_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ae727cfa25d979e734284dc70e1ebca60">IsPowerOf2</a>(plUInt64 value)</div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span>  {</div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span>    <span class="keywordflow">return</span> (value &lt; 1) ? false : ((value &amp; (value - 1)) == 0);</div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span>  }</div>
</div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span> </div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00276" data-start="{" data-end="}">
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#ab5afdf4907a0a61a687be8a9e1e1f81c">  276</a></span>  <span class="keyword">constexpr</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ab5afdf4907a0a61a687be8a9e1e1f81c">IsEqual</a>(Type lhs, Type rhs, Type fEpsilon)</div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span>  {</div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span>    <span class="keywordflow">return</span> ((rhs &gt;= lhs - fEpsilon) &amp;&amp; (rhs &lt;= lhs + fEpsilon));</div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span>  }</div>
</div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span> </div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00282" data-start="{" data-end="}">
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a8422d1228952cb6d6b061ecb513569ac">  282</a></span>  <span class="keyword">constexpr</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a8422d1228952cb6d6b061ecb513569ac">IsInRange</a>(T value, T minVal, T maxVal)</div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span>  {</div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span>    <span class="keywordflow">return</span> minVal &lt; maxVal ? (value &gt;= minVal) &amp;&amp; (value &lt;= maxVal) : (value &lt;= minVal) &amp;&amp; (value &gt;= maxVal);</div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span>  }</div>
</div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span> </div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00288" data-start="{" data-end="}">
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#ab41c015ef2ef7ea68f915082545755ae">  288</a></span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ab41c015ef2ef7ea68f915082545755ae">IsZero</a>(Type f, Type fEpsilon)</div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span>  {</div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span>    PL_ASSERT_DEBUG(fEpsilon &gt;= 0, <span class="stringliteral">&quot;Epsilon may not be negative.&quot;</span>);</div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span> </div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span>    <span class="keywordflow">return</span> ((f &gt;= -fEpsilon) &amp;&amp; (f &lt;= fEpsilon));</div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span>  }</div>
</div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span> </div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00296" data-start="{" data-end="}">
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#ab7dd8470053b49d34d72fe1eb0d2ab61">  296</a></span>  PL_ALWAYS_INLINE Type <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ab7dd8470053b49d34d72fe1eb0d2ab61">Trunc</a>(Type f)</div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span>  {</div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span>    <span class="keywordflow">if</span> (f &gt; 0)</div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span>      <span class="keywordflow">return</span> Floor(f);</div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span> </div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span>    <span class="keywordflow">return</span> Ceil(f);</div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span>  }</div>
</div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span> </div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00305" data-start="{" data-end="}">
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a56d77e019b9b7dcc6c27ef6a5714851d">  305</a></span>  PL_ALWAYS_INLINE Type <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a56d77e019b9b7dcc6c27ef6a5714851d">Fraction</a>(Type f)</div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span>  {</div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span>    <span class="keywordflow">return</span> (f - <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ab7dd8470053b49d34d72fe1eb0d2ab61">Trunc</a>(f));</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span>  }</div>
</div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span> </div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00311" data-start="{" data-end="}">
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#ae27db066f56ce11ea3b96f8cede4a867">  311</a></span>  <span class="keyword">inline</span> Type <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ae27db066f56ce11ea3b96f8cede4a867">SmoothStep</a>(Type x, Type edge1, Type edge2)</div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span>  {</div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span>    <span class="keyword">const</span> Type divider = edge2 - edge1;</div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span> </div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span>    <span class="keywordflow">if</span> (divider == (Type)0)</div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span>    {</div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span>      <span class="keywordflow">return</span> (x &gt;= edge2) ? 1 : 0;</div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>    }</div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span> </div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span>    x = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#acf3240988b12047baffaee141fc8cffb">Saturate</a>((x - edge1) / divider);</div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span> </div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span>    <span class="keywordflow">return</span> (x * x * ((Type)3 - ((Type)2 * x)));</div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span>  }</div>
</div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span> </div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00326" data-start="{" data-end="}">
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a8e7571124eabadd0fa57cffa70b00172">  326</a></span>  <span class="keyword">inline</span> Type <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a8e7571124eabadd0fa57cffa70b00172">SmootherStep</a>(Type x, Type edge1, Type edge2)</div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span>  {</div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span>    <span class="keyword">const</span> Type divider = edge2 - edge1;</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span> </div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span>    <span class="keywordflow">if</span> (divider == (Type)0)</div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span>    {</div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span>      <span class="keywordflow">return</span> (x &gt;= edge2) ? 1 : 0;</div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span>    }</div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span> </div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span>    x = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#acf3240988b12047baffaee141fc8cffb">Saturate</a>((x - edge1) / divider);</div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span> </div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span>    <span class="keywordflow">return</span> (x * x * x * (x * ((Type)6 * x - (Type)15) + (Type)10));</div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span>  }</div>
</div>
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno">  339</span> </div>
<div class="foldopen" id="foldopen00340" data-start="{" data-end="}">
<div class="line"><a id="l00340" name="l00340"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a6d59d967853711101adff06ccb2e0dd5">  340</a></span>  <span class="keyword">inline</span> plUInt8 <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a6d59d967853711101adff06ccb2e0dd5">ColorFloatToByte</a>(<span class="keywordtype">float</span> value)</div>
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno">  341</span>  {</div>
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno">  342</span>    <span class="comment">// Implemented according to</span></div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span>    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span>    <span class="keywordflow">if</span> (IsNaN(value))</div>
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno">  345</span>    {</div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span>      <span class="keywordflow">return</span> 0;</div>
<div class="line"><a id="l00347" name="l00347"></a><span class="lineno">  347</span>    }</div>
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno">  348</span>    <span class="keywordflow">else</span></div>
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno">  349</span>    {</div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span>      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>plUInt8<span class="keyword">&gt;</span>(<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#acf3240988b12047baffaee141fc8cffb">Saturate</a>(value) * 255.0f + 0.5f);</div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span>    }</div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span>  }</div>
</div>
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno">  353</span> </div>
<div class="foldopen" id="foldopen00354" data-start="{" data-end="}">
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a8859fe4bf482080605dec864a470da45">  354</a></span>  <span class="keyword">inline</span> plUInt16 <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a8859fe4bf482080605dec864a470da45">ColorFloatToShort</a>(<span class="keywordtype">float</span> value)</div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno">  355</span>  {</div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span>    <span class="comment">// Implemented according to</span></div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span>    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a id="l00358" name="l00358"></a><span class="lineno">  358</span>    <span class="keywordflow">if</span> (IsNaN(value))</div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span>    {</div>
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno">  360</span>      <span class="keywordflow">return</span> 0;</div>
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno">  361</span>    }</div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno">  362</span>    <span class="keywordflow">else</span></div>
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno">  363</span>    {</div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span>      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>plUInt16<span class="keyword">&gt;</span>(<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#acf3240988b12047baffaee141fc8cffb">Saturate</a>(value) * 65535.0f + 0.5f);</div>
<div class="line"><a id="l00365" name="l00365"></a><span class="lineno">  365</span>    }</div>
<div class="line"><a id="l00366" name="l00366"></a><span class="lineno">  366</span>  }</div>
</div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span> </div>
<div class="foldopen" id="foldopen00368" data-start="{" data-end="}">
<div class="line"><a id="l00368" name="l00368"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a0805dbc625c3f1ca235f566b20826dba">  368</a></span>  <span class="keyword">inline</span> plInt8 <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a0805dbc625c3f1ca235f566b20826dba">ColorFloatToSignedByte</a>(<span class="keywordtype">float</span> value)</div>
<div class="line"><a id="l00369" name="l00369"></a><span class="lineno">  369</span>  {</div>
<div class="line"><a id="l00370" name="l00370"></a><span class="lineno">  370</span>    <span class="comment">// Implemented according to</span></div>
<div class="line"><a id="l00371" name="l00371"></a><span class="lineno">  371</span>    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno">  372</span>    <span class="keywordflow">if</span> (IsNaN(value))</div>
<div class="line"><a id="l00373" name="l00373"></a><span class="lineno">  373</span>    {</div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno">  374</span>      <span class="keywordflow">return</span> 0;</div>
<div class="line"><a id="l00375" name="l00375"></a><span class="lineno">  375</span>    }</div>
<div class="line"><a id="l00376" name="l00376"></a><span class="lineno">  376</span>    <span class="keywordflow">else</span></div>
<div class="line"><a id="l00377" name="l00377"></a><span class="lineno">  377</span>    {</div>
<div class="line"><a id="l00378" name="l00378"></a><span class="lineno">  378</span>      value = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a5e64f45bae1fb8ddbe02e2f5bdf18767">Clamp</a>(value, -1.0f, 1.0f) * 127.0f;</div>
<div class="line"><a id="l00379" name="l00379"></a><span class="lineno">  379</span>      <span class="keywordflow">if</span> (value &gt;= 0.0f)</div>
<div class="line"><a id="l00380" name="l00380"></a><span class="lineno">  380</span>      {</div>
<div class="line"><a id="l00381" name="l00381"></a><span class="lineno">  381</span>        value += 0.5f;</div>
<div class="line"><a id="l00382" name="l00382"></a><span class="lineno">  382</span>      }</div>
<div class="line"><a id="l00383" name="l00383"></a><span class="lineno">  383</span>      <span class="keywordflow">else</span></div>
<div class="line"><a id="l00384" name="l00384"></a><span class="lineno">  384</span>      {</div>
<div class="line"><a id="l00385" name="l00385"></a><span class="lineno">  385</span>        value -= 0.5f;</div>
<div class="line"><a id="l00386" name="l00386"></a><span class="lineno">  386</span>      }</div>
<div class="line"><a id="l00387" name="l00387"></a><span class="lineno">  387</span>      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>plInt8<span class="keyword">&gt;</span>(value);</div>
<div class="line"><a id="l00388" name="l00388"></a><span class="lineno">  388</span>    }</div>
<div class="line"><a id="l00389" name="l00389"></a><span class="lineno">  389</span>  }</div>
</div>
<div class="line"><a id="l00390" name="l00390"></a><span class="lineno">  390</span> </div>
<div class="foldopen" id="foldopen00391" data-start="{" data-end="}">
<div class="line"><a id="l00391" name="l00391"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a8147d5ad32b1503e1393c7258e90c3a8">  391</a></span>  <span class="keyword">inline</span> plInt16 <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a8147d5ad32b1503e1393c7258e90c3a8">ColorFloatToSignedShort</a>(<span class="keywordtype">float</span> value)</div>
<div class="line"><a id="l00392" name="l00392"></a><span class="lineno">  392</span>  {</div>
<div class="line"><a id="l00393" name="l00393"></a><span class="lineno">  393</span>    <span class="comment">// Implemented according to</span></div>
<div class="line"><a id="l00394" name="l00394"></a><span class="lineno">  394</span>    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a id="l00395" name="l00395"></a><span class="lineno">  395</span>    <span class="keywordflow">if</span> (IsNaN(value))</div>
<div class="line"><a id="l00396" name="l00396"></a><span class="lineno">  396</span>    {</div>
<div class="line"><a id="l00397" name="l00397"></a><span class="lineno">  397</span>      <span class="keywordflow">return</span> 0;</div>
<div class="line"><a id="l00398" name="l00398"></a><span class="lineno">  398</span>    }</div>
<div class="line"><a id="l00399" name="l00399"></a><span class="lineno">  399</span>    <span class="keywordflow">else</span></div>
<div class="line"><a id="l00400" name="l00400"></a><span class="lineno">  400</span>    {</div>
<div class="line"><a id="l00401" name="l00401"></a><span class="lineno">  401</span>      value = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a5e64f45bae1fb8ddbe02e2f5bdf18767">Clamp</a>(value, -1.0f, 1.0f) * 32767.0f;</div>
<div class="line"><a id="l00402" name="l00402"></a><span class="lineno">  402</span>      <span class="keywordflow">if</span> (value &gt;= 0.0f)</div>
<div class="line"><a id="l00403" name="l00403"></a><span class="lineno">  403</span>      {</div>
<div class="line"><a id="l00404" name="l00404"></a><span class="lineno">  404</span>        value += 0.5f;</div>
<div class="line"><a id="l00405" name="l00405"></a><span class="lineno">  405</span>      }</div>
<div class="line"><a id="l00406" name="l00406"></a><span class="lineno">  406</span>      <span class="keywordflow">else</span></div>
<div class="line"><a id="l00407" name="l00407"></a><span class="lineno">  407</span>      {</div>
<div class="line"><a id="l00408" name="l00408"></a><span class="lineno">  408</span>        value -= 0.5f;</div>
<div class="line"><a id="l00409" name="l00409"></a><span class="lineno">  409</span>      }</div>
<div class="line"><a id="l00410" name="l00410"></a><span class="lineno">  410</span>      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>plInt16<span class="keyword">&gt;</span>(value);</div>
<div class="line"><a id="l00411" name="l00411"></a><span class="lineno">  411</span>    }</div>
<div class="line"><a id="l00412" name="l00412"></a><span class="lineno">  412</span>  }</div>
</div>
<div class="line"><a id="l00413" name="l00413"></a><span class="lineno">  413</span> </div>
<div class="foldopen" id="foldopen00414" data-start="{" data-end="}">
<div class="line"><a id="l00414" name="l00414"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a8b7409f69c51e9b37fd1af282dba5a5f">  414</a></span>  <span class="keyword">constexpr</span> <span class="keyword">inline</span> <span class="keywordtype">float</span> <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a8b7409f69c51e9b37fd1af282dba5a5f">ColorByteToFloat</a>(plUInt8 value)</div>
<div class="line"><a id="l00415" name="l00415"></a><span class="lineno">  415</span>  {</div>
<div class="line"><a id="l00416" name="l00416"></a><span class="lineno">  416</span>    <span class="comment">// Implemented according to</span></div>
<div class="line"><a id="l00417" name="l00417"></a><span class="lineno">  417</span>    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a id="l00418" name="l00418"></a><span class="lineno">  418</span>    <span class="keywordflow">return</span> value * (1.0f / 255.0f);</div>
<div class="line"><a id="l00419" name="l00419"></a><span class="lineno">  419</span>  }</div>
</div>
<div class="line"><a id="l00420" name="l00420"></a><span class="lineno">  420</span> </div>
<div class="foldopen" id="foldopen00421" data-start="{" data-end="}">
<div class="line"><a id="l00421" name="l00421"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#aed0425c9e1f58761cf91e3315d33e139">  421</a></span>  <span class="keyword">constexpr</span> <span class="keyword">inline</span> <span class="keywordtype">float</span> <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#aed0425c9e1f58761cf91e3315d33e139">ColorShortToFloat</a>(plUInt16 value)</div>
<div class="line"><a id="l00422" name="l00422"></a><span class="lineno">  422</span>  {</div>
<div class="line"><a id="l00423" name="l00423"></a><span class="lineno">  423</span>    <span class="comment">// Implemented according to</span></div>
<div class="line"><a id="l00424" name="l00424"></a><span class="lineno">  424</span>    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a id="l00425" name="l00425"></a><span class="lineno">  425</span>    <span class="keywordflow">return</span> value * (1.0f / 65535.0f);</div>
<div class="line"><a id="l00426" name="l00426"></a><span class="lineno">  426</span>  }</div>
</div>
<div class="line"><a id="l00427" name="l00427"></a><span class="lineno">  427</span> </div>
<div class="foldopen" id="foldopen00428" data-start="{" data-end="}">
<div class="line"><a id="l00428" name="l00428"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a7e0493d1a4477c91c0cfc260b348dc86">  428</a></span>  <span class="keyword">constexpr</span> <span class="keyword">inline</span> <span class="keywordtype">float</span> <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a7e0493d1a4477c91c0cfc260b348dc86">ColorSignedByteToFloat</a>(plInt8 value)</div>
<div class="line"><a id="l00429" name="l00429"></a><span class="lineno">  429</span>  {</div>
<div class="line"><a id="l00430" name="l00430"></a><span class="lineno">  430</span>    <span class="comment">// Implemented according to</span></div>
<div class="line"><a id="l00431" name="l00431"></a><span class="lineno">  431</span>    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a id="l00432" name="l00432"></a><span class="lineno">  432</span>    <span class="keywordflow">return</span> (value == -128) ? -1.0f : value * (1.0f / 127.0f);</div>
<div class="line"><a id="l00433" name="l00433"></a><span class="lineno">  433</span>  }</div>
</div>
<div class="line"><a id="l00434" name="l00434"></a><span class="lineno">  434</span> </div>
<div class="foldopen" id="foldopen00435" data-start="{" data-end="}">
<div class="line"><a id="l00435" name="l00435"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a8d8fd6ec30ad540237d46f0dc619b261">  435</a></span>  <span class="keyword">constexpr</span> <span class="keyword">inline</span> <span class="keywordtype">float</span> <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a8d8fd6ec30ad540237d46f0dc619b261">ColorSignedShortToFloat</a>(plInt16 value)</div>
<div class="line"><a id="l00436" name="l00436"></a><span class="lineno">  436</span>  {</div>
<div class="line"><a id="l00437" name="l00437"></a><span class="lineno">  437</span>    <span class="comment">// Implemented according to</span></div>
<div class="line"><a id="l00438" name="l00438"></a><span class="lineno">  438</span>    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a id="l00439" name="l00439"></a><span class="lineno">  439</span>    <span class="keywordflow">return</span> (value == -32768) ? -1.0f : value * (1.0f / 32767.0f);</div>
<div class="line"><a id="l00440" name="l00440"></a><span class="lineno">  440</span>  }</div>
</div>
<div class="line"><a id="l00441" name="l00441"></a><span class="lineno">  441</span> </div>
<div class="line"><a id="l00442" name="l00442"></a><span class="lineno">  442</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> T2&gt;</div>
<div class="foldopen" id="foldopen00443" data-start="{" data-end="}">
<div class="line"><a id="l00443" name="l00443"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a1c1d1ad70715890caa923b8c1df701d3">  443</a></span>  T <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a1c1d1ad70715890caa923b8c1df701d3">EvaluateBezierCurve</a>(T2 t, <span class="keyword">const</span> T&amp; startPoint, <span class="keyword">const</span> T&amp; controlPoint1, <span class="keyword">const</span> T&amp; controlPoint2, <span class="keyword">const</span> T&amp; endPoint)</div>
<div class="line"><a id="l00444" name="l00444"></a><span class="lineno">  444</span>  {</div>
<div class="line"><a id="l00445" name="l00445"></a><span class="lineno">  445</span>    <span class="keyword">const</span> T2 mt = 1 - t;</div>
<div class="line"><a id="l00446" name="l00446"></a><span class="lineno">  446</span> </div>
<div class="line"><a id="l00447" name="l00447"></a><span class="lineno">  447</span>    <span class="keyword">const</span> T2 f1 = mt * mt * mt;</div>
<div class="line"><a id="l00448" name="l00448"></a><span class="lineno">  448</span>    <span class="keyword">const</span> T2 f2 = 3 * mt * mt * t;</div>
<div class="line"><a id="l00449" name="l00449"></a><span class="lineno">  449</span>    <span class="keyword">const</span> T2 f3 = 3 * mt * t * t;</div>
<div class="line"><a id="l00450" name="l00450"></a><span class="lineno">  450</span>    <span class="keyword">const</span> T2 f4 = t * t * t;</div>
<div class="line"><a id="l00451" name="l00451"></a><span class="lineno">  451</span> </div>
<div class="line"><a id="l00452" name="l00452"></a><span class="lineno">  452</span>    <span class="keywordflow">return</span> f1 * startPoint + f2 * controlPoint1 + f3 * controlPoint2 + f4 * endPoint;</div>
<div class="line"><a id="l00453" name="l00453"></a><span class="lineno">  453</span>  }</div>
</div>
<div class="line"><a id="l00454" name="l00454"></a><span class="lineno">  454</span>} <span class="comment">// namespace plMath</span></div>
<div class="line"><a id="l00455" name="l00455"></a><span class="lineno">  455</span> </div>
<div class="foldopen" id="foldopen00456" data-start="{" data-end="}">
<div class="line"><a id="l00456" name="l00456"></a><span class="lineno"><a class="line" href="../../d4/dfd/classpl_angle.htm#ae983ab93fea13314a71b2116f4e244d9">  456</a></span><span class="keyword">constexpr</span> PL_FORCE_INLINE <a class="code hl_class" href="../../d4/dfd/classpl_angle.htm">plAngle</a> <a class="code hl_function" href="../../d4/dfd/classpl_angle.htm#ae983ab93fea13314a71b2116f4e244d9">plAngle::AngleBetween</a>(<a class="code hl_class" href="../../d4/dfd/classpl_angle.htm">plAngle</a> a, <a class="code hl_class" href="../../d4/dfd/classpl_angle.htm">plAngle</a> b)</div>
<div class="line"><a id="l00457" name="l00457"></a><span class="lineno">  457</span>{</div>
<div class="line"><a id="l00458" name="l00458"></a><span class="lineno">  458</span>  <span class="comment">// taken from http://gamedev.stackexchange.com/questions/4467/comparing-angles-and-working-out-the-difference</span></div>
<div class="line"><a id="l00459" name="l00459"></a><span class="lineno">  459</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../d4/dfd/classpl_angle.htm#a2a7caad661dc9ec3bd2765b138a318cb">plAngle</a>(Pi&lt;float&gt;() - <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#abd0ef20e6710b240c9833acdf6f2f8d7">plMath::Abs</a>(<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#abd0ef20e6710b240c9833acdf6f2f8d7">plMath::Abs</a>(a.<a class="code hl_function" href="../../d4/dfd/classpl_angle.htm#adc5a11703c62a1aad358a141c2623b3f">GetRadian</a>() - b.<a class="code hl_function" href="../../d4/dfd/classpl_angle.htm#adc5a11703c62a1aad358a141c2623b3f">GetRadian</a>()) - Pi&lt;float&gt;()));</div>
<div class="line"><a id="l00460" name="l00460"></a><span class="lineno">  460</span>}</div>
</div>
<div class="line"><a id="l00461" name="l00461"></a><span class="lineno">  461</span> </div>
<div class="foldopen" id="foldopen00462" data-start="{" data-end="}">
<div class="line"><a id="l00462" name="l00462"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a14dcb5c08839e1246369028c1547434f">  462</a></span><span class="keyword">constexpr</span> PL_FORCE_INLINE plInt32 <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a14dcb5c08839e1246369028c1547434f">plMath::FloatToInt</a>(<span class="keywordtype">float</span> value)</div>
<div class="line"><a id="l00463" name="l00463"></a><span class="lineno">  463</span>{</div>
<div class="line"><a id="l00464" name="l00464"></a><span class="lineno">  464</span>  <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>plInt32<span class="keyword">&gt;</span>(value);</div>
<div class="line"><a id="l00465" name="l00465"></a><span class="lineno">  465</span>}</div>
</div>
<div class="line"><a id="l00466" name="l00466"></a><span class="lineno">  466</span> </div>
<div class="line"><a id="l00467" name="l00467"></a><span class="lineno">  467</span><span class="preprocessor">#if PL_DISABLED(PL_PLATFORM_ARCH_X86) || (_MSC_VER &lt;= 1916)</span></div>
<div class="foldopen" id="foldopen00468" data-start="{" data-end="}">
<div class="line"><a id="l00468" name="l00468"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#a55bf4d35ddb68043f06dcffcd25b12cf">  468</a></span><span class="keyword">constexpr</span> PL_FORCE_INLINE plInt64 <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a14dcb5c08839e1246369028c1547434f">plMath::FloatToInt</a>(<span class="keywordtype">double</span> value)</div>
<div class="line"><a id="l00469" name="l00469"></a><span class="lineno">  469</span>{</div>
<div class="line"><a id="l00470" name="l00470"></a><span class="lineno">  470</span>  <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>plInt64<span class="keyword">&gt;</span>(value);</div>
<div class="line"><a id="l00471" name="l00471"></a><span class="lineno">  471</span>}</div>
</div>
<div class="line"><a id="l00472" name="l00472"></a><span class="lineno">  472</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00473" name="l00473"></a><span class="lineno">  473</span> </div>
<div class="foldopen" id="foldopen00474" data-start="{" data-end="}">
<div class="line"><a id="l00474" name="l00474"></a><span class="lineno"><a class="line" href="../../d1/dbc/namespacepl_math.htm#ac4d40297dae8b10147595d88400a785e">  474</a></span>PL_ALWAYS_INLINE <a class="code hl_struct" href="../../da/dce/structpl_result.htm">plResult</a> <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ac4d40297dae8b10147595d88400a785e">plMath::TryConvertToSizeT</a>(<span class="keywordtype">size_t</span>&amp; out_uiResult, plUInt64 uiValue)</div>
<div class="line"><a id="l00475" name="l00475"></a><span class="lineno">  475</span>{</div>
<div class="line"><a id="l00476" name="l00476"></a><span class="lineno">  476</span><span class="preprocessor">#if PL_ENABLED(PL_PLATFORM_32BIT)</span></div>
<div class="line"><a id="l00477" name="l00477"></a><span class="lineno">  477</span>  <span class="keywordflow">if</span> (uiValue &lt;= MaxValue&lt;size_t&gt;())</div>
<div class="line"><a id="l00478" name="l00478"></a><span class="lineno">  478</span>  {</div>
<div class="line"><a id="l00479" name="l00479"></a><span class="lineno">  479</span>    out_uiResult = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(uiValue);</div>
<div class="line"><a id="l00480" name="l00480"></a><span class="lineno">  480</span>    <span class="keywordflow">return</span> PL_SUCCESS;</div>
<div class="line"><a id="l00481" name="l00481"></a><span class="lineno">  481</span>  }</div>
<div class="line"><a id="l00482" name="l00482"></a><span class="lineno">  482</span> </div>
<div class="line"><a id="l00483" name="l00483"></a><span class="lineno">  483</span>  <span class="keywordflow">return</span> PL_FAILURE;</div>
<div class="line"><a id="l00484" name="l00484"></a><span class="lineno">  484</span><span class="preprocessor">#else</span></div>
<div class="line"><a id="l00485" name="l00485"></a><span class="lineno">  485</span>  out_uiResult = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(uiValue);</div>
<div class="line"><a id="l00486" name="l00486"></a><span class="lineno">  486</span>  <span class="keywordflow">return</span> PL_SUCCESS;</div>
<div class="line"><a id="l00487" name="l00487"></a><span class="lineno">  487</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00488" name="l00488"></a><span class="lineno">  488</span>}</div>
</div>
<div class="line"><a id="l00489" name="l00489"></a><span class="lineno">  489</span> </div>
<div class="line"><a id="l00490" name="l00490"></a><span class="lineno">  490</span><span class="preprocessor">#if PL_ENABLED(PL_PLATFORM_64BIT)</span></div>
<div class="line"><a id="l00491" name="l00491"></a><span class="lineno">  491</span>PL_ALWAYS_INLINE <span class="keywordtype">size_t</span> <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a80257a94c132df487cfdc93fefa72644">plMath::SafeConvertToSizeT</a>(plUInt64 uiValue)</div>
<div class="line"><a id="l00492" name="l00492"></a><span class="lineno">  492</span>{</div>
<div class="line"><a id="l00493" name="l00493"></a><span class="lineno">  493</span>  <span class="keywordflow">return</span> uiValue;</div>
<div class="line"><a id="l00494" name="l00494"></a><span class="lineno">  494</span>}</div>
<div class="line"><a id="l00495" name="l00495"></a><span class="lineno">  495</span><span class="preprocessor">#endif</span></div>
<div class="ttc" id="aclasspl_angle_htm"><div class="ttname"><a href="../../d4/dfd/classpl_angle.htm">plAngle</a></div><div class="ttdoc">Float wrapper struct for a safe usage and conversions of angles.</div><div class="ttdef"><b>Definition</b> Angle.h:10</div></div>
<div class="ttc" id="aclasspl_angle_htm_a2a7caad661dc9ec3bd2765b138a318cb"><div class="ttname"><a href="../../d4/dfd/classpl_angle.htm#a2a7caad661dc9ec3bd2765b138a318cb">plAngle::plAngle</a></div><div class="ttdeci">constexpr plAngle()</div><div class="ttdoc">Standard constructor, initializing with 0.</div><div class="ttdef"><b>Definition</b> Angle.h:40</div></div>
<div class="ttc" id="aclasspl_angle_htm_adc5a11703c62a1aad358a141c2623b3f"><div class="ttname"><a href="../../d4/dfd/classpl_angle.htm#adc5a11703c62a1aad358a141c2623b3f">plAngle::GetRadian</a></div><div class="ttdeci">constexpr float GetRadian() const</div><div class="ttdoc">Returns the radian value. (No need for any conversion)</div><div class="ttdef"><b>Definition</b> Angle_inl.h:48</div></div>
<div class="ttc" id="aclasspl_angle_htm_ae983ab93fea13314a71b2116f4e244d9"><div class="ttname"><a href="../../d4/dfd/classpl_angle.htm#ae983ab93fea13314a71b2116f4e244d9">plAngle::AngleBetween</a></div><div class="ttdeci">static constexpr plAngle AngleBetween(plAngle a, plAngle b)</div><div class="ttdoc">Computes the smallest angle between the two given angles. The angle will always be a positive value.</div><div class="ttdef"><b>Definition</b> Math_inl.h:456</div></div>
<div class="ttc" id="anamespacepl_math_htm"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm">plMath</a></div><div class="ttdoc">This namespace provides common math-functionality as functions.</div><div class="ttdef"><b>Definition</b> Constants.h:6</div></div>
<div class="ttc" id="anamespacepl_math_htm_a0805dbc625c3f1ca235f566b20826dba"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a0805dbc625c3f1ca235f566b20826dba">plMath::ColorFloatToSignedByte</a></div><div class="ttdeci">plInt8 ColorFloatToSignedByte(float value)</div><div class="ttdoc">Converts a color value from float [-1;1] range to signed byte [-127;127] range, with proper rounding.</div><div class="ttdef"><b>Definition</b> Math_inl.h:368</div></div>
<div class="ttc" id="anamespacepl_math_htm_a14dcb5c08839e1246369028c1547434f"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a14dcb5c08839e1246369028c1547434f">plMath::FloatToInt</a></div><div class="ttdeci">constexpr plInt32 FloatToInt(float value)</div><div class="ttdoc">Casts the float to an integer, removes the fractional part.</div><div class="ttdef"><b>Definition</b> Math_inl.h:462</div></div>
<div class="ttc" id="anamespacepl_math_htm_a1b11d14648656b3bfb3529db712169af"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a1b11d14648656b3bfb3529db712169af">plMath::Unlerp</a></div><div class="ttdeci">PL_FORCE_INLINE constexpr float Unlerp(T fMin, T fMax, T fValue)</div><div class="ttdoc">Returns the interpolation factor such that Lerp(fMin, fMax, factor) == fValue.</div><div class="ttdef"><b>Definition</b> Math_inl.h:248</div></div>
<div class="ttc" id="anamespacepl_math_htm_a1c1d1ad70715890caa923b8c1df701d3"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a1c1d1ad70715890caa923b8c1df701d3">plMath::EvaluateBezierCurve</a></div><div class="ttdeci">T EvaluateBezierCurve(T2 t, const T &amp;startPoint, const T &amp;controlPoint1, const T &amp;controlPoint2, const T &amp;endPoint)</div><div class="ttdoc">Evaluates the cubic spline defined by four control points at time t and returns the interpolated resu...</div><div class="ttdef"><b>Definition</b> Math_inl.h:443</div></div>
<div class="ttc" id="anamespacepl_math_htm_a25ddcfae0bd88d04d015b266a236065f"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a25ddcfae0bd88d04d015b266a236065f">plMath::Square</a></div><div class="ttdeci">constexpr PL_ALWAYS_INLINE T Square(T f)</div><div class="ttdoc">Returns f * f.</div><div class="ttdef"><b>Definition</b> Math_inl.h:8</div></div>
<div class="ttc" id="anamespacepl_math_htm_a2898309268211acdbebb498a1f03ce01"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a2898309268211acdbebb498a1f03ce01">plMath::Lerp</a></div><div class="ttdeci">PL_FORCE_INLINE T Lerp(T f1, T f2, float fFactor)</div><div class="ttdoc">Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1.</div><div class="ttdef"><b>Definition</b> Math_inl.h:230</div></div>
<div class="ttc" id="anamespacepl_math_htm_a314b24989122e22968ae0a11cc872e28"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a314b24989122e22968ae0a11cc872e28">plMath::Min</a></div><div class="ttdeci">constexpr PL_ALWAYS_INLINE T Min(T f1, T f2)</div><div class="ttdoc">Returns the smaller value, f1 or f2.</div><div class="ttdef"><b>Definition</b> Math_inl.h:27</div></div>
<div class="ttc" id="anamespacepl_math_htm_a4daf0d43b398a7ff4083833b579bb2fc"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a4daf0d43b398a7ff4083833b579bb2fc">plMath::FirstBitHigh</a></div><div class="ttdeci">PL_ALWAYS_INLINE plUInt32 FirstBitHigh(plUInt32 value)</div><div class="ttdoc">Returns the index of the most significant bit set.</div><div class="ttdef"><b>Definition</b> Math_inl.h:119</div></div>
<div class="ttc" id="anamespacepl_math_htm_a56d77e019b9b7dcc6c27ef6a5714851d"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a56d77e019b9b7dcc6c27ef6a5714851d">plMath::Fraction</a></div><div class="ttdeci">PL_ALWAYS_INLINE Type Fraction(Type f)</div><div class="ttdoc">Returns the fraction-part of f.</div><div class="ttdef"><b>Definition</b> Math_inl.h:305</div></div>
<div class="ttc" id="anamespacepl_math_htm_a5e363339c8dfc76221563df0bf2302b3"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a5e363339c8dfc76221563df0bf2302b3">plMath::Invert</a></div><div class="ttdeci">constexpr Type Invert(Type f)</div><div class="ttdoc">Returns 1 / f.</div><div class="ttdef"><b>Definition</b> Math_inl.h:63</div></div>
<div class="ttc" id="anamespacepl_math_htm_a5e64f45bae1fb8ddbe02e2f5bdf18767"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a5e64f45bae1fb8ddbe02e2f5bdf18767">plMath::Clamp</a></div><div class="ttdeci">constexpr PL_ALWAYS_INLINE T Clamp(T value, T min_val, T max_val)</div><div class="ttdoc">Clamps &quot;value&quot; to the range [min; max]. Returns &quot;value&quot;, if it is inside the range already.</div><div class="ttdef"><b>Definition</b> Math_inl.h:51</div></div>
<div class="ttc" id="anamespacepl_math_htm_a6d59d967853711101adff06ccb2e0dd5"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a6d59d967853711101adff06ccb2e0dd5">plMath::ColorFloatToByte</a></div><div class="ttdeci">plUInt8 ColorFloatToByte(float value)</div><div class="ttdoc">Converts a color value from float [0;1] range to unsigned byte [0;255] range, with proper rounding.</div><div class="ttdef"><b>Definition</b> Math_inl.h:340</div></div>
<div class="ttc" id="anamespacepl_math_htm_a77a11d9b4e7665621cad426a72f7dca0"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a77a11d9b4e7665621cad426a72f7dca0">plMath::FirstBitLow</a></div><div class="ttdeci">PL_ALWAYS_INLINE plUInt32 FirstBitLow(plUInt32 value)</div><div class="ttdoc">Returns the index of the least significant bit set.</div><div class="ttdef"><b>Definition</b> Math_inl.h:70</div></div>
<div class="ttc" id="anamespacepl_math_htm_a7e0493d1a4477c91c0cfc260b348dc86"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a7e0493d1a4477c91c0cfc260b348dc86">plMath::ColorSignedByteToFloat</a></div><div class="ttdeci">constexpr float ColorSignedByteToFloat(plInt8 value)</div><div class="ttdoc">Converts a color value from signed byte [-128;127] range to float [-1;1] range, with proper rounding.</div><div class="ttdef"><b>Definition</b> Math_inl.h:428</div></div>
<div class="ttc" id="anamespacepl_math_htm_a80257a94c132df487cfdc93fefa72644"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a80257a94c132df487cfdc93fefa72644">plMath::SafeConvertToSizeT</a></div><div class="ttdeci">PL_FOUNDATION_DLL size_t SafeConvertToSizeT(plUInt64 uiValue)</div><div class="ttdoc">Checks whether the given 64bit value actually fits into size_t, If it doesn't the program is terminat...</div></div>
<div class="ttc" id="anamespacepl_math_htm_a8147d5ad32b1503e1393c7258e90c3a8"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a8147d5ad32b1503e1393c7258e90c3a8">plMath::ColorFloatToSignedShort</a></div><div class="ttdeci">plInt16 ColorFloatToSignedShort(float value)</div><div class="ttdoc">Converts a color value from float [-1;1] range to signed short [-32767;32767] range,...</div><div class="ttdef"><b>Definition</b> Math_inl.h:391</div></div>
<div class="ttc" id="anamespacepl_math_htm_a8422d1228952cb6d6b061ecb513569ac"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a8422d1228952cb6d6b061ecb513569ac">plMath::IsInRange</a></div><div class="ttdeci">constexpr bool IsInRange(T value, T minVal, T maxVal)</div><div class="ttdoc">Checks whether the value of the first parameter lies between the value of the second and third.</div><div class="ttdef"><b>Definition</b> Math_inl.h:282</div></div>
<div class="ttc" id="anamespacepl_math_htm_a8859fe4bf482080605dec864a470da45"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a8859fe4bf482080605dec864a470da45">plMath::ColorFloatToShort</a></div><div class="ttdeci">plUInt16 ColorFloatToShort(float value)</div><div class="ttdoc">Converts a color value from float [0;1] range to unsigned short [0;65535] range, with proper rounding...</div><div class="ttdef"><b>Definition</b> Math_inl.h:354</div></div>
<div class="ttc" id="anamespacepl_math_htm_a8b7409f69c51e9b37fd1af282dba5a5f"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a8b7409f69c51e9b37fd1af282dba5a5f">plMath::ColorByteToFloat</a></div><div class="ttdeci">constexpr float ColorByteToFloat(plUInt8 value)</div><div class="ttdoc">Converts a color value from unsigned byte [0;255] range to float [0;1] range, with proper rounding.</div><div class="ttdef"><b>Definition</b> Math_inl.h:414</div></div>
<div class="ttc" id="anamespacepl_math_htm_a8d8fd6ec30ad540237d46f0dc619b261"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a8d8fd6ec30ad540237d46f0dc619b261">plMath::ColorSignedShortToFloat</a></div><div class="ttdeci">constexpr float ColorSignedShortToFloat(plInt16 value)</div><div class="ttdoc">Converts a color value from signed short [-32768;32767] range to float [0;1] range,...</div><div class="ttdef"><b>Definition</b> Math_inl.h:435</div></div>
<div class="ttc" id="anamespacepl_math_htm_a8e7571124eabadd0fa57cffa70b00172"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a8e7571124eabadd0fa57cffa70b00172">plMath::SmootherStep</a></div><div class="ttdeci">Type SmootherStep(Type x, Type edge1, Type edge2)</div><div class="ttdoc">Returns 0, if value is &lt;= edge1, 1 if value &gt;= edge2 and the second order hermite interpolation in be...</div><div class="ttdef"><b>Definition</b> Math_inl.h:326</div></div>
<div class="ttc" id="anamespacepl_math_htm_a9c8b8683756df9047c6a5e4a44f4752f"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a9c8b8683756df9047c6a5e4a44f4752f">plMath::CountBits</a></div><div class="ttdeci">PL_ALWAYS_INLINE plUInt32 CountBits(plUInt32 value)</div><div class="ttdoc">Returns the number of bits set.</div><div class="ttdef"><b>Definition</b> Math_inl.h:186</div></div>
<div class="ttc" id="anamespacepl_math_htm_aa3bba00206eaca76b20bb1e131f27138"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#aa3bba00206eaca76b20bb1e131f27138">plMath::Bitmask_LowN</a></div><div class="ttdeci">PL_ALWAYS_INLINE Type Bitmask_LowN(plUInt32 uiNumBitsToSet)</div><div class="ttdoc">Creates a bitmask in which the low N bits are set. For example for N=5, this would be '0000 ....</div><div class="ttdef"><b>Definition</b> Math_inl.h:212</div></div>
<div class="ttc" id="anamespacepl_math_htm_aa6141bbf80704bdc6ba5a0df73d6e25d"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#aa6141bbf80704bdc6ba5a0df73d6e25d">plMath::CountLeadingZeros</a></div><div class="ttdeci">PL_ALWAYS_INLINE plUInt32 CountLeadingZeros(plUInt32 uiBitmask)</div><div class="ttdef"><b>Definition</b> Math_inl.h:180</div></div>
<div class="ttc" id="anamespacepl_math_htm_ab3b08ed7dc553561de9b2d8635cc44db"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#ab3b08ed7dc553561de9b2d8635cc44db">plMath::Sign</a></div><div class="ttdeci">constexpr PL_ALWAYS_INLINE T Sign(T f)</div><div class="ttdoc">Returns the sign of f (i.e: -1, 1 or 0)</div><div class="ttdef"><b>Definition</b> Math_inl.h:14</div></div>
<div class="ttc" id="anamespacepl_math_htm_ab41c015ef2ef7ea68f915082545755ae"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#ab41c015ef2ef7ea68f915082545755ae">plMath::IsZero</a></div><div class="ttdeci">bool IsZero(Type f, Type fEpsilon)</div><div class="ttdoc">Checks whether the given number is close to zero.</div><div class="ttdef"><b>Definition</b> Math_inl.h:288</div></div>
<div class="ttc" id="anamespacepl_math_htm_ab5afdf4907a0a61a687be8a9e1e1f81c"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#ab5afdf4907a0a61a687be8a9e1e1f81c">plMath::IsEqual</a></div><div class="ttdeci">constexpr bool IsEqual(Type lhs, Type rhs, Type fEpsilon)</div><div class="ttdoc">Checks, whether fValue is in the range [fDesired - fMaxImprecision; fDesired + fMaxImprecision].</div><div class="ttdef"><b>Definition</b> Math_inl.h:276</div></div>
<div class="ttc" id="anamespacepl_math_htm_ab7dd8470053b49d34d72fe1eb0d2ab61"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#ab7dd8470053b49d34d72fe1eb0d2ab61">plMath::Trunc</a></div><div class="ttdeci">PL_ALWAYS_INLINE Type Trunc(Type f)</div><div class="ttdoc">Returns the integer-part of f (removes the fraction).</div><div class="ttdef"><b>Definition</b> Math_inl.h:296</div></div>
<div class="ttc" id="anamespacepl_math_htm_abcac254119b9da320b0617b93e40ec9f"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#abcac254119b9da320b0617b93e40ec9f">plMath::Swap</a></div><div class="ttdeci">PL_ALWAYS_INLINE void Swap(T &amp;ref_f1, T &amp;ref_f2)</div><div class="ttdoc">Swaps the values in the two variables f1 and f2.</div><div class="ttdef"><b>Definition</b> Math_inl.h:224</div></div>
<div class="ttc" id="anamespacepl_math_htm_abd0ef20e6710b240c9833acdf6f2f8d7"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#abd0ef20e6710b240c9833acdf6f2f8d7">plMath::Abs</a></div><div class="ttdeci">constexpr PL_ALWAYS_INLINE T Abs(T f)</div><div class="ttdoc">Returns the absolute value of f.</div><div class="ttdef"><b>Definition</b> Math_inl.h:21</div></div>
<div class="ttc" id="anamespacepl_math_htm_ac4d40297dae8b10147595d88400a785e"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#ac4d40297dae8b10147595d88400a785e">plMath::TryConvertToSizeT</a></div><div class="ttdeci">plResult TryConvertToSizeT(size_t &amp;out_uiResult, plUInt64 uiValue)</div><div class="ttdoc">Checks whether the given 64bit value actually fits into size_t, If it doesn't PL_FAILURE is returned.</div><div class="ttdef"><b>Definition</b> Math_inl.h:474</div></div>
<div class="ttc" id="anamespacepl_math_htm_acf3240988b12047baffaee141fc8cffb"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#acf3240988b12047baffaee141fc8cffb">plMath::Saturate</a></div><div class="ttdeci">constexpr PL_ALWAYS_INLINE T Saturate(T value)</div><div class="ttdoc">Clamps &quot;value&quot; to the range [0; 1]. Returns &quot;value&quot;, if it is inside the range already.</div><div class="ttdef"><b>Definition</b> Math_inl.h:57</div></div>
<div class="ttc" id="anamespacepl_math_htm_ad724a3f51a1faa9bcc3e6a53fd6b9a4f"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">plMath::Max</a></div><div class="ttdeci">constexpr PL_ALWAYS_INLINE T Max(T f1, T f2)</div><div class="ttdoc">Returns the greater value, f1 or f2.</div><div class="ttdef"><b>Definition</b> Math_inl.h:39</div></div>
<div class="ttc" id="anamespacepl_math_htm_add691d49a4f270dc22fb918d8ba1ca4f"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#add691d49a4f270dc22fb918d8ba1ca4f">plMath::CountTrailingZeros</a></div><div class="ttdeci">PL_ALWAYS_INLINE plUInt32 CountTrailingZeros(plUInt32 uiBitmask)</div><div class="ttdef"><b>Definition</b> Math_inl.h:167</div></div>
<div class="ttc" id="anamespacepl_math_htm_ae27db066f56ce11ea3b96f8cede4a867"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#ae27db066f56ce11ea3b96f8cede4a867">plMath::SmoothStep</a></div><div class="ttdeci">Type SmoothStep(Type x, Type edge1, Type edge2)</div><div class="ttdoc">Returns 0, if value is &lt;= edge1, 1 if value &gt;= edge2 and the hermite interpolation in between.</div><div class="ttdef"><b>Definition</b> Math_inl.h:311</div></div>
<div class="ttc" id="anamespacepl_math_htm_ae727cfa25d979e734284dc70e1ebca60"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#ae727cfa25d979e734284dc70e1ebca60">plMath::IsPowerOf2</a></div><div class="ttdeci">constexpr PL_FORCE_INLINE bool IsPowerOf2(plInt32 value)</div><div class="ttdoc">Returns true, if there exists some x with 2^x == value.</div><div class="ttdef"><b>Definition</b> Math_inl.h:260</div></div>
<div class="ttc" id="anamespacepl_math_htm_ae9a3bfad84627afef5616665eecd65e4"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#ae9a3bfad84627afef5616665eecd65e4">plMath::Bitmask_HighN</a></div><div class="ttdeci">PL_ALWAYS_INLINE Type Bitmask_HighN(plUInt32 uiNumBitsToSet)</div><div class="ttdoc">Creates a bitmask in which the high N bits are set. For example for N=5, this would be '1111 1000 ....</div><div class="ttdef"><b>Definition</b> Math_inl.h:218</div></div>
<div class="ttc" id="anamespacepl_math_htm_aed0425c9e1f58761cf91e3315d33e139"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#aed0425c9e1f58761cf91e3315d33e139">plMath::ColorShortToFloat</a></div><div class="ttdeci">constexpr float ColorShortToFloat(plUInt16 value)</div><div class="ttdoc">Converts a color value from unsigned short [0;65535] range to float [0;1] range, with proper rounding...</div><div class="ttdef"><b>Definition</b> Math_inl.h:421</div></div>
<div class="ttc" id="anamespacepl_math_htm_afe93e6c96ee4da7fff1ddcdbc81bff31"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#afe93e6c96ee4da7fff1ddcdbc81bff31">plMath::Step</a></div><div class="ttdeci">constexpr PL_FORCE_INLINE T Step(T value, T edge)</div><div class="ttdoc">Returns 0, if value &lt; edge, and 1, if value &gt;= edge.</div><div class="ttdef"><b>Definition</b> Math_inl.h:255</div></div>
<div class="ttc" id="astructpl_result_htm"><div class="ttname"><a href="../../da/dce/structpl_result.htm">plResult</a></div><div class="ttdoc">Default enum for returning failure or success, instead of using a bool.</div><div class="ttdef"><b>Definition</b> Types.h:54</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_b421fc8dbee4bf114051d293564697bb.htm">Math</a></li><li class="navelem"><a class="el" href="../../dir_7df9876b976cc75bc915cc1184bc6f86.htm">Implementation</a></li><li class="navelem"><b>Math_inl.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
