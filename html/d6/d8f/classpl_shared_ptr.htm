<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>plEngine: plSharedPtr&lt; T &gt; Class Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only-darkmode-toggle.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">plEngine<span id="projectnumber">&#160;Release 2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d6/d8f/classpl_shared_ptr.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="../../d4/ddb/classpl_shared_ptr-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plSharedPtr&lt; T &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p>A Shared ptr manages a shared object and destroys that object when no one references it anymore. The managed object must derive from <a class="el" href="../../d2/df5/classpl_ref_counted.htm" title="Base class for reference counted objects.">plRefCounted</a>.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d1/d13/_shared_ptr_8h_source.htm">SharedPtr.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:acc26f951d4b575f9b3226dbe140aaeba" id="r_acc26f951d4b575f9b3226dbe140aaeba"><td class="memItemLeft" align="right" valign="top"><a id="acc26f951d4b575f9b3226dbe140aaeba" name="acc26f951d4b575f9b3226dbe140aaeba"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>PL_DECLARE_MEM_RELOCATABLE_TYPE</b> ()</td></tr>
<tr class="separator:acc26f951d4b575f9b3226dbe140aaeba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b71a23fd94a43b70592e297489ee0f4" id="r_a5b71a23fd94a43b70592e297489ee0f4"><td class="memItemLeft" align="right" valign="top"><a id="a5b71a23fd94a43b70592e297489ee0f4" name="a5b71a23fd94a43b70592e297489ee0f4"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plSharedPtr</b> ()</td></tr>
<tr class="memdesc:a5b71a23fd94a43b70592e297489ee0f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an empty shared ptr. <br /></td></tr>
<tr class="separator:a5b71a23fd94a43b70592e297489ee0f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a696ed60df9f381f380e3760d636f2957" id="r_a696ed60df9f381f380e3760d636f2957"><td class="memTemplParams" colspan="2"><a id="a696ed60df9f381f380e3760d636f2957" name="a696ed60df9f381f380e3760d636f2957"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a696ed60df9f381f380e3760d636f2957"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><b>plSharedPtr</b> (const <a class="el" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">plInternal::NewInstance</a>&lt; U &gt; &amp;instance)</td></tr>
<tr class="memdesc:a696ed60df9f381f380e3760d636f2957"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a shared ptr from a freshly created instance through PL_NEW or PL_DEFAULT_NEW. <br /></td></tr>
<tr class="separator:a696ed60df9f381f380e3760d636f2957"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6fd025d99e7aa8bc60e9aec943784711" id="r_a6fd025d99e7aa8bc60e9aec943784711"><td class="memTemplParams" colspan="2"><a id="a6fd025d99e7aa8bc60e9aec943784711" name="a6fd025d99e7aa8bc60e9aec943784711"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a6fd025d99e7aa8bc60e9aec943784711"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><b>plSharedPtr</b> (U *pInstance, <a class="el" href="../../da/df3/classpl_allocator.htm">plAllocator</a> *pAllocator)</td></tr>
<tr class="memdesc:a6fd025d99e7aa8bc60e9aec943784711"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a shared ptr from a pointer and an allocator. The passed allocator will be used to destroy the instance when the shared ptr goes out of scope. <br /></td></tr>
<tr class="separator:a6fd025d99e7aa8bc60e9aec943784711"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab48fe1033e64a4fd51089553939d9053" id="r_ab48fe1033e64a4fd51089553939d9053"><td class="memItemLeft" align="right" valign="top"><a id="ab48fe1033e64a4fd51089553939d9053" name="ab48fe1033e64a4fd51089553939d9053"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plSharedPtr</b> (const <a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; T &gt; &amp;other)</td></tr>
<tr class="memdesc:ab48fe1033e64a4fd51089553939d9053"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructs a shared ptr from another. Both will hold a reference to the managed object afterwards. <br /></td></tr>
<tr class="separator:ab48fe1033e64a4fd51089553939d9053"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48739bf39ac60577491529939e6d8120" id="r_a48739bf39ac60577491529939e6d8120"><td class="memTemplParams" colspan="2"><a id="a48739bf39ac60577491529939e6d8120" name="a48739bf39ac60577491529939e6d8120"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a48739bf39ac60577491529939e6d8120"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><b>plSharedPtr</b> (const <a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; U &gt; &amp;other)</td></tr>
<tr class="memdesc:a48739bf39ac60577491529939e6d8120"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructs a shared ptr from another. Both will hold a reference to the managed object afterwards. <br /></td></tr>
<tr class="separator:a48739bf39ac60577491529939e6d8120"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0e99e342297b9d633b739418b46e95f" id="r_af0e99e342297b9d633b739418b46e95f"><td class="memTemplParams" colspan="2"><a id="af0e99e342297b9d633b739418b46e95f" name="af0e99e342297b9d633b739418b46e95f"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:af0e99e342297b9d633b739418b46e95f"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><b>plSharedPtr</b> (<a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; U &gt; &amp;&amp;other)</td></tr>
<tr class="memdesc:af0e99e342297b9d633b739418b46e95f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move constructs a shared ptr from another. The other shared ptr will be empty afterwards. <br /></td></tr>
<tr class="separator:af0e99e342297b9d633b739418b46e95f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac54a3448a61a2d6aa41ee68c1dff205e" id="r_ac54a3448a61a2d6aa41ee68c1dff205e"><td class="memTemplParams" colspan="2"><a id="ac54a3448a61a2d6aa41ee68c1dff205e" name="ac54a3448a61a2d6aa41ee68c1dff205e"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:ac54a3448a61a2d6aa41ee68c1dff205e"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><b>plSharedPtr</b> (<a class="el" href="../../df/d44/classpl_unique_ptr.htm">plUniquePtr</a>&lt; U &gt; &amp;&amp;other)</td></tr>
<tr class="memdesc:ac54a3448a61a2d6aa41ee68c1dff205e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move constructs a shared ptr from a unique ptr. The unique ptr will be empty afterwards. <br /></td></tr>
<tr class="separator:ac54a3448a61a2d6aa41ee68c1dff205e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9a1b64fdaad5a12b41b438926895529" id="r_ac9a1b64fdaad5a12b41b438926895529"><td class="memItemLeft" align="right" valign="top"><a id="ac9a1b64fdaad5a12b41b438926895529" name="ac9a1b64fdaad5a12b41b438926895529"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plSharedPtr</b> (std::nullptr_t)</td></tr>
<tr class="memdesc:ac9a1b64fdaad5a12b41b438926895529"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialization with nullptr to be able to return nullptr in functions that return shared ptr. <br /></td></tr>
<tr class="separator:ac9a1b64fdaad5a12b41b438926895529"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab2d6308ce3754f2fc78ff1a147aa830" id="r_aab2d6308ce3754f2fc78ff1a147aa830"><td class="memItemLeft" align="right" valign="top"><a id="aab2d6308ce3754f2fc78ff1a147aa830" name="aab2d6308ce3754f2fc78ff1a147aa830"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>~plSharedPtr</b> ()</td></tr>
<tr class="memdesc:aab2d6308ce3754f2fc78ff1a147aa830"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys the managed object using the stored allocator if no one else references it anymore. <br /></td></tr>
<tr class="separator:aab2d6308ce3754f2fc78ff1a147aa830"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ed6257f7acc24d1c3c2a2cc007fb4e8" id="r_a4ed6257f7acc24d1c3c2a2cc007fb4e8"><td class="memTemplParams" colspan="2"><a id="a4ed6257f7acc24d1c3c2a2cc007fb4e8" name="a4ed6257f7acc24d1c3c2a2cc007fb4e8"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a4ed6257f7acc24d1c3c2a2cc007fb4e8"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; T &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">plInternal::NewInstance</a>&lt; U &gt; &amp;instance)</td></tr>
<tr class="memdesc:a4ed6257f7acc24d1c3c2a2cc007fb4e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the shared ptr from a freshly created instance through PL_NEW or PL_DEFAULT_NEW. <br /></td></tr>
<tr class="separator:a4ed6257f7acc24d1c3c2a2cc007fb4e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a099e199afc5862c0692e8d0c0fbeb448" id="r_a099e199afc5862c0692e8d0c0fbeb448"><td class="memItemLeft" align="right" valign="top"><a id="a099e199afc5862c0692e8d0c0fbeb448" name="a099e199afc5862c0692e8d0c0fbeb448"></a>
<a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; T &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; T &gt; &amp;other)</td></tr>
<tr class="memdesc:a099e199afc5862c0692e8d0c0fbeb448"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the shared ptr from another. Both will hold a reference to the managed object afterwards. <br /></td></tr>
<tr class="separator:a099e199afc5862c0692e8d0c0fbeb448"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec6c0bbc164351a89e61b89d85c4bdca" id="r_aec6c0bbc164351a89e61b89d85c4bdca"><td class="memTemplParams" colspan="2"><a id="aec6c0bbc164351a89e61b89d85c4bdca" name="aec6c0bbc164351a89e61b89d85c4bdca"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:aec6c0bbc164351a89e61b89d85c4bdca"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; T &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; U &gt; &amp;other)</td></tr>
<tr class="memdesc:aec6c0bbc164351a89e61b89d85c4bdca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the shared ptr from another. Both will hold a reference to the managed object afterwards. <br /></td></tr>
<tr class="separator:aec6c0bbc164351a89e61b89d85c4bdca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8dfc51e3427083e59956c82340d43dc" id="r_ae8dfc51e3427083e59956c82340d43dc"><td class="memTemplParams" colspan="2"><a id="ae8dfc51e3427083e59956c82340d43dc" name="ae8dfc51e3427083e59956c82340d43dc"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:ae8dfc51e3427083e59956c82340d43dc"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; T &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; U &gt; &amp;&amp;other)</td></tr>
<tr class="memdesc:ae8dfc51e3427083e59956c82340d43dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move assigns a shared ptr from another. The other shared ptr will be empty afterwards. <br /></td></tr>
<tr class="separator:ae8dfc51e3427083e59956c82340d43dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3579bb025ccfb02da1af476cee99ddfb" id="r_a3579bb025ccfb02da1af476cee99ddfb"><td class="memTemplParams" colspan="2"><a id="a3579bb025ccfb02da1af476cee99ddfb" name="a3579bb025ccfb02da1af476cee99ddfb"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a3579bb025ccfb02da1af476cee99ddfb"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; T &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="../../df/d44/classpl_unique_ptr.htm">plUniquePtr</a>&lt; U &gt; &amp;&amp;other)</td></tr>
<tr class="memdesc:a3579bb025ccfb02da1af476cee99ddfb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move assigns a shared ptr from a unique ptr. The unique ptr will be empty afterwards. <br /></td></tr>
<tr class="separator:a3579bb025ccfb02da1af476cee99ddfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb661adb6551fbe15549ef582f7d488f" id="r_adb661adb6551fbe15549ef582f7d488f"><td class="memItemLeft" align="right" valign="top"><a id="adb661adb6551fbe15549ef582f7d488f" name="adb661adb6551fbe15549ef582f7d488f"></a>
<a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; T &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (std::nullptr_t)</td></tr>
<tr class="memdesc:adb661adb6551fbe15549ef582f7d488f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assigns a nullptr to the shared ptr. Same as Reset. <br /></td></tr>
<tr class="separator:adb661adb6551fbe15549ef582f7d488f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a685ac2bc1c57b0f2c9f16c634378e5b3" id="r_a685ac2bc1c57b0f2c9f16c634378e5b3"><td class="memItemLeft" align="right" valign="top"><a id="a685ac2bc1c57b0f2c9f16c634378e5b3" name="a685ac2bc1c57b0f2c9f16c634378e5b3"></a>
T *&#160;</td><td class="memItemRight" valign="bottom"><b>Borrow</b> () const</td></tr>
<tr class="memdesc:a685ac2bc1c57b0f2c9f16c634378e5b3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Borrows the managed object. The shared ptr stays unmodified. <br /></td></tr>
<tr class="separator:a685ac2bc1c57b0f2c9f16c634378e5b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21d6c6c39586eef0456a2e182b3a4036" id="r_a21d6c6c39586eef0456a2e182b3a4036"><td class="memItemLeft" align="right" valign="top"><a id="a21d6c6c39586eef0456a2e182b3a4036" name="a21d6c6c39586eef0456a2e182b3a4036"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Clear</b> ()</td></tr>
<tr class="memdesc:a21d6c6c39586eef0456a2e182b3a4036"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys the managed object if no one else references it anymore and resets the shared ptr. <br /></td></tr>
<tr class="separator:a21d6c6c39586eef0456a2e182b3a4036"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c431ab2bc48b2d2cbac32fcf821c18a" id="r_a7c431ab2bc48b2d2cbac32fcf821c18a"><td class="memItemLeft" align="right" valign="top"><a id="a7c431ab2bc48b2d2cbac32fcf821c18a" name="a7c431ab2bc48b2d2cbac32fcf821c18a"></a>
T &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator*</b> () const</td></tr>
<tr class="memdesc:a7c431ab2bc48b2d2cbac32fcf821c18a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides access to the managed object. <br /></td></tr>
<tr class="separator:a7c431ab2bc48b2d2cbac32fcf821c18a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4915e87c689079de24e87547043b3ffb" id="r_a4915e87c689079de24e87547043b3ffb"><td class="memItemLeft" align="right" valign="top"><a id="a4915e87c689079de24e87547043b3ffb" name="a4915e87c689079de24e87547043b3ffb"></a>
T *&#160;</td><td class="memItemRight" valign="bottom"><b>operator-&gt;</b> () const</td></tr>
<tr class="memdesc:a4915e87c689079de24e87547043b3ffb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides access to the managed object. <br /></td></tr>
<tr class="separator:a4915e87c689079de24e87547043b3ffb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3fe7d7c26cd7389f4851039ad26ec53" id="r_ae3fe7d7c26cd7389f4851039ad26ec53"><td class="memItemLeft" align="right" valign="top"><a id="ae3fe7d7c26cd7389f4851039ad26ec53" name="ae3fe7d7c26cd7389f4851039ad26ec53"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>operator const T *</b> () const</td></tr>
<tr class="memdesc:ae3fe7d7c26cd7389f4851039ad26ec53"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides access to the managed object. <br /></td></tr>
<tr class="separator:ae3fe7d7c26cd7389f4851039ad26ec53"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff65c515e68b7a8722828937e7f09f94" id="r_aff65c515e68b7a8722828937e7f09f94"><td class="memItemLeft" align="right" valign="top"><a id="aff65c515e68b7a8722828937e7f09f94" name="aff65c515e68b7a8722828937e7f09f94"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>operator T*</b> ()</td></tr>
<tr class="memdesc:aff65c515e68b7a8722828937e7f09f94"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides access to the managed object. <br /></td></tr>
<tr class="separator:aff65c515e68b7a8722828937e7f09f94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9da5a4160ef9b495dc6be573e3c545af" id="r_a9da5a4160ef9b495dc6be573e3c545af"><td class="memItemLeft" align="right" valign="top"><a id="a9da5a4160ef9b495dc6be573e3c545af" name="a9da5a4160ef9b495dc6be573e3c545af"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>operator bool</b> () const</td></tr>
<tr class="memdesc:a9da5a4160ef9b495dc6be573e3c545af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if there is managed object and false if the shared ptr is empty. <br /></td></tr>
<tr class="separator:a9da5a4160ef9b495dc6be573e3c545af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52924c86d1dd8dba58df861872b19a47" id="r_a52924c86d1dd8dba58df861872b19a47"><td class="memItemLeft" align="right" valign="top"><a id="a52924c86d1dd8dba58df861872b19a47" name="a52924c86d1dd8dba58df861872b19a47"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator==</b> (const <a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; T &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a52924c86d1dd8dba58df861872b19a47"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares the shared ptr against another shared ptr. <br /></td></tr>
<tr class="separator:a52924c86d1dd8dba58df861872b19a47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75df2167abdf3e705d88a81c23287c17" id="r_a75df2167abdf3e705d88a81c23287c17"><td class="memItemLeft" align="right" valign="top"><a id="a75df2167abdf3e705d88a81c23287c17" name="a75df2167abdf3e705d88a81c23287c17"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator!=</b> (const <a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; T &gt; &amp;rhs) const</td></tr>
<tr class="separator:a75df2167abdf3e705d88a81c23287c17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefc26bdb23fecf9174345f5ea3eddbc8" id="r_aefc26bdb23fecf9174345f5ea3eddbc8"><td class="memItemLeft" align="right" valign="top"><a id="aefc26bdb23fecf9174345f5ea3eddbc8" name="aefc26bdb23fecf9174345f5ea3eddbc8"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&lt;</b> (const <a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; T &gt; &amp;rhs) const</td></tr>
<tr class="separator:aefc26bdb23fecf9174345f5ea3eddbc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39ceccfbc95256209d4e9f775d56e27a" id="r_a39ceccfbc95256209d4e9f775d56e27a"><td class="memItemLeft" align="right" valign="top"><a id="a39ceccfbc95256209d4e9f775d56e27a" name="a39ceccfbc95256209d4e9f775d56e27a"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&lt;=</b> (const <a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; T &gt; &amp;rhs) const</td></tr>
<tr class="separator:a39ceccfbc95256209d4e9f775d56e27a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab907d91ada73f500b12099b5de14d87b" id="r_ab907d91ada73f500b12099b5de14d87b"><td class="memItemLeft" align="right" valign="top"><a id="ab907d91ada73f500b12099b5de14d87b" name="ab907d91ada73f500b12099b5de14d87b"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&gt;</b> (const <a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; T &gt; &amp;rhs) const</td></tr>
<tr class="separator:ab907d91ada73f500b12099b5de14d87b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75f0f1417e08c94906c4e648f8723813" id="r_a75f0f1417e08c94906c4e648f8723813"><td class="memItemLeft" align="right" valign="top"><a id="a75f0f1417e08c94906c4e648f8723813" name="a75f0f1417e08c94906c4e648f8723813"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&gt;=</b> (const <a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; T &gt; &amp;rhs) const</td></tr>
<tr class="separator:a75f0f1417e08c94906c4e648f8723813"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91174b6656f587f2b5e106fa5ae13d33" id="r_a91174b6656f587f2b5e106fa5ae13d33"><td class="memItemLeft" align="right" valign="top"><a id="a91174b6656f587f2b5e106fa5ae13d33" name="a91174b6656f587f2b5e106fa5ae13d33"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator==</b> (std::nullptr_t) const</td></tr>
<tr class="memdesc:a91174b6656f587f2b5e106fa5ae13d33"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares the shared ptr against nullptr. <br /></td></tr>
<tr class="separator:a91174b6656f587f2b5e106fa5ae13d33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a348117e4ff29845e74384c19ed1560ea" id="r_a348117e4ff29845e74384c19ed1560ea"><td class="memItemLeft" align="right" valign="top"><a id="a348117e4ff29845e74384c19ed1560ea" name="a348117e4ff29845e74384c19ed1560ea"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator!=</b> (std::nullptr_t) const</td></tr>
<tr class="separator:a348117e4ff29845e74384c19ed1560ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ec98296d42796f120575b536d86c190" id="r_a3ec98296d42796f120575b536d86c190"><td class="memItemLeft" align="right" valign="top"><a id="a3ec98296d42796f120575b536d86c190" name="a3ec98296d42796f120575b536d86c190"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&lt;</b> (std::nullptr_t) const</td></tr>
<tr class="separator:a3ec98296d42796f120575b536d86c190"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6aaea985c6beb574fe0bd38b4d94a88f" id="r_a6aaea985c6beb574fe0bd38b4d94a88f"><td class="memItemLeft" align="right" valign="top"><a id="a6aaea985c6beb574fe0bd38b4d94a88f" name="a6aaea985c6beb574fe0bd38b4d94a88f"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&lt;=</b> (std::nullptr_t) const</td></tr>
<tr class="separator:a6aaea985c6beb574fe0bd38b4d94a88f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24bf0e37ba3c5cf283075b09d11220cc" id="r_a24bf0e37ba3c5cf283075b09d11220cc"><td class="memItemLeft" align="right" valign="top"><a id="a24bf0e37ba3c5cf283075b09d11220cc" name="a24bf0e37ba3c5cf283075b09d11220cc"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&gt;</b> (std::nullptr_t) const</td></tr>
<tr class="separator:a24bf0e37ba3c5cf283075b09d11220cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af929cb0357f32c6c284624091f8f8929" id="r_af929cb0357f32c6c284624091f8f8929"><td class="memItemLeft" align="right" valign="top"><a id="af929cb0357f32c6c284624091f8f8929" name="af929cb0357f32c6c284624091f8f8929"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&gt;=</b> (std::nullptr_t) const</td></tr>
<tr class="separator:af929cb0357f32c6c284624091f8f8929"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a199aaaec75442145cc3f0faf75e158f0" id="r_a199aaaec75442145cc3f0faf75e158f0"><td class="memTemplParams" colspan="2">template&lt;typename DERIVED &gt; </td></tr>
<tr class="memitem:a199aaaec75442145cc3f0faf75e158f0"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; DERIVED &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a199aaaec75442145cc3f0faf75e158f0">Downcast</a> () const</td></tr>
<tr class="memdesc:a199aaaec75442145cc3f0faf75e158f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a copy of this, as an plSharedPtr&lt;DERIVED&gt;. Downcasts the stored pointer (using static_cast).  <br /></td></tr>
<tr class="separator:a199aaaec75442145cc3f0faf75e158f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a432447232a81e82869defa3d9d5588bf" id="r_a432447232a81e82869defa3d9d5588bf"><td class="memTemplParams" colspan="2"><a id="a432447232a81e82869defa3d9d5588bf" name="a432447232a81e82869defa3d9d5588bf"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a432447232a81e82869defa3d9d5588bf"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>plSharedPtr</b> (const <a class="el" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">plInternal::NewInstance</a>&lt; U &gt; &amp;instance)</td></tr>
<tr class="separator:a432447232a81e82869defa3d9d5588bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a353b1c00a2fc2f7c280fae1afc75bb" id="r_a5a353b1c00a2fc2f7c280fae1afc75bb"><td class="memTemplParams" colspan="2"><a id="a5a353b1c00a2fc2f7c280fae1afc75bb" name="a5a353b1c00a2fc2f7c280fae1afc75bb"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a5a353b1c00a2fc2f7c280fae1afc75bb"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>plSharedPtr</b> (U *pInstance, <a class="el" href="../../da/df3/classpl_allocator.htm">plAllocator</a> *pAllocator)</td></tr>
<tr class="separator:a5a353b1c00a2fc2f7c280fae1afc75bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b254fc5423a503639e200745f80ea20" id="r_a4b254fc5423a503639e200745f80ea20"><td class="memTemplParams" colspan="2"><a id="a4b254fc5423a503639e200745f80ea20" name="a4b254fc5423a503639e200745f80ea20"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a4b254fc5423a503639e200745f80ea20"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>plSharedPtr</b> (const <a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; U &gt; &amp;other)</td></tr>
<tr class="separator:a4b254fc5423a503639e200745f80ea20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a432f8e406994370936c22263399bceb6" id="r_a432f8e406994370936c22263399bceb6"><td class="memTemplParams" colspan="2"><a id="a432f8e406994370936c22263399bceb6" name="a432f8e406994370936c22263399bceb6"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a432f8e406994370936c22263399bceb6"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>plSharedPtr</b> (<a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; U &gt; &amp;&amp;other)</td></tr>
<tr class="separator:a432f8e406994370936c22263399bceb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5b04135220dd2b73429fc8c1d0783e4" id="r_ad5b04135220dd2b73429fc8c1d0783e4"><td class="memTemplParams" colspan="2"><a id="ad5b04135220dd2b73429fc8c1d0783e4" name="ad5b04135220dd2b73429fc8c1d0783e4"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:ad5b04135220dd2b73429fc8c1d0783e4"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>plSharedPtr</b> (<a class="el" href="../../df/d44/classpl_unique_ptr.htm">plUniquePtr</a>&lt; U &gt; &amp;&amp;other)</td></tr>
<tr class="separator:ad5b04135220dd2b73429fc8c1d0783e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af35332d6b22025de858520684df975d0" id="r_af35332d6b22025de858520684df975d0"><td class="memTemplParams" colspan="2"><a id="af35332d6b22025de858520684df975d0" name="af35332d6b22025de858520684df975d0"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:af35332d6b22025de858520684df975d0"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE <a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; T &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">plInternal::NewInstance</a>&lt; U &gt; &amp;instance)</td></tr>
<tr class="separator:af35332d6b22025de858520684df975d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5a6b4ae33ad3fa138b195efe9862ce9" id="r_af5a6b4ae33ad3fa138b195efe9862ce9"><td class="memTemplParams" colspan="2"><a id="af5a6b4ae33ad3fa138b195efe9862ce9" name="af5a6b4ae33ad3fa138b195efe9862ce9"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:af5a6b4ae33ad3fa138b195efe9862ce9"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE <a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; T &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; U &gt; &amp;other)</td></tr>
<tr class="separator:af5a6b4ae33ad3fa138b195efe9862ce9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9442d6a446dd7c99fd657bb5824ed799" id="r_a9442d6a446dd7c99fd657bb5824ed799"><td class="memTemplParams" colspan="2"><a id="a9442d6a446dd7c99fd657bb5824ed799" name="a9442d6a446dd7c99fd657bb5824ed799"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a9442d6a446dd7c99fd657bb5824ed799"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE <a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; T &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; U &gt; &amp;&amp;other)</td></tr>
<tr class="separator:a9442d6a446dd7c99fd657bb5824ed799"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc73e043cbadd65a981f17b2fcebb057" id="r_afc73e043cbadd65a981f17b2fcebb057"><td class="memTemplParams" colspan="2"><a id="afc73e043cbadd65a981f17b2fcebb057" name="afc73e043cbadd65a981f17b2fcebb057"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:afc73e043cbadd65a981f17b2fcebb057"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE <a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; T &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="../../df/d44/classpl_unique_ptr.htm">plUniquePtr</a>&lt; U &gt; &amp;&amp;other)</td></tr>
<tr class="separator:afc73e043cbadd65a981f17b2fcebb057"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><div class="compoundTemplParams">template&lt;typename T&gt;<br />
class plSharedPtr&lt; T &gt;</div><p>A Shared ptr manages a shared object and destroys that object when no one references it anymore. The managed object must derive from <a class="el" href="../../d2/df5/classpl_ref_counted.htm" title="Base class for reference counted objects.">plRefCounted</a>. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a199aaaec75442145cc3f0faf75e158f0" name="a199aaaec75442145cc3f0faf75e158f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a199aaaec75442145cc3f0faf75e158f0">&#9670;&#160;</a></span>Downcast()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<div class="memtemplate">
template&lt;typename DERIVED &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; DERIVED &gt; <a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a>&lt; T &gt;::Downcast </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns a copy of this, as an plSharedPtr&lt;DERIVED&gt;. Downcasts the stored pointer (using static_cast). </p>
<p>Does not check whether the cast would be valid, that is all your responsibility. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/Engine/Foundation/Types/<a class="el" href="../../d1/d13/_shared_ptr_8h_source.htm">SharedPtr.h</a></li>
<li>Code/Engine/Foundation/Types/Implementation/<a class="el" href="../../df/dc1/_shared_ptr__inl_8h_source.htm">SharedPtr_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
