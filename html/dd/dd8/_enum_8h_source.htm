<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>plEngine: Code/Engine/Foundation/Types/Enum.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only-darkmode-toggle.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">plEngine<span id="projectnumber">&#160;Release 2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('dd/dd8/_enum_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Enum.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span> </div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00036" data-start="{" data-end="};">
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno"><a class="line" href="../../dd/d09/structpl_enum.htm">   36</a></span><span class="keyword">struct </span><a class="code hl_struct" href="../../dd/d09/structpl_enum.htm">plEnum</a> : <span class="keyword">public</span> Derived</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>{</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>  <span class="keyword">using </span><a class="code hl_struct" href="../../dd/d09/structpl_enum.htm">SelfType</a> = <a class="code hl_struct" href="../../dd/d09/structpl_enum.htm">plEnum&lt;Derived&gt;</a>;</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span>  <span class="keyword">using </span>StorageType = <span class="keyword">typename</span> Derived::StorageType;</div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span> </div>
<div class="foldopen" id="foldopen00043" data-start="{" data-end="}">
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno"><a class="line" href="../../dd/d09/structpl_enum.htm#a62ba1824ace14361472583993d539783">   43</a></span>  PL_ALWAYS_INLINE <a class="code hl_function" href="../../dd/d09/structpl_enum.htm#a62ba1824ace14361472583993d539783">plEnum</a>()</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>    : m_Value((StorageType)Derived::Default)</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>  {</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>  } <span class="comment">// [tested]</span></div>
</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span> </div>
<div class="foldopen" id="foldopen00049" data-start="{" data-end="}">
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno"><a class="line" href="../../dd/d09/structpl_enum.htm#abc24c3a6ae0ff1e2d497f38a3741f335">   49</a></span>  PL_ALWAYS_INLINE <a class="code hl_function" href="../../dd/d09/structpl_enum.htm#abc24c3a6ae0ff1e2d497f38a3741f335">plEnum</a>(<span class="keyword">const</span> <a class="code hl_struct" href="../../dd/d09/structpl_enum.htm">SelfType</a>&amp; rh)</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>    : m_Value(rh.m_Value)</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>  {</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>  }</div>
</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span> </div>
<div class="foldopen" id="foldopen00055" data-start="{" data-end="}">
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno"><a class="line" href="../../dd/d09/structpl_enum.htm#ad7e4d1613aff7062ae0f1823e2d15ada">   55</a></span>  PL_ALWAYS_INLINE <a class="code hl_function" href="../../dd/d09/structpl_enum.htm#ad7e4d1613aff7062ae0f1823e2d15ada">plEnum</a>(<span class="keyword">typename</span> Derived::Enum init)</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>    : m_Value((StorageType)init)</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>  {</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>  } <span class="comment">// [tested]</span></div>
</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span> </div>
<div class="foldopen" id="foldopen00061" data-start="{" data-end="}">
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno"><a class="line" href="../../dd/d09/structpl_enum.htm#aa21a7a8193610d04f814f941e057fb72">   61</a></span>  PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../dd/d09/structpl_enum.htm#aa21a7a8193610d04f814f941e057fb72">operator=</a>(<span class="keyword">const</span> <a class="code hl_struct" href="../../dd/d09/structpl_enum.htm">SelfType</a>&amp; rh) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>  {</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>    m_Value = rh.m_Value;</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>  }</div>
</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span> </div>
<div class="foldopen" id="foldopen00067" data-start="{" data-end="}">
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno"><a class="line" href="../../dd/d09/structpl_enum.htm#acb71f9860965165b44d15271480cff6c">   67</a></span>  PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../dd/d09/structpl_enum.htm#acb71f9860965165b44d15271480cff6c">operator=</a>(<span class="keyword">const</span> <span class="keyword">typename</span> Derived::Enum value) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>  {</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>    m_Value = (StorageType)value;</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>  }</div>
</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span> </div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno"><a class="line" href="../../dd/d09/structpl_enum.htm#ab39a747e73888e4b721c7b265040b89c">   73</a></span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../dd/d09/structpl_enum.htm#ab39a747e73888e4b721c7b265040b89c">operator==</a>(<span class="keyword">const</span> <a class="code hl_struct" href="../../dd/d09/structpl_enum.htm">SelfType</a>&amp; rhs)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Value == rhs.m_Value; }</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> SelfType&amp; rhs)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Value != rhs.m_Value; }</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;(<span class="keyword">const</span> SelfType&amp; rhs)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Value &gt; rhs.m_Value; }</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;(<span class="keyword">const</span> SelfType&amp; rhs)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Value &lt; rhs.m_Value; }</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;=(<span class="keyword">const</span> SelfType&amp; rhs)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Value &gt;= rhs.m_Value; }</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;=(<span class="keyword">const</span> SelfType&amp; rhs)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Value &lt;= rhs.m_Value; }</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span> </div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../dd/d09/structpl_enum.htm#ab39a747e73888e4b721c7b265040b89c">operator==</a>(<span class="keyword">typename</span> Derived::Enum value)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Value == value; }</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator!=(<span class="keyword">typename</span> Derived::Enum value)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Value != value; }</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;(<span class="keyword">typename</span> Derived::Enum value)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Value &gt; value; }</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;(<span class="keyword">typename</span> Derived::Enum value)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Value &lt; value; }</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;=(<span class="keyword">typename</span> Derived::Enum value)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Value &gt;= value; }</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;=(<span class="keyword">typename</span> Derived::Enum value)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Value &lt;= value; }</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span> </div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno"><a class="line" href="../../dd/d09/structpl_enum.htm#aeb3d8764044c9f11b2f44f4d1569a76f">   88</a></span>  PL_ALWAYS_INLINE <a class="code hl_struct" href="../../dd/d09/structpl_enum.htm">SelfType</a> <a class="code hl_function" href="../../dd/d09/structpl_enum.htm#aeb3d8764044c9f11b2f44f4d1569a76f">operator|</a>(<span class="keyword">const</span> <a class="code hl_struct" href="../../dd/d09/structpl_enum.htm">SelfType</a>&amp; rhs)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>typename Derived::Enum<span class="keyword">&gt;</span>(m_Value | rhs.m_Value); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>  PL_ALWAYS_INLINE SelfType operator&amp;(<span class="keyword">const</span> SelfType&amp; rhs)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>typename Derived::Enum<span class="keyword">&gt;</span>(m_Value &amp; rhs.m_Value); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span> </div>
<div class="foldopen" id="foldopen00092" data-start="{" data-end="}">
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno"><a class="line" href="../../dd/d09/structpl_enum.htm#a7a9673b0ddde9f31f5fc1574d66190dd">   92</a></span>  PL_ALWAYS_INLINE <span class="keyword">operator</span> <span class="keyword">typename</span> Derived::Enum() const <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>  {</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>typename Derived::Enum<span class="keyword">&gt;</span>(m_Value);</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>  }</div>
</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span> </div>
<div class="foldopen" id="foldopen00098" data-start="{" data-end="}">
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno"><a class="line" href="../../dd/d09/structpl_enum.htm#a340dcb34fa90dd6a6391502bbe933baf">   98</a></span>  PL_ALWAYS_INLINE StorageType <a class="code hl_function" href="../../dd/d09/structpl_enum.htm#a340dcb34fa90dd6a6391502bbe933baf">GetValue</a>() const <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>  {</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>    <span class="keywordflow">return</span> m_Value;</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>  }</div>
</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span> </div>
<div class="foldopen" id="foldopen00104" data-start="{" data-end="}">
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno"><a class="line" href="../../dd/d09/structpl_enum.htm#a8317f7ce2721469996f632bc1915c34c">  104</a></span>  PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../dd/d09/structpl_enum.htm#a8317f7ce2721469996f632bc1915c34c">SetValue</a>(StorageType value) <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>  {</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>    m_Value = value;</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>  }</div>
</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span> </div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>  StorageType m_Value;</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>};</div>
</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span> </div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span> </div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span><span class="preprocessor">#define PL_ENUM_VALUE_TO_STRING(name) \</span></div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span><span class="preprocessor">  case name:                          \</span></div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span><span class="preprocessor">    return PL_PP_STRINGIFY(name);</span></div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span> </div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span><span class="preprocessor">#define PL_ENUM_TO_STRING(...)                               \</span></div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span><span class="preprocessor">  const char* ToString(plUInt32 value)                       \</span></div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span><span class="preprocessor">  {                                                          \</span></div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span><span class="preprocessor">    switch (value)                                           \</span></div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span><span class="preprocessor">    {                                                        \</span></div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span><span class="preprocessor">      PL_EXPAND_ARGS(PL_ENUM_VALUE_TO_STRING, ##__VA_ARGS__) \</span></div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span><span class="preprocessor">      default:                                               \</span></div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span><span class="preprocessor">        return nullptr;                                      \</span></div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span><span class="preprocessor">    }                                                        \</span></div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span><span class="preprocessor">  }</span></div>
<div class="ttc" id="astructpl_enum_htm"><div class="ttname"><a href="../../dd/d09/structpl_enum.htm">plEnum</a></div><div class="ttdoc">A custom enum implementation that allows to define the underlying storage type to control its memory ...</div><div class="ttdef"><b>Definition</b> Enum.h:37</div></div>
<div class="ttc" id="astructpl_enum_htm_a340dcb34fa90dd6a6391502bbe933baf"><div class="ttname"><a href="../../dd/d09/structpl_enum.htm#a340dcb34fa90dd6a6391502bbe933baf">plEnum::GetValue</a></div><div class="ttdeci">PL_ALWAYS_INLINE StorageType GetValue() const</div><div class="ttdoc">Returns the enum value as an integer.</div><div class="ttdef"><b>Definition</b> Enum.h:98</div></div>
<div class="ttc" id="astructpl_enum_htm_a62ba1824ace14361472583993d539783"><div class="ttname"><a href="../../dd/d09/structpl_enum.htm#a62ba1824ace14361472583993d539783">plEnum::plEnum</a></div><div class="ttdeci">PL_ALWAYS_INLINE plEnum()</div><div class="ttdoc">Default constructor.</div><div class="ttdef"><b>Definition</b> Enum.h:43</div></div>
<div class="ttc" id="astructpl_enum_htm_a8317f7ce2721469996f632bc1915c34c"><div class="ttname"><a href="../../dd/d09/structpl_enum.htm#a8317f7ce2721469996f632bc1915c34c">plEnum::SetValue</a></div><div class="ttdeci">PL_ALWAYS_INLINE void SetValue(StorageType value)</div><div class="ttdoc">Sets the enum value through an integer.</div><div class="ttdef"><b>Definition</b> Enum.h:104</div></div>
<div class="ttc" id="astructpl_enum_htm_aa21a7a8193610d04f814f941e057fb72"><div class="ttname"><a href="../../dd/d09/structpl_enum.htm#aa21a7a8193610d04f814f941e057fb72">plEnum::operator=</a></div><div class="ttdeci">PL_ALWAYS_INLINE void operator=(const SelfType &amp;rh)</div><div class="ttdoc">Assignment operator.</div><div class="ttdef"><b>Definition</b> Enum.h:61</div></div>
<div class="ttc" id="astructpl_enum_htm_ab39a747e73888e4b721c7b265040b89c"><div class="ttname"><a href="../../dd/d09/structpl_enum.htm#ab39a747e73888e4b721c7b265040b89c">plEnum::operator==</a></div><div class="ttdeci">PL_ALWAYS_INLINE bool operator==(const SelfType &amp;rhs) const</div><div class="ttdoc">Comparison operators.</div><div class="ttdef"><b>Definition</b> Enum.h:73</div></div>
<div class="ttc" id="astructpl_enum_htm_abc24c3a6ae0ff1e2d497f38a3741f335"><div class="ttname"><a href="../../dd/d09/structpl_enum.htm#abc24c3a6ae0ff1e2d497f38a3741f335">plEnum::plEnum</a></div><div class="ttdeci">PL_ALWAYS_INLINE plEnum(const SelfType &amp;rh)</div><div class="ttdoc">Copy constructor.</div><div class="ttdef"><b>Definition</b> Enum.h:49</div></div>
<div class="ttc" id="astructpl_enum_htm_acb71f9860965165b44d15271480cff6c"><div class="ttname"><a href="../../dd/d09/structpl_enum.htm#acb71f9860965165b44d15271480cff6c">plEnum::operator=</a></div><div class="ttdeci">PL_ALWAYS_INLINE void operator=(const typename Derived::Enum value)</div><div class="ttdoc">Assignment operator.</div><div class="ttdef"><b>Definition</b> Enum.h:67</div></div>
<div class="ttc" id="astructpl_enum_htm_ad7e4d1613aff7062ae0f1823e2d15ada"><div class="ttname"><a href="../../dd/d09/structpl_enum.htm#ad7e4d1613aff7062ae0f1823e2d15ada">plEnum::plEnum</a></div><div class="ttdeci">PL_ALWAYS_INLINE plEnum(typename Derived::Enum init)</div><div class="ttdoc">Construct from a C++ enum, and implicit conversion from enum type.</div><div class="ttdef"><b>Definition</b> Enum.h:55</div></div>
<div class="ttc" id="astructpl_enum_htm_aeb3d8764044c9f11b2f44f4d1569a76f"><div class="ttname"><a href="../../dd/d09/structpl_enum.htm#aeb3d8764044c9f11b2f44f4d1569a76f">plEnum::operator|</a></div><div class="ttdeci">PL_ALWAYS_INLINE SelfType operator|(const SelfType &amp;rhs) const</div><div class="ttdoc">brief Bitwise operators</div><div class="ttdef"><b>Definition</b> Enum.h:88</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_c32432c00eff92f753f8e1e2859d61e1.htm">Types</a></li><li class="navelem"><b>Enum.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
