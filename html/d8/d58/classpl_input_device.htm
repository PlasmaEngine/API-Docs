<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Plasma Engine: plInputDevice Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Plasma Engine<span id="projectnumber">&#160;2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d8/d58/classpl_input_device.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-static-methods">Static Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="../../d0/d01/classpl_input_device-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plInputDevice Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div></div>
</div><!--header-->
<div class="contents">

<p>The base class for all input device types.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../dd/d9d/_input_device_8h_source.htm">InputDevice.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for plInputDevice:</div>
<div class="dyncontent">
<div class="center"><img src="../../d8/de5/classpl_input_device__inherit__graph.png" border="0" usemap="#apl_input_device_inherit__map" alt="Inheritance graph"/></div>
<map name="apl_input_device_inherit__map" id="apl_input_device_inherit__map">
<area shape="rect" title="The base class for all input device types." alt="" coords="537,132,635,159"/>
<area shape="rect" href="../../d7/da7/classpl_input_device_controller.htm" title="This class is the base class for all controller type input devices." alt="" coords="702,56,854,83"/>
<area shape="poly" title=" " alt="" coords="622,122,682,92,716,81,718,86,684,97,624,126"/>
<area shape="rect" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm" title="This is the base class for all input devices that handle mouse and keyboard input." alt="" coords="683,107,874,133"/>
<area shape="poly" title=" " alt="" coords="650,134,682,130,683,135,651,140"/>
<area shape="rect" href="../../d5/d97/classpl_virtual_thumb_stick.htm" title="A Virtual Thumb&#45;stick is an input device that transforms certain types of input (mouse / touch) into ..." alt="" coords="710,157,847,184"/>
<area shape="poly" title=" " alt="" coords="650,151,709,159,709,164,650,156"/>
<area shape="rect" href="../../d3/d9b/classpl_x_r_input_device.htm" title=" " alt="" coords="722,208,835,235"/>
<area shape="poly" title=" " alt="" coords="624,164,684,194,722,206,721,211,682,198,622,169"/>
<area shape="rect" href="../../db/d85/classpl_enumerable.htm" title=" " alt="" coords="297,124,489,167"/>
<area shape="poly" title=" " alt="" coords="505,143,537,143,537,148,505,148"/>
<area shape="rect" href="../../d4/d91/classpl_reflected_class.htm" title="All classes that should be dynamically reflectable, need to be derived from this base class." alt="" coords="131,132,249,159"/>
<area shape="poly" title=" " alt="" coords="264,143,296,143,296,148,264,148"/>
<area shape="rect" href="../../de/dc4/classpl_no_base.htm" title="Dummy type to pass to templates and macros that expect a base type for a class that has no base." alt="" coords="5,132,83,159"/>
<area shape="poly" title=" " alt="" coords="99,143,130,143,130,148,99,148"/>
<area shape="rect" title=" " alt="" coords="927,5,1066,32"/>
<area shape="poly" title=" " alt="" coords="853,49,935,30,937,35,855,54"/>
<area shape="rect" href="../../da/d0b/classpl_input_device_x_box360.htm" title="An implementation of plInputDeviceController that handles XBox 360 controllers." alt="" coords="922,56,1071,83"/>
<area shape="poly" title=" " alt="" coords="870,67,922,67,922,72,870,72"/>
<area shape="rect" href="../../d7/dff/classpl_standard_input_device.htm" title="Android standard input device." alt="" coords="922,107,1071,133"/>
<area shape="poly" title=" " alt="" coords="800,139,844,151,900,153,952,147,973,140,987,132,990,136,975,145,953,152,900,158,844,156,798,144"/>
<area shape="poly" title=" " alt="" coords="832,133,897,135,958,131,959,137,897,141,831,138"/>
<area shape="poly" title=" " alt="" coords="890,117,922,117,922,123,890,123"/>
<area shape="poly" title=" " alt="" coords="831,102,897,99,959,103,958,109,897,105,832,107"/>
<area shape="poly" title=" " alt="" coords="798,96,844,84,900,82,953,88,975,95,990,104,987,108,973,100,952,93,900,87,844,89,800,101"/>
<area shape="rect" href="../../d7/d2f/classpl_dummy_x_r_input.htm" title=" " alt="" coords="936,183,1057,209"/>
<area shape="poly" title=" " alt="" coords="850,210,936,200,937,206,851,216"/>
<area shape="rect" href="../../dc/dd5/classpl_open_x_r_input_device.htm" title=" " alt="" coords="924,233,1069,260"/>
<area shape="poly" title=" " alt="" coords="851,227,924,236,924,241,850,232"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:af57c1b46b6f442cca14a7ff4625db140" id="r_af57c1b46b6f442cca14a7ff4625db140"><td class="memItemLeft" align="right" valign="top"><a id="af57c1b46b6f442cca14a7ff4625db140" name="af57c1b46b6f442cca14a7ff4625db140"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plInputDevice</b> ()</td></tr>
<tr class="memdesc:af57c1b46b6f442cca14a7ff4625db140"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Constructor. <br /></td></tr>
<tr class="separator:af57c1b46b6f442cca14a7ff4625db140"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae131b9527d9c4fa711fb8d46651ae51" id="r_aae131b9527d9c4fa711fb8d46651ae51"><td class="memItemLeft" align="right" valign="top"><a id="aae131b9527d9c4fa711fb8d46651ae51" name="aae131b9527d9c4fa711fb8d46651ae51"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>GetInputSlotState</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sSlot) const</td></tr>
<tr class="memdesc:aae131b9527d9c4fa711fb8d46651ae51"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows to query current input values for the given slot. <br /></td></tr>
<tr class="separator:aae131b9527d9c4fa711fb8d46651ae51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f6616572a2308f59c78944a8fe4c291" id="r_a6f6616572a2308f59c78944a8fe4c291"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6f6616572a2308f59c78944a8fe4c291">HasDeviceBeenUsedLastFrame</a> () const</td></tr>
<tr class="memdesc:a6f6616572a2308f59c78944a8fe4c291"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the device was 'used' during the last frame, ie. when it generated input due to some user interaction.  <br /></td></tr>
<tr class="separator:a6f6616572a2308f59c78944a8fe4c291"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classpl_reflected_class"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_classpl_reflected_class')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../d4/d91/classpl_reflected_class.htm">plReflectedClass</a></td></tr>
<tr class="memitem:a30a01812783d348746ff11a6db47d63f inherit pub_methods_classpl_reflected_class" id="r_a30a01812783d348746ff11a6db47d63f"><td class="memItemLeft" align="right" valign="top">
virtual const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetDynamicRTTI</b> () const</td></tr>
<tr class="separator:a30a01812783d348746ff11a6db47d63f inherit pub_methods_classpl_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa092c6d843ea7030165419c3c19dfe46 inherit pub_methods_classpl_reflected_class" id="r_aa092c6d843ea7030165419c3c19dfe46"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsInstanceOf</b> (const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *pType) const</td></tr>
<tr class="memdesc:aa092c6d843ea7030165419c3c19dfe46 inherit pub_methods_classpl_reflected_class"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the type of this instance is of the given type or derived from it. <br /></td></tr>
<tr class="separator:aa092c6d843ea7030165419c3c19dfe46 inherit pub_methods_classpl_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class" id="r_aa77e5cf0d600ccf2ec569e5d13c70887"><td class="memTemplParams" colspan="2">
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsInstanceOf</b> () const</td></tr>
<tr class="memdesc:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the type of this instance is of the given type or derived from it. <br /></td></tr>
<tr class="separator:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-methods" name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:ae979467dda16cc0b8d3f557dac50c3a2" id="r_ae979467dda16cc0b8d3f557dac50c3a2"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae979467dda16cc0b8d3f557dac50c3a2">InitializeDevice</a> ()=0</td></tr>
<tr class="memdesc:ae979467dda16cc0b8d3f557dac50c3a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this if you need to do device specific initialization before the first use.  <br /></td></tr>
<tr class="separator:ae979467dda16cc0b8d3f557dac50c3a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa323572aca9aaacef148e3136fcbd25" id="r_aaa323572aca9aaacef148e3136fcbd25"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aaa323572aca9aaacef148e3136fcbd25">UpdateInputSlotValues</a> ()=0</td></tr>
<tr class="memdesc:aaa323572aca9aaacef148e3136fcbd25"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this, if you need to query the state of the hardware to update the input slots.  <br /></td></tr>
<tr class="separator:aaa323572aca9aaacef148e3136fcbd25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94fc5982ebae3db958cb6ff01548229c" id="r_a94fc5982ebae3db958cb6ff01548229c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a94fc5982ebae3db958cb6ff01548229c">ResetInputSlotValues</a> ()</td></tr>
<tr class="memdesc:a94fc5982ebae3db958cb6ff01548229c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this, if you need to reset certain input slot values to zero, after the <a class="el" href="../../d7/d6c/classpl_input_manager.htm" title="The central class to set up and query the state of all input.">plInputManager</a> is finished with the current frame update.  <br /></td></tr>
<tr class="separator:a94fc5982ebae3db958cb6ff01548229c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affc9a06096720f741b0a347003de785c" id="r_affc9a06096720f741b0a347003de785c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#affc9a06096720f741b0a347003de785c">RegisterInputSlots</a> ()=0</td></tr>
<tr class="memdesc:affc9a06096720f741b0a347003de785c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this to register all the input slots that this device exposes.  <br /></td></tr>
<tr class="separator:affc9a06096720f741b0a347003de785c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a511af7ad1f755af01367218302bbc3ba" id="r_a511af7ad1f755af01367218302bbc3ba"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a511af7ad1f755af01367218302bbc3ba">UpdateHardwareState</a> (<a class="el" href="../../d1/df6/structpl_time.htm">plTime</a> tTimeDifference)</td></tr>
<tr class="memdesc:a511af7ad1f755af01367218302bbc3ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function is called once after <a class="el" href="../../d7/d6c/classpl_input_manager.htm#a99266a2977ca6f1430823992e7520bb7" title="Updates the state of the input manager. This should be called exactly once each frame.">plInputManager::Update</a> with the same time delta value. It allows to update hardware state, such as the vibration of gamepad motors.  <br /></td></tr>
<tr class="separator:a511af7ad1f755af01367218302bbc3ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-static-methods" name="pro-static-methods"></a>
Static Protected Member Functions</h2></td></tr>
<tr class="memitem:af24f5f5d425517bf14ef293c6d63e3bd" id="r_af24f5f5d425517bf14ef293c6d63e3bd"><td class="memItemLeft" align="right" valign="top"><a id="af24f5f5d425517bf14ef293c6d63e3bd" name="af24f5f5d425517bf14ef293c6d63e3bd"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>RegisterInputSlot</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sDefaultDisplayName, <a class="el" href="../../df/dd9/structpl_bitflags.htm">plBitflags</a>&lt; <a class="el" href="../../d5/d35/structpl_input_slot_flags.htm">plInputSlotFlags</a> &gt; SlotFlags)</td></tr>
<tr class="memdesc:af24f5f5d425517bf14ef293c6d63e3bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calls <a class="el" href="#af24f5f5d425517bf14ef293c6d63e3bd" title="Calls RegisterInputSlot() on the plInputManager and passes the parameters through.">RegisterInputSlot()</a> on the <a class="el" href="../../d7/d6c/classpl_input_manager.htm" title="The central class to set up and query the state of all input.">plInputManager</a> and passes the parameters through. <br /></td></tr>
<tr class="separator:af24f5f5d425517bf14ef293c6d63e3bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-attribs" name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a58a57c044af26a2471aa7bb6b4ff6c88" id="r_a58a57c044af26a2471aa7bb6b4ff6c88"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/d50/classpl_map.htm">plMap</a>&lt; <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plString</a>, float &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a58a57c044af26a2471aa7bb6b4ff6c88">m_InputSlotValues</a></td></tr>
<tr class="memdesc:a58a57c044af26a2471aa7bb6b4ff6c88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores all the values for all input slots that this device handles.  <br /></td></tr>
<tr class="separator:a58a57c044af26a2471aa7bb6b4ff6c88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e053200fc30e3efae873031f2f8b5fb" id="r_a8e053200fc30e3efae873031f2f8b5fb"><td class="memItemLeft" align="right" valign="top"><a id="a8e053200fc30e3efae873031f2f8b5fb" name="a8e053200fc30e3efae873031f2f8b5fb"></a>
plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>m_uiLastCharacter</b></td></tr>
<tr class="memdesc:a8e053200fc30e3efae873031f2f8b5fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">If this input device type handles character input, it should write the last typed character into this variable. The <a class="el" href="../../d7/d6c/classpl_input_manager.htm" title="The central class to set up and query the state of all input.">plInputManager</a> calls RetrieveLastCharacter() to query what the user typed last. <br /></td></tr>
<tr class="separator:a8e053200fc30e3efae873031f2f8b5fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_classpl_enumerable"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_attribs_classpl_enumerable')"><img src="../../closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="../../db/d85/classpl_enumerable.htm">plEnumerable&lt; plInputDevice, plReflectedClass &gt;</a></td></tr>
<tr class="memitem:aa4eba5b9c96dbe89638a952ae66077dc inherit pro_attribs_classpl_enumerable" id="r_aa4eba5b9c96dbe89638a952ae66077dc"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../db/d85/classpl_enumerable.htm">plEnumerable</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>m_pNextInstance</b></td></tr>
<tr class="separator:aa4eba5b9c96dbe89638a952ae66077dc inherit pro_attribs_classpl_enumerable"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="friends" name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a625b31656128285242a46e446e4e81bf" id="r_a625b31656128285242a46e446e4e81bf"><td class="memItemLeft" align="right" valign="top"><a id="a625b31656128285242a46e446e4e81bf" name="a625b31656128285242a46e446e4e81bf"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>plInputManager</b></td></tr>
<tr class="separator:a625b31656128285242a46e446e4e81bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="inherited" name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_static_methods_classpl_no_base"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_static_methods_classpl_no_base')"><img src="../../closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="../../de/dc4/classpl_no_base.htm">plNoBase</a></td></tr>
<tr class="memitem:af5fef4e4ea9a9dc1842d1dd3812e5d7f inherit pub_static_methods_classpl_no_base" id="r_af5fef4e4ea9a9dc1842d1dd3812e5d7f"><td class="memItemLeft" align="right" valign="top">
static const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetStaticRTTI</b> ()</td></tr>
<tr class="separator:af5fef4e4ea9a9dc1842d1dd3812e5d7f inherit pub_static_methods_classpl_no_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The base class for all input device types. </p>
<p>An input device is the abstraction of one or more types of input. It is not linked to one physical device. For example an input device can represent mouse AND keyboard (through one class). Another input device can represent all connected controllers (e.g. up to 4 XBox 360 controllers). On OSes where applications can have several windows, an input device may also represent all input from one window, if required.</p>
<p>An input device is the abstraction layer for the hardware input. All keys, movements etc. are mapped to named 'input slots', which typically hold a value between 0 and 1, where 0 represents 'not pressed' and 1 represents 'fully pressed'. All hardware that has a finite range (such as buttons, analog triggers, the positive/negative axis of analog sticks) should try to map to this range. Even mouse coordinates are typically mapped to the 0 to 1 range, where zero means top/left and 1 means bottom/right.</p>
<p>All input handling is usually handled through the <a class="el" href="../../d7/d6c/classpl_input_manager.htm" title="The central class to set up and query the state of all input.">plInputManager</a> class. A user should typically not have to interact directly with an input device, unless he needs to call device specific functions for advanced configuration.</p>
<p>An input device defines which input slots it exposes to the engine. All input slots are handled by name (e.g. string). For example a keyboard would expose the input slots 'keyboard_a' to 'keyboard_z' and other keys. A mouse would expose slots such as 'mouse_move_pos_x' and 'mouse_move_neg_x' etc.</p>
<p>By deriving from <a class="el" href="../../d8/d58/classpl_input_device.htm" title="The base class for all input device types.">plInputDevice</a> you can extend what hardware the engine supports. The derived class should override <a class="el" href="#ae979467dda16cc0b8d3f557dac50c3a2" title="Override this if you need to do device specific initialization before the first use.">InitializeDevice()</a> to do hardware specific setup. It also needs to override <a class="el" href="#affc9a06096720f741b0a347003de785c" title="Override this to register all the input slots that this device exposes.">RegisterInputSlots()</a> to register all the input slots that it wants to expose from the hardware. E.g. if the device wants to expose values from a gyroscope, it should register input slots that represent the rotations around the different axis (one slot each for both positive and negative changes). It then also needs to implement <a class="el" href="#aaa323572aca9aaacef148e3136fcbd25" title="Override this, if you need to query the state of the hardware to update the input slots.">UpdateInputSlotValues()</a> and/or <a class="el" href="#a94fc5982ebae3db958cb6ff01548229c" title="Override this, if you need to reset certain input slot values to zero, after the plInputManager is fi...">ResetInputSlotValues()</a> and possible a device-specific update function, to get the input values. For example on Windows a platform/device specific update function is necessary to parse the incoming window messages. If such a device specific function is necessary, it also needs to be integrated into the proper code (e.g. into the window handling code, to be able to get the window messages). In such a case it might not be possible to add such a device purely through a dynamic plugin, but might also need deeper integration into other engine code. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a6f6616572a2308f59c78944a8fe4c291" name="a6f6616572a2308f59c78944a8fe4c291"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f6616572a2308f59c78944a8fe4c291">&#9670;&#160;</a></span>HasDeviceBeenUsedLastFrame()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool plInputDevice::HasDeviceBeenUsedLastFrame </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns true, if the device was 'used' during the last frame, ie. when it generated input due to some user interaction. </p>
<p>This can be used to figure out which device the user is currently using, for example whether mouse/keyboard or a controller is in use. </p>

</div>
</div>
<a id="ae979467dda16cc0b8d3f557dac50c3a2" name="ae979467dda16cc0b8d3f557dac50c3a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae979467dda16cc0b8d3f557dac50c3a2">&#9670;&#160;</a></span>InitializeDevice()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plInputDevice::InitializeDevice </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this if you need to do device specific initialization before the first use. </p>

<p>Implemented in <a class="el" href="../../d7/d2f/classpl_dummy_x_r_input.htm#ae13897db439b977e5de4c3a0f40e46bd">plDummyXRInput</a>, <a class="el" href="../../da/d0b/classpl_input_device_x_box360.htm#a0d111cde24dc209d6d7de26e5b9ba1be">plInputDeviceXBox360</a>, <a class="el" href="../../dc/dd5/classpl_open_x_r_input_device.htm#af432250f1e8f75366f2ad75d4177907a">plOpenXRInputDevice</a>, <a class="el" href="../../d7/dff/classpl_standard_input_device.htm#a769fe79f75927bf56583ff7e29057b3c">plStandardInputDevice</a>, <a class="el" href="../../d7/dff/classpl_standard_input_device.htm#a7f807b0243565cbe003d175acfeede19">plStandardInputDevice</a>, <a class="el" href="../../d7/dff/classpl_standard_input_device.htm#a7f807b0243565cbe003d175acfeede19">plStandardInputDevice</a>, <a class="el" href="../../d7/dff/classpl_standard_input_device.htm#a7f807b0243565cbe003d175acfeede19">plStandardInputDevice</a>, <a class="el" href="../../d7/dff/classpl_standard_input_device.htm#a7f807b0243565cbe003d175acfeede19">plStandardInputDevice</a>, and <a class="el" href="../../d5/d97/classpl_virtual_thumb_stick.htm#a5285ebbbbb75dff3d45d69fcb89dc011">plVirtualThumbStick</a>.</p>

</div>
</div>
<a id="affc9a06096720f741b0a347003de785c" name="affc9a06096720f741b0a347003de785c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#affc9a06096720f741b0a347003de785c">&#9670;&#160;</a></span>RegisterInputSlots()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plInputDevice::RegisterInputSlots </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this to register all the input slots that this device exposes. </p>
<p>This is called once during initialization. It needs to call <a class="el" href="#af24f5f5d425517bf14ef293c6d63e3bd" title="Calls RegisterInputSlot() on the plInputManager and passes the parameters through.">RegisterInputSlot()</a> once for every input slot that this device exposes to the system. </p>

<p>Implemented in <a class="el" href="../../d7/d2f/classpl_dummy_x_r_input.htm#ab82a07622e6674537f44cc3239d28856">plDummyXRInput</a>, <a class="el" href="../../da/d0b/classpl_input_device_x_box360.htm#ad0fbcbd9598d35e29cff2a53b910efa9">plInputDeviceXBox360</a>, <a class="el" href="../../dc/dd5/classpl_open_x_r_input_device.htm#a90f3ff8cc2b56e68147755dcbb7ac4e2">plOpenXRInputDevice</a>, <a class="el" href="../../d7/dff/classpl_standard_input_device.htm#a03954e7a5806220d237bea9fbe7656fa">plStandardInputDevice</a>, <a class="el" href="../../d7/dff/classpl_standard_input_device.htm#a293b7b7eccbf4d10a192c4df05139b3e">plStandardInputDevice</a>, <a class="el" href="../../d7/dff/classpl_standard_input_device.htm#a293b7b7eccbf4d10a192c4df05139b3e">plStandardInputDevice</a>, <a class="el" href="../../d7/dff/classpl_standard_input_device.htm#a293b7b7eccbf4d10a192c4df05139b3e">plStandardInputDevice</a>, <a class="el" href="../../d7/dff/classpl_standard_input_device.htm#a293b7b7eccbf4d10a192c4df05139b3e">plStandardInputDevice</a>, and <a class="el" href="../../d5/d97/classpl_virtual_thumb_stick.htm#aeca5b8d9ce81f6a70a5c9379f4d3e530">plVirtualThumbStick</a>.</p>

</div>
</div>
<a id="a94fc5982ebae3db958cb6ff01548229c" name="a94fc5982ebae3db958cb6ff01548229c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94fc5982ebae3db958cb6ff01548229c">&#9670;&#160;</a></span>ResetInputSlotValues()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plInputDevice::ResetInputSlotValues </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this, if you need to reset certain input slot values to zero, after the <a class="el" href="../../d7/d6c/classpl_input_manager.htm" title="The central class to set up and query the state of all input.">plInputManager</a> is finished with the current frame update. </p>

<p>Reimplemented in <a class="el" href="../../d7/dff/classpl_standard_input_device.htm#acb972a749084b7b4c49b5d205d80d4b6">plStandardInputDevice</a>, <a class="el" href="../../d7/dff/classpl_standard_input_device.htm#ab992f99b564d8b0aaf92ee7848809b74">plStandardInputDevice</a>, <a class="el" href="../../d7/dff/classpl_standard_input_device.htm#ab992f99b564d8b0aaf92ee7848809b74">plStandardInputDevice</a>, and <a class="el" href="../../d7/dff/classpl_standard_input_device.htm#ab992f99b564d8b0aaf92ee7848809b74">plStandardInputDevice</a>.</p>

</div>
</div>
<a id="a511af7ad1f755af01367218302bbc3ba" name="a511af7ad1f755af01367218302bbc3ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a511af7ad1f755af01367218302bbc3ba">&#9670;&#160;</a></span>UpdateHardwareState()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plInputDevice::UpdateHardwareState </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d1/df6/structpl_time.htm">plTime</a></td>          <td class="paramname"><span class="paramname"><em>tTimeDifference</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This function is called once after <a class="el" href="../../d7/d6c/classpl_input_manager.htm#a99266a2977ca6f1430823992e7520bb7" title="Updates the state of the input manager. This should be called exactly once each frame.">plInputManager::Update</a> with the same time delta value. It allows to update hardware state, such as the vibration of gamepad motors. </p>

<p>Reimplemented in <a class="el" href="../../da/d0b/classpl_input_device_x_box360.htm#ab74fde8f0e95f4951e69d4b44da1115b">plInputDeviceXBox360</a>.</p>

</div>
</div>
<a id="aaa323572aca9aaacef148e3136fcbd25" name="aaa323572aca9aaacef148e3136fcbd25"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa323572aca9aaacef148e3136fcbd25">&#9670;&#160;</a></span>UpdateInputSlotValues()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plInputDevice::UpdateInputSlotValues </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this, if you need to query the state of the hardware to update the input slots. </p>
<dl class="section note"><dt>Note</dt><dd>This function might be called multiple times before <a class="el" href="#a94fc5982ebae3db958cb6ff01548229c" title="Override this, if you need to reset certain input slot values to zero, after the plInputManager is fi...">ResetInputSlotValues()</a> is called. This will be the case when <a class="el" href="../../d7/d6c/classpl_input_manager.htm#af6d9ee3bc636777a20828ab44e00e95c" title="Makes sure that hardware input is processed at this moment, which allows to do this more often than U...">plInputManager::PollHardware</a> is used to make more frequent hardware updates than input is actually processed. Just make sure to always accumulate delta values (such as mouse move values) and don't expect <a class="el" href="#a94fc5982ebae3db958cb6ff01548229c" title="Override this, if you need to reset certain input slot values to zero, after the plInputManager is fi...">ResetInputSlotValues()</a> to be called in tandem with this function and it will be fine. </dd></dl>

<p>Implemented in <a class="el" href="../../d7/d2f/classpl_dummy_x_r_input.htm#a6ae50e0d1ec7c5ec006e0da6e4ead1ae">plDummyXRInput</a>, <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm#a252d2f33232a7f0339bdb5174799a6a0">plInputDeviceMouseKeyboard</a>, <a class="el" href="../../da/d0b/classpl_input_device_x_box360.htm#a89fd766da114b16f9dc47988143f9c5b">plInputDeviceXBox360</a>, <a class="el" href="../../dc/dd5/classpl_open_x_r_input_device.htm#a59cb42fa9d2d46cef06ae3d1dc5523a1">plOpenXRInputDevice</a>, <a class="el" href="../../d7/dff/classpl_standard_input_device.htm#a1bdef8211bd2f959a04308cd3fd7017b">plStandardInputDevice</a>, and <a class="el" href="../../d5/d97/classpl_virtual_thumb_stick.htm#adc9b3632de37b61a19f9ba7cef275a0e">plVirtualThumbStick</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a58a57c044af26a2471aa7bb6b4ff6c88" name="a58a57c044af26a2471aa7bb6b4ff6c88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58a57c044af26a2471aa7bb6b4ff6c88">&#9670;&#160;</a></span>m_InputSlotValues</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d9/d50/classpl_map.htm">plMap</a>&lt;<a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plString</a>, float&gt; plInputDevice::m_InputSlotValues</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Stores all the values for all input slots that this device handles. </p>
<p>A derived class needs to fill out this map every frame. There are two ways this map can be filled out. For devices where you can query the complete state at one point in time (e.g. controllers), you can update the entire map inside an overridden <a class="el" href="#aaa323572aca9aaacef148e3136fcbd25" title="Override this, if you need to query the state of the hardware to update the input slots.">UpdateInputSlotValues()</a> function. For devices where you get the input only piece-wise and usually only when something changes (e.g. through messages) you can also just update the map whenever input arrives. However in such a use-case you sometimes need to manually reset the state of certain input slots. For example when a mouse-move message arrives that movement delta is accumulated in the map. However, when the mouse stops usually no 'mouse stopped' message is sent but the values in the map need to be reset to zero, to prevent the mouse from keeping moving in the engine. Do this inside an overridden <a class="el" href="#a94fc5982ebae3db958cb6ff01548229c" title="Override this, if you need to reset certain input slot values to zero, after the plInputManager is fi...">ResetInputSlotValues()</a> function. You don't need to do this for input slots that will reset to zero anyway. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/Engine/Core/Input/<a class="el" href="../../dd/d9d/_input_device_8h_source.htm">InputDevice.h</a></li>
<li>Code/Engine/Core/Input/Implementation/<b>InputDevice.cpp</b></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d8/d58/classpl_input_device.htm">plInputDevice</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
