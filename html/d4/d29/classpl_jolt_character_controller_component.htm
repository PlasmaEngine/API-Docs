<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<!-- BEGIN opengraph metadata -->
<meta property="og:title" content="Doxygen Awesome" />
<meta property="og:image" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta property="og:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<meta property="og:url" content="https://jothepro.github.io/doxygen-awesome-css/" />
<!-- END opengraph metadata -->
<!-- BEGIN twitter metadata -->
<meta name="twitter:image:src" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta name="twitter:title" content="Doxygen Awesome" />
<meta name="twitter:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<!-- END twitter metadata -->
<title>Plasma Engine: plJoltCharacterControllerComponent Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link rel="icon" type="image/svg+xml" href="logo.drawio.svg"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-paragraph-link.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-tabs.js"></script>
<script type="text/javascript" src="../../toggle-alternative-theme.js"></script>
<script type="text/javascript">
    DoxygenAwesomeFragmentCopyButton.init()
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeParagraphLink.init()
    DoxygenAwesomeInteractiveToc.init()
    DoxygenAwesomeTabs.init()
</script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Plasma Engine
   &#160;<span id="projectnumber">2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d4/d29/classpl_jolt_character_controller_component.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="../../d9/da6/classpl_jolt_character_controller_component-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plJoltCharacterControllerComponent Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div></div>
</div><!--header-->
<div class="contents">

<p>Base class for character controllers (CC).  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d0/d30/_jolt_character_controller_component_8h_source.htm">JoltCharacterControllerComponent.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for plJoltCharacterControllerComponent:</div>
<div class="dyncontent">
<div class="center"><img src="../../d0/d01/classpl_jolt_character_controller_component__inherit__graph.png" border="0" usemap="#apl_jolt_character_controller_component_inherit__map" alt="Inheritance graph"/></div>
<map name="apl_jolt_character_controller_component_inherit__map" id="apl_jolt_character_controller_component_inherit__map">
<area shape="rect" title="Base class for character controllers (CC)." alt="" coords="31,304,193,347"/>
<area shape="rect" href="../../da/d0f/classpl_jolt_default_character_component.htm" title="An example character controller (CC) implementation build upon plJoltCharacterControllerComponent." alt="" coords="5,395,219,421"/>
<area shape="poly" title=" " alt="" coords="115,363,115,394,109,394,109,363"/>
<area shape="rect" href="../../db/dab/classpl_character_controller_component.htm" title="Base class for implementations of a character controller." alt="" coords="8,229,216,256"/>
<area shape="poly" title=" " alt="" coords="115,272,115,304,109,304,109,272"/>
<area shape="rect" href="../../d1/d81/classpl_component.htm" title="Base class of all component types." alt="" coords="63,155,161,181"/>
<area shape="poly" title=" " alt="" coords="115,197,115,229,109,229,109,197"/>
<area shape="rect" href="../../d4/d91/classpl_reflected_class.htm" title="All classes that should be dynamically reflectable, need to be derived from this base class." alt="" coords="53,80,171,107"/>
<area shape="poly" title=" " alt="" coords="115,122,115,154,109,154,109,122"/>
<area shape="rect" href="../../de/dc4/classpl_no_base.htm" title="Dummy type to pass to templates and macros that expect a base type for a class that has no base." alt="" coords="73,5,151,32"/>
<area shape="poly" title=" " alt="" coords="115,48,115,80,109,80,109,48"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dff/structpl_jolt_character_controller_component_1_1_contact_point.htm">ContactPoint</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describes a point where the CC collided with other geometry.  <a href="../../d9/dff/structpl_jolt_character_controller_component_1_1_contact_point.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aa43aedd3d3201c881ac835f0c5d4f655" id="r_aa43aedd3d3201c881ac835f0c5d4f655"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa43aedd3d3201c881ac835f0c5d4f655">SerializeComponent</a> (<a class="el" href="../../dc/dd6/classpl_world_writer.htm">plWorldWriter</a> &amp;inout_stream) const override</td></tr>
<tr class="memdesc:aa43aedd3d3201c881ac835f0c5d4f655"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this to save the current state of the component to the given stream.  <br /></td></tr>
<tr class="separator:aa43aedd3d3201c881ac835f0c5d4f655"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a264e1b54789204dc500a8fd7c718aeec" id="r_a264e1b54789204dc500a8fd7c718aeec"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a264e1b54789204dc500a8fd7c718aeec">DeserializeComponent</a> (<a class="el" href="../../d3/d63/classpl_world_reader.htm">plWorldReader</a> &amp;inout_stream) override</td></tr>
<tr class="memdesc:a264e1b54789204dc500a8fd7c718aeec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this to load the current state of the component from the given stream.  <br /></td></tr>
<tr class="separator:a264e1b54789204dc500a8fd7c718aeec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa00cfac05079dafc3e850c3136a62e10" id="r_aa00cfac05079dafc3e850c3136a62e10"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa00cfac05079dafc3e850c3136a62e10">SetObjectToIgnore</a> (plUInt32 uiObjectFilterID)</td></tr>
<tr class="memdesc:aa00cfac05079dafc3e850c3136a62e10"><td class="mdescLeft">&#160;</td><td class="mdescRight">The CC will move through the given physics body.  <br /></td></tr>
<tr class="separator:aa00cfac05079dafc3e850c3136a62e10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d614e1cf8606559bd81f5ae9b760c10" id="r_a3d614e1cf8606559bd81f5ae9b760c10"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3d614e1cf8606559bd81f5ae9b760c10">ClearObjectToIgnore</a> ()</td></tr>
<tr class="separator:a3d614e1cf8606559bd81f5ae9b760c10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8bb188fc3bfaf900a09a3b9a1053b6b0" id="r_a8bb188fc3bfaf900a09a3b9a1053b6b0"><td class="memItemLeft" align="right" valign="top"><a id="a8bb188fc3bfaf900a09a3b9a1053b6b0" name="a8bb188fc3bfaf900a09a3b9a1053b6b0"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetMaxClimbingSlope</b> (<a class="el" href="../../d4/dfd/classpl_angle.htm">plAngle</a> slope)</td></tr>
<tr class="memdesc:a8bb188fc3bfaf900a09a3b9a1053b6b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">The maximum slope that the character can walk up. <br /></td></tr>
<tr class="separator:a8bb188fc3bfaf900a09a3b9a1053b6b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b6fd8401e943ad1485449f8626cf8e6" id="r_a4b6fd8401e943ad1485449f8626cf8e6"><td class="memItemLeft" align="right" valign="top"><a id="a4b6fd8401e943ad1485449f8626cf8e6" name="a4b6fd8401e943ad1485449f8626cf8e6"></a>
<a class="el" href="../../d4/dfd/classpl_angle.htm">plAngle</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetMaxClimbingSlope</b> () const</td></tr>
<tr class="separator:a4b6fd8401e943ad1485449f8626cf8e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a740681308d7ce30db54fc7d49cd23275" id="r_a740681308d7ce30db54fc7d49cd23275"><td class="memItemLeft" align="right" valign="top"><a id="a740681308d7ce30db54fc7d49cd23275" name="a740681308d7ce30db54fc7d49cd23275"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetMass</b> (float fMass)</td></tr>
<tr class="memdesc:a740681308d7ce30db54fc7d49cd23275"><td class="mdescLeft">&#160;</td><td class="mdescRight">The mass with which the character will push down on objects that it is standing on. <br /></td></tr>
<tr class="separator:a740681308d7ce30db54fc7d49cd23275"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa521415db487f69d7091bc3d91a8efb8" id="r_aa521415db487f69d7091bc3d91a8efb8"><td class="memItemLeft" align="right" valign="top"><a id="aa521415db487f69d7091bc3d91a8efb8" name="aa521415db487f69d7091bc3d91a8efb8"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>GetMass</b> () const</td></tr>
<tr class="separator:aa521415db487f69d7091bc3d91a8efb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a804bc11b5db96664e6acf8dec6385464" id="r_a804bc11b5db96664e6acf8dec6385464"><td class="memItemLeft" align="right" valign="top"><a id="a804bc11b5db96664e6acf8dec6385464" name="a804bc11b5db96664e6acf8dec6385464"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetStrength</b> (float fStrength)</td></tr>
<tr class="memdesc:a804bc11b5db96664e6acf8dec6385464"><td class="mdescLeft">&#160;</td><td class="mdescRight">The strength with which the character will push against objects that it is running into. <br /></td></tr>
<tr class="separator:a804bc11b5db96664e6acf8dec6385464"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa37094915ca2b4a7a82264ecdb7c15ff" id="r_aa37094915ca2b4a7a82264ecdb7c15ff"><td class="memItemLeft" align="right" valign="top"><a id="aa37094915ca2b4a7a82264ecdb7c15ff" name="aa37094915ca2b4a7a82264ecdb7c15ff"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>GetStrength</b> () const</td></tr>
<tr class="separator:aa37094915ca2b4a7a82264ecdb7c15ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fddcc81cc87008a489af4897ba0eef1" id="r_a3fddcc81cc87008a489af4897ba0eef1"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3fddcc81cc87008a489af4897ba0eef1">RawMove</a> (const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;vMoveDeltaGlobal) override</td></tr>
<tr class="memdesc:a3fddcc81cc87008a489af4897ba0eef1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attempts to move the character into the given direction.  <br /></td></tr>
<tr class="separator:a3fddcc81cc87008a489af4897ba0eef1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd1a06190baca6803f03b50a46ed1753" id="r_abd1a06190baca6803f03b50a46ed1753"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#abd1a06190baca6803f03b50a46ed1753">MoveCharacter</a> (<a class="el" href="../../d5/daa/structpl_msg_move_character_controller.htm">plMsgMoveCharacterController</a> &amp;msg) override</td></tr>
<tr class="memdesc:abd1a06190baca6803f03b50a46ed1753"><td class="mdescLeft">&#160;</td><td class="mdescRight">Instructs the CC to move in certain directions. An implementation can queue the request for later processing.  <br /></td></tr>
<tr class="separator:abd1a06190baca6803f03b50a46ed1753"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4dc87ff0827ed4e1fb76c519b8f80d19" id="r_a4dc87ff0827ed4e1fb76c519b8f80d19"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4dc87ff0827ed4e1fb76c519b8f80d19">TeleportCharacter</a> (const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;vGlobalFootPos) override</td></tr>
<tr class="memdesc:a4dc87ff0827ed4e1fb76c519b8f80d19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Teleports the CC to the desired global position. Ignores obstacles on the path.  <br /></td></tr>
<tr class="separator:a4dc87ff0827ed4e1fb76c519b8f80d19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4ce99acfcfaa84e67e306f186fb57fc" id="r_ae4ce99acfcfaa84e67e306f186fb57fc"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae4ce99acfcfaa84e67e306f186fb57fc">IsDestinationUnobstructed</a> (const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;vGlobalFootPos, float fCharacterHeight) override</td></tr>
<tr class="memdesc:ae4ce99acfcfaa84e67e306f186fb57fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the CC can be teleported to the target position without getting stuck.  <br /></td></tr>
<tr class="separator:ae4ce99acfcfaa84e67e306f186fb57fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d5cb824b1998b9bc8ed1c15977412b7" id="r_a8d5cb824b1998b9bc8ed1c15977412b7"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a8d5cb824b1998b9bc8ed1c15977412b7">IsTouchingGround</a> () override</td></tr>
<tr class="memdesc:a8d5cb824b1998b9bc8ed1c15977412b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the CC is currently touching the ground.  <br /></td></tr>
<tr class="separator:a8d5cb824b1998b9bc8ed1c15977412b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8fafd1240522b955b97dc2fde230966c" id="r_a8fafd1240522b955b97dc2fde230966c"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a8fafd1240522b955b97dc2fde230966c">IsCrouching</a> () override</td></tr>
<tr class="memdesc:a8fafd1240522b955b97dc2fde230966c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the CC is currently in the crouch state.  <br /></td></tr>
<tr class="separator:a8fafd1240522b955b97dc2fde230966c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classpl_component"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_classpl_component')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../d1/d81/classpl_component.htm">plComponent</a></td></tr>
<tr class="memitem:a705a8aac8daabbdfd517f152c824457f inherit pub_methods_classpl_component" id="r_a705a8aac8daabbdfd517f152c824457f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d81/classpl_component.htm#a705a8aac8daabbdfd517f152c824457f">SetActiveFlag</a> (bool bEnabled)</td></tr>
<tr class="memdesc:a705a8aac8daabbdfd517f152c824457f inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the active flag of the component, which affects its active state.  <br /></td></tr>
<tr class="separator:a705a8aac8daabbdfd517f152c824457f inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d63d25bf53a95bcde35a3f8988eef44 inherit pub_methods_classpl_component" id="r_a0d63d25bf53a95bcde35a3f8988eef44"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d81/classpl_component.htm#a0d63d25bf53a95bcde35a3f8988eef44">GetActiveFlag</a> () const</td></tr>
<tr class="memdesc:a0d63d25bf53a95bcde35a3f8988eef44 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the 'active flag' is set on this component. Note that this does not mean that the component is also 'active'.  <br /></td></tr>
<tr class="separator:a0d63d25bf53a95bcde35a3f8988eef44 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a772ab4db4df4e64f224ebf5478bac3b7 inherit pub_methods_classpl_component" id="r_a772ab4db4df4e64f224ebf5478bac3b7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d81/classpl_component.htm#a772ab4db4df4e64f224ebf5478bac3b7">IsActive</a> () const</td></tr>
<tr class="memdesc:a772ab4db4df4e64f224ebf5478bac3b7 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether this component is in an active state.  <br /></td></tr>
<tr class="separator:a772ab4db4df4e64f224ebf5478bac3b7 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addc29bc0b56aa0fdc0161238bf5dea7d inherit pub_methods_classpl_component" id="r_addc29bc0b56aa0fdc0161238bf5dea7d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d81/classpl_component.htm#addc29bc0b56aa0fdc0161238bf5dea7d">IsActiveAndInitialized</a> () const</td></tr>
<tr class="memdesc:addc29bc0b56aa0fdc0161238bf5dea7d inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether this component is active and initialized.  <br /></td></tr>
<tr class="separator:addc29bc0b56aa0fdc0161238bf5dea7d inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b52490701fd55597a91bbdc84761e08 inherit pub_methods_classpl_component" id="r_a4b52490701fd55597a91bbdc84761e08"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d81/classpl_component.htm#a4b52490701fd55597a91bbdc84761e08">IsActiveAndSimulating</a> () const</td></tr>
<tr class="memdesc:a4b52490701fd55597a91bbdc84761e08 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Whether the component is currently active and simulation has been started as well.  <br /></td></tr>
<tr class="separator:a4b52490701fd55597a91bbdc84761e08 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a903bd52296af50164853eaa2e33f452f inherit pub_methods_classpl_component" id="r_a903bd52296af50164853eaa2e33f452f"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../d2/db6/classpl_component_manager_base.htm">plComponentManagerBase</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetOwningManager</b> ()</td></tr>
<tr class="memdesc:a903bd52296af50164853eaa2e33f452f inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the corresponding manager for this component. <br /></td></tr>
<tr class="separator:a903bd52296af50164853eaa2e33f452f inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f27c03873939fb7bc64301f5ddff71c inherit pub_methods_classpl_component" id="r_a8f27c03873939fb7bc64301f5ddff71c"><td class="memItemLeft" align="right" valign="top">
const <a class="el" href="../../d2/db6/classpl_component_manager_base.htm">plComponentManagerBase</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetOwningManager</b> () const</td></tr>
<tr class="memdesc:a8f27c03873939fb7bc64301f5ddff71c inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the corresponding manager for this component. <br /></td></tr>
<tr class="separator:a8f27c03873939fb7bc64301f5ddff71c inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af49a8b898be5eceed4d8a15a9549a15f inherit pub_methods_classpl_component" id="r_af49a8b898be5eceed4d8a15a9549a15f"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../d4/d82/classpl_game_object.htm">plGameObject</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetOwner</b> ()</td></tr>
<tr class="memdesc:af49a8b898be5eceed4d8a15a9549a15f inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the owner game object if the component is attached to one or nullptr. <br /></td></tr>
<tr class="separator:af49a8b898be5eceed4d8a15a9549a15f inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ae8039cab69f5641013169d2090cfa7 inherit pub_methods_classpl_component" id="r_a1ae8039cab69f5641013169d2090cfa7"><td class="memItemLeft" align="right" valign="top">
const <a class="el" href="../../d4/d82/classpl_game_object.htm">plGameObject</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetOwner</b> () const</td></tr>
<tr class="memdesc:a1ae8039cab69f5641013169d2090cfa7 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the owner game object if the component is attached to one or nullptr. <br /></td></tr>
<tr class="separator:a1ae8039cab69f5641013169d2090cfa7 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a905d6cd59c46d6257d07d0501ea40a52 inherit pub_methods_classpl_component" id="r_a905d6cd59c46d6257d07d0501ea40a52"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../d2/d12/classpl_world.htm">plWorld</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetWorld</b> ()</td></tr>
<tr class="memdesc:a905d6cd59c46d6257d07d0501ea40a52 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the corresponding world for this component. <br /></td></tr>
<tr class="separator:a905d6cd59c46d6257d07d0501ea40a52 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd9649421b35956c12e08f879d230540 inherit pub_methods_classpl_component" id="r_abd9649421b35956c12e08f879d230540"><td class="memItemLeft" align="right" valign="top">
const <a class="el" href="../../d2/d12/classpl_world.htm">plWorld</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetWorld</b> () const</td></tr>
<tr class="memdesc:abd9649421b35956c12e08f879d230540 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the corresponding world for this component. <br /></td></tr>
<tr class="separator:abd9649421b35956c12e08f879d230540 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a454f7bb0d554020851abacee2cf91ef6 inherit pub_methods_classpl_component" id="r_a454f7bb0d554020851abacee2cf91ef6"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../d5/d04/structpl_component_handle.htm">plComponentHandle</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetHandle</b> () const</td></tr>
<tr class="memdesc:a454f7bb0d554020851abacee2cf91ef6 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a handle to this component. <br /></td></tr>
<tr class="separator:a454f7bb0d554020851abacee2cf91ef6 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6bb9d0ffefb9d981d4453513b7a08d5 inherit pub_methods_classpl_component" id="r_ab6bb9d0ffefb9d981d4453513b7a08d5"><td class="memItemLeft" align="right" valign="top">
plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GetUniqueID</b> () const</td></tr>
<tr class="memdesc:ab6bb9d0ffefb9d981d4453513b7a08d5 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the unique id for this component. <br /></td></tr>
<tr class="separator:ab6bb9d0ffefb9d981d4453513b7a08d5 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff1ea68fa1e675be5e8410c42e97d0b5 inherit pub_methods_classpl_component" id="r_aff1ea68fa1e675be5e8410c42e97d0b5"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetUniqueID</b> (plUInt32 uiUniqueID)</td></tr>
<tr class="memdesc:aff1ea68fa1e675be5e8410c42e97d0b5 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the unique id for this component. <br /></td></tr>
<tr class="separator:aff1ea68fa1e675be5e8410c42e97d0b5 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f63c363b76cfdf2f391d566af2f4569 inherit pub_methods_classpl_component" id="r_a7f63c363b76cfdf2f391d566af2f4569"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>EnsureInitialized</b> ()</td></tr>
<tr class="memdesc:a7f63c363b76cfdf2f391d566af2f4569 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Ensures that the component is initialized. Must only be called from another component's Initialize callback. <br /></td></tr>
<tr class="separator:a7f63c363b76cfdf2f391d566af2f4569 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a134a5c4e9085fffb9a13fee1737d6faf inherit pub_methods_classpl_component" id="r_a134a5c4e9085fffb9a13fee1737d6faf"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>EnsureSimulationStarted</b> ()</td></tr>
<tr class="memdesc:a134a5c4e9085fffb9a13fee1737d6faf inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Ensures that the OnSimulationStarted method has been called. Must only be called from another component's OnSimulationStarted callback. <br /></td></tr>
<tr class="separator:a134a5c4e9085fffb9a13fee1737d6faf inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72d16828092c9b039b3c4b765032f0c3 inherit pub_methods_classpl_component" id="r_a72d16828092c9b039b3c4b765032f0c3"><td class="memItemLeft" align="right" valign="top">
PL_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>SendMessage</b> (<a class="el" href="../../d0/dde/classpl_message.htm">plMessage</a> &amp;ref_msg)</td></tr>
<tr class="memdesc:a72d16828092c9b039b3c4b765032f0c3 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sends a message to this component. <br /></td></tr>
<tr class="separator:a72d16828092c9b039b3c4b765032f0c3 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a210388704ffa2b9490969018c4f39fee inherit pub_methods_classpl_component" id="r_a210388704ffa2b9490969018c4f39fee"><td class="memItemLeft" align="right" valign="top">
PL_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>SendMessage</b> (<a class="el" href="../../d0/dde/classpl_message.htm">plMessage</a> &amp;ref_msg) const</td></tr>
<tr class="separator:a210388704ffa2b9490969018c4f39fee inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c1551daefaabde76dfbbb19f4059da9 inherit pub_methods_classpl_component" id="r_a3c1551daefaabde76dfbbb19f4059da9"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>PostMessage</b> (const <a class="el" href="../../d0/dde/classpl_message.htm">plMessage</a> &amp;msg, <a class="el" href="../../d1/df6/structpl_time.htm">plTime</a> delay=<a class="el" href="../../d1/df6/structpl_time.htm#a48cd39d05bfa55f8504cc3c056576c9e">plTime::MakeZero</a>(), <a class="el" href="../../d5/d06/structpl_object_msg_queue_type.htm#a17fe916fa4e797a7186aed5f0d795c30">plObjectMsgQueueType::Enum</a> queueType=<a class="el" href="../../d5/d06/structpl_object_msg_queue_type.htm#a17fe916fa4e797a7186aed5f0d795c30a2404b64a3633334367c032b2ea935c1a">plObjectMsgQueueType::NextFrame</a>) const</td></tr>
<tr class="memdesc:a3c1551daefaabde76dfbbb19f4059da9 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Queues the message for the given phase. The message is processed after the given delay in the corresponding phase. <br /></td></tr>
<tr class="separator:a3c1551daefaabde76dfbbb19f4059da9 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa024f2be3bc18309d9b9ebb40c855588 inherit pub_methods_classpl_component" id="r_aa024f2be3bc18309d9b9ebb40c855588"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d81/classpl_component.htm#aa024f2be3bc18309d9b9ebb40c855588">HandlesMessage</a> (const <a class="el" href="../../d0/dde/classpl_message.htm">plMessage</a> &amp;msg) const</td></tr>
<tr class="memdesc:aa024f2be3bc18309d9b9ebb40c855588 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the given Message is handled by this component.  <br /></td></tr>
<tr class="separator:aa024f2be3bc18309d9b9ebb40c855588 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade4780ed0d2872272c3cfe8029b358e0 inherit pub_methods_classpl_component" id="r_ade4780ed0d2872272c3cfe8029b358e0"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetUserFlag</b> (plUInt8 uiFlagIndex, bool bSet)</td></tr>
<tr class="memdesc:ade4780ed0d2872272c3cfe8029b358e0 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Be careful to check which flags may already be in use by base classes. <br /></td></tr>
<tr class="separator:ade4780ed0d2872272c3cfe8029b358e0 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7bd2c9eb96fd9a1c0ebdb26ca7ac9a8 inherit pub_methods_classpl_component" id="r_ac7bd2c9eb96fd9a1c0ebdb26ca7ac9a8"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>GetUserFlag</b> (plUInt8 uiFlagIndex) const</td></tr>
<tr class="memdesc:ac7bd2c9eb96fd9a1c0ebdb26ca7ac9a8 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves a custom flag. Index must be between 0 and 7. <br /></td></tr>
<tr class="separator:ac7bd2c9eb96fd9a1c0ebdb26ca7ac9a8 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8460d025c4558232c9dfe1fc5255fe44 inherit pub_methods_classpl_component" id="r_a8460d025c4558232c9dfe1fc5255fe44"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetCreatedByPrefab</b> ()</td></tr>
<tr class="memdesc:a8460d025c4558232c9dfe1fc5255fe44 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds <a class="el" href="../../da/d5a/structpl_object_flags.htm#a204835e2b603739b341f847120a8cd7da00958bc56c4c626b7c5fa35887be39ad" title="Such flagged objects and components are ignored during scene export (see plWorldWriter) and will be r...">plObjectFlags::CreatedByPrefab</a> to the component. See the flag for details. <br /></td></tr>
<tr class="separator:a8460d025c4558232c9dfe1fc5255fe44 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35e955206b96cfb15cedbaaea9d61690 inherit pub_methods_classpl_component" id="r_a35e955206b96cfb15cedbaaea9d61690"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>WasCreatedByPrefab</b> () const</td></tr>
<tr class="memdesc:a35e955206b96cfb15cedbaaea9d61690 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the <a class="el" href="../../da/d5a/structpl_object_flags.htm#a204835e2b603739b341f847120a8cd7da00958bc56c4c626b7c5fa35887be39ad" title="Such flagged objects and components are ignored during scene export (see plWorldWriter) and will be r...">plObjectFlags::CreatedByPrefab</a> flag is set on this component. <br /></td></tr>
<tr class="separator:a35e955206b96cfb15cedbaaea9d61690 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classpl_reflected_class"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_classpl_reflected_class')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../d4/d91/classpl_reflected_class.htm">plReflectedClass</a></td></tr>
<tr class="memitem:a30a01812783d348746ff11a6db47d63f inherit pub_methods_classpl_reflected_class" id="r_a30a01812783d348746ff11a6db47d63f"><td class="memItemLeft" align="right" valign="top">
virtual const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetDynamicRTTI</b> () const</td></tr>
<tr class="separator:a30a01812783d348746ff11a6db47d63f inherit pub_methods_classpl_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa092c6d843ea7030165419c3c19dfe46 inherit pub_methods_classpl_reflected_class" id="r_aa092c6d843ea7030165419c3c19dfe46"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsInstanceOf</b> (const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *pType) const</td></tr>
<tr class="memdesc:aa092c6d843ea7030165419c3c19dfe46 inherit pub_methods_classpl_reflected_class"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the type of this instance is of the given type or derived from it. <br /></td></tr>
<tr class="separator:aa092c6d843ea7030165419c3c19dfe46 inherit pub_methods_classpl_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class" id="r_aa77e5cf0d600ccf2ec569e5d13c70887"><td class="memTemplParams" colspan="2">
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsInstanceOf</b> () const</td></tr>
<tr class="memdesc:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the type of this instance is of the given type or derived from it. <br /></td></tr>
<tr class="separator:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-attribs" name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a80333a26d615232543fea0bbcb9cb70e" id="r_a80333a26d615232543fea0bbcb9cb70e"><td class="memItemLeft" align="right" valign="top">plUInt8&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a80333a26d615232543fea0bbcb9cb70e">m_uiCollisionLayer</a> = 0</td></tr>
<tr class="memdesc:a80333a26d615232543fea0bbcb9cb70e"><td class="mdescLeft">&#160;</td><td class="mdescRight">The collision layer determines with which other actors this actor collides.  <br /></td></tr>
<tr class="separator:a80333a26d615232543fea0bbcb9cb70e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac41c70deb05f6fdc6cde799133f243de" id="r_ac41c70deb05f6fdc6cde799133f243de"><td class="memItemLeft" align="right" valign="top"><a id="ac41c70deb05f6fdc6cde799133f243de" name="ac41c70deb05f6fdc6cde799133f243de"></a>
plUInt8&#160;</td><td class="memItemRight" valign="bottom"><b>m_uiPresenceCollisionLayer</b> = 0</td></tr>
<tr class="memdesc:ac41c70deb05f6fdc6cde799133f243de"><td class="mdescLeft">&#160;</td><td class="mdescRight">In case a 'presence shape' is used, this defines which geometry the presence bodies collides with. <br /></td></tr>
<tr class="separator:ac41c70deb05f6fdc6cde799133f243de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a280eec200663c2304f7235efbf6cce7b" id="r_a280eec200663c2304f7235efbf6cce7b"><td class="memItemLeft" align="right" valign="top"><a id="a280eec200663c2304f7235efbf6cce7b" name="a280eec200663c2304f7235efbf6cce7b"></a>
<a class="el" href="../../df/dd9/structpl_bitflags.htm">plBitflags</a>&lt; plJoltCharacterDebugFlags &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>m_DebugFlags</b></td></tr>
<tr class="memdesc:a280eec200663c2304f7235efbf6cce7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">What aspects of the CC to visualize. <br /></td></tr>
<tr class="separator:a280eec200663c2304f7235efbf6cce7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-methods" name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a0c2635f5493661c123e2454e5a17ef93" id="r_a0c2635f5493661c123e2454e5a17ef93"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a0c2635f5493661c123e2454e5a17ef93">OnSimulationStarted</a> () override</td></tr>
<tr class="memdesc:a0c2635f5493661c123e2454e5a17ef93"><td class="mdescLeft">&#160;</td><td class="mdescRight">This method is called once for active components, at the start of the next world update, but only when the world is simulated.  <br /></td></tr>
<tr class="separator:a0c2635f5493661c123e2454e5a17ef93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5870aaf08b93b11ac982427a3ac3cc18" id="r_a5870aaf08b93b11ac982427a3ac3cc18"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5870aaf08b93b11ac982427a3ac3cc18">OnDeactivated</a> () override</td></tr>
<tr class="memdesc:a5870aaf08b93b11ac982427a3ac3cc18"><td class="mdescLeft">&#160;</td><td class="mdescRight">This method is called when the component gets deactivated.  <br /></td></tr>
<tr class="separator:a5870aaf08b93b11ac982427a3ac3cc18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c5a59966dce4fcc47d891689e5556c9" id="r_a3c5a59966dce4fcc47d891689e5556c9"><td class="memItemLeft" align="right" valign="top"><a id="a3c5a59966dce4fcc47d891689e5556c9" name="a3c5a59966dce4fcc47d891689e5556c9"></a>
PL_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>GetUpdateTimeDelta</b> () const</td></tr>
<tr class="memdesc:a3c5a59966dce4fcc47d891689e5556c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the time delta to use for updating the character. This may differ from the world delta. <br /></td></tr>
<tr class="separator:a3c5a59966dce4fcc47d891689e5556c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37fbde097a09aa1cb4f24689185a65b0" id="r_a37fbde097a09aa1cb4f24689185a65b0"><td class="memItemLeft" align="right" valign="top"><a id="a37fbde097a09aa1cb4f24689185a65b0" name="a37fbde097a09aa1cb4f24689185a65b0"></a>
PL_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>GetInverseUpdateTimeDelta</b> () const</td></tr>
<tr class="memdesc:a37fbde097a09aa1cb4f24689185a65b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the inverse of update time delta. <br /></td></tr>
<tr class="separator:a37fbde097a09aa1cb4f24689185a65b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5422c8c5cfb02131c11632cd76e988fb" id="r_a5422c8c5cfb02131c11632cd76e988fb"><td class="memItemLeft" align="right" valign="top">virtual JPH::Ref&lt; JPH::Shape &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5422c8c5cfb02131c11632cd76e988fb">MakeNextCharacterShape</a> ()=0</td></tr>
<tr class="memdesc:a5422c8c5cfb02131c11632cd76e988fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the shape that the character is supposed to use next.  <br /></td></tr>
<tr class="separator:a5422c8c5cfb02131c11632cd76e988fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24cf8bafb2459d3eeede6eaca8a8f3c8" id="r_a24cf8bafb2459d3eeede6eaca8a8f3c8"><td class="memItemLeft" align="right" valign="top">virtual float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a24cf8bafb2459d3eeede6eaca8a8f3c8">GetShapeRadius</a> () const =0</td></tr>
<tr class="memdesc:a24cf8bafb2459d3eeede6eaca8a8f3c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the radius of the shape. This never changes at runtime.  <br /></td></tr>
<tr class="separator:a24cf8bafb2459d3eeede6eaca8a8f3c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaefaef5d28939eab0309e748067c5a67" id="r_aaefaef5d28939eab0309e748067c5a67"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aaefaef5d28939eab0309e748067c5a67">UpdateCharacter</a> ()=0</td></tr>
<tr class="memdesc:aaefaef5d28939eab0309e748067c5a67"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called up to once per frame, but potentially less often, if physics updates were skipped due to high framerates.  <br /></td></tr>
<tr class="separator:aaefaef5d28939eab0309e748067c5a67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe82ea420c46ef447d68aaab9752ba4e" id="r_abe82ea420c46ef447d68aaab9752ba4e"><td class="memItemLeft" align="right" valign="top"><a id="abe82ea420c46ef447d68aaab9752ba4e" name="abe82ea420c46ef447d68aaab9752ba4e"></a>
JPH::CharacterVirtual *&#160;</td><td class="memItemRight" valign="bottom"><b>GetJoltCharacter</b> ()</td></tr>
<tr class="memdesc:abe82ea420c46ef447d68aaab9752ba4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gives access to the internally used JPH::CharacterVirtual. <br /></td></tr>
<tr class="separator:abe82ea420c46ef447d68aaab9752ba4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab6b78746bcda843a45245b5af28f48e" id="r_aab6b78746bcda843a45245b5af28f48e"><td class="memItemLeft" align="right" valign="top"><a id="aab6b78746bcda843a45245b5af28f48e" name="aab6b78746bcda843a45245b5af28f48e"></a>
const JPH::CharacterVirtual *&#160;</td><td class="memItemRight" valign="bottom"><b>GetJoltCharacter</b> () const</td></tr>
<tr class="separator:aab6b78746bcda843a45245b5af28f48e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a214e90e5f36dfa2bb4b9652d83e1745f" id="r_a214e90e5f36dfa2bb4b9652d83e1745f"><td class="memItemLeft" align="right" valign="top"><a id="a214e90e5f36dfa2bb4b9652d83e1745f" name="a214e90e5f36dfa2bb4b9652d83e1745f"></a>
<a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><b>TryChangeShape</b> (JPH::Shape *pNewShape)</td></tr>
<tr class="memdesc:a214e90e5f36dfa2bb4b9652d83e1745f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attempts to change the character shape to the new one. Fails if the new shape overlaps with surrounding geometry. <br /></td></tr>
<tr class="separator:a214e90e5f36dfa2bb4b9652d83e1745f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75fe8f3cc0047532397b30c912ed97ec" id="r_a75fe8f3cc0047532397b30c912ed97ec"><td class="memItemLeft" align="right" valign="top"><a id="a75fe8f3cc0047532397b30c912ed97ec" name="a75fe8f3cc0047532397b30c912ed97ec"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>RawMoveWithVelocity</b> (const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;vVelocity, float fMaxStairStepUp, float fMaxStepDown)</td></tr>
<tr class="memdesc:a75fe8f3cc0047532397b30c912ed97ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the character using the given velocity and timestep, making it collide with and slide along obstacles. <br /></td></tr>
<tr class="separator:a75fe8f3cc0047532397b30c912ed97ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae70c4f34aad06c8785e890a2f3e93db0" id="r_ae70c4f34aad06c8785e890a2f3e93db0"><td class="memItemLeft" align="right" valign="top"><a id="ae70c4f34aad06c8785e890a2f3e93db0" name="ae70c4f34aad06c8785e890a2f3e93db0"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>RawMoveIntoDirection</b> (const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;vDirection)</td></tr>
<tr class="memdesc:ae70c4f34aad06c8785e890a2f3e93db0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Variant of <a class="el" href="#a75fe8f3cc0047532397b30c912ed97ec" title="Moves the character using the given velocity and timestep, making it collide with and slide along obs...">RawMoveWithVelocity()</a> that takes a direction vector instead. <br /></td></tr>
<tr class="separator:ae70c4f34aad06c8785e890a2f3e93db0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87fd8442f95353abe13d2d0e7de202d3" id="r_a87fd8442f95353abe13d2d0e7de202d3"><td class="memItemLeft" align="right" valign="top"><a id="a87fd8442f95353abe13d2d0e7de202d3" name="a87fd8442f95353abe13d2d0e7de202d3"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>RawMoveToPosition</b> (const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;vTargetPosition)</td></tr>
<tr class="memdesc:a87fd8442f95353abe13d2d0e7de202d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Variant of <a class="el" href="#a75fe8f3cc0047532397b30c912ed97ec" title="Moves the character using the given velocity and timestep, making it collide with and slide along obs...">RawMoveWithVelocity()</a> that takes a target position instead. <br /></td></tr>
<tr class="separator:a87fd8442f95353abe13d2d0e7de202d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79d204c08126d6c8e6078c5672efa802" id="r_a79d204c08126d6c8e6078c5672efa802"><td class="memItemLeft" align="right" valign="top"><a id="a79d204c08126d6c8e6078c5672efa802" name="a79d204c08126d6c8e6078c5672efa802"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>TeleportToPosition</b> (const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;vGlobalFootPos)</td></tr>
<tr class="memdesc:a79d204c08126d6c8e6078c5672efa802"><td class="mdescLeft">&#160;</td><td class="mdescRight">Teleports the character to the destination position, even if it would get stuck there. <br /></td></tr>
<tr class="separator:a79d204c08126d6c8e6078c5672efa802"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef90a307046cf89d5c39a8212b4fc9e3" id="r_aef90a307046cf89d5c39a8212b4fc9e3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aef90a307046cf89d5c39a8212b4fc9e3">StickToGround</a> (float fMaxDist)</td></tr>
<tr class="memdesc:aef90a307046cf89d5c39a8212b4fc9e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the CC is slightly above the ground, this will move it down so that it touches the ground.  <br /></td></tr>
<tr class="separator:aef90a307046cf89d5c39a8212b4fc9e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca1952359f6a74704037a8e49bca7c6e" id="r_aca1952359f6a74704037a8e49bca7c6e"><td class="memItemLeft" align="right" valign="top"><a id="aca1952359f6a74704037a8e49bca7c6e" name="aca1952359f6a74704037a8e49bca7c6e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>CollectCastContacts</b> (<a class="el" href="../../d0/d4e/classpl_dynamic_array.htm">plDynamicArray</a>&lt; <a class="el" href="../../d9/dff/structpl_jolt_character_controller_component_1_1_contact_point.htm">ContactPoint</a> &gt; &amp;out_Contacts, const JPH::Shape *pShape, const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;vQueryPosition, const <a class="el" href="../../d6/dad/classpl_quat_template.htm">plQuat</a> &amp;qQueryRotation, const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;vSweepDir) const</td></tr>
<tr class="memdesc:aca1952359f6a74704037a8e49bca7c6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gathers all contact points that are found by sweeping the shape along a direction. <br /></td></tr>
<tr class="separator:aca1952359f6a74704037a8e49bca7c6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92be6183aaa4b728868de79fd3e69b9e" id="r_a92be6183aaa4b728868de79fd3e69b9e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a92be6183aaa4b728868de79fd3e69b9e">CollectContacts</a> (<a class="el" href="../../d0/d4e/classpl_dynamic_array.htm">plDynamicArray</a>&lt; <a class="el" href="../../d9/dff/structpl_jolt_character_controller_component_1_1_contact_point.htm">ContactPoint</a> &gt; &amp;out_Contacts, const JPH::Shape *pShape, const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;vQueryPosition, const <a class="el" href="../../d6/dad/classpl_quat_template.htm">plQuat</a> &amp;qQueryRotation, float fCollisionTolerance) const</td></tr>
<tr class="memdesc:a92be6183aaa4b728868de79fd3e69b9e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gathers all contact points of the shape at the target position.  <br /></td></tr>
<tr class="separator:a92be6183aaa4b728868de79fd3e69b9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4435101fefdefbe1c1e4b882292590c" id="r_ad4435101fefdefbe1c1e4b882292590c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad4435101fefdefbe1c1e4b882292590c">GetContactVelocityAndPushAway</a> (const <a class="el" href="../../d9/dff/structpl_jolt_character_controller_component_1_1_contact_point.htm">ContactPoint</a> &amp;contact, float fPushForce)</td></tr>
<tr class="memdesc:ad4435101fefdefbe1c1e4b882292590c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Detects the velocity at the contact point. If it is a dynamic body, a force pushing it away is applied.  <br /></td></tr>
<tr class="separator:ad4435101fefdefbe1c1e4b882292590c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63ee8d5d7238d34ede06d3f2d9dbf7a0" id="r_a63ee8d5d7238d34ede06d3f2d9dbf7a0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a63ee8d5d7238d34ede06d3f2d9dbf7a0">SpawnContactInteraction</a> (const <a class="el" href="../../d9/dff/structpl_jolt_character_controller_component_1_1_contact_point.htm">ContactPoint</a> &amp;contact, const <a class="el" href="../../d0/dc8/classpl_hashed_string.htm">plHashedString</a> &amp;sSurfaceInteraction, <a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plSurfaceResourceHandle</a> hFallbackSurface, const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;vInteractionNormal=<a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a>(0, 0, 1))</td></tr>
<tr class="memdesc:a63ee8d5d7238d34ede06d3f2d9dbf7a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Spawns a surface interaction prefab at the given contact point.  <br /></td></tr>
<tr class="separator:a63ee8d5d7238d34ede06d3f2d9dbf7a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc2aeeaf037b271936d07b1d026eb129" id="r_adc2aeeaf037b271936d07b1d026eb129"><td class="memItemLeft" align="right" valign="top"><a id="adc2aeeaf037b271936d07b1d026eb129" name="adc2aeeaf037b271936d07b1d026eb129"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>VisualizeContact</b> (const <a class="el" href="../../d9/dff/structpl_jolt_character_controller_component_1_1_contact_point.htm">ContactPoint</a> &amp;contact, const <a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a> &amp;color) const</td></tr>
<tr class="memdesc:adc2aeeaf037b271936d07b1d026eb129"><td class="mdescLeft">&#160;</td><td class="mdescRight">Debug draws the contact point. <br /></td></tr>
<tr class="separator:adc2aeeaf037b271936d07b1d026eb129"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4d8d52f9779287b717507243582df7c" id="r_ad4d8d52f9779287b717507243582df7c"><td class="memItemLeft" align="right" valign="top"><a id="ad4d8d52f9779287b717507243582df7c" name="ad4d8d52f9779287b717507243582df7c"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>VisualizeContacts</b> (const <a class="el" href="../../d0/d4e/classpl_dynamic_array.htm">plDynamicArray</a>&lt; <a class="el" href="../../d9/dff/structpl_jolt_character_controller_component_1_1_contact_point.htm">ContactPoint</a> &gt; &amp;contacts, const <a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a> &amp;color) const</td></tr>
<tr class="memdesc:ad4d8d52f9779287b717507243582df7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Debug draws all the contact points. <br /></td></tr>
<tr class="separator:ad4d8d52f9779287b717507243582df7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classpl_component"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_methods_classpl_component')"><img src="../../closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="../../d1/d81/classpl_component.htm">plComponent</a></td></tr>
<tr class="memitem:a87964bb877271bf63fd2f731f60bf938 inherit pro_methods_classpl_component" id="r_a87964bb877271bf63fd2f731f60bf938"><td class="memItemLeft" align="right" valign="top">
&#160;</td><td class="memItemRight" valign="bottom"><b>plComponent</b> ()</td></tr>
<tr class="memdesc:a87964bb877271bf63fd2f731f60bf938 inherit pro_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Keep the constructor private or protected in derived classes, so it cannot be called manually. <br /></td></tr>
<tr class="separator:a87964bb877271bf63fd2f731f60bf938 inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1a1c29b47c514aa7935766621eadd89 inherit pro_methods_classpl_component" id="r_ab1a1c29b47c514aa7935766621eadd89"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsDynamic</b> () const</td></tr>
<tr class="memdesc:ab1a1c29b47c514aa7935766621eadd89 inherit pro_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether this component is dynamic and thus can only be attached to dynamic game objects. <br /></td></tr>
<tr class="separator:ab1a1c29b47c514aa7935766621eadd89 inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f27b35a04bc477bb323dcdf7241e5cf inherit pro_methods_classpl_component" id="r_a5f27b35a04bc477bb323dcdf7241e5cf"><td class="memItemLeft" align="right" valign="top">
virtual plWorldModuleTypeId&#160;</td><td class="memItemRight" valign="bottom"><b>GetTypeId</b> () const =0</td></tr>
<tr class="separator:a5f27b35a04bc477bb323dcdf7241e5cf inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afccee654244ac9b963753f0a59253988 inherit pro_methods_classpl_component" id="r_afccee654244ac9b963753f0a59253988"><td class="memItemLeft" align="right" valign="top">
virtual plComponentMode::Enum&#160;</td><td class="memItemRight" valign="bottom"><b>GetMode</b> () const =0</td></tr>
<tr class="separator:afccee654244ac9b963753f0a59253988 inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9dbf922683e28fab0c4c18cac736e7fc inherit pro_methods_classpl_component" id="r_a9dbf922683e28fab0c4c18cac736e7fc"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d81/classpl_component.htm#a9dbf922683e28fab0c4c18cac736e7fc">Initialize</a> ()</td></tr>
<tr class="memdesc:a9dbf922683e28fab0c4c18cac736e7fc inherit pro_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Can be overridden for basic initialization that depends on a valid hierarchy and position.  <br /></td></tr>
<tr class="separator:a9dbf922683e28fab0c4c18cac736e7fc inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a264bf60654aa3ca836e2040d639308a4 inherit pro_methods_classpl_component" id="r_a264bf60654aa3ca836e2040d639308a4"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d81/classpl_component.htm#a264bf60654aa3ca836e2040d639308a4">Deinitialize</a> ()</td></tr>
<tr class="memdesc:a264bf60654aa3ca836e2040d639308a4 inherit pro_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">This method is called before the component is destroyed. A derived type can override this method to do common de-initialization work.  <br /></td></tr>
<tr class="separator:a264bf60654aa3ca836e2040d639308a4 inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd1bb5b4ed2d6e98a5e9aed2bcba7b98 inherit pro_methods_classpl_component" id="r_acd1bb5b4ed2d6e98a5e9aed2bcba7b98"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d81/classpl_component.htm#acd1bb5b4ed2d6e98a5e9aed2bcba7b98">OnActivated</a> ()</td></tr>
<tr class="memdesc:acd1bb5b4ed2d6e98a5e9aed2bcba7b98 inherit pro_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">This method is called when the component gets activated.  <br /></td></tr>
<tr class="separator:acd1bb5b4ed2d6e98a5e9aed2bcba7b98 inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad56bdbbefadfd6bde373e3a7920feb18 inherit pro_methods_classpl_component" id="r_ad56bdbbefadfd6bde373e3a7920feb18"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>EnableUnhandledMessageHandler</b> (bool enable)</td></tr>
<tr class="memdesc:ad56bdbbefadfd6bde373e3a7920feb18 inherit pro_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">By default disabled. Enable to have <a class="el" href="../../d1/d81/classpl_component.htm#a206f18497232d95227119c001e86d7a6" title="When EnableUnhandledMessageHandler() was activated, this is called for all messages for which there i...">OnUnhandledMessage()</a> called for every unhandled message. <br /></td></tr>
<tr class="separator:ad56bdbbefadfd6bde373e3a7920feb18 inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a206f18497232d95227119c001e86d7a6 inherit pro_methods_classpl_component" id="r_a206f18497232d95227119c001e86d7a6"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d81/classpl_component.htm#a206f18497232d95227119c001e86d7a6">OnUnhandledMessage</a> (<a class="el" href="../../d0/dde/classpl_message.htm">plMessage</a> &amp;msg, bool bWasPostedMsg)</td></tr>
<tr class="memdesc:a206f18497232d95227119c001e86d7a6 inherit pro_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">When <a class="el" href="../../d1/d81/classpl_component.htm#ad56bdbbefadfd6bde373e3a7920feb18" title="By default disabled. Enable to have OnUnhandledMessage() called for every unhandled message.">EnableUnhandledMessageHandler()</a> was activated, this is called for all messages for which there is no dedicated message handler.  <br /></td></tr>
<tr class="separator:a206f18497232d95227119c001e86d7a6 inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b8104e109e76ac2a4042ef598db59e7 inherit pro_methods_classpl_component" id="r_a2b8104e109e76ac2a4042ef598db59e7"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d81/classpl_component.htm#a2b8104e109e76ac2a4042ef598db59e7">OnUnhandledMessage</a> (<a class="el" href="../../d0/dde/classpl_message.htm">plMessage</a> &amp;msg, bool bWasPostedMsg) const</td></tr>
<tr class="memdesc:a2b8104e109e76ac2a4042ef598db59e7 inherit pro_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">When <a class="el" href="../../d1/d81/classpl_component.htm#ad56bdbbefadfd6bde373e3a7920feb18" title="By default disabled. Enable to have OnUnhandledMessage() called for every unhandled message.">EnableUnhandledMessageHandler()</a> was activated, this is called for all messages for which there is no dedicated message handler.  <br /></td></tr>
<tr class="separator:a2b8104e109e76ac2a4042ef598db59e7 inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6b8f74ace1a1f0f20e016d0ad26c9ee inherit pro_methods_classpl_component" id="r_ad6b8f74ace1a1f0f20e016d0ad26c9ee"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsInitialized</b> () const</td></tr>
<tr class="separator:ad6b8f74ace1a1f0f20e016d0ad26c9ee inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89723afe5caad6e5eebe586ff70b394a inherit pro_methods_classpl_component" id="r_a89723afe5caad6e5eebe586ff70b394a"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsInitializing</b> () const</td></tr>
<tr class="separator:a89723afe5caad6e5eebe586ff70b394a inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ae1b81425640d8a281da5831e145334 inherit pro_methods_classpl_component" id="r_a4ae1b81425640d8a281da5831e145334"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsSimulationStarted</b> () const</td></tr>
<tr class="separator:a4ae1b81425640d8a281da5831e145334 inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="friends" name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a285577fe21981cc269b324cdfcb4b691" id="r_a285577fe21981cc269b324cdfcb4b691"><td class="memItemLeft" align="right" valign="top"><a id="a285577fe21981cc269b324cdfcb4b691" name="a285577fe21981cc269b324cdfcb4b691"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>plJoltWorldModule</b></td></tr>
<tr class="separator:a285577fe21981cc269b324cdfcb4b691"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="inherited" name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_static_methods_classpl_no_base"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_static_methods_classpl_no_base')"><img src="../../closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="../../de/dc4/classpl_no_base.htm">plNoBase</a></td></tr>
<tr class="memitem:af5fef4e4ea9a9dc1842d1dd3812e5d7f inherit pub_static_methods_classpl_no_base" id="r_af5fef4e4ea9a9dc1842d1dd3812e5d7f"><td class="memItemLeft" align="right" valign="top">
static const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetStaticRTTI</b> ()</td></tr>
<tr class="separator:af5fef4e4ea9a9dc1842d1dd3812e5d7f inherit pub_static_methods_classpl_no_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_classpl_component"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_attribs_classpl_component')"><img src="../../closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="../../d1/d81/classpl_component.htm">plComponent</a></td></tr>
<tr class="memitem:a007b5d682ee89be0b136dd97b90c557d inherit pro_attribs_classpl_component" id="r_a007b5d682ee89be0b136dd97b90c557d"><td class="memItemLeft" align="right" valign="top">
const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>m_pMessageDispatchType</b> = nullptr</td></tr>
<tr class="memdesc:a007b5d682ee89be0b136dd97b90c557d inherit pro_attribs_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Messages will be dispatched to this type. Default is what GetDynamicRTTI() returns, can be redirected if necessary. <br /></td></tr>
<tr class="separator:a007b5d682ee89be0b136dd97b90c557d inherit pro_attribs_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Base class for character controllers (CC). </p>
<p>This class provides general functionality for building a character controller. It tries not to implement things that are game specific. It is assumed that most games implement their own character controller to be able to build very specific behavior. The <a class="el" href="../../da/d0f/classpl_jolt_default_character_component.htm" title="An example character controller (CC) implementation build upon plJoltCharacterControllerComponent.">plJoltDefaultCharacterComponent</a> is an example implementation that shows how this can be achieved on top of this class. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a3d614e1cf8606559bd81f5ae9b760c10" name="a3d614e1cf8606559bd81f5ae9b760c10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d614e1cf8606559bd81f5ae9b760c10">&#9670;&#160;</a></span>ClearObjectToIgnore()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void plJoltCharacterControllerComponent::ClearObjectToIgnore </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section see"><dt>See also</dt><dd><a class="el" href="#aa00cfac05079dafc3e850c3136a62e10" title="The CC will move through the given physics body.">SetObjectToIgnore()</a> </dd></dl>

</div>
</div>
<a id="a92be6183aaa4b728868de79fd3e69b9e" name="a92be6183aaa4b728868de79fd3e69b9e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92be6183aaa4b728868de79fd3e69b9e">&#9670;&#160;</a></span>CollectContacts()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJoltCharacterControllerComponent::CollectContacts </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4e/classpl_dynamic_array.htm">plDynamicArray</a>&lt; <a class="el" href="../../d9/dff/structpl_jolt_character_controller_component_1_1_contact_point.htm">ContactPoint</a> &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>out_Contacts</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const JPH::Shape *</td>          <td class="paramname"><span class="paramname"><em>pShape</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>vQueryPosition</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d6/dad/classpl_quat_template.htm">plQuat</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>qQueryRotation</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float</td>          <td class="paramname"><span class="paramname"><em>fCollisionTolerance</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gathers all contact points of the shape at the target position. </p>
<p>Use fCollisionTolerance &gt; 0 (e.g. 0.02f) to find contacts with walls/ground that the shape is touching but not penetrating. </p>

</div>
</div>
<a id="a264e1b54789204dc500a8fd7c718aeec" name="a264e1b54789204dc500a8fd7c718aeec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a264e1b54789204dc500a8fd7c718aeec">&#9670;&#160;</a></span>DeserializeComponent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJoltCharacterControllerComponent::DeserializeComponent </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d3/d63/classpl_world_reader.htm">plWorldReader</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>inout_stream</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this to load the current state of the component from the given stream. </p>
<p>The active state will be automatically serialized. The 'initialized' state is not serialized, all components will be initialized after creation, even if they were already in an initialized state when they were serialized. </p>

<p>Reimplemented from <a class="el" href="../../db/dab/classpl_character_controller_component.htm#a14a8db3fa34a3e0b3c8622136277f688">plCharacterControllerComponent</a>.</p>

<p>Reimplemented in <a class="el" href="../../da/d0f/classpl_jolt_default_character_component.htm#a04c9f40a66c878624597bf7715d63424">plJoltDefaultCharacterComponent</a>.</p>

</div>
</div>
<a id="ad4435101fefdefbe1c1e4b882292590c" name="ad4435101fefdefbe1c1e4b882292590c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4435101fefdefbe1c1e4b882292590c">&#9670;&#160;</a></span>GetContactVelocityAndPushAway()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> plJoltCharacterControllerComponent::GetContactVelocityAndPushAway </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d9/dff/structpl_jolt_character_controller_component_1_1_contact_point.htm">ContactPoint</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>contact</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float</td>          <td class="paramname"><span class="paramname"><em>fPushForce</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Detects the velocity at the contact point. If it is a dynamic body, a force pushing it away is applied. </p>
<p>This is mainly used to get the velocity of the kinematic object that a character is standing on. It can then be incorporated into the movement, such that the character rides along. If the body at the contact point is dynamic, optionally a force can be applied, simulating that the character's weight pushes down on it. </p>

</div>
</div>
<a id="a24cf8bafb2459d3eeede6eaca8a8f3c8" name="a24cf8bafb2459d3eeede6eaca8a8f3c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a24cf8bafb2459d3eeede6eaca8a8f3c8">&#9670;&#160;</a></span>GetShapeRadius()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual float plJoltCharacterControllerComponent::GetShapeRadius </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the radius of the shape. This never changes at runtime. </p>

<p>Implemented in <a class="el" href="../../da/d0f/classpl_jolt_default_character_component.htm#ad97dc8b2b0576e4ebeac0e6111286cad">plJoltDefaultCharacterComponent</a>.</p>

</div>
</div>
<a id="a8fafd1240522b955b97dc2fde230966c" name="a8fafd1240522b955b97dc2fde230966c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8fafd1240522b955b97dc2fde230966c">&#9670;&#160;</a></span>IsCrouching()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool plJoltCharacterControllerComponent::IsCrouching </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks whether the CC is currently in the crouch state. </p>

<p>Implements <a class="el" href="../../db/dab/classpl_character_controller_component.htm#a16de2aa04f7f386959cf65b941f92c1e">plCharacterControllerComponent</a>.</p>

<p>Reimplemented in <a class="el" href="../../da/d0f/classpl_jolt_default_character_component.htm#a1a4071b29529b525bf8398c4b54ca6cd">plJoltDefaultCharacterComponent</a>.</p>

</div>
</div>
<a id="ae4ce99acfcfaa84e67e306f186fb57fc" name="ae4ce99acfcfaa84e67e306f186fb57fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae4ce99acfcfaa84e67e306f186fb57fc">&#9670;&#160;</a></span>IsDestinationUnobstructed()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool plJoltCharacterControllerComponent::IsDestinationUnobstructed </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>vGlobalFootPos</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">float</td>          <td class="paramname"><span class="paramname"><em>fCharacterHeight</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks whether the CC can be teleported to the target position without getting stuck. </p>
<p>This can be used to check before using <a class="el" href="#a4dc87ff0827ed4e1fb76c519b8f80d19" title="Teleports the CC to the desired global position. Ignores obstacles on the path.">TeleportCharacter()</a>. It can also be used to check whether a character can stand up from a crouching position, by passing a non-zero character height.</p>
<p>If a character height of 0 is passed in, the current height is used. </p>

<p>Implements <a class="el" href="../../db/dab/classpl_character_controller_component.htm#aa8a099c2ed0bd957bc6f701d61696684">plCharacterControllerComponent</a>.</p>

</div>
</div>
<a id="a8d5cb824b1998b9bc8ed1c15977412b7" name="a8d5cb824b1998b9bc8ed1c15977412b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d5cb824b1998b9bc8ed1c15977412b7">&#9670;&#160;</a></span>IsTouchingGround()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool plJoltCharacterControllerComponent::IsTouchingGround </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks whether the CC is currently touching the ground. </p>

<p>Implements <a class="el" href="../../db/dab/classpl_character_controller_component.htm#a6c63857121604a685ff28b2d11e076a8">plCharacterControllerComponent</a>.</p>

<p>Reimplemented in <a class="el" href="../../da/d0f/classpl_jolt_default_character_component.htm#a96af09869b1ce5e58efa734d65a7ca73">plJoltDefaultCharacterComponent</a>.</p>

</div>
</div>
<a id="a5422c8c5cfb02131c11632cd76e988fb" name="a5422c8c5cfb02131c11632cd76e988fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5422c8c5cfb02131c11632cd76e988fb">&#9670;&#160;</a></span>MakeNextCharacterShape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual JPH::Ref&lt; JPH::Shape &gt; plJoltCharacterControllerComponent::MakeNextCharacterShape </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the shape that the character is supposed to use next. </p>
<p>The desired target state (radius, height, etc) has to be stored somewhere else (e.g. as members in derived classes). The shape can be cached. The shape may not get applied to the character, in case this is used by things like TryResize and the next shape is determined to not fit. </p>

<p>Implemented in <a class="el" href="../../da/d0f/classpl_jolt_default_character_component.htm#aa6c734fd3de34dcda32b85a692b76de1">plJoltDefaultCharacterComponent</a>.</p>

</div>
</div>
<a id="abd1a06190baca6803f03b50a46ed1753" name="abd1a06190baca6803f03b50a46ed1753"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd1a06190baca6803f03b50a46ed1753">&#9670;&#160;</a></span>MoveCharacter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plJoltCharacterControllerComponent::MoveCharacter </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d5/daa/structpl_msg_move_character_controller.htm">plMsgMoveCharacterController</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>msg</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Instructs the CC to move in certain directions. An implementation can queue the request for later processing. </p>
<p>It can also add further functionality, such as adding gravity, stair stepping, etc. </p>

<p>Implements <a class="el" href="../../db/dab/classpl_character_controller_component.htm#a9f473c6c5d3f430608e107f9b9ad0faa">plCharacterControllerComponent</a>.</p>

</div>
</div>
<a id="a5870aaf08b93b11ac982427a3ac3cc18" name="a5870aaf08b93b11ac982427a3ac3cc18"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5870aaf08b93b11ac982427a3ac3cc18">&#9670;&#160;</a></span>OnDeactivated()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJoltCharacterControllerComponent::OnDeactivated </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This method is called when the component gets deactivated. </p>
<p>Upon destruction, a component that is active first gets deactivated. Therefore <a class="el" href="#a5870aaf08b93b11ac982427a3ac3cc18" title="This method is called when the component gets deactivated.">OnDeactivated()</a> should be used for typical game code cleanup.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d1/d81/classpl_component.htm#acd1bb5b4ed2d6e98a5e9aed2bcba7b98" title="This method is called when the component gets activated.">OnActivated()</a>, <a class="el" href="#a5870aaf08b93b11ac982427a3ac3cc18" title="This method is called when the component gets deactivated.">OnDeactivated()</a>, <a class="el" href="../../d1/d81/classpl_component.htm#a9dbf922683e28fab0c4c18cac736e7fc" title="Can be overridden for basic initialization that depends on a valid hierarchy and position.">Initialize()</a>, <a class="el" href="../../d1/d81/classpl_component.htm#a264bf60654aa3ca836e2040d639308a4" title="This method is called before the component is destroyed. A derived type can override this method to d...">Deinitialize()</a>, <a class="el" href="#a0c2635f5493661c123e2454e5a17ef93" title="This method is called once for active components, at the start of the next world update,...">OnSimulationStarted()</a> </dd></dl>

<p>Reimplemented from <a class="el" href="../../d1/d81/classpl_component.htm#a1d53d5dc2dd73dc637a7c73d0fbc7ed0">plComponent</a>.</p>

<p>Reimplemented in <a class="el" href="../../da/d0f/classpl_jolt_default_character_component.htm#a26ccea0e710ddca2212f7178dd198b50">plJoltDefaultCharacterComponent</a>.</p>

</div>
</div>
<a id="a0c2635f5493661c123e2454e5a17ef93" name="a0c2635f5493661c123e2454e5a17ef93"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c2635f5493661c123e2454e5a17ef93">&#9670;&#160;</a></span>OnSimulationStarted()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJoltCharacterControllerComponent::OnSimulationStarted </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This method is called once for active components, at the start of the next world update, but only when the world is simulated. </p>
<p>This is the one preferred method to setup typical game logic. In a pure game environment there is no practical difference between <a class="el" href="../../d1/d81/classpl_component.htm#acd1bb5b4ed2d6e98a5e9aed2bcba7b98" title="This method is called when the component gets activated.">OnActivated()</a> and <a class="el" href="#a0c2635f5493661c123e2454e5a17ef93" title="This method is called once for active components, at the start of the next world update,...">OnSimulationStarted()</a>, as <a class="el" href="#a0c2635f5493661c123e2454e5a17ef93" title="This method is called once for active components, at the start of the next world update,...">OnSimulationStarted()</a> will be called right after <a class="el" href="../../d1/d81/classpl_component.htm#acd1bb5b4ed2d6e98a5e9aed2bcba7b98" title="This method is called when the component gets activated.">OnActivated()</a>.</p>
<p>However, when a scene is open inside the editor, there is an important difference: <a class="el" href="../../d1/d81/classpl_component.htm#acd1bb5b4ed2d6e98a5e9aed2bcba7b98" title="This method is called when the component gets activated.">OnActivated()</a> is called once the component was created. <a class="el" href="#a0c2635f5493661c123e2454e5a17ef93" title="This method is called once for active components, at the start of the next world update,...">OnSimulationStarted()</a> is only called once the game simulation is started inside the editor. As an example, if a component starts a sound in <a class="el" href="../../d1/d81/classpl_component.htm#acd1bb5b4ed2d6e98a5e9aed2bcba7b98" title="This method is called when the component gets activated.">OnActivated()</a>, that sound will play right after the scene has been loaded into the editor. If instead the sound gets started in <a class="el" href="#a0c2635f5493661c123e2454e5a17ef93" title="This method is called once for active components, at the start of the next world update,...">OnSimulationStarted()</a>, it will only play once the user starts the game mode inside the editor.</p>
<p>Additionally, <a class="el" href="#a0c2635f5493661c123e2454e5a17ef93" title="This method is called once for active components, at the start of the next world update,...">OnSimulationStarted()</a> is only ever executed once on a component, even if the <a class="el" href="../../d2/d12/classpl_world.htm" title="A world encapsulates a scene graph of game objects and various component managers and their component...">plWorld</a> pauses and resumes world simulation multiple times. Thus components that should only execute a thing exactly once, will work correctly. In contrast <a class="el" href="../../d1/d81/classpl_component.htm#acd1bb5b4ed2d6e98a5e9aed2bcba7b98" title="This method is called when the component gets activated.">OnActivated()</a> and <a class="el" href="#a5870aaf08b93b11ac982427a3ac3cc18" title="This method is called when the component gets deactivated.">OnDeactivated()</a> will be executed every time the component's active state is toggled, which could re-execute the same behavior multiple times.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d1/d81/classpl_component.htm#acd1bb5b4ed2d6e98a5e9aed2bcba7b98" title="This method is called when the component gets activated.">OnActivated()</a>, <a class="el" href="#a5870aaf08b93b11ac982427a3ac3cc18" title="This method is called when the component gets deactivated.">OnDeactivated()</a>, <a class="el" href="../../d1/d81/classpl_component.htm#a9dbf922683e28fab0c4c18cac736e7fc" title="Can be overridden for basic initialization that depends on a valid hierarchy and position.">Initialize()</a>, <a class="el" href="../../d1/d81/classpl_component.htm#a264bf60654aa3ca836e2040d639308a4" title="This method is called before the component is destroyed. A derived type can override this method to d...">Deinitialize()</a>, <a class="el" href="#a0c2635f5493661c123e2454e5a17ef93" title="This method is called once for active components, at the start of the next world update,...">OnSimulationStarted()</a> </dd></dl>

<p>Reimplemented from <a class="el" href="../../d1/d81/classpl_component.htm#a3d4a93e5a11265d7694238598b274959">plComponent</a>.</p>

<p>Reimplemented in <a class="el" href="../../da/d0f/classpl_jolt_default_character_component.htm#a7ca3f2cceddba11ace8e0822ac18cb09">plJoltDefaultCharacterComponent</a>.</p>

</div>
</div>
<a id="a3fddcc81cc87008a489af4897ba0eef1" name="a3fddcc81cc87008a489af4897ba0eef1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3fddcc81cc87008a489af4897ba0eef1">&#9670;&#160;</a></span>RawMove()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plJoltCharacterControllerComponent::RawMove </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>vMoveDeltaGlobal</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Attempts to move the character into the given direction. </p>
<p>Implements the specific constraints, such as colliding with geometry and sliding along walls. Should NOT add further functionality, such as gravity. This function applies the result immediately and moves the owner object to the final location. </p>

<p>Implements <a class="el" href="../../db/dab/classpl_character_controller_component.htm#aa0b61c8735f28c5ffa5b0b293692bd73">plCharacterControllerComponent</a>.</p>

</div>
</div>
<a id="aa43aedd3d3201c881ac835f0c5d4f655" name="aa43aedd3d3201c881ac835f0c5d4f655"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa43aedd3d3201c881ac835f0c5d4f655">&#9670;&#160;</a></span>SerializeComponent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJoltCharacterControllerComponent::SerializeComponent </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../dc/dd6/classpl_world_writer.htm">plWorldWriter</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>inout_stream</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this to save the current state of the component to the given stream. </p>

<p>Reimplemented from <a class="el" href="../../db/dab/classpl_character_controller_component.htm#a3ba5e5ea49e4ea738aa8c5c012c80007">plCharacterControllerComponent</a>.</p>

<p>Reimplemented in <a class="el" href="../../da/d0f/classpl_jolt_default_character_component.htm#ad33615c8ece3afc757d5be3dd4e9c15b">plJoltDefaultCharacterComponent</a>.</p>

</div>
</div>
<a id="aa00cfac05079dafc3e850c3136a62e10" name="aa00cfac05079dafc3e850c3136a62e10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa00cfac05079dafc3e850c3136a62e10">&#9670;&#160;</a></span>SetObjectToIgnore()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void plJoltCharacterControllerComponent::SetObjectToIgnore </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiObjectFilterID</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The CC will move through the given physics body. </p>
<p>Currently only one such object can be set. This is mainly used to ignore an object that the player is currently carrying, so that there are no unintended collisions.</p>
<p>Call <a class="el" href="#a3d614e1cf8606559bd81f5ae9b760c10">ClearObjectToIgnore()</a> to re-enable collisions. </p>

</div>
</div>
<a id="a63ee8d5d7238d34ede06d3f2d9dbf7a0" name="a63ee8d5d7238d34ede06d3f2d9dbf7a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63ee8d5d7238d34ede06d3f2d9dbf7a0">&#9670;&#160;</a></span>SpawnContactInteraction()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJoltCharacterControllerComponent::SpawnContactInteraction </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d9/dff/structpl_jolt_character_controller_component_1_1_contact_point.htm">ContactPoint</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>contact</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d0/dc8/classpl_hashed_string.htm">plHashedString</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>sSurfaceInteraction</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plSurfaceResourceHandle</a></td>          <td class="paramname"><span class="paramname"><em>hFallbackSurface</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>vInteractionNormal</em></span><span class="paramdefsep"> = </span><span class="paramdefval"><a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a>(0,&#160;0,&#160;1)</span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Spawns a surface interaction prefab at the given contact point. </p>
<p>hFallbackSurface is used, if no other surface could be determined from the contact point. </p>

</div>
</div>
<a id="aef90a307046cf89d5c39a8212b4fc9e3" name="aef90a307046cf89d5c39a8212b4fc9e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef90a307046cf89d5c39a8212b4fc9e3">&#9670;&#160;</a></span>StickToGround()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool plJoltCharacterControllerComponent::StickToGround </td>
          <td>(</td>
          <td class="paramtype">float</td>          <td class="paramname"><span class="paramname"><em>fMaxDist</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>If the CC is slightly above the ground, this will move it down so that it touches the ground. </p>
<p>If within the max distance no ground contact is found, the function does nothing and returns false. </p>

</div>
</div>
<a id="a4dc87ff0827ed4e1fb76c519b8f80d19" name="a4dc87ff0827ed4e1fb76c519b8f80d19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4dc87ff0827ed4e1fb76c519b8f80d19">&#9670;&#160;</a></span>TeleportCharacter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plJoltCharacterControllerComponent::TeleportCharacter </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>vGlobalFootPos</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Teleports the CC to the desired global position. Ignores obstacles on the path. </p>
<p>Careful, the CC may get stuck in the new location, if it is inside static geometry. If it teleports into dynamic geometry, the result may also be undesirable. </p>

<p>Implements <a class="el" href="../../db/dab/classpl_character_controller_component.htm#ac322f02a99b355398cc26ffc9fd3a640">plCharacterControllerComponent</a>.</p>

<p>Reimplemented in <a class="el" href="../../da/d0f/classpl_jolt_default_character_component.htm#a36d9fc741dca1eb2c33cac8bf8fdaef1">plJoltDefaultCharacterComponent</a>.</p>

</div>
</div>
<a id="aaefaef5d28939eab0309e748067c5a67" name="aaefaef5d28939eab0309e748067c5a67"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaefaef5d28939eab0309e748067c5a67">&#9670;&#160;</a></span>UpdateCharacter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plJoltCharacterControllerComponent::UpdateCharacter </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called up to once per frame, but potentially less often, if physics updates were skipped due to high framerates. </p>
<p>All shape modifications and moves should only be executed during this step. The given deltaTime should be used, rather than the world's time diff. </p>

<p>Implemented in <a class="el" href="../../da/d0f/classpl_jolt_default_character_component.htm#af65a5e8c03f818586b948ac311f1aac7">plJoltDefaultCharacterComponent</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a80333a26d615232543fea0bbcb9cb70e" name="a80333a26d615232543fea0bbcb9cb70e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a80333a26d615232543fea0bbcb9cb70e">&#9670;&#160;</a></span>m_uiCollisionLayer</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">plUInt8 plJoltCharacterControllerComponent::m_uiCollisionLayer = 0</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The collision layer determines with which other actors this actor collides. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d9/dbc/classpl_jolt_actor_component.htm" title="Base class for all Jolt actors.">plJoltActorComponent</a> </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/EnginePlugins/JoltPlugin/Character/<a class="el" href="../../d0/d30/_jolt_character_controller_component_8h_source.htm">JoltCharacterControllerComponent.h</a></li>
<li>Code/EnginePlugins/JoltPlugin/Character/Implementation/<b>JoltCharacterControllerComponent.cpp</b></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm">plJoltCharacterControllerComponent</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
