<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<!-- BEGIN opengraph metadata -->
<meta property="og:title" content="Doxygen Awesome" />
<meta property="og:image" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta property="og:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<meta property="og:url" content="https://jothepro.github.io/doxygen-awesome-css/" />
<!-- END opengraph metadata -->
<!-- BEGIN twitter metadata -->
<meta name="twitter:image:src" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta name="twitter:title" content="Doxygen Awesome" />
<meta name="twitter:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<!-- END twitter metadata -->
<title>Plasma Engine: plHashedString Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link rel="icon" type="image/svg+xml" href="logo.drawio.svg"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-paragraph-link.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-tabs.js"></script>
<script type="text/javascript" src="../../toggle-alternative-theme.js"></script>
<script type="text/javascript">
    DoxygenAwesomeFragmentCopyButton.init()
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeParagraphLink.init()
    DoxygenAwesomeInteractiveToc.init()
    DoxygenAwesomeTabs.init()
</script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Plasma Engine
   &#160;<span id="projectnumber">2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d0/dc8/classpl_hashed_string.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="../../df/d54/classpl_hashed_string-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plHashedString Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p>This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whether two strings are identical.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d9/dc9/_hashed_string_8h_source.htm">HashedString.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dda/structpl_hashed_string_1_1_hashed_data.htm">HashedData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:af75aebec274e5e13a62324024740bcd9" id="r_af75aebec274e5e13a62324024740bcd9"><td class="memItemLeft" align="right" valign="top"><a id="af75aebec274e5e13a62324024740bcd9" name="af75aebec274e5e13a62324024740bcd9"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>StringStorage</b> = <a class="el" href="../../d9/d50/classpl_map.htm">plMap</a>&lt;plUInt64, <a class="el" href="../../d5/dda/structpl_hashed_string_1_1_hashed_data.htm">HashedData</a>, <a class="el" href="../../df/dc9/structpl_compare_helper.htm">plCompareHelper</a>&lt;plUInt64&gt;, <a class="el" href="../../d3/d9e/structpl_statics_allocator_wrapper.htm">plStaticsAllocatorWrapper</a>&gt;</td></tr>
<tr class="separator:af75aebec274e5e13a62324024740bcd9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acac2a06985ee8368fc5d4bdb58b1bb88" id="r_acac2a06985ee8368fc5d4bdb58b1bb88"><td class="memItemLeft" align="right" valign="top"><a id="acac2a06985ee8368fc5d4bdb58b1bb88" name="acac2a06985ee8368fc5d4bdb58b1bb88"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>HashedType</b> = <a class="el" href="../../d3/d91/structpl_map_base_iterator_base.htm">StringStorage::Iterator</a></td></tr>
<tr class="separator:acac2a06985ee8368fc5d4bdb58b1bb88"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a5e0b9e48e148bcbae9cb4ec29f729391" id="r_a5e0b9e48e148bcbae9cb4ec29f729391"><td class="memItemLeft" align="right" valign="top"><a id="a5e0b9e48e148bcbae9cb4ec29f729391" name="a5e0b9e48e148bcbae9cb4ec29f729391"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>PL_DECLARE_MEM_RELOCATABLE_TYPE</b> ()</td></tr>
<tr class="separator:a5e0b9e48e148bcbae9cb4ec29f729391"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61b486c577c2f1b7b0bb138b70365c02" id="r_a61b486c577c2f1b7b0bb138b70365c02"><td class="memItemLeft" align="right" valign="top"><a id="a61b486c577c2f1b7b0bb138b70365c02" name="a61b486c577c2f1b7b0bb138b70365c02"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plHashedString</b> ()</td></tr>
<tr class="memdesc:a61b486c577c2f1b7b0bb138b70365c02"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes this string to the empty string. <br /></td></tr>
<tr class="separator:a61b486c577c2f1b7b0bb138b70365c02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f6131c5c997c266c0dbcbfd6c3bc9a0" id="r_a8f6131c5c997c266c0dbcbfd6c3bc9a0"><td class="memItemLeft" align="right" valign="top"><a id="a8f6131c5c997c266c0dbcbfd6c3bc9a0" name="a8f6131c5c997c266c0dbcbfd6c3bc9a0"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plHashedString</b> (const <a class="el" href="../../d0/dc8/classpl_hashed_string.htm">plHashedString</a> &amp;rhs)</td></tr>
<tr class="memdesc:a8f6131c5c997c266c0dbcbfd6c3bc9a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given <a class="el" href="../../d0/dc8/classpl_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">plHashedString</a>. <br /></td></tr>
<tr class="separator:a8f6131c5c997c266c0dbcbfd6c3bc9a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af99eaf7e68fded15faf9cda2fdbf2cb8" id="r_af99eaf7e68fded15faf9cda2fdbf2cb8"><td class="memItemLeft" align="right" valign="top"><a id="af99eaf7e68fded15faf9cda2fdbf2cb8" name="af99eaf7e68fded15faf9cda2fdbf2cb8"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plHashedString</b> (<a class="el" href="../../d0/dc8/classpl_hashed_string.htm">plHashedString</a> &amp;&amp;rhs)</td></tr>
<tr class="memdesc:af99eaf7e68fded15faf9cda2fdbf2cb8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given <a class="el" href="../../d0/dc8/classpl_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">plHashedString</a>. <br /></td></tr>
<tr class="separator:af99eaf7e68fded15faf9cda2fdbf2cb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acfa300c106a7a10afbbf87a074f38f0a" id="r_acfa300c106a7a10afbbf87a074f38f0a"><td class="memItemLeft" align="right" valign="top"><a id="acfa300c106a7a10afbbf87a074f38f0a" name="acfa300c106a7a10afbbf87a074f38f0a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="../../d0/dc8/classpl_hashed_string.htm">plHashedString</a> &amp;rhs)</td></tr>
<tr class="memdesc:acfa300c106a7a10afbbf87a074f38f0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given <a class="el" href="../../d0/dc8/classpl_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">plHashedString</a>. <br /></td></tr>
<tr class="separator:acfa300c106a7a10afbbf87a074f38f0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad77fd7bad53c1128e015eb1e4821e312" id="r_ad77fd7bad53c1128e015eb1e4821e312"><td class="memItemLeft" align="right" valign="top"><a id="ad77fd7bad53c1128e015eb1e4821e312" name="ad77fd7bad53c1128e015eb1e4821e312"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="../../d0/dc8/classpl_hashed_string.htm">plHashedString</a> &amp;&amp;rhs)</td></tr>
<tr class="memdesc:ad77fd7bad53c1128e015eb1e4821e312"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given <a class="el" href="../../d0/dc8/classpl_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">plHashedString</a>. <br /></td></tr>
<tr class="separator:ad77fd7bad53c1128e015eb1e4821e312"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24ddbfa3d7c057b95c3847b3c15fe5cf" id="r_a24ddbfa3d7c057b95c3847b3c15fe5cf"><td class="memTemplParams" colspan="2">template&lt;size_t N&gt; </td></tr>
<tr class="memitem:a24ddbfa3d7c057b95c3847b3c15fe5cf"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a24ddbfa3d7c057b95c3847b3c15fe5cf">Assign</a> (const char(&amp;string)[N])</td></tr>
<tr class="memdesc:a24ddbfa3d7c057b95c3847b3c15fe5cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assigning a new string from a string constant is a slow operation, but the hash computation can happen at compile time.  <br /></td></tr>
<tr class="separator:a24ddbfa3d7c057b95c3847b3c15fe5cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb022712d25a2097afde6c0ec0d1156a" id="r_afb022712d25a2097afde6c0ec0d1156a"><td class="memTemplParams" colspan="2"><a id="afb022712d25a2097afde6c0ec0d1156a" name="afb022712d25a2097afde6c0ec0d1156a"></a>
template&lt;size_t N&gt; </td></tr>
<tr class="memitem:afb022712d25a2097afde6c0ec0d1156a"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Assign</b> (char(&amp;string)[N])=delete</td></tr>
<tr class="separator:afb022712d25a2097afde6c0ec0d1156a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa59bbaba2dedf619ac78a32ecf585a8c" id="r_aa59bbaba2dedf619ac78a32ecf585a8c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa59bbaba2dedf619ac78a32ecf585a8c">Assign</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sString)</td></tr>
<tr class="memdesc:aa59bbaba2dedf619ac78a32ecf585a8c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assigning a new string from a non-hashed string is a very slow operation, this should be used rarely.  <br /></td></tr>
<tr class="separator:aa59bbaba2dedf619ac78a32ecf585a8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fec55a86964bb6048ac3672149d3d2d" id="r_a5fec55a86964bb6048ac3672149d3d2d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5fec55a86964bb6048ac3672149d3d2d">operator==</a> (const <a class="el" href="../../d0/dc8/classpl_hashed_string.htm">plHashedString</a> &amp;rhs) const</td></tr>
<tr class="memdesc:a5fec55a86964bb6048ac3672149d3d2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Comparing whether two hashed strings are identical is just a pointer comparison. This operation is what <a class="el" href="../../d0/dc8/classpl_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">plHashedString</a> is optimized for.  <br /></td></tr>
<tr class="separator:a5fec55a86964bb6048ac3672149d3d2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bfc4cf0a79f8adce1df6c26bfbdea45" id="r_a4bfc4cf0a79f8adce1df6c26bfbdea45"><td class="memItemLeft" align="right" valign="top"><a id="a4bfc4cf0a79f8adce1df6c26bfbdea45" name="a4bfc4cf0a79f8adce1df6c26bfbdea45"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>PL_ADD_DEFAULT_OPERATOR_NOTEQUAL</b> (const <a class="el" href="../../d0/dc8/classpl_hashed_string.htm">plHashedString</a> &amp;)</td></tr>
<tr class="separator:a4bfc4cf0a79f8adce1df6c26bfbdea45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab32bb9a66b4eb3ae907fc71f8d64bb76" id="r_ab32bb9a66b4eb3ae907fc71f8d64bb76"><td class="memItemLeft" align="right" valign="top"><a id="ab32bb9a66b4eb3ae907fc71f8d64bb76" name="ab32bb9a66b4eb3ae907fc71f8d64bb76"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator==</b> (const <a class="el" href="../../d3/d33/classpl_temp_hashed_string.htm">plTempHashedString</a> &amp;rhs) const</td></tr>
<tr class="memdesc:ab32bb9a66b4eb3ae907fc71f8d64bb76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string object to an <a class="el" href="../../d3/d33/classpl_temp_hashed_string.htm" title="A class to use together with plHashedString for quick comparisons with temporary strings that need no...">plTempHashedString</a> object. This should be used whenever some object needs to be found and the string to compare against is not yet an <a class="el" href="../../d0/dc8/classpl_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">plHashedString</a> object. <br /></td></tr>
<tr class="separator:ab32bb9a66b4eb3ae907fc71f8d64bb76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e8cdda58b772a8f47d5f527901b5a03" id="r_a3e8cdda58b772a8f47d5f527901b5a03"><td class="memItemLeft" align="right" valign="top"><a id="a3e8cdda58b772a8f47d5f527901b5a03" name="a3e8cdda58b772a8f47d5f527901b5a03"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>PL_ADD_DEFAULT_OPERATOR_NOTEQUAL</b> (const <a class="el" href="../../d3/d33/classpl_temp_hashed_string.htm">plTempHashedString</a> &amp;)</td></tr>
<tr class="separator:a3e8cdda58b772a8f47d5f527901b5a03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85d2a5701750aaa7d1bdb5c91679e110" id="r_a85d2a5701750aaa7d1bdb5c91679e110"><td class="memItemLeft" align="right" valign="top"><a id="a85d2a5701750aaa7d1bdb5c91679e110" name="a85d2a5701750aaa7d1bdb5c91679e110"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&lt;</b> (const <a class="el" href="../../d0/dc8/classpl_hashed_string.htm">plHashedString</a> &amp;rhs) const</td></tr>
<tr class="memdesc:a85d2a5701750aaa7d1bdb5c91679e110"><td class="mdescLeft">&#160;</td><td class="mdescRight">This operator allows sorting objects by hash value, not by alphabetical order. <br /></td></tr>
<tr class="separator:a85d2a5701750aaa7d1bdb5c91679e110"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10b6bec710701e233abeebc81b3f6c18" id="r_a10b6bec710701e233abeebc81b3f6c18"><td class="memItemLeft" align="right" valign="top"><a id="a10b6bec710701e233abeebc81b3f6c18" name="a10b6bec710701e233abeebc81b3f6c18"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&lt;</b> (const <a class="el" href="../../d3/d33/classpl_temp_hashed_string.htm">plTempHashedString</a> &amp;rhs) const</td></tr>
<tr class="memdesc:a10b6bec710701e233abeebc81b3f6c18"><td class="mdescLeft">&#160;</td><td class="mdescRight">This operator allows sorting objects by hash value, not by alphabetical order. <br /></td></tr>
<tr class="separator:a10b6bec710701e233abeebc81b3f6c18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3411c4e62fc9254af6af34dbe488a7fb" id="r_a3411c4e62fc9254af6af34dbe488a7fb"><td class="memItemLeft" align="right" valign="top"><a id="a3411c4e62fc9254af6af34dbe488a7fb" name="a3411c4e62fc9254af6af34dbe488a7fb"></a>
const <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>GetString</b> () const</td></tr>
<tr class="memdesc:a3411c4e62fc9254af6af34dbe488a7fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gives access to the actual string data, so you can do all the typical (read-only) string operations on it. <br /></td></tr>
<tr class="separator:a3411c4e62fc9254af6af34dbe488a7fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79d009b263d6d1f85b22908ba87e468b" id="r_a79d009b263d6d1f85b22908ba87e468b"><td class="memItemLeft" align="right" valign="top"><a id="a79d009b263d6d1f85b22908ba87e468b" name="a79d009b263d6d1f85b22908ba87e468b"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><b>GetData</b> () const</td></tr>
<tr class="memdesc:a79d009b263d6d1f85b22908ba87e468b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gives access to the actual string data, so you can do all the typical (read-only) string operations on it. <br /></td></tr>
<tr class="separator:a79d009b263d6d1f85b22908ba87e468b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9bb02d6fb39326f2cc90c60915d7b0f" id="r_ad9bb02d6fb39326f2cc90c60915d7b0f"><td class="memItemLeft" align="right" valign="top"><a id="ad9bb02d6fb39326f2cc90c60915d7b0f" name="ad9bb02d6fb39326f2cc90c60915d7b0f"></a>
plUInt64&#160;</td><td class="memItemRight" valign="bottom"><b>GetHash</b> () const</td></tr>
<tr class="memdesc:ad9bb02d6fb39326f2cc90c60915d7b0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the hash of the stored string. <br /></td></tr>
<tr class="separator:ad9bb02d6fb39326f2cc90c60915d7b0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa449c49f5dc741a2814227dfc7f4981e" id="r_aa449c49f5dc741a2814227dfc7f4981e"><td class="memItemLeft" align="right" valign="top"><a id="aa449c49f5dc741a2814227dfc7f4981e" name="aa449c49f5dc741a2814227dfc7f4981e"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEmpty</b> () const</td></tr>
<tr class="memdesc:aa449c49f5dc741a2814227dfc7f4981e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the string is empty. <br /></td></tr>
<tr class="separator:aa449c49f5dc741a2814227dfc7f4981e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d53bfa9d524b4965691d33ef3b8bb6e" id="r_a6d53bfa9d524b4965691d33ef3b8bb6e"><td class="memItemLeft" align="right" valign="top"><a id="a6d53bfa9d524b4965691d33ef3b8bb6e" name="a6d53bfa9d524b4965691d33ef3b8bb6e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Clear</b> ()</td></tr>
<tr class="memdesc:a6d53bfa9d524b4965691d33ef3b8bb6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resets the string to the empty string. <br /></td></tr>
<tr class="separator:a6d53bfa9d524b4965691d33ef3b8bb6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae651041f328acaef5fc34bfd5e3ced87" id="r_ae651041f328acaef5fc34bfd5e3ced87"><td class="memItemLeft" align="right" valign="top"><a id="ae651041f328acaef5fc34bfd5e3ced87" name="ae651041f328acaef5fc34bfd5e3ced87"></a>
PL_ALWAYS_INLINE&#160;</td><td class="memItemRight" valign="bottom"><b>operator plStringView</b> () const</td></tr>
<tr class="memdesc:ae651041f328acaef5fc34bfd5e3ced87"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string view to this string's data. <br /></td></tr>
<tr class="separator:ae651041f328acaef5fc34bfd5e3ced87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a493ed847bb8c810440e6871ecdf4ebac" id="r_a493ed847bb8c810440e6871ecdf4ebac"><td class="memItemLeft" align="right" valign="top"><a id="a493ed847bb8c810440e6871ecdf4ebac" name="a493ed847bb8c810440e6871ecdf4ebac"></a>
PL_ALWAYS_INLINE <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetView</b> () const</td></tr>
<tr class="memdesc:a493ed847bb8c810440e6871ecdf4ebac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string view to this string's data. <br /></td></tr>
<tr class="separator:a493ed847bb8c810440e6871ecdf4ebac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c7064bbb5117a540bcac6b95ccefcaa" id="r_a9c7064bbb5117a540bcac6b95ccefcaa"><td class="memItemLeft" align="right" valign="top"><a id="a9c7064bbb5117a540bcac6b95ccefcaa" name="a9c7064bbb5117a540bcac6b95ccefcaa"></a>
PL_ALWAYS_INLINE&#160;</td><td class="memItemRight" valign="bottom"><b>operator const char *</b> () const</td></tr>
<tr class="memdesc:a9c7064bbb5117a540bcac6b95ccefcaa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the internal Utf8 string. <br /></td></tr>
<tr class="separator:a9c7064bbb5117a540bcac6b95ccefcaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb1d483e93461fdf01dca1a9a9d80ef0" id="r_aeb1d483e93461fdf01dca1a9a9d80ef0"><td class="memTemplParams" colspan="2"><a id="aeb1d483e93461fdf01dca1a9a9d80ef0" name="aeb1d483e93461fdf01dca1a9a9d80ef0"></a>
template&lt;size_t N&gt; </td></tr>
<tr class="memitem:aeb1d483e93461fdf01dca1a9a9d80ef0"><td class="memTemplItemLeft" align="right" valign="top">PL_FORCE_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Assign</b> (const char(&amp;string)[N])</td></tr>
<tr class="separator:aeb1d483e93461fdf01dca1a9a9d80ef0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whether two strings are identical. </p>
<p>Internally only a reference to the string data is stored. The data itself is stored in a central location, where no duplicates are possible. Thus two identical strings will result in identical <a class="el" href="../../d0/dc8/classpl_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">plHashedString</a> objects, which makes equality comparisons very easy (it's a pointer comparison).<br  />
Copying <a class="el" href="../../d0/dc8/classpl_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">plHashedString</a> objects around and assigning between them is very fast as well.<br  />
<br  />
Assigning from some other string type is rather slow though, as it requires thread synchronization.<br  />
You can also get access to the actual string data via <a class="el" href="#a3411c4e62fc9254af6af34dbe488a7fb" title="Gives access to the actual string data, so you can do all the typical (read-only) string operations o...">GetString()</a>.<br  />
<br  />
You should use <a class="el" href="../../d0/dc8/classpl_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">plHashedString</a> whenever the size of the encapsulating object is important and when changes to the string itself are rare, but checks for equality might be frequent (e.g. in a system where objects are identified via their name).<br  />
At runtime when you need to compare <a class="el" href="../../d0/dc8/classpl_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">plHashedString</a> objects with some temporary string object, used <a class="el" href="../../d3/d33/classpl_temp_hashed_string.htm" title="A class to use together with plHashedString for quick comparisons with temporary strings that need no...">plTempHashedString</a>, as it will only use the string's hash value for comparison, but will not store the actual string anywhere. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a24ddbfa3d7c057b95c3847b3c15fe5cf" name="a24ddbfa3d7c057b95c3847b3c15fe5cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a24ddbfa3d7c057b95c3847b3c15fe5cf">&#9670;&#160;</a></span>Assign() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;size_t N&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void plHashedString::Assign </td>
          <td>(</td>
          <td class="paramtype">const char(&amp;)</td>          <td class="paramname"><span class="paramname"><em>string</em></span>[N]</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Assigning a new string from a string constant is a slow operation, but the hash computation can happen at compile time. </p>
<p>If you need to create an object to compare <a class="el" href="../../d0/dc8/classpl_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">plHashedString</a> objects against, prefer to use <a class="el" href="../../d3/d33/classpl_temp_hashed_string.htm" title="A class to use together with plHashedString for quick comparisons with temporary strings that need no...">plTempHashedString</a>. It will only compute the strings hash value, but does not require any thread synchronization. </p>

</div>
</div>
<a id="aa59bbaba2dedf619ac78a32ecf585a8c" name="aa59bbaba2dedf619ac78a32ecf585a8c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa59bbaba2dedf619ac78a32ecf585a8c">&#9670;&#160;</a></span>Assign() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">PL_FORCE_INLINE void plHashedString::Assign </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sString</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Assigning a new string from a non-hashed string is a very slow operation, this should be used rarely. </p>
<p>If you need to create an object to compare <a class="el" href="../../d0/dc8/classpl_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">plHashedString</a> objects against, prefer to use <a class="el" href="../../d3/d33/classpl_temp_hashed_string.htm" title="A class to use together with plHashedString for quick comparisons with temporary strings that need no...">plTempHashedString</a>. It will only compute the strings hash value, but does not require any thread synchronization. </p>

</div>
</div>
<a id="a5fec55a86964bb6048ac3672149d3d2d" name="a5fec55a86964bb6048ac3672149d3d2d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5fec55a86964bb6048ac3672149d3d2d">&#9670;&#160;</a></span>operator==()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool plHashedString::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d0/dc8/classpl_hashed_string.htm">plHashedString</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>rhs</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Comparing whether two hashed strings are identical is just a pointer comparison. This operation is what <a class="el" href="../../d0/dc8/classpl_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">plHashedString</a> is optimized for. </p>
<dl class="section note"><dt>Note</dt><dd>Comparing between <a class="el" href="../../d0/dc8/classpl_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">plHashedString</a> objects is always error-free, so even if two string had the same hash value, although they are different, this comparison function will not report they are the same. </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/Engine/Foundation/Strings/<a class="el" href="../../d9/dc9/_hashed_string_8h_source.htm">HashedString.h</a></li>
<li>Code/Engine/Foundation/Strings/Implementation/<b>HashedString.cpp</b></li>
<li>Code/Engine/Foundation/Strings/Implementation/<a class="el" href="../../d4/d50/_hashed_string__inl_8h_source.htm">HashedString_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d0/dc8/classpl_hashed_string.htm">plHashedString</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
