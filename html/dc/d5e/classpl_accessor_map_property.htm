<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Plasma Engine: plAccessorMapProperty&lt; Class, Type, Container &gt; Class Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Plasma Engine<span id="projectnumber">&#160;2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('dc/d5e/classpl_accessor_map_property.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="../../df/ddc/classpl_accessor_map_property-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plAccessorMapProperty&lt; Class, Type, Container &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">
<div class="dynheader">
Inheritance diagram for plAccessorMapProperty&lt; Class, Type, Container &gt;:</div>
<div class="dyncontent">
<div class="center"><img src="../../dd/de9/classpl_accessor_map_property__inherit__graph.png" border="0" usemap="#apl_accessor_map_property_3_01_class_00_01_type_00_01_container_01_4_inherit__map" alt="Inheritance graph"/></div>
<map name="apl_accessor_map_property_3_01_class_00_01_type_00_01_container_01_4_inherit__map" id="apl_accessor_map_property_3_01_class_00_01_type_00_01_container_01_4_inherit__map">
<area shape="rect" title=" " alt="" coords="5,245,183,288"/>
<area shape="rect" href="../../d5/dd2/classpl_typed_map_property.htm" title=" " alt="" coords="24,155,164,197"/>
<area shape="poly" title=" " alt="" coords="97,213,97,245,91,245,91,213"/>
<area shape="rect" href="../../d1/dfe/classpl_abstract_map_property.htm" title="The base class for a property that represents a set of values." alt="" coords="17,80,171,107"/>
<area shape="poly" title=" " alt="" coords="97,122,97,154,91,154,91,122"/>
<area shape="rect" href="../../d4/dd7/classpl_abstract_property.htm" title="This is the base interface for all properties in the reflection system. It provides enough informatio..." alt="" coords="29,5,159,32"/>
<area shape="poly" title=" " alt="" coords="97,48,97,80,91,80,91,48"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a23696ffb8abe4426e5dbdb2994c64483" id="r_a23696ffb8abe4426e5dbdb2994c64483"><td class="memItemLeft" align="right" valign="top"><a id="a23696ffb8abe4426e5dbdb2994c64483" name="a23696ffb8abe4426e5dbdb2994c64483"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>ContainerType</b> = typename <a class="el" href="../../da/d5d/structpl_type_traits.htm">plTypeTraits</a>&lt;Container&gt;::NonConstReferenceType</td></tr>
<tr class="separator:a23696ffb8abe4426e5dbdb2994c64483"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9539ca1b2933c391129746183a6b117" id="r_ad9539ca1b2933c391129746183a6b117"><td class="memItemLeft" align="right" valign="top"><a id="ad9539ca1b2933c391129746183a6b117" name="ad9539ca1b2933c391129746183a6b117"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>RealType</b> = typename <a class="el" href="../../da/d5d/structpl_type_traits.htm">plTypeTraits</a>&lt;Type&gt;::NonConstReferenceType</td></tr>
<tr class="separator:ad9539ca1b2933c391129746183a6b117"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95ed39308286d2dbc49ec5c39e677cf3" id="r_a95ed39308286d2dbc49ec5c39e677cf3"><td class="memItemLeft" align="right" valign="top"><a id="a95ed39308286d2dbc49ec5c39e677cf3" name="a95ed39308286d2dbc49ec5c39e677cf3"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>InsertFunc</b> = void (Class::*)(const char* szKey, Type value)</td></tr>
<tr class="separator:a95ed39308286d2dbc49ec5c39e677cf3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43b02a4888cf2a9a0bf2143dc5d78bb0" id="r_a43b02a4888cf2a9a0bf2143dc5d78bb0"><td class="memItemLeft" align="right" valign="top"><a id="a43b02a4888cf2a9a0bf2143dc5d78bb0" name="a43b02a4888cf2a9a0bf2143dc5d78bb0"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>RemoveFunc</b> = void (Class::*)(const char* szKey)</td></tr>
<tr class="separator:a43b02a4888cf2a9a0bf2143dc5d78bb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba4d2e70aece8c6b030f61dd0b0b49af" id="r_aba4d2e70aece8c6b030f61dd0b0b49af"><td class="memItemLeft" align="right" valign="top"><a id="aba4d2e70aece8c6b030f61dd0b0b49af" name="aba4d2e70aece8c6b030f61dd0b0b49af"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>GetValueFunc</b> = bool (Class::*)(const char* szKey, RealType&amp; value) const</td></tr>
<tr class="separator:aba4d2e70aece8c6b030f61dd0b0b49af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11cc645dd5da75e4b48ba8e1442f4dd0" id="r_a11cc645dd5da75e4b48ba8e1442f4dd0"><td class="memItemLeft" align="right" valign="top"><a id="a11cc645dd5da75e4b48ba8e1442f4dd0" name="a11cc645dd5da75e4b48ba8e1442f4dd0"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>GetKeyRangeFunc</b> = Container (Class::*)() const</td></tr>
<tr class="separator:a11cc645dd5da75e4b48ba8e1442f4dd0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a984907b99c78fedfab9ad3c68e8a1e10" id="r_a984907b99c78fedfab9ad3c68e8a1e10"><td class="memItemLeft" align="right" valign="top"><a id="a984907b99c78fedfab9ad3c68e8a1e10" name="a984907b99c78fedfab9ad3c68e8a1e10"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plAccessorMapProperty</b> (const char *szPropertyName, GetKeyRangeFunc getKeys, GetValueFunc getValue, InsertFunc insert, RemoveFunc remove)</td></tr>
<tr class="separator:a984907b99c78fedfab9ad3c68e8a1e10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a40901c1b04f65e6d578cfc584f27a0" id="r_a9a40901c1b04f65e6d578cfc584f27a0"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a9a40901c1b04f65e6d578cfc584f27a0">IsEmpty</a> (const void *pInstance) const override</td></tr>
<tr class="memdesc:a9a40901c1b04f65e6d578cfc584f27a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the set is empty.  <br /></td></tr>
<tr class="separator:a9a40901c1b04f65e6d578cfc584f27a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18162954f66aa718a340a83ae021a90b" id="r_a18162954f66aa718a340a83ae021a90b"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a18162954f66aa718a340a83ae021a90b">Clear</a> (void *pInstance) const override</td></tr>
<tr class="memdesc:a18162954f66aa718a340a83ae021a90b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clears the set.  <br /></td></tr>
<tr class="separator:a18162954f66aa718a340a83ae021a90b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6358345256f88497fb16cd7a5d566432" id="r_a6358345256f88497fb16cd7a5d566432"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6358345256f88497fb16cd7a5d566432">Insert</a> (void *pInstance, const char *szKey, const void *pObject) const override</td></tr>
<tr class="memdesc:a6358345256f88497fb16cd7a5d566432"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inserts the target of pObject into the set.  <br /></td></tr>
<tr class="separator:a6358345256f88497fb16cd7a5d566432"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94f17981945e4804c972236353b67bc6" id="r_a94f17981945e4804c972236353b67bc6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a94f17981945e4804c972236353b67bc6">Remove</a> (void *pInstance, const char *szKey) const override</td></tr>
<tr class="memdesc:a94f17981945e4804c972236353b67bc6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes the target of pObject from the set.  <br /></td></tr>
<tr class="separator:a94f17981945e4804c972236353b67bc6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ba7fb5d62fa45a1c60cd98c2270c5d5" id="r_a2ba7fb5d62fa45a1c60cd98c2270c5d5"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2ba7fb5d62fa45a1c60cd98c2270c5d5">Contains</a> (const void *pInstance, const char *szKey) const override</td></tr>
<tr class="memdesc:a2ba7fb5d62fa45a1c60cd98c2270c5d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the target of pObject is in the set.  <br /></td></tr>
<tr class="separator:a2ba7fb5d62fa45a1c60cd98c2270c5d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12aeed94d9a5f395315edecf3a160533" id="r_a12aeed94d9a5f395315edecf3a160533"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a12aeed94d9a5f395315edecf3a160533">GetValue</a> (const void *pInstance, const char *szKey, void *pObject) const override</td></tr>
<tr class="memdesc:a12aeed94d9a5f395315edecf3a160533"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes element at index uiIndex to the target of pObject.  <br /></td></tr>
<tr class="separator:a12aeed94d9a5f395315edecf3a160533"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b766f1650b48c103334b8d2939e3070" id="r_a6b766f1650b48c103334b8d2939e3070"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6b766f1650b48c103334b8d2939e3070">GetKeys</a> (const void *pInstance, <a class="el" href="../../d8/dcc/classpl_hybrid_array.htm">plHybridArray</a>&lt; <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plString</a>, 16 &gt; &amp;out_keys) const override</td></tr>
<tr class="memdesc:a6b766f1650b48c103334b8d2939e3070"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes the content of the set to out_keys.  <br /></td></tr>
<tr class="separator:a6b766f1650b48c103334b8d2939e3070"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classpl_typed_map_property"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_classpl_typed_map_property')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../d5/dd2/classpl_typed_map_property.htm">plTypedMapProperty&lt; Type &gt;</a></td></tr>
<tr class="memitem:af9a7cbe44651c1c02cdbe05931329937 inherit pub_methods_classpl_typed_map_property" id="r_af9a7cbe44651c1c02cdbe05931329937"><td class="memItemLeft" align="right" valign="top">
&#160;</td><td class="memItemRight" valign="bottom"><b>plTypedMapProperty</b> (const char *szPropertyName)</td></tr>
<tr class="separator:af9a7cbe44651c1c02cdbe05931329937 inherit pub_methods_classpl_typed_map_property"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e5a8723a9b4bbd508a3b4a2aaf3e272 inherit pub_methods_classpl_typed_map_property" id="r_a0e5a8723a9b4bbd508a3b4a2aaf3e272"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd2/classpl_typed_map_property.htm#a0e5a8723a9b4bbd508a3b4a2aaf3e272">GetSpecificType</a> () const override</td></tr>
<tr class="memdesc:a0e5a8723a9b4bbd508a3b4a2aaf3e272 inherit pub_methods_classpl_typed_map_property"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the type information of the constant property. Use this to cast this property to a specific version of <a class="el" href="../../dd/d62/classpl_typed_constant_property.htm" title="The base class for all typed member properties. Ie. once the type of a property is determined,...">plTypedConstantProperty</a>.  <br /></td></tr>
<tr class="separator:a0e5a8723a9b4bbd508a3b4a2aaf3e272 inherit pub_methods_classpl_typed_map_property"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classpl_abstract_map_property"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_classpl_abstract_map_property')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../d1/dfe/classpl_abstract_map_property.htm">plAbstractMapProperty</a></td></tr>
<tr class="memitem:a1a62d3ff3a04162fec26cd4f2508cf65 inherit pub_methods_classpl_abstract_map_property" id="r_a1a62d3ff3a04162fec26cd4f2508cf65"><td class="memItemLeft" align="right" valign="top">
&#160;</td><td class="memItemRight" valign="bottom"><b>plAbstractMapProperty</b> (const char *szPropertyName)</td></tr>
<tr class="memdesc:a1a62d3ff3a04162fec26cd4f2508cf65 inherit pub_methods_classpl_abstract_map_property"><td class="mdescLeft">&#160;</td><td class="mdescRight">Passes the property name through to <a class="el" href="../../d4/dd7/classpl_abstract_property.htm" title="This is the base interface for all properties in the reflection system. It provides enough informatio...">plAbstractProperty</a>. <br /></td></tr>
<tr class="separator:a1a62d3ff3a04162fec26cd4f2508cf65 inherit pub_methods_classpl_abstract_map_property"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad13b6a857bfe8d53fe14fe6385cfeb54 inherit pub_methods_classpl_abstract_map_property" id="r_ad13b6a857bfe8d53fe14fe6385cfeb54"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../d0/d7a/structpl_property_category.htm#ace00211e23d2ae831a5eeabe06235dd7">plPropertyCategory::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dfe/classpl_abstract_map_property.htm#ad13b6a857bfe8d53fe14fe6385cfeb54">GetCategory</a> () const override</td></tr>
<tr class="memdesc:ad13b6a857bfe8d53fe14fe6385cfeb54 inherit pub_methods_classpl_abstract_map_property"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns <a class="el" href="../../d0/d7a/structpl_property_category.htm#ace00211e23d2ae831a5eeabe06235dd7a7b2b5030e879bd3a19e8cd405c16aac7" title="The property is actually a map from string to values. Cast to plAbstractMapProperty.">plPropertyCategory::Map</a>.  <br /></td></tr>
<tr class="separator:ad13b6a857bfe8d53fe14fe6385cfeb54 inherit pub_methods_classpl_abstract_map_property"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classpl_abstract_property"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_classpl_abstract_property')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../d4/dd7/classpl_abstract_property.htm">plAbstractProperty</a></td></tr>
<tr class="memitem:a8ae8dcf20f01b0926e321d68fd38d243 inherit pub_methods_classpl_abstract_property" id="r_a8ae8dcf20f01b0926e321d68fd38d243"><td class="memItemLeft" align="right" valign="top">
&#160;</td><td class="memItemRight" valign="bottom"><b>plAbstractProperty</b> (const char *szPropertyName)</td></tr>
<tr class="memdesc:a8ae8dcf20f01b0926e321d68fd38d243 inherit pub_methods_classpl_abstract_property"><td class="mdescLeft">&#160;</td><td class="mdescRight">The constructor must get the name of the property. The string must be a compile-time constant. <br /></td></tr>
<tr class="separator:a8ae8dcf20f01b0926e321d68fd38d243 inherit pub_methods_classpl_abstract_property"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab192fac6724fcbd56a160013230bad0b inherit pub_methods_classpl_abstract_property" id="r_ab192fac6724fcbd56a160013230bad0b"><td class="memItemLeft" align="right" valign="top">
const char *&#160;</td><td class="memItemRight" valign="bottom"><b>GetPropertyName</b> () const</td></tr>
<tr class="memdesc:ab192fac6724fcbd56a160013230bad0b inherit pub_methods_classpl_abstract_property"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the name of the property. <br /></td></tr>
<tr class="separator:ab192fac6724fcbd56a160013230bad0b inherit pub_methods_classpl_abstract_property"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a988149e0184a527d89a6fc7b529aa6fc inherit pub_methods_classpl_abstract_property" id="r_a988149e0184a527d89a6fc7b529aa6fc"><td class="memItemLeft" align="right" valign="top">
const <a class="el" href="../../df/dd9/structpl_bitflags.htm">plBitflags</a>&lt; <a class="el" href="../../db/d0f/structpl_property_flags.htm">plPropertyFlags</a> &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>GetFlags</b> () const</td></tr>
<tr class="memdesc:a988149e0184a527d89a6fc7b529aa6fc inherit pub_methods_classpl_abstract_property"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the flags of the property. <br /></td></tr>
<tr class="separator:a988149e0184a527d89a6fc7b529aa6fc inherit pub_methods_classpl_abstract_property"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a7c0de0ecff4c5ab4a37987f9780a64 inherit pub_methods_classpl_abstract_property" id="r_a1a7c0de0ecff4c5ab4a37987f9780a64"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../d4/dd7/classpl_abstract_property.htm">plAbstractProperty</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>AddFlags</b> (<a class="el" href="../../df/dd9/structpl_bitflags.htm">plBitflags</a>&lt; <a class="el" href="../../db/d0f/structpl_property_flags.htm">plPropertyFlags</a> &gt; flags)</td></tr>
<tr class="memdesc:a1a7c0de0ecff4c5ab4a37987f9780a64 inherit pub_methods_classpl_abstract_property"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds flags to the property. Returns itself to allow to be called during initialization. <br /></td></tr>
<tr class="separator:a1a7c0de0ecff4c5ab4a37987f9780a64 inherit pub_methods_classpl_abstract_property"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a249245c8d8a5bd14d12b7b72920b4d5e inherit pub_methods_classpl_abstract_property" id="r_a249245c8d8a5bd14d12b7b72920b4d5e"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../d4/dd7/classpl_abstract_property.htm">plAbstractProperty</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>AddAttributes</b> (<a class="el" href="../../d3/d74/classpl_property_attribute.htm">plPropertyAttribute</a> *pAttrib1, <a class="el" href="../../d3/d74/classpl_property_attribute.htm">plPropertyAttribute</a> *pAttrib2=nullptr, <a class="el" href="../../d3/d74/classpl_property_attribute.htm">plPropertyAttribute</a> *pAttrib3=nullptr, <a class="el" href="../../d3/d74/classpl_property_attribute.htm">plPropertyAttribute</a> *pAttrib4=nullptr, <a class="el" href="../../d3/d74/classpl_property_attribute.htm">plPropertyAttribute</a> *pAttrib5=nullptr, <a class="el" href="../../d3/d74/classpl_property_attribute.htm">plPropertyAttribute</a> *pAttrib6=nullptr)</td></tr>
<tr class="memdesc:a249245c8d8a5bd14d12b7b72920b4d5e inherit pub_methods_classpl_abstract_property"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds attributes to the property. Returns itself to allow to be called during initialization. Allocate an attribute using standard 'new'. <br /></td></tr>
<tr class="separator:a249245c8d8a5bd14d12b7b72920b4d5e inherit pub_methods_classpl_abstract_property"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa28f7ffab1bd6667a67f94a351e618ba inherit pub_methods_classpl_abstract_property" id="r_aa28f7ffab1bd6667a67f94a351e618ba"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a>&lt; const <a class="el" href="../../d3/d74/classpl_property_attribute.htm">plPropertyAttribute</a> *const &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>GetAttributes</b> () const</td></tr>
<tr class="memdesc:aa28f7ffab1bd6667a67f94a351e618ba inherit pub_methods_classpl_abstract_property"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the array of property attributes. <br /></td></tr>
<tr class="separator:aa28f7ffab1bd6667a67f94a351e618ba inherit pub_methods_classpl_abstract_property"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74666a9b6312d9e8a0208ff67ec56a7d inherit pub_methods_classpl_abstract_property" id="r_a74666a9b6312d9e8a0208ff67ec56a7d"><td class="memTemplParams" colspan="2">
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a74666a9b6312d9e8a0208ff67ec56a7d inherit pub_methods_classpl_abstract_property"><td class="memTemplItemLeft" align="right" valign="top">const Type *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetAttributeByType</b> () const</td></tr>
<tr class="memdesc:a74666a9b6312d9e8a0208ff67ec56a7d inherit pub_methods_classpl_abstract_property"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the first attribute that derives from the given type, or nullptr if nothing is found. <br /></td></tr>
<tr class="separator:a74666a9b6312d9e8a0208ff67ec56a7d inherit pub_methods_classpl_abstract_property"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="inherited" name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_attribs_classpl_abstract_property"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_attribs_classpl_abstract_property')"><img src="../../closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="../../d4/dd7/classpl_abstract_property.htm">plAbstractProperty</a></td></tr>
<tr class="memitem:a5226bc2ced2436f3aeaf96fadea40f70 inherit pro_attribs_classpl_abstract_property" id="r_a5226bc2ced2436f3aeaf96fadea40f70"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../df/dd9/structpl_bitflags.htm">plBitflags</a>&lt; <a class="el" href="../../db/d0f/structpl_property_flags.htm">plPropertyFlags</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>m_Flags</b></td></tr>
<tr class="separator:a5226bc2ced2436f3aeaf96fadea40f70 inherit pro_attribs_classpl_abstract_property"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a135a819e72ea2827916acdefd2fb6848 inherit pro_attribs_classpl_abstract_property" id="r_a135a819e72ea2827916acdefd2fb6848"><td class="memItemLeft" align="right" valign="top">
const char *&#160;</td><td class="memItemRight" valign="bottom"><b>m_szPropertyName</b></td></tr>
<tr class="separator:a135a819e72ea2827916acdefd2fb6848 inherit pro_attribs_classpl_abstract_property"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf46ae0b97785db5048abb483c603cea inherit pro_attribs_classpl_abstract_property" id="r_aaf46ae0b97785db5048abb483c603cea"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../d8/dcc/classpl_hybrid_array.htm">plHybridArray</a>&lt; const <a class="el" href="../../d3/d74/classpl_property_attribute.htm">plPropertyAttribute</a> *, 2, <a class="el" href="../../d3/d9e/structpl_statics_allocator_wrapper.htm">plStaticsAllocatorWrapper</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>m_Attributes</b></td></tr>
<tr class="separator:aaf46ae0b97785db5048abb483c603cea inherit pro_attribs_classpl_abstract_property"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a18162954f66aa718a340a83ae021a90b" name="a18162954f66aa718a340a83ae021a90b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18162954f66aa718a340a83ae021a90b">&#9670;&#160;</a></span>Clear()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Class , typename Type , typename Container &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../dc/d5e/classpl_accessor_map_property.htm">plAccessorMapProperty</a>&lt; Class, Type, Container &gt;::Clear </td>
          <td>(</td>
          <td class="paramtype">void *</td>          <td class="paramname"><span class="paramname"><em>pInstance</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clears the set. </p>

<p>Implements <a class="el" href="../../d1/dfe/classpl_abstract_map_property.htm#ad3ecf444d0ff87c9d5da71efdeb26835">plAbstractMapProperty</a>.</p>

</div>
</div>
<a id="a2ba7fb5d62fa45a1c60cd98c2270c5d5" name="a2ba7fb5d62fa45a1c60cd98c2270c5d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ba7fb5d62fa45a1c60cd98c2270c5d5">&#9670;&#160;</a></span>Contains()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Class , typename Type , typename Container &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool <a class="el" href="../../dc/d5e/classpl_accessor_map_property.htm">plAccessorMapProperty</a>&lt; Class, Type, Container &gt;::Contains </td>
          <td>(</td>
          <td class="paramtype">const void *</td>          <td class="paramname"><span class="paramname"><em>pInstance</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>szKey</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns whether the target of pObject is in the set. </p>

<p>Implements <a class="el" href="../../d1/dfe/classpl_abstract_map_property.htm#a5f0a6d168d2c31f098dbcdd14faf5e80">plAbstractMapProperty</a>.</p>

</div>
</div>
<a id="a6b766f1650b48c103334b8d2939e3070" name="a6b766f1650b48c103334b8d2939e3070"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b766f1650b48c103334b8d2939e3070">&#9670;&#160;</a></span>GetKeys()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Class , typename Type , typename Container &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../dc/d5e/classpl_accessor_map_property.htm">plAccessorMapProperty</a>&lt; Class, Type, Container &gt;::GetKeys </td>
          <td>(</td>
          <td class="paramtype">const void *</td>          <td class="paramname"><span class="paramname"><em>pInstance</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d8/dcc/classpl_hybrid_array.htm">plHybridArray</a>&lt; <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plString</a>, 16 &gt; &amp;</td>          <td class="paramname"><span class="paramname"><em>out_keys</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes the content of the set to out_keys. </p>

<p>Implements <a class="el" href="../../d1/dfe/classpl_abstract_map_property.htm#a22d247329b24dd88bc764c0ea5ee0d9d">plAbstractMapProperty</a>.</p>

</div>
</div>
<a id="a12aeed94d9a5f395315edecf3a160533" name="a12aeed94d9a5f395315edecf3a160533"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a12aeed94d9a5f395315edecf3a160533">&#9670;&#160;</a></span>GetValue()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Class , typename Type , typename Container &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool <a class="el" href="../../dc/d5e/classpl_accessor_map_property.htm">plAccessorMapProperty</a>&lt; Class, Type, Container &gt;::GetValue </td>
          <td>(</td>
          <td class="paramtype">const void *</td>          <td class="paramname"><span class="paramname"><em>pInstance</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>szKey</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *</td>          <td class="paramname"><span class="paramname"><em>pObject</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes element at index uiIndex to the target of pObject. </p>

<p>Implements <a class="el" href="../../d1/dfe/classpl_abstract_map_property.htm#a90bf6d521e1d1da7679f2eddfe5ff32d">plAbstractMapProperty</a>.</p>

</div>
</div>
<a id="a6358345256f88497fb16cd7a5d566432" name="a6358345256f88497fb16cd7a5d566432"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6358345256f88497fb16cd7a5d566432">&#9670;&#160;</a></span>Insert()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Class , typename Type , typename Container &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../dc/d5e/classpl_accessor_map_property.htm">plAccessorMapProperty</a>&lt; Class, Type, Container &gt;::Insert </td>
          <td>(</td>
          <td class="paramtype">void *</td>          <td class="paramname"><span class="paramname"><em>pInstance</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>szKey</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *</td>          <td class="paramname"><span class="paramname"><em>pObject</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Inserts the target of pObject into the set. </p>

<p>Implements <a class="el" href="../../d1/dfe/classpl_abstract_map_property.htm#a13f70fc1dca6643388f03885f6ecef88">plAbstractMapProperty</a>.</p>

</div>
</div>
<a id="a9a40901c1b04f65e6d578cfc584f27a0" name="a9a40901c1b04f65e6d578cfc584f27a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a40901c1b04f65e6d578cfc584f27a0">&#9670;&#160;</a></span>IsEmpty()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Class , typename Type , typename Container &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool <a class="el" href="../../dc/d5e/classpl_accessor_map_property.htm">plAccessorMapProperty</a>&lt; Class, Type, Container &gt;::IsEmpty </td>
          <td>(</td>
          <td class="paramtype">const void *</td>          <td class="paramname"><span class="paramname"><em>pInstance</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns whether the set is empty. </p>

<p>Implements <a class="el" href="../../d1/dfe/classpl_abstract_map_property.htm#a1dda589b6eb170f136dee1f03f0a3d3d">plAbstractMapProperty</a>.</p>

</div>
</div>
<a id="a94f17981945e4804c972236353b67bc6" name="a94f17981945e4804c972236353b67bc6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94f17981945e4804c972236353b67bc6">&#9670;&#160;</a></span>Remove()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Class , typename Type , typename Container &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="../../dc/d5e/classpl_accessor_map_property.htm">plAccessorMapProperty</a>&lt; Class, Type, Container &gt;::Remove </td>
          <td>(</td>
          <td class="paramtype">void *</td>          <td class="paramname"><span class="paramname"><em>pInstance</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *</td>          <td class="paramname"><span class="paramname"><em>szKey</em></span>&#160;) const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Removes the target of pObject from the set. </p>

<p>Implements <a class="el" href="../../d1/dfe/classpl_abstract_map_property.htm#a4e65e5f63738815199d117e215010e43">plAbstractMapProperty</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>Code/Engine/Foundation/Reflection/Implementation/<a class="el" href="../../d8/d5d/_map_property_8h_source.htm">MapProperty.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dc/d5e/classpl_accessor_map_property.htm">plAccessorMapProperty</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
