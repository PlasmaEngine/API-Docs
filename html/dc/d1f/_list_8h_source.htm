<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<!-- BEGIN opengraph metadata -->
<meta property="og:title" content="Doxygen Awesome" />
<meta property="og:image" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta property="og:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<meta property="og:url" content="https://jothepro.github.io/doxygen-awesome-css/" />
<!-- END opengraph metadata -->
<!-- BEGIN twitter metadata -->
<meta name="twitter:image:src" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta name="twitter:title" content="Doxygen Awesome" />
<meta name="twitter:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<!-- END twitter metadata -->
<title>Plasma Engine: Code/Engine/Foundation/Containers/List.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link rel="icon" type="image/svg+xml" href="logo.drawio.svg"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-paragraph-link.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-tabs.js"></script>
<script type="text/javascript" src="../../toggle-alternative-theme.js"></script>
<script type="text/javascript">
    DoxygenAwesomeFragmentCopyButton.init()
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeParagraphLink.init()
    DoxygenAwesomeInteractiveToc.init()
    DoxygenAwesomeTabs.init()
</script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Plasma Engine
   &#160;<span id="projectnumber">2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('dc/d1f/_list_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">List.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;Foundation/Containers/Deque.h&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span> </div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00011" data-start="{" data-end="};">
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno"><a class="line" href="../../db/d85/classpl_list_base.htm">   11</a></span><span class="keyword">class </span><a class="code hl_class" href="../../db/d85/classpl_list_base.htm">plListBase</a></div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>{</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>  <span class="keyword">struct </span>ListElement;</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span> </div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span>  <span class="keyword">struct </span>ListElementBase</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>  {</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>    ListElementBase();</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span> </div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>    ListElement* m_pPrev;</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>    ListElement* m_pNext;</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>  };</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span> </div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>  <span class="keyword">struct </span>ListElement : <span class="keyword">public</span> ListElementBase</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>  {</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>    ListElement()</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>      : ListElementBase()</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>    {</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>    }</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>    <span class="keyword">explicit</span> ListElement(<span class="keyword">const</span> T&amp; data);</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span> </div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>    T m_Data = {};</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>  };</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span> </div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>  <span class="keyword">struct </span>ConstIterator</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>  {</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>    PL_DECLARE_POD_TYPE();</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span> </div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>    ConstIterator()</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>      : m_pElement(<span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>    {</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>    } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span> </div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>    <span class="keywordtype">bool</span> operator==(<span class="keyword">typename</span> plListBase&lt;T&gt;::ConstIterator it2)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pElement == it2.m_pElement); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>    PL_ADD_DEFAULT_OPERATOR_NOTEQUAL(<span class="keyword">typename</span> plListBase&lt;T&gt;::ConstIterator);</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span> </div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>    <span class="keyword">const</span> T&amp; operator*()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pElement-&gt;m_Data); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span> </div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>    <span class="keyword">const</span> T* operator-&gt;()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (&amp;m_pElement-&gt;m_Data); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span> </div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>    <span class="keywordtype">void</span> Next() { m_pElement = m_pElement-&gt;m_pNext; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span> </div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>    <span class="keywordtype">void</span> Prev() { m_pElement = m_pElement-&gt;m_pPrev; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span> </div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>    <span class="keywordtype">bool</span> IsValid()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ((m_pElement != <span class="keyword">nullptr</span>) &amp;&amp; (m_pElement-&gt;m_pPrev != <span class="keyword">nullptr</span>) &amp;&amp; (m_pElement-&gt;m_pNext != <span class="keyword">nullptr</span>)); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span> </div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>    <span class="keywordtype">void</span> operator++() { Next(); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span> </div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>    <span class="keywordtype">void</span> operator--() { Prev(); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span> </div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>  <span class="keyword">private</span>:</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>    <span class="keyword">friend</span> <span class="keyword">class </span><a class="code hl_class" href="../../db/d85/classpl_list_base.htm">plListBase</a>&lt;T&gt;;</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span> </div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>    ConstIterator(ListElement* pInit)</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>      : m_pElement(pInit)</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>    {</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>    }</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span> </div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>    ListElement* m_pElement;</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>  };</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span> </div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span><span class="keyword">public</span>:</div>
<div class="foldopen" id="foldopen00085" data-start="{" data-end="};">
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno"><a class="line" href="../../d9/dde/structpl_list_base_1_1_iterator.htm">   85</a></span>  <span class="keyword">struct </span><a class="code hl_struct" href="../../d9/dde/structpl_list_base_1_1_iterator.htm">Iterator</a> : <span class="keyword">public</span> ConstIterator</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>  {</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>    <span class="comment">// this is required to pull in the const version of this function</span></div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>    <span class="keyword">using </span>ConstIterator::operator*;</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>    <span class="keyword">using </span>ConstIterator::operator-&gt;;</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span> </div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>    PL_DECLARE_POD_TYPE();</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span> </div>
<div class="foldopen" id="foldopen00094" data-start="{" data-end="}">
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno"><a class="line" href="../../d9/dde/structpl_list_base_1_1_iterator.htm#ab366e13f881112e202f88b8c04cb26ce">   94</a></span>    <a class="code hl_function" href="../../d9/dde/structpl_list_base_1_1_iterator.htm#ab366e13f881112e202f88b8c04cb26ce">Iterator</a>()</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>      : ConstIterator()</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>    {</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>    } <span class="comment">// [tested]</span></div>
</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span> </div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno"><a class="line" href="../../d9/dde/structpl_list_base_1_1_iterator.htm#ae39dfcd9dbb55144930edd461db2090d">  100</a></span>    T&amp; <a class="code hl_function" href="../../d9/dde/structpl_list_base_1_1_iterator.htm#ae39dfcd9dbb55144930edd461db2090d">operator*</a>() { <span class="keywordflow">return</span> (this-&gt;m_pElement-&gt;m_Data); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span> </div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno"><a class="line" href="../../d9/dde/structpl_list_base_1_1_iterator.htm#a53ebb1739537a7a2c8bd055100ea8d63">  103</a></span>    T* <a class="code hl_function" href="../../d9/dde/structpl_list_base_1_1_iterator.htm#a53ebb1739537a7a2c8bd055100ea8d63">operator-&gt;</a>() { <span class="keywordflow">return</span> (&amp;this-&gt;m_pElement-&gt;m_Data); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span> </div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>  <span class="keyword">private</span>:</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>    <span class="keyword">friend</span> <span class="keyword">class </span><a class="code hl_class" href="../../db/d85/classpl_list_base.htm">plListBase</a>&lt;T&gt;;</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span> </div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>    <span class="keyword">explicit</span> <a class="code hl_function" href="../../d9/dde/structpl_list_base_1_1_iterator.htm#ab366e13f881112e202f88b8c04cb26ce">Iterator</a>(ListElement* pInit)</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>      : ConstIterator(pInit)</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>    {</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>    }</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>  };</div>
</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span> </div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span><span class="keyword">protected</span>:</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>  <span class="keyword">explicit</span> <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#a678705060f403dfa449ff4064e146db3">plListBase</a>(<a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span> </div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>  <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#a678705060f403dfa449ff4064e146db3">plListBase</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d85/classpl_list_base.htm">plListBase&lt;T&gt;</a>&amp; cc, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span> </div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>  <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#a3bf526859a184754341cad311333a306">~plListBase</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span> </div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#aa29cb1d61606e61eb23886d14ec475cf">operator=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d85/classpl_list_base.htm">plListBase&lt;T&gt;</a>&amp; cc); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span> </div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#ab4732ee74e05a8a305f93bcc51f3f218">Clear</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span> </div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#a91b87ea6f64ea9968b0c2b7ceeae0d30">Compact</a>();</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span> </div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>  plUInt32 <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#a0f72ad6ded42b4070023bf40aa1e80f5">GetCount</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span> </div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#ae908b213ebb19ad241e201ef7a7b5ab9">IsEmpty</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span> </div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>  <span class="keyword">const</span> T&amp; <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#aa70e3db3c5b970e3f3de0815c241da4e">PeekFront</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span> </div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>  <span class="keyword">const</span> T&amp; <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#a84bc527ec428498368b0785e6a79c05b">PeekBack</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span> </div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>  T&amp; <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#aa70e3db3c5b970e3f3de0815c241da4e">PeekFront</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span> </div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>  T&amp; <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#a84bc527ec428498368b0785e6a79c05b">PeekBack</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span> </div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>  T&amp; <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#aa12bda6672fc6ba0e09663175b613203">PushBack</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span> </div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#aa12bda6672fc6ba0e09663175b613203">PushBack</a>(<span class="keyword">const</span> T&amp; element); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span> </div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#a758853f7e43a965c8d717da29c691d70">PopBack</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span> </div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>  T&amp; <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#a6cb2407d38c1e3f3456c11f9c4895b48">PushFront</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span> </div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#a6cb2407d38c1e3f3456c11f9c4895b48">PushFront</a>(<span class="keyword">const</span> T&amp; element); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span> </div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#a680f2d516218892941dfaf7e7e1f1818">PopFront</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span> </div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#a3c6c2e3a44507b78458a9b871f9d2837">SetCount</a>(plUInt32 uiNewSize); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span> </div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>  Iterator <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#abc8d95b2d8a2e981bb85cece962893c0">Insert</a>(<span class="keyword">const</span> Iterator&amp; pos, <span class="keyword">const</span> T&amp; data); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span> </div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#abc8d95b2d8a2e981bb85cece962893c0">Insert</a>(<span class="keyword">const</span> Iterator&amp; pos, ConstIterator first, <span class="keyword">const</span> ConstIterator&amp; last);</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span> </div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>  Iterator <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#abc8d95b2d8a2e981bb85cece962893c0">Insert</a>(<span class="keyword">const</span> Iterator&amp; pos);</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span> </div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>  Iterator <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#a674759d77f0a6a4e523d275480e91ed9">Remove</a>(<span class="keyword">const</span> Iterator&amp; pos); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span> </div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>  Iterator <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#a674759d77f0a6a4e523d275480e91ed9">Remove</a>(Iterator first, <span class="keyword">const</span> Iterator&amp; last);</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span> </div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>  Iterator <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#af92a1c5eac5873e1592a24d509826aa0">GetIterator</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span> </div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>  Iterator <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#aecd0bbb3b0cab1001976754ecca981f3">GetEndIterator</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span> </div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>  ConstIterator <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#af92a1c5eac5873e1592a24d509826aa0">GetIterator</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span> </div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>  ConstIterator <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#aecd0bbb3b0cab1001976754ecca981f3">GetEndIterator</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span> </div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno"><a class="line" href="../../db/d85/classpl_list_base.htm#a5178a1132663b057924bf891c05eca39">  201</a></span>  <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#a5178a1132663b057924bf891c05eca39">GetAllocator</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Elements.<a class="code hl_function" href="../../d9/d4c/classpl_deque_base.htm#aa5fe7a8f8bb9e0ef2719ca74eb6d1eb5">GetAllocator</a>(); }</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span> </div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#afbfb075d918ba6eac037d84642539299">operator==</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d85/classpl_list_base.htm">plListBase&lt;T&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>  PL_ADD_DEFAULT_OPERATOR_NOTEQUAL(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d85/classpl_list_base.htm">plListBase&lt;T&gt;</a>&amp;);</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span> </div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno"><a class="line" href="../../db/d85/classpl_list_base.htm#a55b44554f0fda5b99c419e8ec2cd9cd1">  208</a></span>  plUInt64 <a class="code hl_function" href="../../db/d85/classpl_list_base.htm#a55b44554f0fda5b99c419e8ec2cd9cd1">GetHeapMemoryUsage</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Elements.<a class="code hl_function" href="../../d9/d4c/classpl_deque_base.htm#a57681ba27c144e88b9677a5d44f15947">GetHeapMemoryUsage</a>(); } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span> </div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>  ListElementBase m_First;</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span> </div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>  ListElementBase m_Last;</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span> </div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span>  <span class="comment">// \brief Small hack to get around const problems.</span></div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>  Iterator m_End;</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span> </div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>  plUInt32 m_uiCount;</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span> </div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span>  ListElement* AcquireNode();</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span> </div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>  <span class="keywordtype">void</span> ReleaseNode(ListElement* pNode);</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span> </div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span>  <a class="code hl_class" href="../../d7/de8/classpl_deque.htm">plDeque&lt;ListElement, plNullAllocatorWrapper, false&gt;</a> m_Elements;</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span> </div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>  ListElement* m_pFreeElementStack;</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span>};</div>
</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span> </div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> AllocatorWrapper = plDefaultAllocatorWrapper&gt;</div>
<div class="foldopen" id="foldopen00238" data-start="{" data-end="};">
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno"><a class="line" href="../../de/d99/classpl_list.htm">  238</a></span><span class="keyword">class </span><a class="code hl_class" href="../../de/d99/classpl_list.htm">plList</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../db/d85/classpl_list_base.htm">plListBase</a>&lt;T&gt;</div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>{</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>  <a class="code hl_class" href="../../de/d99/classpl_list.htm">plList</a>();</div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>  <span class="keyword">explicit</span> <a class="code hl_class" href="../../de/d99/classpl_list.htm">plList</a>(<a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator);</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span> </div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>  <a class="code hl_class" href="../../de/d99/classpl_list.htm">plList</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../de/d99/classpl_list.htm">plList&lt;T, AllocatorWrapper&gt;</a>&amp; other);</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>  <a class="code hl_class" href="../../de/d99/classpl_list.htm">plList</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d85/classpl_list_base.htm">plListBase&lt;T&gt;</a>&amp; other);</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span> </div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code hl_class" href="../../de/d99/classpl_list.htm">plList&lt;T, AllocatorWrapper&gt;</a>&amp; rhs);</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d85/classpl_list_base.htm">plListBase&lt;T&gt;</a>&amp; rhs);</div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span>};</div>
</div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span> </div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span><span class="preprocessor">#include &lt;Foundation/Containers/Implementation/List_inl.h&gt;</span></div>
<div class="ttc" id="aclasspl_allocator_htm"><div class="ttname"><a href="../../da/df3/classpl_allocator.htm">plAllocator</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition</b> Allocator.h:23</div></div>
<div class="ttc" id="aclasspl_deque_base_htm_a57681ba27c144e88b9677a5d44f15947"><div class="ttname"><a href="../../d9/d4c/classpl_deque_base.htm#a57681ba27c144e88b9677a5d44f15947">plDequeBase::GetHeapMemoryUsage</a></div><div class="ttdeci">plUInt64 GetHeapMemoryUsage() const</div><div class="ttdoc">Returns the amount of bytes that are currently allocated on the heap.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:970</div></div>
<div class="ttc" id="aclasspl_deque_base_htm_aa5fe7a8f8bb9e0ef2719ca74eb6d1eb5"><div class="ttname"><a href="../../d9/d4c/classpl_deque_base.htm#aa5fe7a8f8bb9e0ef2719ca74eb6d1eb5">plDequeBase::GetAllocator</a></div><div class="ttdeci">plAllocator * GetAllocator() const</div><div class="ttdoc">Returns the allocator that is used by this instance.</div><div class="ttdef"><b>Definition</b> Deque.h:168</div></div>
<div class="ttc" id="aclasspl_deque_htm"><div class="ttname"><a href="../../d7/de8/classpl_deque.htm">plDeque</a></div><div class="ttdef"><b>Definition</b> Deque.h:270</div></div>
<div class="ttc" id="aclasspl_list_base_htm"><div class="ttname"><a href="../../db/d85/classpl_list_base.htm">plListBase</a></div><div class="ttdoc">A List-class, similar to STL::list.</div><div class="ttdef"><b>Definition</b> List.h:12</div></div>
<div class="ttc" id="aclasspl_list_base_htm_a0f72ad6ded42b4070023bf40aa1e80f5"><div class="ttname"><a href="../../db/d85/classpl_list_base.htm#a0f72ad6ded42b4070023bf40aa1e80f5">plListBase::GetCount</a></div><div class="ttdeci">plUInt32 GetCount() const</div><div class="ttdoc">Returns the number of elements in the list. O(1) operation.</div><div class="ttdef"><b>Definition</b> List_inl.h:127</div></div>
<div class="ttc" id="aclasspl_list_base_htm_a3bf526859a184754341cad311333a306"><div class="ttname"><a href="../../db/d85/classpl_list_base.htm#a3bf526859a184754341cad311333a306">plListBase::~plListBase</a></div><div class="ttdeci">~plListBase()</div><div class="ttdoc">Destroys the list and all its content.</div><div class="ttdef"><b>Definition</b> List_inl.h:47</div></div>
<div class="ttc" id="aclasspl_list_base_htm_a3c6c2e3a44507b78458a9b871f9d2837"><div class="ttname"><a href="../../db/d85/classpl_list_base.htm#a3c6c2e3a44507b78458a9b871f9d2837">plListBase::SetCount</a></div><div class="ttdeci">void SetCount(plUInt32 uiNewSize)</div><div class="ttdoc">Sets the number of elements that are in the list.</div><div class="ttdef"><b>Definition</b> List_inl.h:307</div></div>
<div class="ttc" id="aclasspl_list_base_htm_a5178a1132663b057924bf891c05eca39"><div class="ttname"><a href="../../db/d85/classpl_list_base.htm#a5178a1132663b057924bf891c05eca39">plListBase::GetAllocator</a></div><div class="ttdeci">plAllocator * GetAllocator() const</div><div class="ttdoc">Returns the allocator that is used by this instance.</div><div class="ttdef"><b>Definition</b> List.h:201</div></div>
<div class="ttc" id="aclasspl_list_base_htm_a55b44554f0fda5b99c419e8ec2cd9cd1"><div class="ttname"><a href="../../db/d85/classpl_list_base.htm#a55b44554f0fda5b99c419e8ec2cd9cd1">plListBase::GetHeapMemoryUsage</a></div><div class="ttdeci">plUInt64 GetHeapMemoryUsage() const</div><div class="ttdoc">Returns the amount of bytes that are currently allocated on the heap.</div><div class="ttdef"><b>Definition</b> List.h:208</div></div>
<div class="ttc" id="aclasspl_list_base_htm_a674759d77f0a6a4e523d275480e91ed9"><div class="ttname"><a href="../../db/d85/classpl_list_base.htm#a674759d77f0a6a4e523d275480e91ed9">plListBase::Remove</a></div><div class="ttdeci">Iterator Remove(const Iterator &amp;pos)</div><div class="ttdoc">Erases the element pointed to by the iterator.</div><div class="ttdef"><b>Definition</b> List_inl.h:275</div></div>
<div class="ttc" id="aclasspl_list_base_htm_a678705060f403dfa449ff4064e146db3"><div class="ttname"><a href="../../db/d85/classpl_list_base.htm#a678705060f403dfa449ff4064e146db3">plListBase::plListBase</a></div><div class="ttdeci">plListBase(plAllocator *pAllocator)</div><div class="ttdoc">Initializes the list to be empty.</div><div class="ttdef"><b>Definition</b> List_inl.h:23</div></div>
<div class="ttc" id="aclasspl_list_base_htm_a680f2d516218892941dfaf7e7e1f1818"><div class="ttname"><a href="../../db/d85/classpl_list_base.htm#a680f2d516218892941dfaf7e7e1f1818">plListBase::PopFront</a></div><div class="ttdeci">void PopFront()</div><div class="ttdoc">Removes the very first element from the list.</div><div class="ttdef"><b>Definition</b> List_inl.h:220</div></div>
<div class="ttc" id="aclasspl_list_base_htm_a6cb2407d38c1e3f3456c11f9c4895b48"><div class="ttname"><a href="../../db/d85/classpl_list_base.htm#a6cb2407d38c1e3f3456c11f9c4895b48">plListBase::PushFront</a></div><div class="ttdeci">T &amp; PushFront()</div><div class="ttdoc">Appends a default-constructed element to the front of the list and returns a reference to it.</div><div class="ttdef"><b>Definition</b> List_inl.h:200</div></div>
<div class="ttc" id="aclasspl_list_base_htm_a758853f7e43a965c8d717da29c691d70"><div class="ttname"><a href="../../db/d85/classpl_list_base.htm#a758853f7e43a965c8d717da29c691d70">plListBase::PopBack</a></div><div class="ttdeci">void PopBack()</div><div class="ttdoc">Removes the very last element from the list.</div><div class="ttdef"><b>Definition</b> List_inl.h:212</div></div>
<div class="ttc" id="aclasspl_list_base_htm_a84bc527ec428498368b0785e6a79c05b"><div class="ttname"><a href="../../db/d85/classpl_list_base.htm#a84bc527ec428498368b0785e6a79c05b">plListBase::PeekBack</a></div><div class="ttdeci">const T &amp; PeekBack() const</div><div class="ttdoc">Returns the very last element in the list.</div><div class="ttdef"><b>Definition</b> List_inl.h:179</div></div>
<div class="ttc" id="aclasspl_list_base_htm_a91b87ea6f64ea9968b0c2b7ceeae0d30"><div class="ttname"><a href="../../db/d85/classpl_list_base.htm#a91b87ea6f64ea9968b0c2b7ceeae0d30">plListBase::Compact</a></div><div class="ttdeci">void Compact()</div><div class="ttdoc">See plDeque::Compact()</div><div class="ttdef"><b>Definition</b> List_inl.h:149</div></div>
<div class="ttc" id="aclasspl_list_base_htm_aa12bda6672fc6ba0e09663175b613203"><div class="ttname"><a href="../../db/d85/classpl_list_base.htm#aa12bda6672fc6ba0e09663175b613203">plListBase::PushBack</a></div><div class="ttdeci">T &amp; PushBack()</div><div class="ttdoc">Appends a default-constructed element to the list and returns a reference to it.</div><div class="ttdef"><b>Definition</b> List_inl.h:188</div></div>
<div class="ttc" id="aclasspl_list_base_htm_aa29cb1d61606e61eb23886d14ec475cf"><div class="ttname"><a href="../../db/d85/classpl_list_base.htm#aa29cb1d61606e61eb23886d14ec475cf">plListBase::operator=</a></div><div class="ttdeci">void operator=(const plListBase&lt; T &gt; &amp;cc)</div><div class="ttdoc">Copies the list cc into this list.</div><div class="ttdef"><b>Definition</b> List_inl.h:53</div></div>
<div class="ttc" id="aclasspl_list_base_htm_aa70e3db3c5b970e3f3de0815c241da4e"><div class="ttname"><a href="../../db/d85/classpl_list_base.htm#aa70e3db3c5b970e3f3de0815c241da4e">plListBase::PeekFront</a></div><div class="ttdeci">const T &amp; PeekFront() const</div><div class="ttdoc">Returns the very first element in the list.</div><div class="ttdef"><b>Definition</b> List_inl.h:171</div></div>
<div class="ttc" id="aclasspl_list_base_htm_ab4732ee74e05a8a305f93bcc51f3f218"><div class="ttname"><a href="../../db/d85/classpl_list_base.htm#ab4732ee74e05a8a305f93bcc51f3f218">plListBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Clears the list, afterwards it is empty.</div><div class="ttdef"><b>Definition</b> List_inl.h:139</div></div>
<div class="ttc" id="aclasspl_list_base_htm_abc8d95b2d8a2e981bb85cece962893c0"><div class="ttname"><a href="../../db/d85/classpl_list_base.htm#abc8d95b2d8a2e981bb85cece962893c0">plListBase::Insert</a></div><div class="ttdeci">Iterator Insert(const Iterator &amp;pos, const T &amp;data)</div><div class="ttdoc">Inserts one element before the position defined by the iterator.</div><div class="ttdef"><b>Definition</b> List_inl.h:245</div></div>
<div class="ttc" id="aclasspl_list_base_htm_ae908b213ebb19ad241e201ef7a7b5ab9"><div class="ttname"><a href="../../db/d85/classpl_list_base.htm#ae908b213ebb19ad241e201ef7a7b5ab9">plListBase::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns whether size == 0. O(1) operation.</div><div class="ttdef"><b>Definition</b> List_inl.h:133</div></div>
<div class="ttc" id="aclasspl_list_base_htm_aecd0bbb3b0cab1001976754ecca981f3"><div class="ttname"><a href="../../db/d85/classpl_list_base.htm#aecd0bbb3b0cab1001976754ecca981f3">plListBase::GetEndIterator</a></div><div class="ttdeci">Iterator GetEndIterator()</div><div class="ttdoc">Returns an iterator pointing behind the last element. Necessary if one wants to insert elements at th...</div><div class="ttdef"><b>Definition</b> List_inl.h:109</div></div>
<div class="ttc" id="aclasspl_list_base_htm_af92a1c5eac5873e1592a24d509826aa0"><div class="ttname"><a href="../../db/d85/classpl_list_base.htm#af92a1c5eac5873e1592a24d509826aa0">plListBase::GetIterator</a></div><div class="ttdeci">Iterator GetIterator()</div><div class="ttdoc">Returns an iterator to the first list-element.</div><div class="ttdef"><b>Definition</b> List_inl.h:103</div></div>
<div class="ttc" id="aclasspl_list_base_htm_afbfb075d918ba6eac037d84642539299"><div class="ttname"><a href="../../db/d85/classpl_list_base.htm#afbfb075d918ba6eac037d84642539299">plListBase::operator==</a></div><div class="ttdeci">bool operator==(const plListBase&lt; T &gt; &amp;rhs) const</div><div class="ttdoc">Comparison operator.</div><div class="ttdef"><b>Definition</b> List_inl.h:317</div></div>
<div class="ttc" id="aclasspl_list_htm"><div class="ttname"><a href="../../de/d99/classpl_list.htm">plList</a></div><div class="ttdef"><b>Definition</b> List.h:239</div></div>
<div class="ttc" id="astructpl_list_base_1_1_iterator_htm"><div class="ttname"><a href="../../d9/dde/structpl_list_base_1_1_iterator.htm">plListBase::Iterator</a></div><div class="ttdoc">A forward-iterator. Allows sequential access from front-to-back.</div><div class="ttdef"><b>Definition</b> List.h:86</div></div>
<div class="ttc" id="astructpl_list_base_1_1_iterator_htm_a53ebb1739537a7a2c8bd055100ea8d63"><div class="ttname"><a href="../../d9/dde/structpl_list_base_1_1_iterator.htm#a53ebb1739537a7a2c8bd055100ea8d63">plListBase::Iterator::operator-&gt;</a></div><div class="ttdeci">T * operator-&gt;()</div><div class="ttdoc">Accesses the element stored in the node.</div><div class="ttdef"><b>Definition</b> List.h:103</div></div>
<div class="ttc" id="astructpl_list_base_1_1_iterator_htm_ab366e13f881112e202f88b8c04cb26ce"><div class="ttname"><a href="../../d9/dde/structpl_list_base_1_1_iterator.htm#ab366e13f881112e202f88b8c04cb26ce">plListBase::Iterator::Iterator</a></div><div class="ttdeci">Iterator()</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition</b> List.h:94</div></div>
<div class="ttc" id="astructpl_list_base_1_1_iterator_htm_ae39dfcd9dbb55144930edd461db2090d"><div class="ttname"><a href="../../d9/dde/structpl_list_base_1_1_iterator.htm#ae39dfcd9dbb55144930edd461db2090d">plListBase::Iterator::operator*</a></div><div class="ttdeci">T &amp; operator*()</div><div class="ttdoc">Accesses the element stored in the node.</div><div class="ttdef"><b>Definition</b> List.h:100</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_3416883c1320ec68c4d0694befd114fc.htm">Containers</a></li><li class="navelem"><b>List.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
