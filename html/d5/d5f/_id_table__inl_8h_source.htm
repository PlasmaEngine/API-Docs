<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<!-- BEGIN opengraph metadata -->
<meta property="og:title" content="Doxygen Awesome" />
<meta property="og:image" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta property="og:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<meta property="og:url" content="https://jothepro.github.io/doxygen-awesome-css/" />
<!-- END opengraph metadata -->
<!-- BEGIN twitter metadata -->
<meta name="twitter:image:src" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta name="twitter:title" content="Doxygen Awesome" />
<meta name="twitter:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<!-- END twitter metadata -->
<title>Plasma Engine: Code/Engine/Foundation/Containers/Implementation/IdTable_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link rel="icon" type="image/svg+xml" href="logo.drawio.svg"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-paragraph-link.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-tabs.js"></script>
<script type="text/javascript" src="../../toggle-alternative-theme.js"></script>
<script type="text/javascript">
    DoxygenAwesomeFragmentCopyButton.init()
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeParagraphLink.init()
    DoxygenAwesomeInteractiveToc.init()
    DoxygenAwesomeTabs.init()
</script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Plasma Engine
   &#160;<span id="projectnumber">2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d5/d5f/_id_table__inl_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">IdTable_inl.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span> </div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="comment">// ***** Const Iterator *****</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span> </div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><a class="code hl_class" href="../../d7/de4/classpl_id_table_base.htm">plIdTableBase&lt;IdType, ValueType&gt;::ConstIterator::ConstIterator</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/de4/classpl_id_table_base.htm">plIdTableBase&lt;IdType, ValueType&gt;</a>&amp; idTable)</div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span>  : m_IdTable(idTable)</div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span>  , m_CurrentIndex(0)</div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span>  , m_CurrentCount(0)</div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span>{</div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span>  <span class="keywordflow">if</span> (m_IdTable.IsEmpty())</div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span>    <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span> </div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>  <span class="keywordflow">while</span> (m_IdTable.m_pEntries[m_CurrentIndex].id.m_InstanceIndex != m_CurrentIndex)</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>  {</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span>    ++m_CurrentIndex;</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span>  }</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>}</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span> </div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00020" data-start="{" data-end="}">
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno"><a class="line" href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#a03fe75b2a1763e0e440c9c1c79eecd03">   20</a></span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#a03fe75b2a1763e0e440c9c1c79eecd03">plIdTableBase&lt;IdType, ValueType&gt;::ConstIterator::IsValid</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>  <span class="keywordflow">return</span> m_CurrentCount &lt; m_IdTable.m_Count;</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>}</div>
</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span> </div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00026" data-start="{" data-end="}">
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno"><a class="line" href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#a2600d496139487c35692f4c6762762f2">   26</a></span>PL_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#a2600d496139487c35692f4c6762762f2">plIdTableBase&lt;IdType, ValueType&gt;::ConstIterator::operator==</a>(</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>  <span class="keyword">const</span> <span class="keyword">typename</span> <a class="code hl_class" href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm">plIdTableBase&lt;IdType, ValueType&gt;::ConstIterator</a>&amp; it2)<span class="keyword"> const</span></div>
<div class="foldopen" id="foldopen00028" data-start="{" data-end="}">
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno"><a class="line" href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#a03fe75b2a1763e0e440c9c1c79eecd03">   28</a></span><span class="keyword"></span>{</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>  <span class="keywordflow">return</span> m_IdTable.m_pEntries == it2.m_IdTable.m_pEntries &amp;&amp; m_CurrentIndex == it2.m_CurrentIndex;</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>}</div>
<div class="foldopen" id="foldopen00031" data-start="{" data-end="}">
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno"><a class="line" href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#a2600d496139487c35692f4c6762762f2">   31</a></span> </div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00033" data-start="{" data-end="}">
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno"><a class="line" href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#ac989e1bb35ff77f9a105e9149aea1475">   33</a></span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#ac989e1bb35ff77f9a105e9149aea1475">plIdTableBase&lt;IdType, ValueType&gt;::ConstIterator::operator!=</a>(</div>
<div class="foldopen" id="foldopen00034" data-start="{" data-end="}">
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno"><a class="line" href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#ac989e1bb35ff77f9a105e9149aea1475">   34</a></span>  <span class="keyword">const</span> <span class="keyword">typename</span> <a class="code hl_class" href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm">plIdTableBase&lt;IdType, ValueType&gt;::ConstIterator</a>&amp; it2)<span class="keyword"> const</span></div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>  <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == it2);</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno"><a class="line" href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#aa764043bd01df493cecf225b65071c45">   37</a></span>}</div>
</div>
</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span> </div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00040" data-start="{" data-end="}">
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno"><a class="line" href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#aa764043bd01df493cecf225b65071c45">   40</a></span>PL_ALWAYS_INLINE IdType <a class="code hl_function" href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#aa764043bd01df493cecf225b65071c45">plIdTableBase&lt;IdType, ValueType&gt;::ConstIterator::Id</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>  <span class="keywordflow">return</span> m_IdTable.m_pEntries[m_CurrentIndex].id;</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno"><a class="line" href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#a81a2faa7a79bcc721c85877fd6f62264">   43</a></span>}</div>
</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span> </div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00046" data-start="{" data-end="}">
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno"><a class="line" href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#a84603089b35b95c1dc2143a1f7700ab2">   46</a></span>PL_FORCE_INLINE <span class="keyword">const</span> ValueType&amp; <a class="code hl_function" href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#a17c5abb67693d5dd1a709f2d7e14e44e">plIdTableBase&lt;IdType, ValueType&gt;::ConstIterator::Value</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>  <span class="keywordflow">return</span> m_IdTable.m_pEntries[m_CurrentIndex].value;</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>}</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span> </div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00052" data-start="{" data-end="}">
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno"><a class="line" href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#a81a2faa7a79bcc721c85877fd6f62264">   52</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#a81a2faa7a79bcc721c85877fd6f62264">plIdTableBase&lt;IdType, ValueType&gt;::ConstIterator::Next</a>()</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span>{</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>  ++m_CurrentCount;</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>  <span class="keywordflow">if</span> (m_CurrentCount == m_IdTable.m_Count)</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>    <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span> </div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>  <span class="keywordflow">do</span></div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>  {</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>    ++m_CurrentIndex;</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>  } <span class="keywordflow">while</span> (m_IdTable.m_pEntries[m_CurrentIndex].id.m_InstanceIndex != m_CurrentIndex);</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>}</div>
</div>
<div class="foldopen" id="foldopen00063" data-start="{" data-end="}">
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno"><a class="line" href="../../d7/d04/structpl_id_table_base_1_1_iterator.htm#a17c5abb67693d5dd1a709f2d7e14e44e">   63</a></span> </div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00065" data-start="{" data-end="}">
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno"><a class="line" href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#a84603089b35b95c1dc2143a1f7700ab2">   65</a></span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#a84603089b35b95c1dc2143a1f7700ab2">plIdTableBase&lt;IdType, ValueType&gt;::ConstIterator::operator++</a>()</div>
<div class="foldopen" id="foldopen00066" data-start="{" data-end="}">
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno"><a class="line" href="../../d7/d04/structpl_id_table_base_1_1_iterator.htm#a516d792aacb056f9bf2e2b6057b94a6a">   66</a></span>{</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>  Next();</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>}</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span> </div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span> </div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span><span class="comment">// ***** Iterator *****</span></div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span> </div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span><a class="code hl_class" href="../../d7/de4/classpl_id_table_base.htm">plIdTableBase&lt;IdType, ValueType&gt;::Iterator::Iterator</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/de4/classpl_id_table_base.htm">plIdTableBase&lt;IdType, ValueType&gt;</a>&amp; idTable)</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>  : ConstIterator(idTable)</div>
<div class="foldopen" id="foldopen00076" data-start="{" data-end="}">
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#aa8c4ed993cad9a1b8ff0a50f236fbd3e">   76</a></span>{</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>}</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span> </div>
<div class="foldopen" id="foldopen00079" data-start="{" data-end="}">
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#adb03a9a939ec278d906516da4009549e">   79</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00080" data-start="{" data-end="}">
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno"><a class="line" href="../../d7/d04/structpl_id_table_base_1_1_iterator.htm#a516d792aacb056f9bf2e2b6057b94a6a">   80</a></span>PL_ALWAYS_INLINE ValueType&amp; <a class="code hl_function" href="../../d7/d04/structpl_id_table_base_1_1_iterator.htm#a516d792aacb056f9bf2e2b6057b94a6a">plIdTableBase&lt;IdType, ValueType&gt;::Iterator::Value</a>()</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>{</div>
<div class="foldopen" id="foldopen00082" data-start="{" data-end="}">
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a0c84eaabd4e0736aa3628b3da78a3ad9">   82</a></span>  <span class="keywordflow">return</span> this-&gt;m_IdTable.m_pEntries[this-&gt;m_CurrentIndex].value;</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>}</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span> </div>
<div class="foldopen" id="foldopen00085" data-start="{" data-end="}">
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#aa222d4d1bbcb5070c18c74cd37ed8fbf">   85</a></span> </div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span><span class="comment">// ***** plIdTableBase *****</span></div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span> </div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00089" data-start="{" data-end="}">
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#aa8c4ed993cad9a1b8ff0a50f236fbd3e">   89</a></span><a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#aa8c4ed993cad9a1b8ff0a50f236fbd3e">plIdTableBase&lt;IdType, ValueType&gt;::plIdTableBase</a>(<a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>{</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>  m_pEntries = <span class="keyword">nullptr</span>;</div>
<div class="foldopen" id="foldopen00092" data-start="{" data-end="}">
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a15c65a7b02e62fb62afe805a0e33f308">   92</a></span>  m_Count = 0;</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>  m_Capacity = 0;</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>  m_FreelistEnqueue = -1;</div>
<div class="foldopen" id="foldopen00095" data-start="{" data-end="}">
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#ae38b1ed15a297464f695cadb2f28d7d9">   95</a></span>  m_FreelistDequeue = 0;</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>  m_pAllocator = pAllocator;</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>}</div>
<div class="foldopen" id="foldopen00098" data-start="{" data-end="}">
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a4523f0b2ee1767737fa47a1cbd1199b3">   98</a></span> </div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00100" data-start="{" data-end="}">
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#adb03a9a939ec278d906516da4009549e">  100</a></span><a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#aa8c4ed993cad9a1b8ff0a50f236fbd3e">plIdTableBase&lt;IdType, ValueType&gt;::plIdTableBase</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/de4/classpl_id_table_base.htm">plIdTableBase&lt;IdType, ValueType&gt;</a>&amp; other, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="foldopen" id="foldopen00101" data-start="{" data-end="}">
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#adbe0139546b79d2c0f333633e752f2a3">  101</a></span>{</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>  m_pEntries = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>  m_Count = 0;</div>
<div class="foldopen" id="foldopen00104" data-start="{" data-end="}">
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a309cd2e70e38062fd94b27ee20c48df0">  104</a></span>  m_Capacity = 0;</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>  m_FreelistEnqueue = -1;</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>  m_FreelistDequeue = 0;</div>
<div class="foldopen" id="foldopen00107" data-start="{" data-end="}">
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#acc69becc1ca374984d1249fbb4fb4b1f">  107</a></span>  m_pAllocator = pAllocator;</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span> </div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>  *<span class="keyword">this</span> = other;</div>
<div class="foldopen" id="foldopen00110" data-start="{" data-end="}">
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a2562e201e102246933d4e0f4aeaf9afc">  110</a></span>}</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span> </div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00113" data-start="{" data-end="}">
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#ada66d91479caa902bbff8185d469d0f2">  113</a></span><a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#a0c84eaabd4e0736aa3628b3da78a3ad9">plIdTableBase&lt;IdType, ValueType&gt;::~plIdTableBase</a>()</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>{</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>  <span class="keywordflow">for</span> (IndexType i = 0; i &lt; m_Capacity; ++i)</div>
<div class="foldopen" id="foldopen00116" data-start="{" data-end="}">
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a239394301b48f65ff7814a9d0b487f6f">  116</a></span>  {</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>    <span class="keywordflow">if</span> (m_pEntries[i].<span class="keywordtype">id</span>.m_InstanceIndex == i)</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>    {</div>
<div class="foldopen" id="foldopen00119" data-start="{" data-end="}">
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a1e15d1e09bbbea561f24c31807e04e1c">  119</a></span>      <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#afe524b6781f69e2fd4eceb18f2a27640">plMemoryUtils::Destruct</a>(&amp;m_pEntries[i].value, 1);</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>    }</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>  }</div>
<div class="foldopen" id="foldopen00122" data-start="{" data-end="}">
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a913cf598b8984e5f524d3c13f3e2eab2">  122</a></span> </div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>  PL_DELETE_RAW_BUFFER(m_pAllocator, m_pEntries);</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>  m_Capacity = 0;</div>
<div class="foldopen" id="foldopen00125" data-start="{" data-end="}">
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a8aaa9ab9ca46f789b8919dfc34241e84">  125</a></span>}</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span> </div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00128" data-start="{" data-end="}">
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a958a2921c9e34661b5944634c3d35deb">  128</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#aa222d4d1bbcb5070c18c74cd37ed8fbf">plIdTableBase&lt;IdType, ValueType&gt;::operator=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/de4/classpl_id_table_base.htm">plIdTableBase&lt;IdType, ValueType&gt;</a>&amp; rhs)</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>{</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>  <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#a4523f0b2ee1767737fa47a1cbd1199b3">Clear</a>();</div>
<div class="foldopen" id="foldopen00131" data-start="{" data-end="}">
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a73375a6d0e6105ed7e8da802b3f1f0d9">  131</a></span>  <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#a65c44c384534dd18722c2c42bc5cfd5b">Reserve</a>(rhs.m_Capacity);</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span> </div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>  <span class="keywordflow">for</span> (IndexType i = 0; i &lt; rhs.m_Capacity; ++i)</div>
<div class="foldopen" id="foldopen00134" data-start="{" data-end="}">
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a5705fa7e959dd0c5020f03e8cf616bff">  134</a></span>  {</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>    Entry&amp; entry = m_pEntries[i];</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span> </div>
<div class="foldopen" id="foldopen00137" data-start="{" data-end="}">
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#afa24683b274a2a8205a4c114f4e4ba17">  137</a></span>    entry.id = rhs.m_pEntries[i].id;</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>    <span class="keywordflow">if</span> (entry.id.m_InstanceIndex == i)</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>    {</div>
<div class="foldopen" id="foldopen00140" data-start="{" data-end="}">
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#ac381dc2aea4a35d8a6066382bf04afb5">  140</a></span>      <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a07b6ac85720d94f8568760ac12f786e5">plMemoryUtils::CopyConstruct</a>(&amp;entry.value, rhs.m_pEntries[i].value, 1);</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>    }</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>  }</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span> </div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>  m_Count = rhs.m_Count;</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>  m_FreelistDequeue = rhs.m_FreelistDequeue;</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>}</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span> </div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00149" data-start="{" data-end="}">
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a65c44c384534dd18722c2c42bc5cfd5b">  149</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#a65c44c384534dd18722c2c42bc5cfd5b">plIdTableBase&lt;IdType, ValueType&gt;::Reserve</a>(IndexType capacity)</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>{</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>  <span class="keywordflow">if</span> (m_Capacity &gt;= capacity + CAPACITY_ALIGNMENT)</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>    <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span> </div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>  <span class="keyword">const</span> plUInt64 uiCurCap64 = <span class="keyword">static_cast&lt;</span>plUInt64<span class="keyword">&gt;</span>(this-&gt;m_Capacity);</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>  plUInt64 uiNewCapacity64 = uiCurCap64 + (uiCurCap64 / 2);</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span> </div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>  uiNewCapacity64 = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">plMath::Max&lt;plUInt64&gt;</a>(uiNewCapacity64, capacity + CAPACITY_ALIGNMENT);</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span> </div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>  <span class="comment">// the maximum value must leave room for the capacity alignment computation below (without overflowing the 32 bit range)</span></div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>  uiNewCapacity64 = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a314b24989122e22968ae0a11cc872e28">plMath::Min&lt;plUInt64&gt;</a>(uiNewCapacity64, 0xFFFFFFFFllu - (CAPACITY_ALIGNMENT - 1));</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span> </div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>  uiNewCapacity64 = (uiNewCapacity64 + (CAPACITY_ALIGNMENT - 1)) &amp; ~(CAPACITY_ALIGNMENT - 1);</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span> </div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>  SetCapacity(<span class="keyword">static_cast&lt;</span>IndexType<span class="keyword">&gt;</span>(uiNewCapacity64 &amp; 0xFFFFFFFF));</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>}</div>
</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span> </div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00168" data-start="{" data-end="}">
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a15c65a7b02e62fb62afe805a0e33f308">  168</a></span>PL_ALWAYS_INLINE <span class="keyword">typename</span> plIdTableBase&lt;IdType, ValueType&gt;::IndexType <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#a15c65a7b02e62fb62afe805a0e33f308">plIdTableBase&lt;IdType, ValueType&gt;::GetCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>  <span class="keywordflow">return</span> m_Count;</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>}</div>
</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span> </div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00174" data-start="{" data-end="}">
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#ae38b1ed15a297464f695cadb2f28d7d9">  174</a></span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#ae38b1ed15a297464f695cadb2f28d7d9">plIdTableBase&lt;IdType, ValueType&gt;::IsEmpty</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>  <span class="keywordflow">return</span> m_Count == 0;</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>}</div>
</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span> </div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00180" data-start="{" data-end="}">
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a4523f0b2ee1767737fa47a1cbd1199b3">  180</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#a4523f0b2ee1767737fa47a1cbd1199b3">plIdTableBase&lt;IdType, ValueType&gt;::Clear</a>()</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>{</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>  <span class="keywordflow">for</span> (IndexType i = 0; i &lt; m_Capacity; ++i)</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>  {</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>    Entry&amp; entry = m_pEntries[i];</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span> </div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>    <span class="keywordflow">if</span> (entry.id.m_InstanceIndex == i)</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>    {</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>      <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#afe524b6781f69e2fd4eceb18f2a27640">plMemoryUtils::Destruct</a>(&amp;entry.value, 1);</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>      ++entry.id.m_Generation;</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>    }</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span> </div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>    entry.id.m_InstanceIndex = <span class="keyword">static_cast&lt;</span>decltype(entry.<span class="keywordtype">id</span>.m_InstanceIndex)<span class="keyword">&gt;</span>(i + 1);</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>  }</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span> </div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>  m_FreelistDequeue = 0;</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>  m_FreelistEnqueue = m_Capacity - 1;</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>  m_Count = 0;</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>}</div>
</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span> </div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00201" data-start="{" data-end="}">
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#adbe0139546b79d2c0f333633e752f2a3">  201</a></span>IdType <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#adbe0139546b79d2c0f333633e752f2a3">plIdTableBase&lt;IdType, ValueType&gt;::Insert</a>(<span class="keyword">const</span> ValueType&amp; value)</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>{</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>  <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#a65c44c384534dd18722c2c42bc5cfd5b">Reserve</a>(m_Count + 1);</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span> </div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>  <span class="keyword">const</span> IndexType uiNewIndex = m_FreelistDequeue;</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>  Entry&amp; entry = m_pEntries[uiNewIndex];</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span> </div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>  m_FreelistDequeue = entry.id.m_InstanceIndex;</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span>  entry.id.m_InstanceIndex = <span class="keyword">static_cast&lt;</span>decltype(entry.<span class="keywordtype">id</span>.m_InstanceIndex)<span class="keyword">&gt;</span>(uiNewIndex);</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span> </div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span>  <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a07b6ac85720d94f8568760ac12f786e5">plMemoryUtils::CopyConstruct</a>(&amp;entry.value, value, 1);</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span> </div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>  ++m_Count;</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span> </div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>  <span class="keywordflow">return</span> entry.id;</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>}</div>
</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span> </div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00219" data-start="{" data-end="}">
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a309cd2e70e38062fd94b27ee20c48df0">  219</a></span>IdType <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#adbe0139546b79d2c0f333633e752f2a3">plIdTableBase&lt;IdType, ValueType&gt;::Insert</a>(ValueType&amp;&amp; value)</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>{</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>  <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#a65c44c384534dd18722c2c42bc5cfd5b">Reserve</a>(m_Count + 1);</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span> </div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>  <span class="keyword">const</span> IndexType uiNewIndex = m_FreelistDequeue;</div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span>  Entry&amp; entry = m_pEntries[uiNewIndex];</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span> </div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>  m_FreelistDequeue = entry.id.m_InstanceIndex;</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>  entry.id.m_InstanceIndex = <span class="keyword">static_cast&lt;</span>decltype(entry.<span class="keywordtype">id</span>.m_InstanceIndex)<span class="keyword">&gt;</span>(uiNewIndex);</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span> </div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>  <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#abec7a10f06a461b6d32c183b6347cc80">plMemoryUtils::MoveConstruct&lt;ValueType&gt;</a>(&amp;entry.value, std::move(value));</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span> </div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>  ++m_Count;</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span> </div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>  <span class="keywordflow">return</span> entry.id;</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span>}</div>
</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span> </div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00237" data-start="{" data-end="}">
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#acc69becc1ca374984d1249fbb4fb4b1f">  237</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#acc69becc1ca374984d1249fbb4fb4b1f">plIdTableBase&lt;IdType, ValueType&gt;::Remove</a>(<span class="keyword">const</span> IdType <span class="keywordtype">id</span>, ValueType* out_pOldValue <span class="comment">/*= nullptr*/</span>)</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>{</div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>  <span class="keywordflow">if</span> (m_Capacity &lt;= <span class="keywordtype">id</span>.m_InstanceIndex)</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span> </div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>  <span class="keyword">const</span> IndexType uiIndex = <span class="keywordtype">id</span>.m_InstanceIndex;</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>  Entry&amp; entry = m_pEntries[uiIndex];</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>  <span class="keywordflow">if</span> (!entry.id.IsIndexAndGenerationEqual(<span class="keywordtype">id</span>))</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span> </div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>  <span class="keywordflow">if</span> (out_pOldValue != <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>    *out_pOldValue = std::move(m_pEntries[uiIndex].value);</div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span> </div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>  <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#afe524b6781f69e2fd4eceb18f2a27640">plMemoryUtils::Destruct</a>(&amp;entry.value, 1);</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span> </div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>  entry.id.m_InstanceIndex = m_pEntries[m_FreelistEnqueue].id.m_InstanceIndex;</div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span>  ++entry.id.m_Generation;</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span> </div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span>  <span class="comment">// at wrap around, prevent generation from becoming 0, to ensure that a zero initialized array could ever contain a valid ID</span></div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span>  <span class="keywordflow">if</span> (entry.id.m_Generation == 0)</div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span>    entry.id.m_Generation = 1;</div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span> </div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span>  m_pEntries[m_FreelistEnqueue].id.m_InstanceIndex = <span class="keyword">static_cast&lt;</span>decltype(entry.<span class="keywordtype">id</span>.m_InstanceIndex)<span class="keyword">&gt;</span>(uiIndex);</div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span>  m_FreelistEnqueue = uiIndex;</div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span> </div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span>  --m_Count;</div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span>  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>}</div>
</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span> </div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00267" data-start="{" data-end="}">
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a2562e201e102246933d4e0f4aeaf9afc">  267</a></span>PL_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#a2562e201e102246933d4e0f4aeaf9afc">plIdTableBase&lt;IdType, ValueType&gt;::TryGetValue</a>(<span class="keyword">const</span> IdType <span class="keywordtype">id</span>, ValueType&amp; out_value)<span class="keyword"> const</span></div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>  <span class="keyword">const</span> IndexType index = <span class="keywordtype">id</span>.m_InstanceIndex;</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span>  <span class="keywordflow">if</span> (index &lt; m_Capacity &amp;&amp; m_pEntries[index].<span class="keywordtype">id</span>.IsIndexAndGenerationEqual(<span class="keywordtype">id</span>))</div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span>  {</div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span>    out_value = m_pEntries[index].value;</div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span>    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span>  }</div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span>  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span>}</div>
</div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span> </div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00279" data-start="{" data-end="}">
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#ada66d91479caa902bbff8185d469d0f2">  279</a></span>PL_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#a2562e201e102246933d4e0f4aeaf9afc">plIdTableBase&lt;IdType, ValueType&gt;::TryGetValue</a>(<span class="keyword">const</span> IdType <span class="keywordtype">id</span>, ValueType*&amp; out_pValue)<span class="keyword"> const</span></div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span>  <span class="keyword">const</span> IndexType index = <span class="keywordtype">id</span>.m_InstanceIndex;</div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span>  <span class="keywordflow">if</span> (index &lt; m_Capacity &amp;&amp; m_pEntries[index].<span class="keywordtype">id</span>.IsIndexAndGenerationEqual(<span class="keywordtype">id</span>))</div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span>  {</div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span>    out_pValue = &amp;m_pEntries[index].value;</div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span>    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span>  }</div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span>  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span>}</div>
</div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span> </div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00291" data-start="{" data-end="}">
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a239394301b48f65ff7814a9d0b487f6f">  291</a></span>PL_FORCE_INLINE <span class="keyword">const</span> ValueType&amp; <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#a239394301b48f65ff7814a9d0b487f6f">plIdTableBase&lt;IdType, ValueType&gt;::operator[]</a>(<span class="keyword">const</span> IdType <span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span>  PL_ASSERT_DEBUG(<span class="keywordtype">id</span>.m_InstanceIndex &lt; m_Capacity, <span class="stringliteral">&quot;Out of bounds access. Table has {0} elements, trying to access element at index {1}.&quot;</span>,</div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span>    m_Capacity, <span class="keywordtype">id</span>.m_InstanceIndex);</div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span>  <span class="keyword">const</span> Entry&amp; entry = m_pEntries[<span class="keywordtype">id</span>.m_InstanceIndex];</div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span>  PL_ASSERT_DEBUG(entry.id.IsIndexAndGenerationEqual(<span class="keywordtype">id</span>), <span class="stringliteral">&quot;Stale access. Trying to access a value (generation: {0}) that has been removed and replaced by a new value (generation: {1})&quot;</span>, entry.id.m_Generation, <span class="keywordtype">id</span>.m_Generation);</div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span> </div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span>  <span class="keywordflow">return</span> entry.value;</div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span>}</div>
</div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span> </div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00302" data-start="{" data-end="}">
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a1e15d1e09bbbea561f24c31807e04e1c">  302</a></span>PL_FORCE_INLINE ValueType&amp; <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#a239394301b48f65ff7814a9d0b487f6f">plIdTableBase&lt;IdType, ValueType&gt;::operator[]</a>(<span class="keyword">const</span> IdType <span class="keywordtype">id</span>)</div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span>{</div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span>  PL_ASSERT_DEBUG(<span class="keywordtype">id</span>.m_InstanceIndex &lt; m_Capacity, <span class="stringliteral">&quot;Out of bounds access. Table has {0} elements, trying to access element at index {1}.&quot;</span>, m_Capacity, <span class="keywordtype">id</span>.m_InstanceIndex);</div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span> </div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span>  Entry&amp; entry = m_pEntries[<span class="keywordtype">id</span>.m_InstanceIndex];</div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span> </div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span>  PL_ASSERT_DEBUG(entry.id.IsIndexAndGenerationEqual(<span class="keywordtype">id</span>), <span class="stringliteral">&quot;Stale access. Trying to access a value (generation: {0}) that has been removed and replaced by a new value (generation: {1})&quot;</span>, <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(entry.id.m_Generation), <span class="keywordtype">id</span>.m_Generation);</div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span> </div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span>  <span class="keywordflow">return</span> entry.value;</div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span>}</div>
</div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span> </div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00314" data-start="{" data-end="}">
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a913cf598b8984e5f524d3c13f3e2eab2">  314</a></span>PL_FORCE_INLINE <span class="keyword">const</span> ValueType&amp; <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#a913cf598b8984e5f524d3c13f3e2eab2">plIdTableBase&lt;IdType, ValueType&gt;::GetValueUnchecked</a>(<span class="keyword">const</span> IndexType index)<span class="keyword"> const</span></div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span>  PL_ASSERT_DEBUG(index &lt; m_Capacity, <span class="stringliteral">&quot;Out of bounds access. Table has {0} elements, trying to access element at index {1}.&quot;</span>, m_Capacity, index);</div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span>  <span class="keywordflow">return</span> m_pEntries[index].value;</div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>}</div>
</div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span> </div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00321" data-start="{" data-end="}">
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a8aaa9ab9ca46f789b8919dfc34241e84">  321</a></span>PL_FORCE_INLINE ValueType&amp; <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#a913cf598b8984e5f524d3c13f3e2eab2">plIdTableBase&lt;IdType, ValueType&gt;::GetValueUnchecked</a>(<span class="keyword">const</span> IndexType index)</div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span>{</div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span>  PL_ASSERT_DEBUG(index &lt; m_Capacity, <span class="stringliteral">&quot;Out of bounds access. Table has {0} elements, trying to access element at index {1}.&quot;</span>, m_Capacity, index);</div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span>  <span class="keywordflow">return</span> m_pEntries[index].value;</div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span>}</div>
</div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span> </div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00328" data-start="{" data-end="}">
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a958a2921c9e34661b5944634c3d35deb">  328</a></span>PL_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#a958a2921c9e34661b5944634c3d35deb">plIdTableBase&lt;IdType, ValueType&gt;::Contains</a>(<span class="keyword">const</span> IdType <span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span>  <span class="keyword">const</span> IndexType index = <span class="keywordtype">id</span>.m_InstanceIndex;</div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span>  <span class="keywordflow">return</span> index &lt; m_Capacity &amp;&amp; m_pEntries[index].id.IsIndexAndGenerationEqual(<span class="keywordtype">id</span>);</div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span>}</div>
</div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span> </div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00335" data-start="{" data-end="}">
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a73375a6d0e6105ed7e8da802b3f1f0d9">  335</a></span>PL_ALWAYS_INLINE <span class="keyword">typename</span> <a class="code hl_struct" href="../../d7/d04/structpl_id_table_base_1_1_iterator.htm">plIdTableBase&lt;IdType, ValueType&gt;::Iterator</a> <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#a73375a6d0e6105ed7e8da802b3f1f0d9">plIdTableBase&lt;IdType, ValueType&gt;::GetIterator</a>()</div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span>{</div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span>  <span class="keywordflow">return</span> <a class="code hl_struct" href="../../d7/d04/structpl_id_table_base_1_1_iterator.htm">Iterator</a>(*<span class="keyword">this</span>);</div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span>}</div>
</div>
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno">  339</span> </div>
<div class="line"><a id="l00340" name="l00340"></a><span class="lineno">  340</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00341" data-start="{" data-end="}">
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#a5705fa7e959dd0c5020f03e8cf616bff">  341</a></span>PL_ALWAYS_INLINE <span class="keyword">typename</span> <a class="code hl_class" href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm">plIdTableBase&lt;IdType, ValueType&gt;::ConstIterator</a> <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#a73375a6d0e6105ed7e8da802b3f1f0d9">plIdTableBase&lt;IdType, ValueType&gt;::GetIterator</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno">  342</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm">ConstIterator</a>(*<span class="keyword">this</span>);</div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span>}</div>
</div>
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno">  345</span> </div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00347" data-start="{" data-end="}">
<div class="line"><a id="l00347" name="l00347"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#afa24683b274a2a8205a4c114f4e4ba17">  347</a></span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#afa24683b274a2a8205a4c114f4e4ba17">plIdTableBase&lt;IdType, ValueType&gt;::GetAllocator</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno">  348</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno">  349</span>  <span class="keywordflow">return</span> m_pAllocator;</div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span>}</div>
</div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span> </div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="foldopen" id="foldopen00353" data-start="{" data-end="}">
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno"><a class="line" href="../../d7/de4/classpl_id_table_base.htm#ac381dc2aea4a35d8a6066382bf04afb5">  353</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#ac381dc2aea4a35d8a6066382bf04afb5">plIdTableBase&lt;IdType, ValueType&gt;::IsFreelistValid</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno">  354</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno">  355</span>  <span class="keywordflow">if</span> (m_pEntries == <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span>    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span> </div>
<div class="line"><a id="l00358" name="l00358"></a><span class="lineno">  358</span>  IndexType uiIndex = m_FreelistDequeue;</div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span>  <span class="keyword">const</span> Entry* pEntry = m_pEntries + uiIndex;</div>
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno">  360</span> </div>
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno">  361</span>  <span class="keywordflow">while</span> (pEntry-&gt;id.m_InstanceIndex &lt; m_Capacity)</div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno">  362</span>  {</div>
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno">  363</span>    uiIndex = pEntry-&gt;id.m_InstanceIndex;</div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span>    pEntry = m_pEntries + uiIndex;</div>
<div class="line"><a id="l00365" name="l00365"></a><span class="lineno">  365</span>  }</div>
<div class="line"><a id="l00366" name="l00366"></a><span class="lineno">  366</span> </div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span>  <span class="keywordflow">return</span> uiIndex == m_FreelistEnqueue;</div>
<div class="line"><a id="l00368" name="l00368"></a><span class="lineno">  368</span>}</div>
</div>
</div>
<div class="line"><a id="l00369" name="l00369"></a><span class="lineno">  369</span> </div>
<div class="line"><a id="l00370" name="l00370"></a><span class="lineno">  370</span> </div>
<div class="line"><a id="l00371" name="l00371"></a><span class="lineno">  371</span><span class="comment">// private methods</span></div>
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno">  372</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a id="l00373" name="l00373"></a><span class="lineno">  373</span><span class="keywordtype">void</span> <a class="code hl_class" href="../../d7/de4/classpl_id_table_base.htm">plIdTableBase&lt;IdType, ValueType&gt;::SetCapacity</a>(IndexType uiCapacity)</div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno">  374</span>{</div>
<div class="line"><a id="l00375" name="l00375"></a><span class="lineno">  375</span>  Entry* pNewEntries = PL_NEW_RAW_BUFFER(m_pAllocator, Entry, (<span class="keywordtype">size_t</span>)uiCapacity);</div>
<div class="line"><a id="l00376" name="l00376"></a><span class="lineno">  376</span> </div>
<div class="line"><a id="l00377" name="l00377"></a><span class="lineno">  377</span>  <span class="keywordflow">for</span> (IndexType i = 0; i &lt; m_Capacity; ++i)</div>
<div class="line"><a id="l00378" name="l00378"></a><span class="lineno">  378</span>  {</div>
<div class="line"><a id="l00379" name="l00379"></a><span class="lineno">  379</span>    pNewEntries[i].id = m_pEntries[i].id;</div>
<div class="line"><a id="l00380" name="l00380"></a><span class="lineno">  380</span> </div>
<div class="line"><a id="l00381" name="l00381"></a><span class="lineno">  381</span>    <span class="keywordflow">if</span> (m_pEntries[i].<span class="keywordtype">id</span>.m_InstanceIndex == i)</div>
<div class="line"><a id="l00382" name="l00382"></a><span class="lineno">  382</span>    {</div>
<div class="line"><a id="l00383" name="l00383"></a><span class="lineno">  383</span>      <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#a5a199ddfb8a76151f443013bf3eb8310">plMemoryUtils::RelocateConstruct</a>(&amp;pNewEntries[i].value, &amp;m_pEntries[i].value, 1);</div>
<div class="line"><a id="l00384" name="l00384"></a><span class="lineno">  384</span>    }</div>
<div class="line"><a id="l00385" name="l00385"></a><span class="lineno">  385</span>  }</div>
<div class="line"><a id="l00386" name="l00386"></a><span class="lineno">  386</span> </div>
<div class="line"><a id="l00387" name="l00387"></a><span class="lineno">  387</span>  PL_DELETE_RAW_BUFFER(m_pAllocator, m_pEntries);</div>
<div class="line"><a id="l00388" name="l00388"></a><span class="lineno">  388</span>  m_pEntries = pNewEntries;</div>
<div class="line"><a id="l00389" name="l00389"></a><span class="lineno">  389</span> </div>
<div class="line"><a id="l00390" name="l00390"></a><span class="lineno">  390</span>  InitializeFreelist(m_Capacity, uiCapacity);</div>
<div class="line"><a id="l00391" name="l00391"></a><span class="lineno">  391</span>  m_Capacity = uiCapacity;</div>
<div class="line"><a id="l00392" name="l00392"></a><span class="lineno">  392</span>}</div>
<div class="line"><a id="l00393" name="l00393"></a><span class="lineno">  393</span> </div>
<div class="line"><a id="l00394" name="l00394"></a><span class="lineno">  394</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a id="l00395" name="l00395"></a><span class="lineno">  395</span><span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_class" href="../../d7/de4/classpl_id_table_base.htm">plIdTableBase&lt;IdType, ValueType&gt;::InitializeFreelist</a>(IndexType uiStart, IndexType uiEnd)</div>
<div class="line"><a id="l00396" name="l00396"></a><span class="lineno">  396</span>{</div>
<div class="line"><a id="l00397" name="l00397"></a><span class="lineno">  397</span>  <span class="keywordflow">for</span> (IndexType i = uiStart; i &lt; uiEnd; ++i)</div>
<div class="line"><a id="l00398" name="l00398"></a><span class="lineno">  398</span>  {</div>
<div class="line"><a id="l00399" name="l00399"></a><span class="lineno">  399</span>    IdType&amp; <span class="keywordtype">id</span> = m_pEntries[i].id;</div>
<div class="line"><a id="l00400" name="l00400"></a><span class="lineno">  400</span>    <span class="keywordtype">id</span> = IdType(i + 1, 1); <span class="comment">// initialize generation with 1, to prevent 0 from being a valid ID</span></div>
<div class="line"><a id="l00401" name="l00401"></a><span class="lineno">  401</span>  }</div>
<div class="line"><a id="l00402" name="l00402"></a><span class="lineno">  402</span> </div>
<div class="line"><a id="l00403" name="l00403"></a><span class="lineno">  403</span>  m_FreelistEnqueue = uiEnd - 1;</div>
<div class="line"><a id="l00404" name="l00404"></a><span class="lineno">  404</span>}</div>
<div class="line"><a id="l00405" name="l00405"></a><span class="lineno">  405</span> </div>
<div class="line"><a id="l00406" name="l00406"></a><span class="lineno">  406</span> </div>
<div class="line"><a id="l00407" name="l00407"></a><span class="lineno">  407</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> V, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a id="l00408" name="l00408"></a><span class="lineno">  408</span><a class="code hl_class" href="../../da/dcb/classpl_id_table.htm">plIdTable&lt;IdType, V, A&gt;::plIdTable</a>()</div>
<div class="line"><a id="l00409" name="l00409"></a><span class="lineno">  409</span>  : <a class="code hl_class" href="../../d7/de4/classpl_id_table_base.htm">plIdTableBase</a>&lt;IdType, V&gt;(A::<a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#afa24683b274a2a8205a4c114f4e4ba17">GetAllocator</a>())</div>
<div class="line"><a id="l00410" name="l00410"></a><span class="lineno">  410</span>{</div>
<div class="line"><a id="l00411" name="l00411"></a><span class="lineno">  411</span>}</div>
<div class="line"><a id="l00412" name="l00412"></a><span class="lineno">  412</span> </div>
<div class="line"><a id="l00413" name="l00413"></a><span class="lineno">  413</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> V, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a id="l00414" name="l00414"></a><span class="lineno">  414</span><a class="code hl_class" href="../../da/dcb/classpl_id_table.htm">plIdTable&lt;IdType, V, A&gt;::plIdTable</a>(<a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00415" name="l00415"></a><span class="lineno">  415</span>  : <a class="code hl_class" href="../../d7/de4/classpl_id_table_base.htm">plIdTableBase</a>&lt;IdType, V&gt;(pAllocator)</div>
<div class="line"><a id="l00416" name="l00416"></a><span class="lineno">  416</span>{</div>
<div class="line"><a id="l00417" name="l00417"></a><span class="lineno">  417</span>}</div>
<div class="line"><a id="l00418" name="l00418"></a><span class="lineno">  418</span> </div>
<div class="line"><a id="l00419" name="l00419"></a><span class="lineno">  419</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> V, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a id="l00420" name="l00420"></a><span class="lineno">  420</span><a class="code hl_class" href="../../da/dcb/classpl_id_table.htm">plIdTable&lt;IdType, V, A&gt;::plIdTable</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/dcb/classpl_id_table.htm">plIdTable&lt;IdType, V, A&gt;</a>&amp; other)</div>
<div class="line"><a id="l00421" name="l00421"></a><span class="lineno">  421</span>  : <a class="code hl_class" href="../../d7/de4/classpl_id_table_base.htm">plIdTableBase</a>&lt;IdType, V&gt;(other, A::GetAllocator())</div>
<div class="line"><a id="l00422" name="l00422"></a><span class="lineno">  422</span>{</div>
<div class="line"><a id="l00423" name="l00423"></a><span class="lineno">  423</span>}</div>
<div class="line"><a id="l00424" name="l00424"></a><span class="lineno">  424</span> </div>
<div class="line"><a id="l00425" name="l00425"></a><span class="lineno">  425</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> V, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a id="l00426" name="l00426"></a><span class="lineno">  426</span><a class="code hl_class" href="../../da/dcb/classpl_id_table.htm">plIdTable&lt;IdType, V, A&gt;::plIdTable</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/de4/classpl_id_table_base.htm">plIdTableBase&lt;IdType, V&gt;</a>&amp; other)</div>
<div class="line"><a id="l00427" name="l00427"></a><span class="lineno">  427</span>  : <a class="code hl_class" href="../../d7/de4/classpl_id_table_base.htm">plIdTableBase</a>&lt;IdType, V&gt;(other, A::GetAllocator())</div>
<div class="line"><a id="l00428" name="l00428"></a><span class="lineno">  428</span>{</div>
<div class="line"><a id="l00429" name="l00429"></a><span class="lineno">  429</span>}</div>
<div class="line"><a id="l00430" name="l00430"></a><span class="lineno">  430</span> </div>
<div class="line"><a id="l00431" name="l00431"></a><span class="lineno">  431</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> V, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a id="l00432" name="l00432"></a><span class="lineno">  432</span><span class="keywordtype">void</span> <a class="code hl_class" href="../../da/dcb/classpl_id_table.htm">plIdTable&lt;IdType, V, A&gt;::operator=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/dcb/classpl_id_table.htm">plIdTable&lt;IdType, V, A&gt;</a>&amp; rhs)</div>
<div class="line"><a id="l00433" name="l00433"></a><span class="lineno">  433</span>{</div>
<div class="line"><a id="l00434" name="l00434"></a><span class="lineno">  434</span>  <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#aa222d4d1bbcb5070c18c74cd37ed8fbf">plIdTableBase&lt;IdType, V&gt;::operator=</a>(rhs);</div>
<div class="line"><a id="l00435" name="l00435"></a><span class="lineno">  435</span>}</div>
<div class="line"><a id="l00436" name="l00436"></a><span class="lineno">  436</span> </div>
<div class="line"><a id="l00437" name="l00437"></a><span class="lineno">  437</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> IdType, <span class="keyword">typename</span> V, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a id="l00438" name="l00438"></a><span class="lineno">  438</span><span class="keywordtype">void</span> <a class="code hl_class" href="../../da/dcb/classpl_id_table.htm">plIdTable&lt;IdType, V, A&gt;::operator=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/de4/classpl_id_table_base.htm">plIdTableBase&lt;IdType, V&gt;</a>&amp; rhs)</div>
<div class="line"><a id="l00439" name="l00439"></a><span class="lineno">  439</span>{</div>
<div class="line"><a id="l00440" name="l00440"></a><span class="lineno">  440</span>  <a class="code hl_function" href="../../d7/de4/classpl_id_table_base.htm#aa222d4d1bbcb5070c18c74cd37ed8fbf">plIdTableBase&lt;IdType, V&gt;::operator=</a>(rhs);</div>
<div class="line"><a id="l00441" name="l00441"></a><span class="lineno">  441</span>}</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="ttc" id="aclasspl_allocator_htm"><div class="ttname"><a href="../../da/df3/classpl_allocator.htm">plAllocator</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition</b> Allocator.h:23</div></div>
<div class="ttc" id="aclasspl_id_table_base_1_1_const_iterator_htm"><div class="ttname"><a href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm">plIdTableBase::ConstIterator</a></div><div class="ttdoc">Const iterator.</div><div class="ttdef"><b>Definition</b> IdTable.h:25</div></div>
<div class="ttc" id="aclasspl_id_table_base_1_1_const_iterator_htm_a03fe75b2a1763e0e440c9c1c79eecd03"><div class="ttname"><a href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#a03fe75b2a1763e0e440c9c1c79eecd03">plIdTableBase::ConstIterator::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdoc">Checks whether this iterator points to a valid element.</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:20</div></div>
<div class="ttc" id="aclasspl_id_table_base_1_1_const_iterator_htm_a17c5abb67693d5dd1a709f2d7e14e44e"><div class="ttname"><a href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#a17c5abb67693d5dd1a709f2d7e14e44e">plIdTableBase::ConstIterator::Value</a></div><div class="ttdeci">const ValueType &amp; Value() const</div><div class="ttdoc">Returns the 'value' of the element that this iterator points to.</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:46</div></div>
<div class="ttc" id="aclasspl_id_table_base_1_1_const_iterator_htm_a2600d496139487c35692f4c6762762f2"><div class="ttname"><a href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#a2600d496139487c35692f4c6762762f2">plIdTableBase::ConstIterator::operator==</a></div><div class="ttdeci">bool operator==(const typename plIdTableBase&lt; IdType, ValueType &gt;::ConstIterator &amp;it2) const</div><div class="ttdoc">Checks whether the two iterators point to the same element.</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:26</div></div>
<div class="ttc" id="aclasspl_id_table_base_1_1_const_iterator_htm_a81a2faa7a79bcc721c85877fd6f62264"><div class="ttname"><a href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#a81a2faa7a79bcc721c85877fd6f62264">plIdTableBase::ConstIterator::Next</a></div><div class="ttdeci">void Next()</div><div class="ttdoc">Advances the iterator to the next element in the map. The iterator will not be valid anymore,...</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:52</div></div>
<div class="ttc" id="aclasspl_id_table_base_1_1_const_iterator_htm_a84603089b35b95c1dc2143a1f7700ab2"><div class="ttname"><a href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#a84603089b35b95c1dc2143a1f7700ab2">plIdTableBase::ConstIterator::operator++</a></div><div class="ttdeci">void operator++()</div><div class="ttdoc">Shorthand for 'Next'.</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:65</div></div>
<div class="ttc" id="aclasspl_id_table_base_1_1_const_iterator_htm_aa764043bd01df493cecf225b65071c45"><div class="ttname"><a href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#aa764043bd01df493cecf225b65071c45">plIdTableBase::ConstIterator::Id</a></div><div class="ttdeci">IdType Id() const</div><div class="ttdoc">Returns the 'id' of the element that this iterator points to.</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:40</div></div>
<div class="ttc" id="aclasspl_id_table_base_1_1_const_iterator_htm_ac989e1bb35ff77f9a105e9149aea1475"><div class="ttname"><a href="../../d7/d50/classpl_id_table_base_1_1_const_iterator.htm#ac989e1bb35ff77f9a105e9149aea1475">plIdTableBase::ConstIterator::operator!=</a></div><div class="ttdeci">bool operator!=(const typename plIdTableBase&lt; IdType, ValueType &gt;::ConstIterator &amp;it2) const</div><div class="ttdoc">Checks whether the two iterators point to the same element.</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:33</div></div>
<div class="ttc" id="aclasspl_id_table_base_htm"><div class="ttname"><a href="../../d7/de4/classpl_id_table_base.htm">plIdTableBase</a></div><div class="ttdoc">Implementation of an id mapping table which stores id/value pairs.</div><div class="ttdef"><b>Definition</b> IdTable.h:18</div></div>
<div class="ttc" id="aclasspl_id_table_base_htm_a0c84eaabd4e0736aa3628b3da78a3ad9"><div class="ttname"><a href="../../d7/de4/classpl_id_table_base.htm#a0c84eaabd4e0736aa3628b3da78a3ad9">plIdTableBase::~plIdTableBase</a></div><div class="ttdeci">~plIdTableBase()</div><div class="ttdoc">Destructor.</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:113</div></div>
<div class="ttc" id="aclasspl_id_table_base_htm_a15c65a7b02e62fb62afe805a0e33f308"><div class="ttname"><a href="../../d7/de4/classpl_id_table_base.htm#a15c65a7b02e62fb62afe805a0e33f308">plIdTableBase::GetCount</a></div><div class="ttdeci">IndexType GetCount() const</div><div class="ttdoc">Returns the number of active entries in the table.</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:168</div></div>
<div class="ttc" id="aclasspl_id_table_base_htm_a239394301b48f65ff7814a9d0b487f6f"><div class="ttname"><a href="../../d7/de4/classpl_id_table_base.htm#a239394301b48f65ff7814a9d0b487f6f">plIdTableBase::operator[]</a></div><div class="ttdeci">const ValueType &amp; operator[](const IdType id) const</div><div class="ttdoc">Returns the value to the given id. Does bounds checks in debug builds.</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:291</div></div>
<div class="ttc" id="aclasspl_id_table_base_htm_a2562e201e102246933d4e0f4aeaf9afc"><div class="ttname"><a href="../../d7/de4/classpl_id_table_base.htm#a2562e201e102246933d4e0f4aeaf9afc">plIdTableBase::TryGetValue</a></div><div class="ttdeci">bool TryGetValue(const IdType id, ValueType &amp;out_value) const</div><div class="ttdoc">Returns if an entry with the given id was found and if found writes out the corresponding value to ou...</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:267</div></div>
<div class="ttc" id="aclasspl_id_table_base_htm_a4523f0b2ee1767737fa47a1cbd1199b3"><div class="ttname"><a href="../../d7/de4/classpl_id_table_base.htm#a4523f0b2ee1767737fa47a1cbd1199b3">plIdTableBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Clears the table.</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:180</div></div>
<div class="ttc" id="aclasspl_id_table_base_htm_a65c44c384534dd18722c2c42bc5cfd5b"><div class="ttname"><a href="../../d7/de4/classpl_id_table_base.htm#a65c44c384534dd18722c2c42bc5cfd5b">plIdTableBase::Reserve</a></div><div class="ttdeci">void Reserve(IndexType capacity)</div><div class="ttdoc">Expands the table so it can at least store the given capacity.</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:149</div></div>
<div class="ttc" id="aclasspl_id_table_base_htm_a73375a6d0e6105ed7e8da802b3f1f0d9"><div class="ttname"><a href="../../d7/de4/classpl_id_table_base.htm#a73375a6d0e6105ed7e8da802b3f1f0d9">plIdTableBase::GetIterator</a></div><div class="ttdeci">Iterator GetIterator()</div><div class="ttdoc">Returns an Iterator to the very first element.</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:335</div></div>
<div class="ttc" id="aclasspl_id_table_base_htm_a913cf598b8984e5f524d3c13f3e2eab2"><div class="ttname"><a href="../../d7/de4/classpl_id_table_base.htm#a913cf598b8984e5f524d3c13f3e2eab2">plIdTableBase::GetValueUnchecked</a></div><div class="ttdeci">const ValueType &amp; GetValueUnchecked(const IndexType index) const</div><div class="ttdoc">Returns the value at the given index. Does bounds checks in debug builds but does not check for stale...</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:314</div></div>
<div class="ttc" id="aclasspl_id_table_base_htm_a958a2921c9e34661b5944634c3d35deb"><div class="ttname"><a href="../../d7/de4/classpl_id_table_base.htm#a958a2921c9e34661b5944634c3d35deb">plIdTableBase::Contains</a></div><div class="ttdeci">bool Contains(const IdType id) const</div><div class="ttdoc">Returns if the table contains an entry corresponding to the given id.</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:328</div></div>
<div class="ttc" id="aclasspl_id_table_base_htm_aa222d4d1bbcb5070c18c74cd37ed8fbf"><div class="ttname"><a href="../../d7/de4/classpl_id_table_base.htm#aa222d4d1bbcb5070c18c74cd37ed8fbf">plIdTableBase::operator=</a></div><div class="ttdeci">void operator=(const plIdTableBase&lt; IdType, ValueType &gt; &amp;rhs)</div><div class="ttdoc">Copies the data from another table into this one.</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:128</div></div>
<div class="ttc" id="aclasspl_id_table_base_htm_aa8c4ed993cad9a1b8ff0a50f236fbd3e"><div class="ttname"><a href="../../d7/de4/classpl_id_table_base.htm#aa8c4ed993cad9a1b8ff0a50f236fbd3e">plIdTableBase::plIdTableBase</a></div><div class="ttdeci">plIdTableBase(plAllocator *pAllocator)</div><div class="ttdoc">Creates an empty id-table. Does not allocate any data yet.</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:89</div></div>
<div class="ttc" id="aclasspl_id_table_base_htm_ac381dc2aea4a35d8a6066382bf04afb5"><div class="ttname"><a href="../../d7/de4/classpl_id_table_base.htm#ac381dc2aea4a35d8a6066382bf04afb5">plIdTableBase::IsFreelistValid</a></div><div class="ttdeci">bool IsFreelistValid() const</div><div class="ttdoc">Returns whether the internal free-list is valid. For testing purpose only.</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:353</div></div>
<div class="ttc" id="aclasspl_id_table_base_htm_acc69becc1ca374984d1249fbb4fb4b1f"><div class="ttname"><a href="../../d7/de4/classpl_id_table_base.htm#acc69becc1ca374984d1249fbb4fb4b1f">plIdTableBase::Remove</a></div><div class="ttdeci">bool Remove(const IdType id, ValueType *out_pOldValue=nullptr)</div><div class="ttdoc">Removes the entry with the given id. Returns if an entry was removed and optionally writes out the ol...</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:237</div></div>
<div class="ttc" id="aclasspl_id_table_base_htm_adbe0139546b79d2c0f333633e752f2a3"><div class="ttname"><a href="../../d7/de4/classpl_id_table_base.htm#adbe0139546b79d2c0f333633e752f2a3">plIdTableBase::Insert</a></div><div class="ttdeci">IdType Insert(const ValueType &amp;value)</div><div class="ttdoc">Inserts the value into the table and returns the corresponding id.</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:201</div></div>
<div class="ttc" id="aclasspl_id_table_base_htm_ae38b1ed15a297464f695cadb2f28d7d9"><div class="ttname"><a href="../../d7/de4/classpl_id_table_base.htm#ae38b1ed15a297464f695cadb2f28d7d9">plIdTableBase::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns true, if the table does not contain any elements.</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:174</div></div>
<div class="ttc" id="aclasspl_id_table_base_htm_afa24683b274a2a8205a4c114f4e4ba17"><div class="ttname"><a href="../../d7/de4/classpl_id_table_base.htm#afa24683b274a2a8205a4c114f4e4ba17">plIdTableBase::GetAllocator</a></div><div class="ttdeci">plAllocator * GetAllocator() const</div><div class="ttdoc">Returns the allocator that is used by this instance.</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:347</div></div>
<div class="ttc" id="aclasspl_id_table_htm"><div class="ttname"><a href="../../da/dcb/classpl_id_table.htm">plIdTable</a></div><div class="ttdef"><b>Definition</b> IdTable.h:171</div></div>
<div class="ttc" id="aclasspl_memory_utils_htm_a07b6ac85720d94f8568760ac12f786e5"><div class="ttname"><a href="../../df/d4d/classpl_memory_utils.htm#a07b6ac85720d94f8568760ac12f786e5">plMemoryUtils::CopyConstruct</a></div><div class="ttdeci">static void CopyConstruct(Destination *pDestination, const Source &amp;copy, size_t uiCount=1)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination, by creating uiCount copies of c...</div></div>
<div class="ttc" id="aclasspl_memory_utils_htm_a5a199ddfb8a76151f443013bf3eb8310"><div class="ttname"><a href="../../df/d4d/classpl_memory_utils.htm#a5a199ddfb8a76151f443013bf3eb8310">plMemoryUtils::RelocateConstruct</a></div><div class="ttdeci">static void RelocateConstruct(T *pDestination, T *pSource, size_t uiCount=1)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination from an existing array of object...</div></div>
<div class="ttc" id="aclasspl_memory_utils_htm_abec7a10f06a461b6d32c183b6347cc80"><div class="ttname"><a href="../../df/d4d/classpl_memory_utils.htm#abec7a10f06a461b6d32c183b6347cc80">plMemoryUtils::MoveConstruct</a></div><div class="ttdeci">static void MoveConstruct(T *pDestination, T &amp;&amp;source)</div><div class="ttdoc">Constructs an object of type T in a raw buffer at pDestination, by using move construction from sourc...</div></div>
<div class="ttc" id="aclasspl_memory_utils_htm_afe524b6781f69e2fd4eceb18f2a27640"><div class="ttname"><a href="../../df/d4d/classpl_memory_utils.htm#afe524b6781f69e2fd4eceb18f2a27640">plMemoryUtils::Destruct</a></div><div class="ttdeci">static void Destruct(T *pDestination, size_t uiCount=1)</div><div class="ttdoc">Destructs uiCount objects of type T at pDestination.</div></div>
<div class="ttc" id="anamespacepl_math_htm_a314b24989122e22968ae0a11cc872e28"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a314b24989122e22968ae0a11cc872e28">plMath::Min</a></div><div class="ttdeci">constexpr PL_ALWAYS_INLINE T Min(T f1, T f2)</div><div class="ttdoc">Returns the smaller value, f1 or f2.</div><div class="ttdef"><b>Definition</b> Math_inl.h:27</div></div>
<div class="ttc" id="anamespacepl_math_htm_ad724a3f51a1faa9bcc3e6a53fd6b9a4f"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">plMath::Max</a></div><div class="ttdeci">constexpr PL_ALWAYS_INLINE T Max(T f1, T f2)</div><div class="ttdoc">Returns the greater value, f1 or f2.</div><div class="ttdef"><b>Definition</b> Math_inl.h:39</div></div>
<div class="ttc" id="astructpl_id_table_base_1_1_iterator_htm"><div class="ttname"><a href="../../d7/d04/structpl_id_table_base_1_1_iterator.htm">plIdTableBase::Iterator</a></div><div class="ttdoc">Iterator with write access.</div><div class="ttdef"><b>Definition</b> IdTable.h:60</div></div>
<div class="ttc" id="astructpl_id_table_base_1_1_iterator_htm_a516d792aacb056f9bf2e2b6057b94a6a"><div class="ttname"><a href="../../d7/d04/structpl_id_table_base_1_1_iterator.htm#a516d792aacb056f9bf2e2b6057b94a6a">plIdTableBase::Iterator::Value</a></div><div class="ttdeci">ValueType &amp; Value()</div><div class="ttdoc">Returns the 'value' of the element that this iterator points to.</div><div class="ttdef"><b>Definition</b> IdTable_inl.h:80</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_3416883c1320ec68c4d0694befd114fc.htm">Containers</a></li><li class="navelem"><a class="el" href="../../dir_f032078016c44376fe34ead7fd8ff37e.htm">Implementation</a></li><li class="navelem"><b>IdTable_inl.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
