<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>plEngine: Code/Engine/Foundation/Threading/Implementation/ParallelFor_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only-darkmode-toggle.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">plEngine<span id="projectnumber">&#160;Release 2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('df/d21/_parallel_for__inl_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">ParallelFor_inl.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;Foundation/Memory/FrameAllocator.h&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="preprocessor">#include &lt;Foundation/Profiling/Profiling.h&gt;</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span> </div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElemType&gt;</div>
<div class="foldopen" id="foldopen00007" data-start="{" data-end="};">
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno"><a class="line" href="../../dd/dc9/class_array_ptr_task.htm">    7</a></span><span class="keyword">class </span><a class="code hl_class" href="../../dd/dc9/class_array_ptr_task.htm">ArrayPtrTask</a> final : <span class="keyword">public</span> <a class="code hl_class" href="../../d9/db9/classpl_task.htm">plTask</a></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span>{</div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span>  <a class="code hl_class" href="../../dd/dc9/class_array_ptr_task.htm">ArrayPtrTask</a>(<a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;ElemType&gt;</a> payload, <a class="code hl_struct" href="../../df/df1/structpl_delegate.htm">plParallelForFunction&lt;ElemType&gt;</a> taskCallback, plUInt32 uiItemsPerInvocation)</div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span>    : m_Payload(payload)</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>    , m_uiItemsPerInvocation(uiItemsPerInvocation)</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>    , m_TaskCallback(std::move(taskCallback))</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>  {</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span>  }</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span> </div>
<div class="foldopen" id="foldopen00017" data-start="{" data-end="}">
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno"><a class="line" href="../../dd/dc9/class_array_ptr_task.htm#ad75a86a3ec86ccaf55b22247249611b9">   17</a></span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../dd/dc9/class_array_ptr_task.htm#ad75a86a3ec86ccaf55b22247249611b9">Execute</a>()<span class="keyword"> override</span></div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>    <span class="comment">// Work through all of them.</span></div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>    m_TaskCallback(0, m_Payload);</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>  }</div>
</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span> </div>
<div class="foldopen" id="foldopen00023" data-start="{" data-end="}">
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno"><a class="line" href="../../dd/dc9/class_array_ptr_task.htm#a4d84faec9e31f9df388b4ed86d48cdaf">   23</a></span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../dd/dc9/class_array_ptr_task.htm#a4d84faec9e31f9df388b4ed86d48cdaf">ExecuteWithMultiplicity</a>(plUInt32 uiInvocation)<span class="keyword"> const override</span></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>    <span class="keyword">const</span> plUInt32 uiSliceStartIndex = uiInvocation * m_uiItemsPerInvocation;</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span> </div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>    <span class="keyword">const</span> plUInt32 uiRemainingItems = uiSliceStartIndex &gt; m_Payload.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#a025ba83275da5ff5008495fa3245b9b2">GetCount</a>() ? 0 : m_Payload.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#a025ba83275da5ff5008495fa3245b9b2">GetCount</a>() - uiSliceStartIndex;</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>    <span class="keyword">const</span> plUInt32 uiSliceItemCount = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a314b24989122e22968ae0a11cc872e28">plMath::Min</a>(m_uiItemsPerInvocation, uiRemainingItems);</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span> </div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>    <span class="keywordflow">if</span> (uiSliceItemCount &gt; 0)</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>    {</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span>      <span class="comment">// Run through the calculated slice.</span></div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>      <span class="keyword">auto</span> taskItemSlice = m_Payload.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#ab735c6509042b44981f8d9505df35281">GetSubArray</a>(uiSliceStartIndex, uiSliceItemCount);</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>      m_TaskCallback(uiSliceStartIndex, taskItemSlice);</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span>    }</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>  }</div>
</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span> </div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>  <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;ElemType&gt;</a> m_Payload;</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span>  plUInt32 m_uiItemsPerInvocation;</div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span>  <a class="code hl_struct" href="../../df/df1/structpl_delegate.htm">plParallelForFunction&lt;ElemType&gt;</a> m_TaskCallback;</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>};</div>
</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span> </div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElemType&gt;</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span><span class="keywordtype">void</span> plTaskSystem::ParallelForInternal(<a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;ElemType&gt;</a> taskItems, <a class="code hl_struct" href="../../df/df1/structpl_delegate.htm">plParallelForFunction&lt;ElemType&gt;</a> taskCallback, <span class="keyword">const</span> <span class="keywordtype">char</span>* taskName, <span class="keyword">const</span> <a class="code hl_struct" href="../../d9/d3e/structpl_parallel_for_params.htm">plParallelForParams</a>&amp; params)</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>{</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>  <span class="keywordflow">if</span> (taskItems.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#a025ba83275da5ff5008495fa3245b9b2">GetCount</a>() &lt;= params.<a class="code hl_variable" href="../../d9/d3e/structpl_parallel_for_params.htm#abceacfd279b08542973d78ed2f3d0398">m_uiBinSize</a>)</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>  {</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>    <a class="code hl_class" href="../../dd/dc9/class_array_ptr_task.htm">ArrayPtrTask&lt;ElemType&gt;</a> arrayPtrTask(taskItems, std::move(taskCallback), taskItems.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#a025ba83275da5ff5008495fa3245b9b2">GetCount</a>());</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>    arrayPtrTask.ConfigureTask(taskName ? taskName : <span class="stringliteral">&quot;Generic ArrayPtr Task&quot;</span>, params.m_NestingMode);</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span> </div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>    PL_PROFILE_SCOPE(arrayPtrTask.m_sTaskName);</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span>    arrayPtrTask.Execute();</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>  }</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>  <span class="keywordflow">else</span></div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>  {</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>    plUInt32 uiMultiplicity;</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>    plUInt64 uiItemsPerInvocation;</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>    params.DetermineThreading(taskItems.<a class="code hl_function" href="../../db/d81/classpl_array_ptr.htm#a025ba83275da5ff5008495fa3245b9b2">GetCount</a>(), uiMultiplicity, uiItemsPerInvocation);</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span> </div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>    <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator = (params.<a class="code hl_variable" href="../../d9/d3e/structpl_parallel_for_params.htm#a93bd03dfd4269ae070154ca408590ee9">m_pTaskAllocator</a> != <span class="keyword">nullptr</span>) ? params.<a class="code hl_variable" href="../../d9/d3e/structpl_parallel_for_params.htm#a93bd03dfd4269ae070154ca408590ee9">m_pTaskAllocator</a> : <a class="code hl_class" href="../../d8/d6f/classpl_foundation.htm">plFoundation</a>::GetDefaultAllocator();</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span> </div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>    <a class="code hl_class" href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr&lt;ArrayPtrTask&lt;ElemType&gt;</a>&gt; pArrayPtrTask = PL_NEW(pAllocator, <a class="code hl_class" href="../../dd/dc9/class_array_ptr_task.htm">ArrayPtrTask&lt;ElemType&gt;</a>, taskItems, std::move(taskCallback), <span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(uiItemsPerInvocation));</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>    pArrayPtrTask-&gt;ConfigureTask(taskName ? taskName : <span class="stringliteral">&quot;Generic ArrayPtr Task&quot;</span>, params.m_NestingMode);</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span> </div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>    pArrayPtrTask-&gt;SetMultiplicity(uiMultiplicity);</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>    <a class="code hl_class" href="../../d4/d42/classpl_task_group_i_d.htm">plTaskGroupID</a> taskGroupId = <a class="code hl_function" href="../../d5/dc1/classpl_task_system.htm#ab86b41a3498cf7d3d9533ab7c268c483">plTaskSystem::StartSingleTask</a>(pArrayPtrTask, <a class="code hl_enumvalue" href="../../d5/d26/structpl_task_priority.htm#abc16c681f03dc7cc9878fa4e8ad781f2ab6e31289d9715fb24e02155551991866">plTaskPriority::EarlyThisFrame</a>);</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>    <a class="code hl_function" href="../../d5/dc1/classpl_task_system.htm#a23ee4e8f8175b2372ddc1b499858cea1">plTaskSystem::WaitForGroup</a>(taskGroupId);</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>  }</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>}</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span> </div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElemType, <span class="keyword">typename</span> Callback&gt;</div>
<div class="foldopen" id="foldopen00073" data-start="{" data-end="}">
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno"><a class="line" href="../../d5/dc1/classpl_task_system.htm#a63906f0955a740715f8cd409accb8a34">   73</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d5/dc1/classpl_task_system.htm#a63906f0955a740715f8cd409accb8a34">plTaskSystem::ParallelFor</a>(<a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;ElemType&gt;</a> taskItems, Callback taskCallback, <span class="keyword">const</span> <span class="keywordtype">char</span>* szTaskName, <span class="keyword">const</span> <a class="code hl_struct" href="../../d9/d3e/structpl_parallel_for_params.htm">plParallelForParams</a>&amp; params)</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>{</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>  <span class="keyword">auto</span> wrappedCallback = [taskCallback = std::move(taskCallback)](</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>                           plUInt32 <span class="comment">/*uiBaseIndex*/</span>, <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;ElemType&gt;</a> taskSlice)</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>  { taskCallback(taskSlice); };</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span> </div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>  ParallelForInternal&lt;ElemType&gt;(</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>    taskItems, <a class="code hl_struct" href="../../df/df1/structpl_delegate.htm">plParallelForFunction&lt;ElemType&gt;</a>(std::move(wrappedCallback), plFrameAllocator::GetCurrentAllocator()), szTaskName, params);</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>}</div>
</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span> </div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElemType, <span class="keyword">typename</span> Callback&gt;</div>
<div class="foldopen" id="foldopen00084" data-start="{" data-end="}">
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno"><a class="line" href="../../d5/dc1/classpl_task_system.htm#a3b1e08aba1227e81931c5fc8d6d26e08">   84</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d5/dc1/classpl_task_system.htm#a3b1e08aba1227e81931c5fc8d6d26e08">plTaskSystem::ParallelForSingle</a>(<a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;ElemType&gt;</a> taskItems, Callback taskCallback, <span class="keyword">const</span> <span class="keywordtype">char</span>* szTaskName, <span class="keyword">const</span> <a class="code hl_struct" href="../../d9/d3e/structpl_parallel_for_params.htm">plParallelForParams</a>&amp; params)</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>{</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>  <span class="keyword">auto</span> wrappedCallback = [taskCallback = std::move(taskCallback)](plUInt32 <span class="comment">/*uiBaseIndex*/</span>, <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;ElemType&gt;</a> taskSlice)</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>  {</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>    <span class="comment">// Handing in by non-const&amp; allows to use callbacks with (non-)const&amp; as well as value parameters.</span></div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>    <span class="keywordflow">for</span> (ElemType&amp; taskItem : taskSlice)</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>    {</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>      taskCallback(taskItem);</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>    }</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>  };</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span> </div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>  ParallelForInternal&lt;ElemType&gt;(</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>    taskItems, <a class="code hl_struct" href="../../df/df1/structpl_delegate.htm">plParallelForFunction&lt;ElemType&gt;</a>(std::move(wrappedCallback), plFrameAllocator::GetCurrentAllocator()), szTaskName, params);</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>}</div>
</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span> </div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElemType, <span class="keyword">typename</span> Callback&gt;</div>
<div class="foldopen" id="foldopen00100" data-start="{" data-end="}">
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno"><a class="line" href="../../d5/dc1/classpl_task_system.htm#a1d497f64658b383317a2d4c963510d7f">  100</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d5/dc1/classpl_task_system.htm#a1d497f64658b383317a2d4c963510d7f">plTaskSystem::ParallelForSingleIndex</a>(</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>  <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;ElemType&gt;</a> taskItems, Callback taskCallback, <span class="keyword">const</span> <span class="keywordtype">char</span>* szTaskName, <span class="keyword">const</span> <a class="code hl_struct" href="../../d9/d3e/structpl_parallel_for_params.htm">plParallelForParams</a>&amp; params)</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>{</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>  <span class="keyword">auto</span> wrappedCallback = [taskCallback = std::move(taskCallback)](plUInt32 uiBaseIndex, <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;ElemType&gt;</a> taskSlice)</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>  {</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>    <span class="keywordflow">for</span> (plUInt32 uiIndex = 0; uiIndex &lt; taskSlice.GetCount(); ++uiIndex)</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>    {</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>      <span class="comment">// Handing in by dereferenced pointer allows to use callbacks with (non-)const&amp; as well as value parameters.</span></div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>      taskCallback(uiBaseIndex + uiIndex, *(taskSlice.GetPtr() + uiIndex));</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>    }</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>  };</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span> </div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>  ParallelForInternal&lt;ElemType&gt;(</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>    taskItems, <a class="code hl_struct" href="../../df/df1/structpl_delegate.htm">plParallelForFunction&lt;ElemType&gt;</a>(std::move(wrappedCallback), plFrameAllocator::GetCurrentAllocator()), szTaskName, params);</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>}</div>
</div>
<div class="ttc" id="aclass_array_ptr_task_htm"><div class="ttname"><a href="../../dd/dc9/class_array_ptr_task.htm">ArrayPtrTask</a></div><div class="ttdef"><b>Definition</b> ParallelFor_inl.h:8</div></div>
<div class="ttc" id="aclass_array_ptr_task_htm_a4d84faec9e31f9df388b4ed86d48cdaf"><div class="ttname"><a href="../../dd/dc9/class_array_ptr_task.htm#a4d84faec9e31f9df388b4ed86d48cdaf">ArrayPtrTask::ExecuteWithMultiplicity</a></div><div class="ttdeci">void ExecuteWithMultiplicity(plUInt32 uiInvocation) const override</div><div class="ttdoc">Override this to implement the task's supposed functionality.</div><div class="ttdef"><b>Definition</b> ParallelFor_inl.h:23</div></div>
<div class="ttc" id="aclass_array_ptr_task_htm_ad75a86a3ec86ccaf55b22247249611b9"><div class="ttname"><a href="../../dd/dc9/class_array_ptr_task.htm#ad75a86a3ec86ccaf55b22247249611b9">ArrayPtrTask::Execute</a></div><div class="ttdeci">void Execute() override</div><div class="ttdoc">Override this to implement the task's supposed functionality.</div><div class="ttdef"><b>Definition</b> ParallelFor_inl.h:17</div></div>
<div class="ttc" id="aclasspl_allocator_htm"><div class="ttname"><a href="../../da/df3/classpl_allocator.htm">plAllocator</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition</b> Allocator.h:23</div></div>
<div class="ttc" id="aclasspl_array_ptr_htm"><div class="ttname"><a href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a></div><div class="ttdoc">This class encapsulates an array and it's size. It is recommended to use this class instead of plain ...</div><div class="ttdef"><b>Definition</b> ArrayPtr.h:37</div></div>
<div class="ttc" id="aclasspl_array_ptr_htm_a025ba83275da5ff5008495fa3245b9b2"><div class="ttname"><a href="../../db/d81/classpl_array_ptr.htm#a025ba83275da5ff5008495fa3245b9b2">plArrayPtr::GetCount</a></div><div class="ttdeci">PL_ALWAYS_INLINE plUInt32 GetCount() const</div><div class="ttdoc">Returns the number of elements in the array.</div><div class="ttdef"><b>Definition</b> ArrayPtr.h:142</div></div>
<div class="ttc" id="aclasspl_array_ptr_htm_ab735c6509042b44981f8d9505df35281"><div class="ttname"><a href="../../db/d81/classpl_array_ptr.htm#ab735c6509042b44981f8d9505df35281">plArrayPtr::GetSubArray</a></div><div class="ttdeci">PL_FORCE_INLINE plArrayPtr&lt; T &gt; GetSubArray(plUInt32 uiStart, plUInt32 uiCount) const</div><div class="ttdoc">Creates a sub-array from this array.</div><div class="ttdef"><b>Definition</b> ArrayPtr.h:148</div></div>
<div class="ttc" id="aclasspl_foundation_htm"><div class="ttname"><a href="../../d8/d6f/classpl_foundation.htm">plFoundation</a></div><div class="ttdef"><b>Definition</b> Basics.h:76</div></div>
<div class="ttc" id="aclasspl_shared_ptr_htm"><div class="ttname"><a href="../../d6/d8f/classpl_shared_ptr.htm">plSharedPtr</a></div><div class="ttdoc">A Shared ptr manages a shared object and destroys that object when no one references it anymore....</div><div class="ttdef"><b>Definition</b> SharedPtr.h:10</div></div>
<div class="ttc" id="aclasspl_task_group_i_d_htm"><div class="ttname"><a href="../../d4/d42/classpl_task_group_i_d.htm">plTaskGroupID</a></div><div class="ttdoc">Given out by plTaskSystem::CreateTaskGroup to identify a task group.</div><div class="ttdef"><b>Definition</b> TaskSystemDeclarations.h:103</div></div>
<div class="ttc" id="aclasspl_task_htm"><div class="ttname"><a href="../../d9/db9/classpl_task.htm">plTask</a></div><div class="ttdoc">Base class for custom tasks.</div><div class="ttdef"><b>Definition</b> Task.h:10</div></div>
<div class="ttc" id="aclasspl_task_system_htm_a1d497f64658b383317a2d4c963510d7f"><div class="ttname"><a href="../../d5/dc1/classpl_task_system.htm#a1d497f64658b383317a2d4c963510d7f">plTaskSystem::ParallelForSingleIndex</a></div><div class="ttdeci">static void ParallelForSingleIndex(plArrayPtr&lt; ElemType &gt; taskItems, Callback taskCallback, const char *szTaskName=nullptr, const plParallelForParams &amp;params=plParallelForParams())</div><div class="ttdef"><b>Definition</b> ParallelFor_inl.h:100</div></div>
<div class="ttc" id="aclasspl_task_system_htm_a23ee4e8f8175b2372ddc1b499858cea1"><div class="ttname"><a href="../../d5/dc1/classpl_task_system.htm#a23ee4e8f8175b2372ddc1b499858cea1">plTaskSystem::WaitForGroup</a></div><div class="ttdeci">static void WaitForGroup(plTaskGroupID group)</div><div class="ttdoc">Blocks until all tasks in the given group have finished.</div><div class="ttdef"><b>Definition</b> TaskSystemGroups.cpp:274</div></div>
<div class="ttc" id="aclasspl_task_system_htm_a3b1e08aba1227e81931c5fc8d6d26e08"><div class="ttname"><a href="../../d5/dc1/classpl_task_system.htm#a3b1e08aba1227e81931c5fc8d6d26e08">plTaskSystem::ParallelForSingle</a></div><div class="ttdeci">static void ParallelForSingle(plArrayPtr&lt; ElemType &gt; taskItems, Callback taskCallback, const char *szTaskName=nullptr, const plParallelForParams &amp;params=plParallelForParams())</div><div class="ttdef"><b>Definition</b> ParallelFor_inl.h:84</div></div>
<div class="ttc" id="aclasspl_task_system_htm_a63906f0955a740715f8cd409accb8a34"><div class="ttname"><a href="../../d5/dc1/classpl_task_system.htm#a63906f0955a740715f8cd409accb8a34">plTaskSystem::ParallelFor</a></div><div class="ttdeci">static void ParallelFor(plArrayPtr&lt; ElemType &gt; taskItems, Callback taskCallback, const char *szTaskName=nullptr, const plParallelForParams &amp;params=plParallelForParams())</div><div class="ttdef"><b>Definition</b> ParallelFor_inl.h:73</div></div>
<div class="ttc" id="aclasspl_task_system_htm_ab86b41a3498cf7d3d9533ab7c268c483"><div class="ttname"><a href="../../d5/dc1/classpl_task_system.htm#ab86b41a3498cf7d3d9533ab7c268c483">plTaskSystem::StartSingleTask</a></div><div class="ttdeci">static plTaskGroupID StartSingleTask(const plSharedPtr&lt; plTask &gt; &amp;pTask, plTaskPriority::Enum priority, plOnTaskGroupFinishedCallback callback=plOnTaskGroupFinishedCallback())</div><div class="ttdoc">A helper function to insert a single task into the system and start it right away....</div><div class="ttdef"><b>Definition</b> TaskSystemTasks.cpp:20</div></div>
<div class="ttc" id="anamespacepl_math_htm_a314b24989122e22968ae0a11cc872e28"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a314b24989122e22968ae0a11cc872e28">plMath::Min</a></div><div class="ttdeci">constexpr PL_ALWAYS_INLINE T Min(T f1, T f2)</div><div class="ttdoc">Returns the smaller value, f1 or f2.</div><div class="ttdef"><b>Definition</b> Math_inl.h:27</div></div>
<div class="ttc" id="astructpl_delegate_htm"><div class="ttname"><a href="../../df/df1/structpl_delegate.htm">plDelegate</a></div><div class="ttdoc">A generic delegate class which supports static functions and member functions.</div><div class="ttdef"><b>Definition</b> Delegate.h:76</div></div>
<div class="ttc" id="astructpl_parallel_for_params_htm"><div class="ttname"><a href="../../d9/d3e/structpl_parallel_for_params.htm">plParallelForParams</a></div><div class="ttdoc">Settings for plTaskSystem::ParallelFor invocations.</div><div class="ttdef"><b>Definition</b> TaskSystemDeclarations.h:167</div></div>
<div class="ttc" id="astructpl_parallel_for_params_htm_a93bd03dfd4269ae070154ca408590ee9"><div class="ttname"><a href="../../d9/d3e/structpl_parallel_for_params.htm#a93bd03dfd4269ae070154ca408590ee9">plParallelForParams::m_pTaskAllocator</a></div><div class="ttdeci">plAllocator * m_pTaskAllocator</div><div class="ttdoc">The allocator used to for the tasks that the parallel-for uses internally. If null,...</div><div class="ttdef"><b>Definition</b> TaskSystemDeclarations.h:186</div></div>
<div class="ttc" id="astructpl_parallel_for_params_htm_abceacfd279b08542973d78ed2f3d0398"><div class="ttname"><a href="../../d9/d3e/structpl_parallel_for_params.htm#abceacfd279b08542973d78ed2f3d0398">plParallelForParams::m_uiBinSize</a></div><div class="ttdeci">plUInt32 m_uiBinSize</div><div class="ttdef"><b>Definition</b> TaskSystemDeclarations.h:173</div></div>
<div class="ttc" id="astructpl_task_priority_htm_abc16c681f03dc7cc9878fa4e8ad781f2ab6e31289d9715fb24e02155551991866"><div class="ttname"><a href="../../d5/d26/structpl_task_priority.htm#abc16c681f03dc7cc9878fa4e8ad781f2ab6e31289d9715fb24e02155551991866">plTaskPriority::EarlyThisFrame</a></div><div class="ttdeci">@ EarlyThisFrame</div><div class="ttdoc">Highest priority, guaranteed to get finished in this frame.</div><div class="ttdef"><b>Definition</b> TaskSystemDeclarations.h:42</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_fa1ade104661ad34fb0eac087515bd03.htm">Threading</a></li><li class="navelem"><a class="el" href="../../dir_77c2a7b3f87a959c5e2db580e09710cd.htm">Implementation</a></li><li class="navelem"><b>ParallelFor_inl.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
