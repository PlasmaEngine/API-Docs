<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Plasma Engine: Code/Engine/Foundation/Containers/Bitfield.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Plasma Engine<span id="projectnumber">&#160;2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('df/d21/_bitfield_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Bitfield.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;Foundation/Containers/DynamicArray.h&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="preprocessor">#include &lt;Foundation/Containers/HybridArray.h&gt;</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#include &lt;Foundation/Containers/Implementation/BitIterator.h&gt;</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">#include &lt;Foundation/IO/Stream.h&gt;</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="preprocessor">#include &lt;Foundation/Math/Constants.h&gt;</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span> </div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="foldopen" id="foldopen00016" data-start="{" data-end="};">
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno"><a class="line" href="../../db/d95/classpl_bitfield.htm">   16</a></span><span class="keyword">class </span><a class="code hl_class" href="../../db/d95/classpl_bitfield.htm">plBitfield</a></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>{</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>  <a class="code hl_class" href="../../db/d95/classpl_bitfield.htm">plBitfield</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span> </div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>  plUInt32 <a class="code hl_function" href="../../db/d95/classpl_bitfield.htm#a72b85e68cd78013113e315401292c2ec">GetCount</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span> </div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> = <span class="keywordtype">void</span>&gt;                       <span class="comment">// Template is used to only conditionally compile this function in when it is actually used.</span></div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d95/classpl_bitfield.htm#a75325b5a529621c54fc283c23b8825cd">SetCountUninitialized</a>(plUInt32 uiBitCount); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span> </div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d95/classpl_bitfield.htm#a26b671d7be8af08d2a5e5c96edb76431">SetCount</a>(plUInt32 uiBitCount, <span class="keywordtype">bool</span> bSetNew = <span class="keyword">false</span>); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span> </div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../db/d95/classpl_bitfield.htm#a09aa6d5bdd0397e311fbbd270ac15749">IsEmpty</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span> </div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../db/d95/classpl_bitfield.htm#afee088c8eb7e729620c384d564a56c79">IsAnyBitSet</a>(plUInt32 uiFirstBit = 0, plUInt32 uiNumBits = 0xFFFFFFFF) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span> </div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../db/d95/classpl_bitfield.htm#a3dcbb09b1866cd88969c815770d763a8">IsNoBitSet</a>(plUInt32 uiFirstBit = 0, plUInt32 uiNumBits = 0xFFFFFFFF) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span> </div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../db/d95/classpl_bitfield.htm#a8227cce0094a55e5e482a32ca677ddcf">AreAllBitsSet</a>(plUInt32 uiFirstBit = 0, plUInt32 uiNumBits = 0xFFFFFFFF) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span> </div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d95/classpl_bitfield.htm#ab21c33722ee82a16511789a6bdf7eaeb">Clear</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span> </div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d95/classpl_bitfield.htm#a910d6521ee94c1f9bbeab07ebea10e45">SetBit</a>(plUInt32 uiBit); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span> </div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d95/classpl_bitfield.htm#a459faeff4fea70591f02ad923e965b53">ClearBit</a>(plUInt32 uiBit); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span> </div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d95/classpl_bitfield.htm#a1a165103552deb6b84242a9ea06484ed">SetBitValue</a>(plUInt32 uiBit, <span class="keywordtype">bool</span> bValue); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span> </div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../db/d95/classpl_bitfield.htm#a6308c27627ab6477ee2b9a6c772270dc">IsBitSet</a>(plUInt32 uiBit) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span> </div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d95/classpl_bitfield.htm#af403754c387bc113b57c31d6249169bc">ClearAllBits</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span> </div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d95/classpl_bitfield.htm#ac2b0a3761ffad17edd0eefd1e6195fbf">SetAllBits</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span> </div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d95/classpl_bitfield.htm#a95be5ea43a679dfae431bf7e80f5b9b4">SetBitRange</a>(plUInt32 uiFirstBit, plUInt32 uiNumBits); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span> </div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d95/classpl_bitfield.htm#a87efb27941ac4101c27a9113eec37ef8">ClearBitRange</a>(plUInt32 uiFirstBit, plUInt32 uiNumBits); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span> </div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../db/d95/classpl_bitfield.htm#aefe805f1768ba793895b940d29e50314">Swap</a>(<a class="code hl_class" href="../../db/d95/classpl_bitfield.htm">plBitfield&lt;Container&gt;</a>&amp; other); <span class="comment">// [tested]</span></div>
<div class="foldopen" id="foldopen00072" data-start="{" data-end="};">
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno"><a class="line" href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm">   72</a></span>  <span class="keyword">struct </span><a class="code hl_struct" href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm">ConstIterator</a></div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>  {</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>    <span class="keyword">using </span>iterator_category = std::forward_iterator_tag;</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>    <span class="keyword">using </span>value_type = plUInt32;</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>    <span class="keyword">using </span><a class="code hl_class" href="../../d4/d37/structpl_bit_iterator.htm">sub_iterator</a> = <a class="code hl_struct" href="../../d4/d37/structpl_bit_iterator.htm">::plBitIterator&lt;plUInt32, true&gt;</a>;</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span> </div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>    <span class="comment">// Invalid iterator (end)</span></div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>    PL_FORCE_INLINE <a class="code hl_struct" href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm">ConstIterator</a>() = <span class="keywordflow">default</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span> </div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>    <span class="comment">// Start iterator.</span></div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>    <span class="keyword">explicit</span> <a class="code hl_struct" href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm">ConstIterator</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d95/classpl_bitfield.htm">plBitfield&lt;Container&gt;</a>&amp; bitfield); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span> </div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>    <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm#a2035085772f3d0d42ac5e9643280f506">IsValid</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span> </div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>    plUInt32 <a class="code hl_function" href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm#a11d293ab2f951674758e0cfb9b7607e7">Value</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span> </div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>    <span class="keywordtype">void</span> <a class="code hl_function" href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm#abfbcfb4c6de682da58155416c81af95d">Next</a>();                                       <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span> </div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>    <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code hl_struct" href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm">ConstIterator</a>&amp; other) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>    <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <a class="code hl_struct" href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm">ConstIterator</a>&amp; other) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span> </div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>    plUInt32 <a class="code hl_function" href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm#aaf1f130c6e08b8a3b26001142e252787">operator*</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span> </div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>    <span class="keywordtype">void</span> <a class="code hl_function" href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm#a085ffc81cfa57635f31694d72658fed9">operator++</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span> </div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>  <span class="keyword">private</span>:</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>    <span class="keywordtype">void</span> FindNextChunk(plUInt32 uiStartChunk);</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span> </div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>  <span class="keyword">private</span>:</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>    plUInt32 m_uiChunk = 0;</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>    <a class="code hl_class" href="../../d4/d37/structpl_bit_iterator.htm">sub_iterator</a> m_Iterator;</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>    <span class="keyword">const</span> <a class="code hl_class" href="../../db/d95/classpl_bitfield.htm">plBitfield&lt;Container&gt;</a>* m_pBitfield = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>  };</div>
</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span> </div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>  <a class="code hl_struct" href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm">ConstIterator</a> <a class="code hl_function" href="../../db/d95/classpl_bitfield.htm#a51f05f8a3bebb932a8ccde2e612d78e8">GetIterator</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span> </div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>  <a class="code hl_struct" href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm">ConstIterator</a> <a class="code hl_function" href="../../db/d95/classpl_bitfield.htm#ae2ceec9e54318e2ff6523934c0a61a25">GetEndIterator</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span> </div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>  <span class="keyword">friend</span> <span class="keyword">struct </span><a class="code hl_struct" href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm">ConstIterator</a>;</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span> </div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>  plUInt32 GetBitInt(plUInt32 uiBitIndex) <span class="keyword">const</span>;</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>  plUInt32 GetBitMask(plUInt32 uiBitIndex) <span class="keyword">const</span>;</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span> </div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>  plUInt32 m_uiCount = 0;</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>  Container m_Container;</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>};</div>
</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span> </div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span><span class="keyword">using </span><a class="code hl_class" href="../../db/d95/classpl_bitfield.htm">plDynamicBitfield</a> = <a class="code hl_class" href="../../db/d95/classpl_bitfield.htm">plBitfield&lt;plDynamicArray&lt;plUInt32&gt;</a>&gt;;</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span> </div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span><span class="keyword">template</span> &lt;plUInt32 BITS&gt;</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span><span class="keyword">using </span><a class="code hl_class" href="../../db/d95/classpl_bitfield.htm">plHybridBitfield</a> = <a class="code hl_class" href="../../db/d95/classpl_bitfield.htm">plBitfield</a>&lt;<a class="code hl_class" href="../../d8/dcc/classpl_hybrid_array.htm">plHybridArray</a>&lt;plUInt32, (BITS + 31) / 32&gt;&gt;;</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span> </div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span><span class="comment">// begin() /end() for range-based for-loop support</span></div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm">plBitfield&lt;Container&gt;::ConstIterator</a> begin(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d95/classpl_bitfield.htm">plBitfield&lt;Container&gt;</a>&amp; container)</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>{</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>  <span class="keywordflow">return</span> container.<a class="code hl_function" href="../../db/d95/classpl_bitfield.htm#a51f05f8a3bebb932a8ccde2e612d78e8">GetIterator</a>();</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>}</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span> </div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm">plBitfield&lt;Container&gt;::ConstIterator</a> cbegin(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d95/classpl_bitfield.htm">plBitfield&lt;Container&gt;</a>&amp; container)</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>{</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>  <span class="keywordflow">return</span> container.<a class="code hl_function" href="../../db/d95/classpl_bitfield.htm#a51f05f8a3bebb932a8ccde2e612d78e8">GetIterator</a>();</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>}</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span> </div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm">plBitfield&lt;Container&gt;::ConstIterator</a> end(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d95/classpl_bitfield.htm">plBitfield&lt;Container&gt;</a>&amp; container)</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>{</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>  <span class="keywordflow">return</span> container.<a class="code hl_function" href="../../db/d95/classpl_bitfield.htm#ae2ceec9e54318e2ff6523934c0a61a25">GetEndIterator</a>();</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>}</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span> </div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm">plBitfield&lt;Container&gt;::ConstIterator</a> cend(<span class="keyword">const</span> <a class="code hl_class" href="../../db/d95/classpl_bitfield.htm">plBitfield&lt;Container&gt;</a>&amp; container)</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>{</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>  <span class="keywordflow">return</span> container.<a class="code hl_function" href="../../db/d95/classpl_bitfield.htm#ae2ceec9e54318e2ff6523934c0a61a25">GetEndIterator</a>();</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>}</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span> </div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span> </div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00166" data-start="{" data-end="};">
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno"><a class="line" href="../../da/d98/classpl_static_bitfield.htm">  166</a></span><span class="keyword">class </span><a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield</a></div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>{</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>  <span class="keyword">using </span>StorageType = T;</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>  <span class="keyword">using </span><a class="code hl_struct" href="../../d4/d37/structpl_bit_iterator.htm">ConstIterator</a> = <a class="code hl_struct" href="../../d4/d37/structpl_bit_iterator.htm">plBitIterator&lt;StorageType, true, plUInt32&gt;</a>;</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span> </div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>  <span class="keyword">static</span> <span class="keyword">constexpr</span> plUInt32 GetStorageTypeBitCount() { <span class="keywordflow">return</span> <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a9cc360935cc5148e6b5755987b524e52">plMath::NumBits&lt;T&gt;</a>(); }</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span> </div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>  <a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#a7d55f2f518feea74bd9e3e910b94d382">plStaticBitfield</a>();</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span> </div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>  <span class="keyword">static</span> <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;T&gt;</a> MakeFromMask(StorageType bits);</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span> </div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#a42654bb40a29fa37fab164c1a40abfe5">IsAnyBitSet</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span> </div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#a7d9b3573af8f31cff201ae14f4e9213d">IsNoBitSet</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span> </div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#a5f524145f67bce03d6599d5482b6696c">AreAllBitsSet</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span> </div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#ada27b02559a14adc2a3f2ed865e4a5e7">SetBit</a>(plUInt32 uiBit); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span> </div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#a3c1027437874a273f75deceebae3a57d">ClearBit</a>(plUInt32 uiBit); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span> </div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#ad09e2778f00e6a59185cd25ef32df72b">SetBitValue</a>(plUInt32 uiBit, <span class="keywordtype">bool</span> bValue); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span> </div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#a33a26d2a4fad97b3ece3925e1db28c70">IsBitSet</a>(plUInt32 uiBit) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span> </div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#a991836b30800844c8b875a632588f25c">ClearAllBits</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span> </div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#a645b5c7df5dee009e9df4ed102f261ec">SetAllBits</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span> </div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#ad38fd7e4ae0f42f2c691f1ec9e67ef8a">SetBitRange</a>(plUInt32 uiFirstBit, plUInt32 uiNumBits); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span> </div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#a427515b97370fe124a642e02ed5a356f">ClearBitRange</a>(plUInt32 uiFirstBit, plUInt32 uiNumBits); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span> </div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>  plUInt32 <a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#a1dde95b0571ae097e6fae71e4b6d505d">GetLowestBitSet</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span> </div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>  plUInt32 <a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#af511f95ead0da7487a3da77b444ce0be">GetHighestBitSet</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span> </div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>  plUInt32 <a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#a80096e924ed69826a72c1ad02ce21e0f">GetNumBitsSet</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span> </div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>  T <a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#aae77f5aabd916e3cca7917f7db241289">GetValue</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span> </div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#a6fbba6219b2227c7c445c9d22f8a9b8c">SetValue</a>(T value); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span> </div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#a15bc077bf8d2ac7791131033a0ee2e34">Swap</a>(<a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;T&gt;</a>&amp; other); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span> </div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno"><a class="line" href="../../da/d98/classpl_static_bitfield.htm#a6b5155364d93cb8215284e918ff18f7a">  231</a></span>  PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#a6b5155364d93cb8215284e918ff18f7a">operator|=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;T&gt;</a>&amp; rhs) { m_Storage |= rhs.m_Storage; }</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span> </div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno"><a class="line" href="../../da/d98/classpl_static_bitfield.htm#aa0a8d82aed795670f4b6719ede5b51b7">  234</a></span>  PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#aa0a8d82aed795670f4b6719ede5b51b7">operator&amp;=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;T&gt;</a>&amp; rhs) { m_Storage &amp;= rhs.m_Storage; }</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span> </div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>  <a class="code hl_struct" href="../../da/dce/structpl_result.htm">plResult</a> Serialize(<a class="code hl_class" href="../../d6/d90/classpl_stream_writer.htm">plStreamWriter</a>&amp; inout_writer)<span class="keyword"> const</span></div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>    inout_writer.<a class="code hl_function" href="../../d6/d90/classpl_stream_writer.htm#a3c70e3543a0c2ffc32f0a0f65cfe9fa4">WriteVersion</a>(s_Version);</div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>    inout_writer &lt;&lt; m_Storage;</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span>    <span class="keywordflow">return</span> PL_SUCCESS;</div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>  }</div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span> </div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>  <a class="code hl_struct" href="../../da/dce/structpl_result.htm">plResult</a> Deserialize(<a class="code hl_class" href="../../df/d3d/classpl_stream_reader.htm">plStreamReader</a>&amp; inout_reader)</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>  {</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>    <span class="comment">/*auto version =*/</span>inout_reader.ReadVersion(s_Version);</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span>    inout_reader &gt;&gt; m_Storage;</div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>    <span class="keywordflow">return</span> PL_SUCCESS;</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>  }</div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span> </div>
<div class="foldopen" id="foldopen00252" data-start="{" data-end="}">
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno"><a class="line" href="../../da/d98/classpl_static_bitfield.htm#a6640d2bbf71a4cf3659cf8eac31afed9">  252</a></span>  <a class="code hl_struct" href="../../d4/d37/structpl_bit_iterator.htm">ConstIterator</a> <a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#a6640d2bbf71a4cf3659cf8eac31afed9">GetIterator</a>() const <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span>  {</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span>    <span class="keywordflow">return</span> <a class="code hl_struct" href="../../d4/d37/structpl_bit_iterator.htm">ConstIterator</a>(m_Storage);</div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span>  };</div>
</div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span> </div>
<div class="foldopen" id="foldopen00258" data-start="{" data-end="}">
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno"><a class="line" href="../../da/d98/classpl_static_bitfield.htm#addb89d956baeec9272420c10ddfd90e6">  258</a></span>  <a class="code hl_struct" href="../../d4/d37/structpl_bit_iterator.htm">ConstIterator</a> <a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#addb89d956baeec9272420c10ddfd90e6">GetEndIterator</a>() const <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span>  {</div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span>    <span class="keywordflow">return</span> <a class="code hl_struct" href="../../d4/d37/structpl_bit_iterator.htm">ConstIterator</a>();</div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span>  };</div>
</div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span> </div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>  <span class="keyword">static</span> <span class="keyword">constexpr</span> plTypeVersion s_Version = 1;</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span> </div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span>  <a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#a7d55f2f518feea74bd9e3e910b94d382">plStaticBitfield</a>(StorageType initValue)</div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span>    : m_Storage(initValue)</div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span>  {</div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>  }</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span> </div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span>  <span class="keyword">friend</span> <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;U&gt;</a> operator|(<a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;U&gt;</a> lhs, <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;U&gt;</a> rhs);</div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span> </div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span>  <span class="keyword">friend</span> <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;U&gt;</a> operator&amp;(<a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;U&gt;</a> lhs, <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;U&gt;</a> rhs);</div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span> </div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span>  <span class="keyword">friend</span> <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;U&gt;</a> operator^(<a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;U&gt;</a> lhs, <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;U&gt;</a> rhs);</div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span> </div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span>  <span class="keyword">friend</span> <span class="keywordtype">bool</span> operator==(<a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;U&gt;</a> lhs, <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;U&gt;</a> rhs);</div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span> </div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span>  <span class="keyword">friend</span> <span class="keywordtype">bool</span> operator!=(<a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;U&gt;</a> lhs, <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;U&gt;</a> rhs);</div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span> </div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span>  StorageType m_Storage = 0;</div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span>};</div>
</div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span> </div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span><span class="keyword">inline</span> <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;T&gt;</a> operator|(<a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;T&gt;</a> lhs, <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;T&gt;</a> rhs)</div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span>{</div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;T&gt;</a>(lhs.m_Storage | rhs.m_Storage);</div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span>}</div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span> </div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span><span class="keyword">inline</span> <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;T&gt;</a> operator&amp;(<a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;T&gt;</a> lhs, <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;T&gt;</a> rhs)</div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span>{</div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;T&gt;</a>(lhs.m_Storage &amp; rhs.m_Storage);</div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span>}</div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span> </div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span><span class="keyword">inline</span> <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;T&gt;</a> operator^(<a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;T&gt;</a> lhs, <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;T&gt;</a> rhs)</div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span>{</div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;T&gt;</a>(lhs.m_Storage ^ rhs.m_Storage);</div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span>}</div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span> </div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span><span class="keyword">inline</span> <span class="keywordtype">bool</span> operator==(<a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;T&gt;</a> lhs, <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;T&gt;</a> rhs)</div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span>{</div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span>  <span class="keywordflow">return</span> lhs.m_Storage == rhs.m_Storage;</div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span>}</div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span> </div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span><span class="keyword">inline</span> <span class="keywordtype">bool</span> operator!=(<a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;T&gt;</a> lhs, <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;T&gt;</a> rhs)</div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span>{</div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span>  <span class="keywordflow">return</span> lhs.m_Storage != rhs.m_Storage;</div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span>}</div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span> </div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span><span class="comment">// begin() /end() for range-based for-loop support</span></div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d4/d37/structpl_bit_iterator.htm">plStaticBitfield&lt;Container&gt;::ConstIterator</a> begin(<span class="keyword">const</span> <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;Container&gt;</a>&amp; container)</div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span>{</div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span>  <span class="keywordflow">return</span> container.<a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#a6640d2bbf71a4cf3659cf8eac31afed9">GetIterator</a>();</div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span>}</div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span> </div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d4/d37/structpl_bit_iterator.htm">plStaticBitfield&lt;Container&gt;::ConstIterator</a> cbegin(<span class="keyword">const</span> <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;Container&gt;</a>&amp; container)</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span>{</div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span>  <span class="keywordflow">return</span> container.<a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#a6640d2bbf71a4cf3659cf8eac31afed9">GetIterator</a>();</div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span>}</div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span> </div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d4/d37/structpl_bit_iterator.htm">plStaticBitfield&lt;Container&gt;::ConstIterator</a> end(<span class="keyword">const</span> <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;Container&gt;</a>&amp; container)</div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span>{</div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span>  <span class="keywordflow">return</span> container.<a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#addb89d956baeec9272420c10ddfd90e6">GetEndIterator</a>();</div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span>}</div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span> </div>
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno">  339</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</div>
<div class="line"><a id="l00340" name="l00340"></a><span class="lineno">  340</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d4/d37/structpl_bit_iterator.htm">plStaticBitfield&lt;Container&gt;::ConstIterator</a> cend(<span class="keyword">const</span> <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;Container&gt;</a>&amp; container)</div>
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno">  341</span>{</div>
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno">  342</span>  <span class="keywordflow">return</span> container.<a class="code hl_function" href="../../da/d98/classpl_static_bitfield.htm#addb89d956baeec9272420c10ddfd90e6">GetEndIterator</a>();</div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span>}</div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span> </div>
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno">  345</span><span class="keyword">using </span><a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield8</a> = <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;plUInt8&gt;</a>;</div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span><span class="keyword">using </span><a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield16</a> = <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;plUInt16&gt;</a>;</div>
<div class="line"><a id="l00347" name="l00347"></a><span class="lineno">  347</span><span class="keyword">using </span><a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield32</a> = <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;plUInt32&gt;</a>;</div>
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno">  348</span><span class="keyword">using </span><a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield64</a> = <a class="code hl_class" href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield&lt;plUInt64&gt;</a>;</div>
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno">  349</span> </div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span><span class="preprocessor">#include &lt;Foundation/Containers/Implementation/Bitfield_inl.h&gt;</span></div>
<div class="ttc" id="aclasspl_bitfield_htm"><div class="ttname"><a href="../../db/d95/classpl_bitfield.htm">plBitfield</a></div><div class="ttdoc">A template interface, that turns any array class into a bitfield.</div><div class="ttdef"><b>Definition</b> Bitfield.h:17</div></div>
<div class="ttc" id="aclasspl_bitfield_htm_a09aa6d5bdd0397e311fbbd270ac15749"><div class="ttname"><a href="../../db/d95/classpl_bitfield.htm#a09aa6d5bdd0397e311fbbd270ac15749">plBitfield::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns true, if the bitfield does not store any bits.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:52</div></div>
<div class="ttc" id="aclasspl_bitfield_htm_a1a165103552deb6b84242a9ea06484ed"><div class="ttname"><a href="../../db/d95/classpl_bitfield.htm#a1a165103552deb6b84242a9ea06484ed">plBitfield::SetBitValue</a></div><div class="ttdeci">void SetBitValue(plUInt32 uiBit, bool bValue)</div><div class="ttdoc">Sets the given bit to 1 or 0 depending on the given value.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:191</div></div>
<div class="ttc" id="aclasspl_bitfield_htm_a26b671d7be8af08d2a5e5c96edb76431"><div class="ttname"><a href="../../db/d95/classpl_bitfield.htm#a26b671d7be8af08d2a5e5c96edb76431">plBitfield::SetCount</a></div><div class="ttdeci">void SetCount(plUInt32 uiBitCount, bool bSetNew=false)</div><div class="ttdoc">Resizes the Bitfield to hold the given number of bits. If bSetNew is true, new bits are set to 1,...</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:32</div></div>
<div class="ttc" id="aclasspl_bitfield_htm_a3dcbb09b1866cd88969c815770d763a8"><div class="ttname"><a href="../../db/d95/classpl_bitfield.htm#a3dcbb09b1866cd88969c815770d763a8">plBitfield::IsNoBitSet</a></div><div class="ttdeci">bool IsNoBitSet(plUInt32 uiFirstBit=0, plUInt32 uiNumBits=0xFFFFFFFF) const</div><div class="ttdoc">Returns true, if the bitfield is empty or all bits are set to zero.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:110</div></div>
<div class="ttc" id="aclasspl_bitfield_htm_a459faeff4fea70591f02ad923e965b53"><div class="ttname"><a href="../../db/d95/classpl_bitfield.htm#a459faeff4fea70591f02ad923e965b53">plBitfield::ClearBit</a></div><div class="ttdeci">void ClearBit(plUInt32 uiBit)</div><div class="ttdoc">Clears the given bit to 0.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:183</div></div>
<div class="ttc" id="aclasspl_bitfield_htm_a51f05f8a3bebb932a8ccde2e612d78e8"><div class="ttname"><a href="../../db/d95/classpl_bitfield.htm#a51f05f8a3bebb932a8ccde2e612d78e8">plBitfield::GetIterator</a></div><div class="ttdeci">ConstIterator GetIterator() const</div><div class="ttdoc">Returns a constant iterator to the very first set bit. Note that due to the way iterating through bit...</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:309</div></div>
<div class="ttc" id="aclasspl_bitfield_htm_a6308c27627ab6477ee2b9a6c772270dc"><div class="ttname"><a href="../../db/d95/classpl_bitfield.htm#a6308c27627ab6477ee2b9a6c772270dc">plBitfield::IsBitSet</a></div><div class="ttdeci">bool IsBitSet(plUInt32 uiBit) const</div><div class="ttdoc">Returns true, if the given bit is set to 1.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:204</div></div>
<div class="ttc" id="aclasspl_bitfield_htm_a72b85e68cd78013113e315401292c2ec"><div class="ttname"><a href="../../db/d95/classpl_bitfield.htm#a72b85e68cd78013113e315401292c2ec">plBitfield::GetCount</a></div><div class="ttdeci">plUInt32 GetCount() const</div><div class="ttdoc">Returns the number of bits that this bitfield stores.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:16</div></div>
<div class="ttc" id="aclasspl_bitfield_htm_a75325b5a529621c54fc283c23b8825cd"><div class="ttname"><a href="../../db/d95/classpl_bitfield.htm#a75325b5a529621c54fc283c23b8825cd">plBitfield::SetCountUninitialized</a></div><div class="ttdeci">void SetCountUninitialized(plUInt32 uiBitCount)</div><div class="ttdoc">Resizes the Bitfield to hold the given number of bits. This version does NOT initialize new bits!</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:23</div></div>
<div class="ttc" id="aclasspl_bitfield_htm_a8227cce0094a55e5e482a32ca677ddcf"><div class="ttname"><a href="../../db/d95/classpl_bitfield.htm#a8227cce0094a55e5e482a32ca677ddcf">plBitfield::AreAllBitsSet</a></div><div class="ttdeci">bool AreAllBitsSet(plUInt32 uiFirstBit=0, plUInt32 uiNumBits=0xFFFFFFFF) const</div><div class="ttdoc">Returns true, if the bitfield is not empty and all bits are set to one.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:116</div></div>
<div class="ttc" id="aclasspl_bitfield_htm_a87efb27941ac4101c27a9113eec37ef8"><div class="ttname"><a href="../../db/d95/classpl_bitfield.htm#a87efb27941ac4101c27a9113eec37ef8">plBitfield::ClearBitRange</a></div><div class="ttdeci">void ClearBitRange(plUInt32 uiFirstBit, plUInt32 uiNumBits)</div><div class="ttdoc">Clears the range starting at uiFirstBit up to (and including) uiLastBit to 0.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:264</div></div>
<div class="ttc" id="aclasspl_bitfield_htm_a910d6521ee94c1f9bbeab07ebea10e45"><div class="ttname"><a href="../../db/d95/classpl_bitfield.htm#a910d6521ee94c1f9bbeab07ebea10e45">plBitfield::SetBit</a></div><div class="ttdeci">void SetBit(plUInt32 uiBit)</div><div class="ttdoc">Sets the given bit to 1.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:175</div></div>
<div class="ttc" id="aclasspl_bitfield_htm_a95be5ea43a679dfae431bf7e80f5b9b4"><div class="ttname"><a href="../../db/d95/classpl_bitfield.htm#a95be5ea43a679dfae431bf7e80f5b9b4">plBitfield::SetBitRange</a></div><div class="ttdeci">void SetBitRange(plUInt32 uiFirstBit, plUInt32 uiNumBits)</div><div class="ttdoc">Sets the range starting at uiFirstBit up to (and including) uiLastBit to 1.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:226</div></div>
<div class="ttc" id="aclasspl_bitfield_htm_ab21c33722ee82a16511789a6bdf7eaeb"><div class="ttname"><a href="../../db/d95/classpl_bitfield.htm#ab21c33722ee82a16511789a6bdf7eaeb">plBitfield::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Discards all bits and sets count to zero.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:168</div></div>
<div class="ttc" id="aclasspl_bitfield_htm_ac2b0a3761ffad17edd0eefd1e6195fbf"><div class="ttname"><a href="../../db/d95/classpl_bitfield.htm#ac2b0a3761ffad17edd0eefd1e6195fbf">plBitfield::SetAllBits</a></div><div class="ttdeci">void SetAllBits()</div><div class="ttdoc">Sets all bits to 1.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:219</div></div>
<div class="ttc" id="aclasspl_bitfield_htm_ae2ceec9e54318e2ff6523934c0a61a25"><div class="ttname"><a href="../../db/d95/classpl_bitfield.htm#ae2ceec9e54318e2ff6523934c0a61a25">plBitfield::GetEndIterator</a></div><div class="ttdeci">ConstIterator GetEndIterator() const</div><div class="ttdoc">Returns an invalid iterator. Needed to support range based for loops.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:315</div></div>
<div class="ttc" id="aclasspl_bitfield_htm_aefe805f1768ba793895b940d29e50314"><div class="ttname"><a href="../../db/d95/classpl_bitfield.htm#aefe805f1768ba793895b940d29e50314">plBitfield::Swap</a></div><div class="ttdeci">void Swap(plBitfield&lt; Container &gt; &amp;other)</div><div class="ttdoc">Swaps two bitfields.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:302</div></div>
<div class="ttc" id="aclasspl_bitfield_htm_af403754c387bc113b57c31d6249169bc"><div class="ttname"><a href="../../db/d95/classpl_bitfield.htm#af403754c387bc113b57c31d6249169bc">plBitfield::ClearAllBits</a></div><div class="ttdeci">void ClearAllBits()</div><div class="ttdoc">Clears all bits to 0.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:212</div></div>
<div class="ttc" id="aclasspl_bitfield_htm_afee088c8eb7e729620c384d564a56c79"><div class="ttname"><a href="../../db/d95/classpl_bitfield.htm#afee088c8eb7e729620c384d564a56c79">plBitfield::IsAnyBitSet</a></div><div class="ttdeci">bool IsAnyBitSet(plUInt32 uiFirstBit=0, plUInt32 uiNumBits=0xFFFFFFFF) const</div><div class="ttdoc">Returns true, if the bitfield is not empty and any bit is 1.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:58</div></div>
<div class="ttc" id="aclasspl_hybrid_array_htm"><div class="ttname"><a href="../../d8/dcc/classpl_hybrid_array.htm">plHybridArray</a></div><div class="ttdoc">A hybrid array uses in-place storage to handle the first few elements without any allocation....</div><div class="ttdef"><b>Definition</b> HybridArray.h:12</div></div>
<div class="ttc" id="aclasspl_static_bitfield_htm"><div class="ttname"><a href="../../da/d98/classpl_static_bitfield.htm">plStaticBitfield</a></div><div class="ttdef"><b>Definition</b> Bitfield.h:167</div></div>
<div class="ttc" id="aclasspl_static_bitfield_htm_a15bc077bf8d2ac7791131033a0ee2e34"><div class="ttname"><a href="../../da/d98/classpl_static_bitfield.htm#a15bc077bf8d2ac7791131033a0ee2e34">plStaticBitfield::Swap</a></div><div class="ttdeci">void Swap(plStaticBitfield&lt; T &gt; &amp;other)</div><div class="ttdoc">Swaps two bitfields.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:543</div></div>
<div class="ttc" id="aclasspl_static_bitfield_htm_a1dde95b0571ae097e6fae71e4b6d505d"><div class="ttname"><a href="../../da/d98/classpl_static_bitfield.htm#a1dde95b0571ae097e6fae71e4b6d505d">plStaticBitfield::GetLowestBitSet</a></div><div class="ttdeci">plUInt32 GetLowestBitSet() const</div><div class="ttdoc">Returns the index of the lowest bit that is set. Returns the max index+1 in case no bit is set,...</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:476</div></div>
<div class="ttc" id="aclasspl_static_bitfield_htm_a33a26d2a4fad97b3ece3925e1db28c70"><div class="ttname"><a href="../../da/d98/classpl_static_bitfield.htm#a33a26d2a4fad97b3ece3925e1db28c70">plStaticBitfield::IsBitSet</a></div><div class="ttdeci">bool IsBitSet(plUInt32 uiBit) const</div><div class="ttdoc">Returns true, if the given bit is set to 1.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:494</div></div>
<div class="ttc" id="aclasspl_static_bitfield_htm_a3c1027437874a273f75deceebae3a57d"><div class="ttname"><a href="../../da/d98/classpl_static_bitfield.htm#a3c1027437874a273f75deceebae3a57d">plStaticBitfield::ClearBit</a></div><div class="ttdeci">void ClearBit(plUInt32 uiBit)</div><div class="ttdoc">Clears the given bit to 0.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:502</div></div>
<div class="ttc" id="aclasspl_static_bitfield_htm_a42654bb40a29fa37fab164c1a40abfe5"><div class="ttname"><a href="../../da/d98/classpl_static_bitfield.htm#a42654bb40a29fa37fab164c1a40abfe5">plStaticBitfield::IsAnyBitSet</a></div><div class="ttdeci">bool IsAnyBitSet() const</div><div class="ttdoc">Returns true, if the bitfield is not zero.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:424</div></div>
<div class="ttc" id="aclasspl_static_bitfield_htm_a427515b97370fe124a642e02ed5a356f"><div class="ttname"><a href="../../da/d98/classpl_static_bitfield.htm#a427515b97370fe124a642e02ed5a356f">plStaticBitfield::ClearBitRange</a></div><div class="ttdeci">void ClearBitRange(plUInt32 uiFirstBit, plUInt32 uiNumBits)</div><div class="ttdoc">Clears the range starting at uiFirstBit up to (and including) uiLastBit to 0.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:443</div></div>
<div class="ttc" id="aclasspl_static_bitfield_htm_a5f524145f67bce03d6599d5482b6696c"><div class="ttname"><a href="../../da/d98/classpl_static_bitfield.htm#a5f524145f67bce03d6599d5482b6696c">plStaticBitfield::AreAllBitsSet</a></div><div class="ttdeci">bool AreAllBitsSet() const</div><div class="ttdoc">Returns true, if the bitfield is not empty and all bits are set to one.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:436</div></div>
<div class="ttc" id="aclasspl_static_bitfield_htm_a645b5c7df5dee009e9df4ed102f261ec"><div class="ttname"><a href="../../da/d98/classpl_static_bitfield.htm#a645b5c7df5dee009e9df4ed102f261ec">plStaticBitfield::SetAllBits</a></div><div class="ttdeci">void SetAllBits()</div><div class="ttdoc">Sets all bits to 1.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:482</div></div>
<div class="ttc" id="aclasspl_static_bitfield_htm_a6640d2bbf71a4cf3659cf8eac31afed9"><div class="ttname"><a href="../../da/d98/classpl_static_bitfield.htm#a6640d2bbf71a4cf3659cf8eac31afed9">plStaticBitfield::GetIterator</a></div><div class="ttdeci">ConstIterator GetIterator() const</div><div class="ttdoc">Returns a constant iterator to the very first set bit. Note that due to the way iterating through bit...</div><div class="ttdef"><b>Definition</b> Bitfield.h:252</div></div>
<div class="ttc" id="aclasspl_static_bitfield_htm_a6b5155364d93cb8215284e918ff18f7a"><div class="ttname"><a href="../../da/d98/classpl_static_bitfield.htm#a6b5155364d93cb8215284e918ff18f7a">plStaticBitfield::operator|=</a></div><div class="ttdeci">PL_ALWAYS_INLINE void operator|=(const plStaticBitfield&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Modifies this to also contain the bits from rhs.</div><div class="ttdef"><b>Definition</b> Bitfield.h:231</div></div>
<div class="ttc" id="aclasspl_static_bitfield_htm_a6fbba6219b2227c7c445c9d22f8a9b8c"><div class="ttname"><a href="../../da/d98/classpl_static_bitfield.htm#a6fbba6219b2227c7c445c9d22f8a9b8c">plStaticBitfield::SetValue</a></div><div class="ttdeci">void SetValue(T value)</div><div class="ttdoc">Sets the raw uint that stores all bits.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:531</div></div>
<div class="ttc" id="aclasspl_static_bitfield_htm_a7d55f2f518feea74bd9e3e910b94d382"><div class="ttname"><a href="../../da/d98/classpl_static_bitfield.htm#a7d55f2f518feea74bd9e3e910b94d382">plStaticBitfield::plStaticBitfield</a></div><div class="ttdeci">plStaticBitfield()</div><div class="ttdoc">Initializes the bitfield to all zero.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:412</div></div>
<div class="ttc" id="aclasspl_static_bitfield_htm_a7d9b3573af8f31cff201ae14f4e9213d"><div class="ttname"><a href="../../da/d98/classpl_static_bitfield.htm#a7d9b3573af8f31cff201ae14f4e9213d">plStaticBitfield::IsNoBitSet</a></div><div class="ttdeci">bool IsNoBitSet() const</div><div class="ttdoc">Returns true, if the bitfield is all zero.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:430</div></div>
<div class="ttc" id="aclasspl_static_bitfield_htm_a80096e924ed69826a72c1ad02ce21e0f"><div class="ttname"><a href="../../da/d98/classpl_static_bitfield.htm#a80096e924ed69826a72c1ad02ce21e0f">plStaticBitfield::GetNumBitsSet</a></div><div class="ttdeci">plUInt32 GetNumBitsSet() const</div><div class="ttdoc">Returns the count of how many bits are set in total.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:464</div></div>
<div class="ttc" id="aclasspl_static_bitfield_htm_a991836b30800844c8b875a632588f25c"><div class="ttname"><a href="../../da/d98/classpl_static_bitfield.htm#a991836b30800844c8b875a632588f25c">plStaticBitfield::ClearAllBits</a></div><div class="ttdeci">void ClearAllBits()</div><div class="ttdoc">Clears all bits to 0. Same as Clear().</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:488</div></div>
<div class="ttc" id="aclasspl_static_bitfield_htm_aa0a8d82aed795670f4b6719ede5b51b7"><div class="ttname"><a href="../../da/d98/classpl_static_bitfield.htm#aa0a8d82aed795670f4b6719ede5b51b7">plStaticBitfield::operator&amp;=</a></div><div class="ttdeci">PL_ALWAYS_INLINE void operator&amp;=(const plStaticBitfield&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Modifies this to only contain the bits that were set in this and rhs.</div><div class="ttdef"><b>Definition</b> Bitfield.h:234</div></div>
<div class="ttc" id="aclasspl_static_bitfield_htm_aae77f5aabd916e3cca7917f7db241289"><div class="ttname"><a href="../../da/d98/classpl_static_bitfield.htm#aae77f5aabd916e3cca7917f7db241289">plStaticBitfield::GetValue</a></div><div class="ttdeci">T GetValue() const</div><div class="ttdoc">Returns the raw uint that stores all bits.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:537</div></div>
<div class="ttc" id="aclasspl_static_bitfield_htm_ad09e2778f00e6a59185cd25ef32df72b"><div class="ttname"><a href="../../da/d98/classpl_static_bitfield.htm#ad09e2778f00e6a59185cd25ef32df72b">plStaticBitfield::SetBitValue</a></div><div class="ttdeci">void SetBitValue(plUInt32 uiBit, bool bValue)</div><div class="ttdoc">Sets the given bit to 1 or 0 depending on the given value.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:510</div></div>
<div class="ttc" id="aclasspl_static_bitfield_htm_ad38fd7e4ae0f42f2c691f1ec9e67ef8a"><div class="ttname"><a href="../../da/d98/classpl_static_bitfield.htm#ad38fd7e4ae0f42f2c691f1ec9e67ef8a">plStaticBitfield::SetBitRange</a></div><div class="ttdeci">void SetBitRange(plUInt32 uiFirstBit, plUInt32 uiNumBits)</div><div class="ttdoc">Sets the range starting at uiFirstBit up to (and including) uiLastBit to 1.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:454</div></div>
<div class="ttc" id="aclasspl_static_bitfield_htm_ada27b02559a14adc2a3f2ed865e4a5e7"><div class="ttname"><a href="../../da/d98/classpl_static_bitfield.htm#ada27b02559a14adc2a3f2ed865e4a5e7">plStaticBitfield::SetBit</a></div><div class="ttdeci">void SetBit(plUInt32 uiBit)</div><div class="ttdoc">Sets the given bit to 1.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:523</div></div>
<div class="ttc" id="aclasspl_static_bitfield_htm_addb89d956baeec9272420c10ddfd90e6"><div class="ttname"><a href="../../da/d98/classpl_static_bitfield.htm#addb89d956baeec9272420c10ddfd90e6">plStaticBitfield::GetEndIterator</a></div><div class="ttdeci">ConstIterator GetEndIterator() const</div><div class="ttdoc">Returns an invalid iterator. Needed to support range based for loops.</div><div class="ttdef"><b>Definition</b> Bitfield.h:258</div></div>
<div class="ttc" id="aclasspl_static_bitfield_htm_af511f95ead0da7487a3da77b444ce0be"><div class="ttname"><a href="../../da/d98/classpl_static_bitfield.htm#af511f95ead0da7487a3da77b444ce0be">plStaticBitfield::GetHighestBitSet</a></div><div class="ttdeci">plUInt32 GetHighestBitSet() const</div><div class="ttdoc">Returns the index of the highest bit that is set. Returns the max index+1 in case no bit is set,...</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:470</div></div>
<div class="ttc" id="aclasspl_stream_reader_htm"><div class="ttname"><a href="../../df/d3d/classpl_stream_reader.htm">plStreamReader</a></div><div class="ttdoc">Interface for binary in (read) streams.</div><div class="ttdef"><b>Definition</b> Stream.h:22</div></div>
<div class="ttc" id="aclasspl_stream_writer_htm"><div class="ttname"><a href="../../d6/d90/classpl_stream_writer.htm">plStreamWriter</a></div><div class="ttdoc">Interface for binary out (write) streams.</div><div class="ttdef"><b>Definition</b> Stream.h:107</div></div>
<div class="ttc" id="aclasspl_stream_writer_htm_a3c70e3543a0c2ffc32f0a0f65cfe9fa4"><div class="ttname"><a href="../../d6/d90/classpl_stream_writer.htm#a3c70e3543a0c2ffc32f0a0f65cfe9fa4">plStreamWriter::WriteVersion</a></div><div class="ttdeci">PL_ALWAYS_INLINE void WriteVersion(plTypeVersion version)</div><div class="ttdoc">Writes a type version to the stream.</div><div class="ttdef"><b>Definition</b> Stream_inl.h:154</div></div>
<div class="ttc" id="anamespacepl_math_htm_a9cc360935cc5148e6b5755987b524e52"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a9cc360935cc5148e6b5755987b524e52">plMath::NumBits</a></div><div class="ttdeci">constexpr plUInt32 NumBits()</div><div class="ttdoc">Returns the number of bits in the given type. Mostly useful for unsigned integer types.</div></div>
<div class="ttc" id="astructpl_bit_iterator_htm"><div class="ttname"><a href="../../d4/d37/structpl_bit_iterator.htm">plBitIterator&lt; plUInt32, true &gt;</a></div></div>
<div class="ttc" id="astructpl_bitfield_1_1_const_iterator_htm"><div class="ttname"><a href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm">plBitfield::ConstIterator</a></div><div class="ttdef"><b>Definition</b> Bitfield.h:73</div></div>
<div class="ttc" id="astructpl_bitfield_1_1_const_iterator_htm_a085ffc81cfa57635f31694d72658fed9"><div class="ttname"><a href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm#a085ffc81cfa57635f31694d72658fed9">plBitfield::ConstIterator::operator++</a></div><div class="ttdeci">void operator++()</div><div class="ttdoc">Shorthand for 'Next'.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:371</div></div>
<div class="ttc" id="astructpl_bitfield_1_1_const_iterator_htm_a11d293ab2f951674758e0cfb9b7607e7"><div class="ttname"><a href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm#a11d293ab2f951674758e0cfb9b7607e7">plBitfield::ConstIterator::Value</a></div><div class="ttdeci">plUInt32 Value() const</div><div class="ttdoc">Returns the 'value' of the element that this iterator points to.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:337</div></div>
<div class="ttc" id="astructpl_bitfield_1_1_const_iterator_htm_a2035085772f3d0d42ac5e9643280f506"><div class="ttname"><a href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm#a2035085772f3d0d42ac5e9643280f506">plBitfield::ConstIterator::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdoc">Checks whether this iterator points to a valid element.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:331</div></div>
<div class="ttc" id="astructpl_bitfield_1_1_const_iterator_htm_aaf1f130c6e08b8a3b26001142e252787"><div class="ttname"><a href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm#aaf1f130c6e08b8a3b26001142e252787">plBitfield::ConstIterator::operator*</a></div><div class="ttdeci">plUInt32 operator*() const</div><div class="ttdoc">Returns 'Value()' to enable foreach.</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:365</div></div>
<div class="ttc" id="astructpl_bitfield_1_1_const_iterator_htm_abfbcfb4c6de682da58155416c81af95d"><div class="ttname"><a href="../../d3/d60/structpl_bitfield_1_1_const_iterator.htm#abfbcfb4c6de682da58155416c81af95d">plBitfield::ConstIterator::Next</a></div><div class="ttdeci">void Next()</div><div class="ttdoc">Advances the iterator to the next element in the map. The iterator will not be valid anymore,...</div><div class="ttdef"><b>Definition</b> Bitfield_inl.h:343</div></div>
<div class="ttc" id="astructpl_result_htm"><div class="ttname"><a href="../../da/dce/structpl_result.htm">plResult</a></div><div class="ttdoc">Default enum for returning failure or success, instead of using a bool.</div><div class="ttdef"><b>Definition</b> Types.h:54</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_3416883c1320ec68c4d0694befd114fc.htm">Containers</a></li><li class="navelem"><b>Bitfield.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
