<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Plasma Engine: Code/Engine/Foundation/Reflection/Implementation/RTTI.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Plasma Engine<span id="projectnumber">&#160;2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('de/dd7/_r_t_t_i_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">RTTI.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span> </div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#include &lt;Foundation/Basics.h&gt;</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">#include &lt;Foundation/Configuration/Plugin.h&gt;</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="preprocessor">#include &lt;Foundation/Memory/Allocator.h&gt;</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="preprocessor">#include &lt;Foundation/Reflection/Implementation/StaticRTTI.h&gt;</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span> </div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="comment">// *****************************************</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="comment">// ***** Runtime Type Information Data *****</span></div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span> </div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span><span class="keyword">struct </span><a class="code hl_struct" href="../../dc/d77/structpl_r_t_t_i_allocator.htm">plRTTIAllocator</a>;</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span><span class="keyword">class </span><a class="code hl_class" href="../../d4/dd7/classpl_abstract_property.htm">plAbstractProperty</a>;</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="keyword">class </span><a class="code hl_class" href="../../d7/de1/classpl_abstract_function_property.htm">plAbstractFunctionProperty</a>;</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span><span class="keyword">class </span><a class="code hl_class" href="../../d1/d8e/classpl_abstract_message_handler.htm">plAbstractMessageHandler</a>;</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span><span class="keyword">struct </span><a class="code hl_struct" href="../../dc/d6f/structpl_message_sender_info.htm">plMessageSenderInfo</a>;</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="keyword">class </span><a class="code hl_class" href="../../d3/d74/classpl_property_attribute.htm">plPropertyAttribute</a>;</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span><span class="keyword">class </span><a class="code hl_class" href="../../d0/dde/classpl_message.htm">plMessage</a>;</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span><span class="keyword">using </span>plMessageId = plUInt16;</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span> </div>
<div class="foldopen" id="foldopen00029" data-start="{" data-end="};">
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno"><a class="line" href="../../d8/dec/classpl_r_t_t_i.htm">   29</a></span><span class="keyword">class </span>PL_FOUNDATION_DLL <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a></div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>{</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>  <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* pParentType, plUInt32 uiTypeSize, plUInt32 uiTypeVersion, plUInt8 uiVariantType,</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>    <a class="code hl_struct" href="../../df/dd9/structpl_bitflags.htm">plBitflags&lt;plTypeFlags&gt;</a> flags, <a class="code hl_struct" href="../../dc/d77/structpl_r_t_t_i_allocator.htm">plRTTIAllocator</a>* pAllocator, <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const plAbstractProperty*&gt;</a> properties, <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const plAbstractFunctionProperty*&gt;</a> functions,</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span>    <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const plPropertyAttribute*&gt;</a> attributes, <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;plAbstractMessageHandler*&gt;</a> messageHandlers,</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>    <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;plMessageSenderInfo&gt;</a> messageSenders, <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* (*fnVerifyParent)());</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span> </div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span> </div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>  <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">~plRTTI</a>();</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span> </div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>  <span class="keywordtype">void</span> VerifyCorrectness() <span class="keyword">const</span>;</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span> </div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>  <span class="keyword">static</span> <span class="keywordtype">void</span> VerifyCorrectnessForAllTypes();</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span> </div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno"><a class="line" href="../../d8/dec/classpl_r_t_t_i.htm#a7a906257607936b6ebbb0849fb1caa5c">   48</a></span>  PL_ALWAYS_INLINE <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> <a class="code hl_function" href="../../d8/dec/classpl_r_t_t_i.htm#a7a906257607936b6ebbb0849fb1caa5c">GetTypeName</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_sTypeName; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span> </div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno"><a class="line" href="../../d8/dec/classpl_r_t_t_i.htm#a9ad78d4368a6a627a9cff4c27f43c95d">   51</a></span>  PL_ALWAYS_INLINE plUInt64 <a class="code hl_function" href="../../d8/dec/classpl_r_t_t_i.htm#a9ad78d4368a6a627a9cff4c27f43c95d">GetTypeNameHash</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_uiTypeNameHash; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span> </div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno"><a class="line" href="../../d8/dec/classpl_r_t_t_i.htm#a1062521031d49a355447ef0973f545b0">   54</a></span>  PL_ALWAYS_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* <a class="code hl_function" href="../../d8/dec/classpl_r_t_t_i.htm#a1062521031d49a355447ef0973f545b0">GetParentType</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pParentType; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span> </div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno"><a class="line" href="../../d8/dec/classpl_r_t_t_i.htm#aad51fe5f43dc33629176b21b3fdebd17">   57</a></span>  PL_ALWAYS_INLINE <a class="code hl_enumeration" href="../../d6/d1e/structpl_variant_type.htm#a4d10a99c083abdf7283ab1f48565de12">plVariantType::Enum</a> <a class="code hl_function" href="../../d8/dec/classpl_r_t_t_i.htm#aad51fe5f43dc33629176b21b3fdebd17">GetVariantType</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><a class="code hl_enumeration" href="../../d6/d1e/structpl_variant_type.htm#a4d10a99c083abdf7283ab1f48565de12">plVariantType::Enum</a><span class="keyword">&gt;</span>(m_uiVariantType); }</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span> </div>
<div class="foldopen" id="foldopen00060" data-start="{" data-end="}">
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno"><a class="line" href="../../d8/dec/classpl_r_t_t_i.htm#af421e6a16baa5f5864c4eca9408831ef">   60</a></span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d8/dec/classpl_r_t_t_i.htm#af421e6a16baa5f5864c4eca9408831ef">IsDerivedFrom</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* pBaseType) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>  {</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>    <span class="keyword">const</span> plUInt32 thisGeneration = m_ParentHierarchy.GetCount();</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>    <span class="keyword">const</span> plUInt32 baseGeneration = pBaseType-&gt;m_ParentHierarchy.<a class="code hl_function" href="../../d7/de3/classpl_small_array_base.htm#aaadcac566b72769bc7881e1daadb63c7">GetCount</a>();</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>    PL_ASSERT_DEBUG(thisGeneration &gt; 0 &amp;&amp; baseGeneration &gt; 0, <span class="stringliteral">&quot;SetupParentHierarchy() has not been called&quot;</span>);</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>    <span class="keywordflow">return</span> thisGeneration &gt;= baseGeneration &amp;&amp; m_ParentHierarchy.GetData()[thisGeneration - baseGeneration] == pBaseType;</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>  }</div>
</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span> </div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> BASE&gt;</div>
<div class="foldopen" id="foldopen00070" data-start="{" data-end="}">
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno"><a class="line" href="../../d8/dec/classpl_r_t_t_i.htm#a165e505d6c1ec9914bec8a71812a86cb">   70</a></span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d8/dec/classpl_r_t_t_i.htm#a165e505d6c1ec9914bec8a71812a86cb">IsDerivedFrom</a>() const <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>  {</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>    <span class="keywordflow">return</span> IsDerivedFrom(plGetStaticRTTI&lt;BASE&gt;());</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>  }</div>
</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span> </div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno"><a class="line" href="../../d8/dec/classpl_r_t_t_i.htm#a662762e594a3db472de268ee304d9415">   76</a></span>  PL_ALWAYS_INLINE <a class="code hl_struct" href="../../dc/d77/structpl_r_t_t_i_allocator.htm">plRTTIAllocator</a>* <a class="code hl_function" href="../../d8/dec/classpl_r_t_t_i.htm#a662762e594a3db472de268ee304d9415">GetAllocator</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pAllocator; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span> </div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno"><a class="line" href="../../d8/dec/classpl_r_t_t_i.htm#a81f24fef6d86a7e004153eae372f8619">   79</a></span>  PL_ALWAYS_INLINE <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const plAbstractProperty* const&gt;</a> <a class="code hl_function" href="../../d8/dec/classpl_r_t_t_i.htm#a81f24fef6d86a7e004153eae372f8619">GetProperties</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Properties; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span> </div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>  PL_ALWAYS_INLINE <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const plAbstractFunctionProperty* const&gt;</a> GetFunctions()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Functions; }</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span> </div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>  PL_ALWAYS_INLINE <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const plPropertyAttribute* const&gt;</a> GetAttributes()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Attributes; }</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span> </div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>  <span class="keyword">const</span> Type* GetAttributeByType() <span class="keyword">const</span>;</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span> </div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>  <span class="keywordtype">void</span> GetAllProperties(<a class="code hl_class" href="../../d0/d4e/classpl_dynamic_array.htm">plDynamicArray&lt;const plAbstractProperty*&gt;</a>&amp; out_properties) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span> </div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno"><a class="line" href="../../d8/dec/classpl_r_t_t_i.htm#a5732a8c077f2c9b0896477bb12ec701d">   93</a></span>  PL_ALWAYS_INLINE plUInt32 <a class="code hl_function" href="../../d8/dec/classpl_r_t_t_i.htm#a5732a8c077f2c9b0896477bb12ec701d">GetTypeSize</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_uiTypeSize; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span> </div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno"><a class="line" href="../../d8/dec/classpl_r_t_t_i.htm#a37c5908b1c868c0cae2310d0520ae8c5">   96</a></span>  PL_ALWAYS_INLINE plUInt32 <a class="code hl_function" href="../../d8/dec/classpl_r_t_t_i.htm#a37c5908b1c868c0cae2310d0520ae8c5">GetTypeVersion</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_uiTypeVersion; }</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span> </div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno"><a class="line" href="../../d8/dec/classpl_r_t_t_i.htm#a2de39d8af71de51528b2fb40ae7569d8">   99</a></span>  PL_ALWAYS_INLINE <span class="keyword">const</span> <a class="code hl_struct" href="../../df/dd9/structpl_bitflags.htm">plBitflags&lt;plTypeFlags&gt;</a>&amp; <a class="code hl_function" href="../../d8/dec/classpl_r_t_t_i.htm#a2de39d8af71de51528b2fb40ae7569d8">GetTypeFlags</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_TypeFlags; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span> </div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>  <span class="keyword">static</span> <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* FindTypeByName(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span> </div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>  <span class="keyword">static</span> <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* FindTypeByNameHash(plUInt64 uiNameHash); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>  <span class="keyword">static</span> <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* FindTypeByNameHash32(plUInt32 uiNameHash);</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span> </div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>  <span class="keyword">using </span>PredicateFunc = <a class="code hl_struct" href="../../df/df1/structpl_delegate.htm">plDelegate</a>&lt;bool(<span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>*), 48&gt;;</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>  <span class="keyword">static</span> <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* FindTypeIf(PredicateFunc func);</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span> </div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d4/dd7/classpl_abstract_property.htm">plAbstractProperty</a>* FindPropertyByName(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, <span class="keywordtype">bool</span> bSearchBaseTypes = <span class="keyword">true</span>) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span> </div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno"><a class="line" href="../../d8/dec/classpl_r_t_t_i.htm#a2fd532c13aab99286bfafff27fa70de4">  116</a></span>  PL_ALWAYS_INLINE <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> <a class="code hl_function" href="../../d8/dec/classpl_r_t_t_i.htm#a2fd532c13aab99286bfafff27fa70de4">GetPluginName</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_sPluginName; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span> </div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno"><a class="line" href="../../d8/dec/classpl_r_t_t_i.htm#aec5372c35213a617791b0961d899cb2a">  119</a></span>  PL_ALWAYS_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;plAbstractMessageHandler*&gt;</a>&amp; <a class="code hl_function" href="../../d8/dec/classpl_r_t_t_i.htm#aec5372c35213a617791b0961d899cb2a">GetMessageHandlers</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_MessageHandlers; }</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span> </div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>  <span class="keywordtype">bool</span> DispatchMessage(<span class="keywordtype">void</span>* pInstance, <a class="code hl_class" href="../../d0/dde/classpl_message.htm">plMessage</a>&amp; ref_msg) <span class="keyword">const</span>;</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span> </div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>  <span class="keywordtype">bool</span> DispatchMessage(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code hl_class" href="../../d0/dde/classpl_message.htm">plMessage</a>&amp; ref_msg) <span class="keyword">const</span>;</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span> </div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> MessageType&gt;</div>
<div class="foldopen" id="foldopen00131" data-start="{" data-end="}">
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno"><a class="line" href="../../d8/dec/classpl_r_t_t_i.htm#a2ef07f1ba5eb1fbf2968949758b66c5b">  131</a></span>  PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d8/dec/classpl_r_t_t_i.htm#a2ef07f1ba5eb1fbf2968949758b66c5b">CanHandleMessage</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>    <span class="keywordflow">return</span> CanHandleMessage(MessageType::GetTypeMsgId());</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>  }</div>
</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span> </div>
<div class="foldopen" id="foldopen00137" data-start="{" data-end="}">
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno"><a class="line" href="../../d8/dec/classpl_r_t_t_i.htm#a9e466fe5d1934f4dda0f49591d8a3cf9">  137</a></span>  <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d8/dec/classpl_r_t_t_i.htm#a9e466fe5d1934f4dda0f49591d8a3cf9">CanHandleMessage</a>(plMessageId <span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>    PL_ASSERT_DEBUG(m_uiMsgIdOffset != plSmallInvalidIndex, <span class="stringliteral">&quot;Message handler table should have been gathered at this point.\n&quot;</span></div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>                                                            <span class="stringliteral">&quot;If this assert is triggered for a type loaded from a dynamic plugin,\n&quot;</span></div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>                                                            <span class="stringliteral">&quot;you may have forgotten to instantiate an plPlugin object inside your plugin DLL.&quot;</span>);</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span> </div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>    <span class="keyword">const</span> plUInt32 uiIndex = <span class="keywordtype">id</span> - m_uiMsgIdOffset;</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>    <span class="keywordflow">return</span> uiIndex &lt; m_DynamicMessageHandlers.GetCount() &amp;&amp; m_DynamicMessageHandlers.GetData()[uiIndex] != <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>  }</div>
</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span> </div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>  PL_ALWAYS_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;plMessageSenderInfo&gt;</a>&amp; GetMessageSender()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_MessageSenders; }</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span> </div>
<div class="foldopen" id="foldopen00149" data-start="{" data-end="};">
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno"><a class="line" href="../../df/dce/structpl_r_t_t_i_1_1_for_each_options.htm">  149</a></span>  <span class="keyword">struct </span><a class="code hl_struct" href="../../df/dce/structpl_r_t_t_i_1_1_for_each_options.htm">ForEachOptions</a></div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>  {</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>    <span class="keyword">using </span>StorageType = plUInt8;</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span> </div>
<div class="foldopen" id="foldopen00153" data-start="{" data-end="};">
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno"><a class="line" href="../../df/dce/structpl_r_t_t_i_1_1_for_each_options.htm#a6d95abbaa591d641fa00fbd61c97b29f">  153</a></span>    <span class="keyword">enum</span> <a class="code hl_enumeration" href="../../df/dce/structpl_r_t_t_i_1_1_for_each_options.htm#a6d95abbaa591d641fa00fbd61c97b29f">Enum</a></div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>    {</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>      None = 0,</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno"><a class="line" href="../../df/dce/structpl_r_t_t_i_1_1_for_each_options.htm#a6d95abbaa591d641fa00fbd61c97b29fa0739611ba8b0d90db57cd987acb137fe">  156</a></span>      ExcludeNonAllocatable = PL_BIT(0), </div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno"><a class="line" href="../../df/dce/structpl_r_t_t_i_1_1_for_each_options.htm#a6d95abbaa591d641fa00fbd61c97b29fa63cd233624943c25701d0c411d82e5a7">  157</a></span>      ExcludeAbstract = PL_BIT(1),       </div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>      ExcludeNotConcrete = ExcludeNonAllocatable | ExcludeAbstract,</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span> </div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>      Default = None</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>    };</div>
</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span> </div>
<div class="foldopen" id="foldopen00163" data-start="{" data-end="};">
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno"><a class="line" href="../../de/dad/structpl_r_t_t_i_1_1_for_each_options_1_1_bits.htm">  163</a></span>    <span class="keyword">struct </span><a class="code hl_struct" href="../../de/dad/structpl_r_t_t_i_1_1_for_each_options_1_1_bits.htm">Bits</a></div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>    {</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>      plUInt8 ExcludeNonAllocatable : 1;</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>      plUInt8 ExcludeAbstract : 1;</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>    };</div>
</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>  };</div>
</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span> </div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>  <span class="keyword">using </span><a class="code hl_struct" href="../../df/df1/structpl_delegate.htm">VisitorFunc</a> = <a class="code hl_struct" href="../../df/df1/structpl_delegate.htm">plDelegate</a>&lt;void(<span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>*), 48&gt;;</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>  <span class="keyword">static</span> <span class="keywordtype">void</span> ForEachType(<a class="code hl_struct" href="../../df/df1/structpl_delegate.htm">VisitorFunc</a> func, <a class="code hl_struct" href="../../df/dd9/structpl_bitflags.htm">plBitflags&lt;ForEachOptions&gt;</a> options = ForEachOptions::Default); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span> </div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>  <span class="keyword">static</span> <span class="keywordtype">void</span> ForEachDerivedType(<span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* pBaseType, <a class="code hl_struct" href="../../df/df1/structpl_delegate.htm">VisitorFunc</a> func, <a class="code hl_struct" href="../../df/dd9/structpl_bitflags.htm">plBitflags&lt;ForEachOptions&gt;</a> options = ForEachOptions::Default);</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span> </div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>  <span class="keyword">static</span> PL_ALWAYS_INLINE <span class="keywordtype">void</span> ForEachDerivedType(<a class="code hl_struct" href="../../df/df1/structpl_delegate.htm">VisitorFunc</a> func, <a class="code hl_struct" href="../../df/dd9/structpl_bitflags.htm">plBitflags&lt;ForEachOptions&gt;</a> options = ForEachOptions::Default)</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>  {</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>    ForEachDerivedType(plGetStaticRTTI&lt;T&gt;(), func, options);</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>  }</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span> </div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span><span class="keyword">protected</span>:</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>  <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> m_sPluginName;</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>  <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> m_sTypeName;</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>  <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const plAbstractProperty* const&gt;</a> m_Properties;</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>  <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const plAbstractFunctionProperty* const&gt;</a> m_Functions;</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>  <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;const plPropertyAttribute* const&gt;</a> m_Attributes;</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>  <span class="keywordtype">void</span> UpdateType(<span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* pParentType, plUInt32 uiTypeSize, plUInt32 uiTypeVersion, plUInt8 uiVariantType, <a class="code hl_struct" href="../../df/dd9/structpl_bitflags.htm">plBitflags&lt;plTypeFlags&gt;</a> flags);</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>  <span class="keywordtype">void</span> RegisterType();</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>  <span class="keywordtype">void</span> UnregisterType();</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span> </div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>  <span class="keywordtype">void</span> GatherDynamicMessageHandlers();</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>  <span class="keywordtype">void</span> SetupParentHierarchy();</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span> </div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* m_pParentType = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>  <a class="code hl_struct" href="../../dc/d77/structpl_r_t_t_i_allocator.htm">plRTTIAllocator</a>* m_pAllocator = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span> </div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>  plUInt32 m_uiTypeSize = 0;</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>  plUInt32 m_uiTypeVersion = 0;</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>  plUInt64 m_uiTypeNameHash = 0;</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>  plUInt32 m_uiTypeIndex = 0;</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>  <a class="code hl_struct" href="../../df/dd9/structpl_bitflags.htm">plBitflags&lt;plTypeFlags&gt;</a> m_TypeFlags;</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>  plUInt8 m_uiVariantType = 0;</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>  plUInt16 m_uiMsgIdOffset = plSmallInvalidIndex;</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span> </div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* (*m_VerifyParent)();</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span> </div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>  <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;plAbstractMessageHandler*&gt;</a> m_MessageHandlers;</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>  <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;plAbstractMessageHandler*, 1, plStaticsAllocatorWrapper&gt;</a> m_DynamicMessageHandlers; <span class="comment">// do not track this data, it won&#39;t be deallocated before shutdown</span></div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span> </div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>  <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;plMessageSenderInfo&gt;</a> m_MessageSenders;</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span>  <a class="code hl_class" href="../../df/dd9/classpl_small_array.htm">plSmallArray&lt;const plRTTI*, 7, plStaticsAllocatorWrapper&gt;</a> m_ParentHierarchy;</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span> </div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>  PL_MAKE_SUBSYSTEM_STARTUP_FRIEND(Foundation, Reflection);</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span> </div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span>  <span class="keyword">static</span> <span class="keywordtype">void</span> AssignPlugin(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sPluginName);</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span> </div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>  <span class="keyword">static</span> <span class="keywordtype">void</span> SanityCheckType(<a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* pType);</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span> </div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>  <span class="keyword">static</span> <span class="keywordtype">void</span> PluginEventHandler(<span class="keyword">const</span> <a class="code hl_struct" href="../../dc/df1/structpl_plugin_event.htm">plPluginEvent</a>&amp; EventData);</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>};</div>
</div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span> </div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>PL_DECLARE_FLAGS_OPERATORS(<a class="code hl_struct" href="../../df/dce/structpl_r_t_t_i_1_1_for_each_options.htm">plRTTI::ForEachOptions</a>);</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span> </div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span> </div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span><span class="comment">// ***********************************</span></div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span><span class="comment">// ***** Object Allocator Struct *****</span></div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span> </div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span> </div>
<div class="foldopen" id="foldopen00233" data-start="{" data-end="};">
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno"><a class="line" href="../../dc/d77/structpl_r_t_t_i_allocator.htm">  233</a></span><span class="keyword">struct </span>PL_FOUNDATION_DLL <a class="code hl_struct" href="../../dc/d77/structpl_r_t_t_i_allocator.htm">plRTTIAllocator</a></div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span>{</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>  <span class="keyword">virtual</span> <a class="code hl_struct" href="../../dc/d77/structpl_r_t_t_i_allocator.htm">~plRTTIAllocator</a>();</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span> </div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno"><a class="line" href="../../dc/d77/structpl_r_t_t_i_allocator.htm#a8af8fcfd647d2e3f9036c1823c93138d">  238</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../dc/d77/structpl_r_t_t_i_allocator.htm#a8af8fcfd647d2e3f9036c1823c93138d">CanAllocate</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">true</span>; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span> </div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00242" data-start="{" data-end="}">
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno"><a class="line" href="../../dc/d77/structpl_r_t_t_i_allocator.htm#a8ab3357b12a3fb58b9e0f0dd50bd23ba">  242</a></span>  <a class="code hl_struct" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">plInternal::NewInstance&lt;T&gt;</a> <a class="code hl_function" href="../../dc/d77/structpl_r_t_t_i_allocator.htm#a8ab3357b12a3fb58b9e0f0dd50bd23ba">Allocate</a>(<a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator = <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>  {</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>    <span class="keywordflow">return</span> AllocateInternal(pAllocator).Cast&lt;T&gt;();</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>  }</div>
</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span> </div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00249" data-start="{" data-end="}">
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno"><a class="line" href="../../dc/d77/structpl_r_t_t_i_allocator.htm#aa6041da85ad74701cfde8d6d3421e0a9">  249</a></span>  <a class="code hl_struct" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">plInternal::NewInstance&lt;T&gt;</a> <a class="code hl_function" href="../../dc/d77/structpl_r_t_t_i_allocator.htm#aa6041da85ad74701cfde8d6d3421e0a9">Clone</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pObject, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator = <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>  {</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>    <span class="keywordflow">return</span> CloneInternal(pObject, pAllocator).Cast&lt;T&gt;();</div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>  }</div>
</div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span> </div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno"><a class="line" href="../../dc/d77/structpl_r_t_t_i_allocator.htm#a03666d62aa0d30ba76e953a7d32a36a5">  255</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../dc/d77/structpl_r_t_t_i_allocator.htm#a03666d62aa0d30ba76e953a7d32a36a5">Deallocate</a>(<span class="keywordtype">void</span>* pObject, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator = <span class="keyword">nullptr</span>) = 0; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span> </div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span>  <span class="keyword">virtual</span> <a class="code hl_struct" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">plInternal::NewInstance&lt;void&gt;</a> AllocateInternal(<a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator) = 0;</div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span>  <span class="keyword">virtual</span> <a class="code hl_struct" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">plInternal::NewInstance&lt;void&gt;</a> CloneInternal(<span class="keyword">const</span> <span class="keywordtype">void</span>* pObject, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span>  {</div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span>    PL_REPORT_FAILURE(<span class="stringliteral">&quot;Cloning is not supported by this allocator.&quot;</span>);</div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span>    <span class="keywordflow">return</span> <a class="code hl_struct" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">plInternal::NewInstance&lt;void&gt;</a>(<span class="keyword">nullptr</span>, pAllocator);</div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span>  }</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>};</div>
</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span> </div>
<div class="foldopen" id="foldopen00267" data-start="{" data-end="};">
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno"><a class="line" href="../../de/db7/structpl_r_t_t_i_no_allocator.htm">  267</a></span><span class="keyword">struct </span>PL_FOUNDATION_DLL <a class="code hl_struct" href="../../de/db7/structpl_r_t_t_i_no_allocator.htm">plRTTINoAllocator</a> : <span class="keyword">public</span> <a class="code hl_struct" href="../../dc/d77/structpl_r_t_t_i_allocator.htm">plRTTIAllocator</a></div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span>{</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno"><a class="line" href="../../de/db7/structpl_r_t_t_i_no_allocator.htm#aaeeb6954cc0a011fd17e31073cb650dd">  270</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/db7/structpl_r_t_t_i_no_allocator.htm#aaeeb6954cc0a011fd17e31073cb650dd">CanAllocate</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> <span class="keyword">false</span>; } <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span> </div>
<div class="foldopen" id="foldopen00273" data-start="{" data-end="}">
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno"><a class="line" href="../../de/db7/structpl_r_t_t_i_no_allocator.htm#a3d51f2a04931c6bba9f8451c9a1e3aca">  273</a></span>  <span class="keyword">virtual</span> <a class="code hl_struct" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">plInternal::NewInstance&lt;void&gt;</a> <a class="code hl_function" href="../../de/db7/structpl_r_t_t_i_no_allocator.htm#a3d51f2a04931c6bba9f8451c9a1e3aca">AllocateInternal</a>(<a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator) <span class="keyword">override</span> <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span>  {</div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span>    PL_REPORT_FAILURE(<span class="stringliteral">&quot;This function should never be called.&quot;</span>);</div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span>    <span class="keywordflow">return</span> <a class="code hl_struct" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">plInternal::NewInstance&lt;void&gt;</a>(<span class="keyword">nullptr</span>, pAllocator);</div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span>  }</div>
</div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span> </div>
<div class="foldopen" id="foldopen00280" data-start="{" data-end="}">
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno"><a class="line" href="../../de/db7/structpl_r_t_t_i_no_allocator.htm#a5a5efea012e7740080c318bb1bc09ea0">  280</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../de/db7/structpl_r_t_t_i_no_allocator.htm#a5a5efea012e7740080c318bb1bc09ea0">Deallocate</a>(<span class="keywordtype">void</span>* pObject, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator) <span class="keyword">override</span> <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span>  {</div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span>    PL_REPORT_FAILURE(<span class="stringliteral">&quot;This function should never be called.&quot;</span>);</div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span>  }</div>
</div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span>};</div>
</div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span> </div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> CLASS, <span class="keyword">typename</span> AllocatorWrapper = plDefaultAllocatorWrapper&gt;</div>
<div class="foldopen" id="foldopen00288" data-start="{" data-end="};">
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno"><a class="line" href="../../d1/d0a/structpl_r_t_t_i_default_allocator.htm">  288</a></span><span class="keyword">struct </span><a class="code hl_struct" href="../../d1/d0a/structpl_r_t_t_i_default_allocator.htm">plRTTIDefaultAllocator</a> : <span class="keyword">public</span> <a class="code hl_struct" href="../../dc/d77/structpl_r_t_t_i_allocator.htm">plRTTIAllocator</a></div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span>{</div>
<div class="foldopen" id="foldopen00291" data-start="{" data-end="}">
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno"><a class="line" href="../../d1/d0a/structpl_r_t_t_i_default_allocator.htm#ad293133f5aa75049550e8aa2e45d2b1f">  291</a></span>  <span class="keyword">virtual</span> <a class="code hl_struct" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">plInternal::NewInstance&lt;void&gt;</a> <a class="code hl_function" href="../../d1/d0a/structpl_r_t_t_i_default_allocator.htm#ad293133f5aa75049550e8aa2e45d2b1f">AllocateInternal</a>(<a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator) <span class="keyword">override</span> <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span>  {</div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span>    <span class="keywordflow">if</span> (pAllocator == <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span>    {</div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span>      pAllocator = AllocatorWrapper::GetAllocator();</div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span>    }</div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span> </div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span>    <span class="keywordflow">return</span> PL_NEW(pAllocator, CLASS);</div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span>  }</div>
</div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span> </div>
<div class="foldopen" id="foldopen00302" data-start="{" data-end="}">
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno"><a class="line" href="../../d1/d0a/structpl_r_t_t_i_default_allocator.htm#aa05b6724fd72dd6d16dbe6c7fc127b96">  302</a></span>  <span class="keyword">virtual</span> <a class="code hl_struct" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">plInternal::NewInstance&lt;void&gt;</a> <a class="code hl_function" href="../../d1/d0a/structpl_r_t_t_i_default_allocator.htm#aa05b6724fd72dd6d16dbe6c7fc127b96">CloneInternal</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pObject, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator) <span class="keyword">override</span> <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span>  {</div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span>    <span class="keywordflow">if</span> (pAllocator == <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span>    {</div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span>      pAllocator = AllocatorWrapper::GetAllocator();</div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span>    }</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span> </div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span>    <span class="keywordflow">return</span> CloneImpl(pObject, pAllocator, <a class="code hl_struct" href="../../de/d69/structpl_trait_int.htm">plTraitInt</a>&lt;std::is_copy_constructible&lt;CLASS&gt;::value&gt;());</div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span>  }</div>
</div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span> </div>
<div class="foldopen" id="foldopen00313" data-start="{" data-end="}">
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno"><a class="line" href="../../d1/d0a/structpl_r_t_t_i_default_allocator.htm#adef014003490a816e48bfa3f1e9f0f0f">  313</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d0a/structpl_r_t_t_i_default_allocator.htm#adef014003490a816e48bfa3f1e9f0f0f">Deallocate</a>(<span class="keywordtype">void</span>* pObject, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator) <span class="keyword">override</span> <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span>  {</div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span>    <span class="keywordflow">if</span> (pAllocator == <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span>    {</div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span>      pAllocator = AllocatorWrapper::GetAllocator();</div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>    }</div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span> </div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span>    CLASS* pPointer = <span class="keyword">static_cast&lt;</span>CLASS*<span class="keyword">&gt;</span>(pObject);</div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span>    PL_DELETE(pAllocator, pPointer);</div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span>  }</div>
</div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span> </div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span>  <a class="code hl_struct" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">plInternal::NewInstance&lt;void&gt;</a> CloneImpl(<span class="keyword">const</span> <span class="keywordtype">void</span>* pObject, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator, <a class="code hl_struct" href="../../de/d69/structpl_trait_int.htm">plTraitInt&lt;0&gt;</a>)</div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span>  {</div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span>    PL_REPORT_FAILURE(<span class="stringliteral">&quot;Clone failed since the type is not copy constructible&quot;</span>);</div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span>    <span class="keywordflow">return</span> <a class="code hl_struct" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">plInternal::NewInstance&lt;void&gt;</a>(<span class="keyword">nullptr</span>, pAllocator);</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span>  }</div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span> </div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span>  <a class="code hl_struct" href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">plInternal::NewInstance&lt;void&gt;</a> CloneImpl(<span class="keyword">const</span> <span class="keywordtype">void</span>* pObject, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator, <a class="code hl_struct" href="../../de/d69/structpl_trait_int.htm">plTraitInt&lt;1&gt;</a>)</div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span>  {</div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span>    <span class="keywordflow">return</span> PL_NEW(pAllocator, CLASS, *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>CLASS*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span>  }</div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span>};</div>
</div>
<div class="ttc" id="aclasspl_abstract_function_property_htm"><div class="ttname"><a href="../../d7/de1/classpl_abstract_function_property.htm">plAbstractFunctionProperty</a></div><div class="ttdoc">The base class for a property that represents a function.</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:535</div></div>
<div class="ttc" id="aclasspl_abstract_message_handler_htm"><div class="ttname"><a href="../../d1/d8e/classpl_abstract_message_handler.htm">plAbstractMessageHandler</a></div><div class="ttdoc">The base class for all message handlers that a type provides.</div><div class="ttdef"><b>Definition</b> MessageHandler.h:12</div></div>
<div class="ttc" id="aclasspl_abstract_property_htm"><div class="ttname"><a href="../../d4/dd7/classpl_abstract_property.htm">plAbstractProperty</a></div><div class="ttdoc">This is the base interface for all properties in the reflection system. It provides enough informatio...</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:150</div></div>
<div class="ttc" id="aclasspl_allocator_htm"><div class="ttname"><a href="../../da/df3/classpl_allocator.htm">plAllocator</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition</b> Allocator.h:23</div></div>
<div class="ttc" id="aclasspl_array_ptr_htm"><div class="ttname"><a href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a></div><div class="ttdoc">This class encapsulates an array and it's size. It is recommended to use this class instead of plain ...</div><div class="ttdef"><b>Definition</b> ArrayPtr.h:37</div></div>
<div class="ttc" id="aclasspl_dynamic_array_htm"><div class="ttname"><a href="../../d0/d4e/classpl_dynamic_array.htm">plDynamicArray</a></div><div class="ttdef"><b>Definition</b> DynamicArray.h:81</div></div>
<div class="ttc" id="aclasspl_message_htm"><div class="ttname"><a href="../../d0/dde/classpl_message.htm">plMessage</a></div><div class="ttdoc">Base class for all message types. Each message type has it's own id which is used to dispatch message...</div><div class="ttdef"><b>Definition</b> Message.h:22</div></div>
<div class="ttc" id="aclasspl_property_attribute_htm"><div class="ttname"><a href="../../d3/d74/classpl_property_attribute.htm">plPropertyAttribute</a></div><div class="ttdoc">Base class of all attributes can be used to decorate a RTTI property.</div><div class="ttdef"><b>Definition</b> PropertyAttributes.h:11</div></div>
<div class="ttc" id="aclasspl_r_t_t_i_htm"><div class="ttname"><a href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a></div><div class="ttdoc">This class holds information about reflected types. Each instance represents one type that is known t...</div><div class="ttdef"><b>Definition</b> RTTI.h:30</div></div>
<div class="ttc" id="aclasspl_r_t_t_i_htm_a1062521031d49a355447ef0973f545b0"><div class="ttname"><a href="../../d8/dec/classpl_r_t_t_i.htm#a1062521031d49a355447ef0973f545b0">plRTTI::GetParentType</a></div><div class="ttdeci">PL_ALWAYS_INLINE const plRTTI * GetParentType() const</div><div class="ttdoc">Returns the type that is the base class of this type. May be nullptr if this type has no base class.</div><div class="ttdef"><b>Definition</b> RTTI.h:54</div></div>
<div class="ttc" id="aclasspl_r_t_t_i_htm_a165e505d6c1ec9914bec8a71812a86cb"><div class="ttname"><a href="../../d8/dec/classpl_r_t_t_i.htm#a165e505d6c1ec9914bec8a71812a86cb">plRTTI::IsDerivedFrom</a></div><div class="ttdeci">PL_ALWAYS_INLINE bool IsDerivedFrom() const</div><div class="ttdoc">Returns true if this type is derived from or identical to the given type.</div><div class="ttdef"><b>Definition</b> RTTI.h:70</div></div>
<div class="ttc" id="aclasspl_r_t_t_i_htm_a2de39d8af71de51528b2fb40ae7569d8"><div class="ttname"><a href="../../d8/dec/classpl_r_t_t_i.htm#a2de39d8af71de51528b2fb40ae7569d8">plRTTI::GetTypeFlags</a></div><div class="ttdeci">PL_ALWAYS_INLINE const plBitflags&lt; plTypeFlags &gt; &amp; GetTypeFlags() const</div><div class="ttdoc">Returns the type flags.</div><div class="ttdef"><b>Definition</b> RTTI.h:99</div></div>
<div class="ttc" id="aclasspl_r_t_t_i_htm_a2ef07f1ba5eb1fbf2968949758b66c5b"><div class="ttname"><a href="../../d8/dec/classpl_r_t_t_i.htm#a2ef07f1ba5eb1fbf2968949758b66c5b">plRTTI::CanHandleMessage</a></div><div class="ttdeci">PL_ALWAYS_INLINE bool CanHandleMessage() const</div><div class="ttdoc">Returns whether this type can handle the given message type.</div><div class="ttdef"><b>Definition</b> RTTI.h:131</div></div>
<div class="ttc" id="aclasspl_r_t_t_i_htm_a2fd532c13aab99286bfafff27fa70de4"><div class="ttname"><a href="../../d8/dec/classpl_r_t_t_i.htm#a2fd532c13aab99286bfafff27fa70de4">plRTTI::GetPluginName</a></div><div class="ttdeci">PL_ALWAYS_INLINE plStringView GetPluginName() const</div><div class="ttdoc">Returns the name of the plugin which this type is declared in.</div><div class="ttdef"><b>Definition</b> RTTI.h:116</div></div>
<div class="ttc" id="aclasspl_r_t_t_i_htm_a37c5908b1c868c0cae2310d0520ae8c5"><div class="ttname"><a href="../../d8/dec/classpl_r_t_t_i.htm#a37c5908b1c868c0cae2310d0520ae8c5">plRTTI::GetTypeVersion</a></div><div class="ttdeci">PL_ALWAYS_INLINE plUInt32 GetTypeVersion() const</div><div class="ttdoc">Returns the version number of this type.</div><div class="ttdef"><b>Definition</b> RTTI.h:96</div></div>
<div class="ttc" id="aclasspl_r_t_t_i_htm_a5732a8c077f2c9b0896477bb12ec701d"><div class="ttname"><a href="../../d8/dec/classpl_r_t_t_i.htm#a5732a8c077f2c9b0896477bb12ec701d">plRTTI::GetTypeSize</a></div><div class="ttdeci">PL_ALWAYS_INLINE plUInt32 GetTypeSize() const</div><div class="ttdoc">Returns the size (in bytes) of an instance of this type.</div><div class="ttdef"><b>Definition</b> RTTI.h:93</div></div>
<div class="ttc" id="aclasspl_r_t_t_i_htm_a662762e594a3db472de268ee304d9415"><div class="ttname"><a href="../../d8/dec/classpl_r_t_t_i.htm#a662762e594a3db472de268ee304d9415">plRTTI::GetAllocator</a></div><div class="ttdeci">PL_ALWAYS_INLINE plRTTIAllocator * GetAllocator() const</div><div class="ttdoc">Returns the object through which instances of this type can be allocated.</div><div class="ttdef"><b>Definition</b> RTTI.h:76</div></div>
<div class="ttc" id="aclasspl_r_t_t_i_htm_a7a906257607936b6ebbb0849fb1caa5c"><div class="ttname"><a href="../../d8/dec/classpl_r_t_t_i.htm#a7a906257607936b6ebbb0849fb1caa5c">plRTTI::GetTypeName</a></div><div class="ttdeci">PL_ALWAYS_INLINE plStringView GetTypeName() const</div><div class="ttdoc">Returns the name of this type.</div><div class="ttdef"><b>Definition</b> RTTI.h:48</div></div>
<div class="ttc" id="aclasspl_r_t_t_i_htm_a81f24fef6d86a7e004153eae372f8619"><div class="ttname"><a href="../../d8/dec/classpl_r_t_t_i.htm#a81f24fef6d86a7e004153eae372f8619">plRTTI::GetProperties</a></div><div class="ttdeci">PL_ALWAYS_INLINE plArrayPtr&lt; const plAbstractProperty *const &gt; GetProperties() const</div><div class="ttdoc">Returns the array of properties that this type has. Does NOT include properties from base classes.</div><div class="ttdef"><b>Definition</b> RTTI.h:79</div></div>
<div class="ttc" id="aclasspl_r_t_t_i_htm_a9ad78d4368a6a627a9cff4c27f43c95d"><div class="ttname"><a href="../../d8/dec/classpl_r_t_t_i.htm#a9ad78d4368a6a627a9cff4c27f43c95d">plRTTI::GetTypeNameHash</a></div><div class="ttdeci">PL_ALWAYS_INLINE plUInt64 GetTypeNameHash() const</div><div class="ttdoc">Returns the hash of the name of this type.</div><div class="ttdef"><b>Definition</b> RTTI.h:51</div></div>
<div class="ttc" id="aclasspl_r_t_t_i_htm_a9e466fe5d1934f4dda0f49591d8a3cf9"><div class="ttname"><a href="../../d8/dec/classpl_r_t_t_i.htm#a9e466fe5d1934f4dda0f49591d8a3cf9">plRTTI::CanHandleMessage</a></div><div class="ttdeci">bool CanHandleMessage(plMessageId id) const</div><div class="ttdoc">Returns whether this type can handle the message type with the given id.</div><div class="ttdef"><b>Definition</b> RTTI.h:137</div></div>
<div class="ttc" id="aclasspl_r_t_t_i_htm_aad51fe5f43dc33629176b21b3fdebd17"><div class="ttname"><a href="../../d8/dec/classpl_r_t_t_i.htm#aad51fe5f43dc33629176b21b3fdebd17">plRTTI::GetVariantType</a></div><div class="ttdeci">PL_ALWAYS_INLINE plVariantType::Enum GetVariantType() const</div><div class="ttdoc">Returns the corresponding variant type for this type or Invalid if there is none.</div><div class="ttdef"><b>Definition</b> RTTI.h:57</div></div>
<div class="ttc" id="aclasspl_r_t_t_i_htm_aec5372c35213a617791b0961d899cb2a"><div class="ttname"><a href="../../d8/dec/classpl_r_t_t_i.htm#aec5372c35213a617791b0961d899cb2a">plRTTI::GetMessageHandlers</a></div><div class="ttdeci">PL_ALWAYS_INLINE const plArrayPtr&lt; plAbstractMessageHandler * &gt; &amp; GetMessageHandlers() const</div><div class="ttdoc">Returns the array of message handlers that this type has.</div><div class="ttdef"><b>Definition</b> RTTI.h:119</div></div>
<div class="ttc" id="aclasspl_r_t_t_i_htm_af421e6a16baa5f5864c4eca9408831ef"><div class="ttname"><a href="../../d8/dec/classpl_r_t_t_i.htm#af421e6a16baa5f5864c4eca9408831ef">plRTTI::IsDerivedFrom</a></div><div class="ttdeci">PL_ALWAYS_INLINE bool IsDerivedFrom(const plRTTI *pBaseType) const</div><div class="ttdoc">Returns true if this type is derived from the given type (or of the same type).</div><div class="ttdef"><b>Definition</b> RTTI.h:60</div></div>
<div class="ttc" id="aclasspl_small_array_base_htm_aaadcac566b72769bc7881e1daadb63c7"><div class="ttname"><a href="../../d7/de3/classpl_small_array_base.htm#aaadcac566b72769bc7881e1daadb63c7">plSmallArrayBase::GetCount</a></div><div class="ttdeci">plUInt32 GetCount() const</div><div class="ttdoc">Returns the number of active elements in the array.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:210</div></div>
<div class="ttc" id="aclasspl_small_array_htm"><div class="ttname"><a href="../../df/dd9/classpl_small_array.htm">plSmallArray</a></div><div class="ttdef"><b>Definition</b> SmallArray.h:219</div></div>
<div class="ttc" id="aclasspl_string_view_htm"><div class="ttname"><a href="../../d6/d79/classpl_string_view.htm">plStringView</a></div><div class="ttdoc">plStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...</div><div class="ttdef"><b>Definition</b> StringView.h:34</div></div>
<div class="ttc" id="astructpl_bitflags_htm"><div class="ttname"><a href="../../df/dd9/structpl_bitflags.htm">plBitflags</a></div><div class="ttdoc">The plBitflags class allows you to work with type-safe bitflags.</div><div class="ttdef"><b>Definition</b> Bitflags.h:82</div></div>
<div class="ttc" id="astructpl_delegate_htm"><div class="ttname"><a href="../../df/df1/structpl_delegate.htm">plDelegate</a></div><div class="ttdoc">A generic delegate class which supports static functions and member functions.</div><div class="ttdef"><b>Definition</b> Delegate.h:76</div></div>
<div class="ttc" id="astructpl_internal_1_1_new_instance_htm"><div class="ttname"><a href="../../d5/d9d/structpl_internal_1_1_new_instance.htm">plInternal::NewInstance</a></div><div class="ttdef"><b>Definition</b> Allocator_inl.h:18</div></div>
<div class="ttc" id="astructpl_message_sender_info_htm"><div class="ttname"><a href="../../dc/d6f/structpl_message_sender_info.htm">plMessageSenderInfo</a></div><div class="ttdef"><b>Definition</b> MessageHandler.h:42</div></div>
<div class="ttc" id="astructpl_plugin_event_htm"><div class="ttname"><a href="../../dc/df1/structpl_plugin_event.htm">plPluginEvent</a></div><div class="ttdoc">The data that is broadcast whenever a plugin is (un-) loaded.</div><div class="ttdef"><b>Definition</b> Plugin.h:11</div></div>
<div class="ttc" id="astructpl_r_t_t_i_1_1_for_each_options_1_1_bits_htm"><div class="ttname"><a href="../../de/dad/structpl_r_t_t_i_1_1_for_each_options_1_1_bits.htm">plRTTI::ForEachOptions::Bits</a></div><div class="ttdef"><b>Definition</b> RTTI.h:164</div></div>
<div class="ttc" id="astructpl_r_t_t_i_1_1_for_each_options_htm"><div class="ttname"><a href="../../df/dce/structpl_r_t_t_i_1_1_for_each_options.htm">plRTTI::ForEachOptions</a></div><div class="ttdef"><b>Definition</b> RTTI.h:150</div></div>
<div class="ttc" id="astructpl_r_t_t_i_1_1_for_each_options_htm_a6d95abbaa591d641fa00fbd61c97b29f"><div class="ttname"><a href="../../df/dce/structpl_r_t_t_i_1_1_for_each_options.htm#a6d95abbaa591d641fa00fbd61c97b29f">plRTTI::ForEachOptions::Enum</a></div><div class="ttdeci">Enum</div><div class="ttdef"><b>Definition</b> RTTI.h:154</div></div>
<div class="ttc" id="astructpl_r_t_t_i_allocator_htm"><div class="ttname"><a href="../../dc/d77/structpl_r_t_t_i_allocator.htm">plRTTIAllocator</a></div><div class="ttdoc">The interface for an allocator that creates instances of reflected types.</div><div class="ttdef"><b>Definition</b> RTTI.h:234</div></div>
<div class="ttc" id="astructpl_r_t_t_i_allocator_htm_a03666d62aa0d30ba76e953a7d32a36a5"><div class="ttname"><a href="../../dc/d77/structpl_r_t_t_i_allocator.htm#a03666d62aa0d30ba76e953a7d32a36a5">plRTTIAllocator::Deallocate</a></div><div class="ttdeci">virtual void Deallocate(void *pObject, plAllocator *pAllocator=nullptr)=0</div><div class="ttdoc">Deallocates the given instance.</div></div>
<div class="ttc" id="astructpl_r_t_t_i_allocator_htm_a8ab3357b12a3fb58b9e0f0dd50bd23ba"><div class="ttname"><a href="../../dc/d77/structpl_r_t_t_i_allocator.htm#a8ab3357b12a3fb58b9e0f0dd50bd23ba">plRTTIAllocator::Allocate</a></div><div class="ttdeci">plInternal::NewInstance&lt; T &gt; Allocate(plAllocator *pAllocator=nullptr)</div><div class="ttdoc">Allocates one instance.</div><div class="ttdef"><b>Definition</b> RTTI.h:242</div></div>
<div class="ttc" id="astructpl_r_t_t_i_allocator_htm_a8af8fcfd647d2e3f9036c1823c93138d"><div class="ttname"><a href="../../dc/d77/structpl_r_t_t_i_allocator.htm#a8af8fcfd647d2e3f9036c1823c93138d">plRTTIAllocator::CanAllocate</a></div><div class="ttdeci">virtual bool CanAllocate() const</div><div class="ttdoc">Returns whether the type that is represented by this allocator, can be dynamically allocated at runti...</div><div class="ttdef"><b>Definition</b> RTTI.h:238</div></div>
<div class="ttc" id="astructpl_r_t_t_i_allocator_htm_aa6041da85ad74701cfde8d6d3421e0a9"><div class="ttname"><a href="../../dc/d77/structpl_r_t_t_i_allocator.htm#aa6041da85ad74701cfde8d6d3421e0a9">plRTTIAllocator::Clone</a></div><div class="ttdeci">plInternal::NewInstance&lt; T &gt; Clone(const void *pObject, plAllocator *pAllocator=nullptr)</div><div class="ttdoc">Clones the given instance.</div><div class="ttdef"><b>Definition</b> RTTI.h:249</div></div>
<div class="ttc" id="astructpl_r_t_t_i_default_allocator_htm"><div class="ttname"><a href="../../d1/d0a/structpl_r_t_t_i_default_allocator.htm">plRTTIDefaultAllocator</a></div><div class="ttdoc">Default implementation of plRTTIAllocator that allocates instances via the given allocator.</div><div class="ttdef"><b>Definition</b> RTTI.h:289</div></div>
<div class="ttc" id="astructpl_r_t_t_i_default_allocator_htm_aa05b6724fd72dd6d16dbe6c7fc127b96"><div class="ttname"><a href="../../d1/d0a/structpl_r_t_t_i_default_allocator.htm#aa05b6724fd72dd6d16dbe6c7fc127b96">plRTTIDefaultAllocator::CloneInternal</a></div><div class="ttdeci">virtual plInternal::NewInstance&lt; void &gt; CloneInternal(const void *pObject, plAllocator *pAllocator) override</div><div class="ttdoc">Clones the given instance with the given allocator.</div><div class="ttdef"><b>Definition</b> RTTI.h:302</div></div>
<div class="ttc" id="astructpl_r_t_t_i_default_allocator_htm_ad293133f5aa75049550e8aa2e45d2b1f"><div class="ttname"><a href="../../d1/d0a/structpl_r_t_t_i_default_allocator.htm#ad293133f5aa75049550e8aa2e45d2b1f">plRTTIDefaultAllocator::AllocateInternal</a></div><div class="ttdeci">virtual plInternal::NewInstance&lt; void &gt; AllocateInternal(plAllocator *pAllocator) override</div><div class="ttdoc">Returns a new instance that was allocated with the given allocator.</div><div class="ttdef"><b>Definition</b> RTTI.h:291</div></div>
<div class="ttc" id="astructpl_r_t_t_i_default_allocator_htm_adef014003490a816e48bfa3f1e9f0f0f"><div class="ttname"><a href="../../d1/d0a/structpl_r_t_t_i_default_allocator.htm#adef014003490a816e48bfa3f1e9f0f0f">plRTTIDefaultAllocator::Deallocate</a></div><div class="ttdeci">virtual void Deallocate(void *pObject, plAllocator *pAllocator) override</div><div class="ttdoc">Deletes the given instance with the given allocator.</div><div class="ttdef"><b>Definition</b> RTTI.h:313</div></div>
<div class="ttc" id="astructpl_r_t_t_i_no_allocator_htm"><div class="ttname"><a href="../../de/db7/structpl_r_t_t_i_no_allocator.htm">plRTTINoAllocator</a></div><div class="ttdoc">Dummy Allocator for types that should not be allocatable through the reflection system.</div><div class="ttdef"><b>Definition</b> RTTI.h:268</div></div>
<div class="ttc" id="astructpl_r_t_t_i_no_allocator_htm_a3d51f2a04931c6bba9f8451c9a1e3aca"><div class="ttname"><a href="../../de/db7/structpl_r_t_t_i_no_allocator.htm#a3d51f2a04931c6bba9f8451c9a1e3aca">plRTTINoAllocator::AllocateInternal</a></div><div class="ttdeci">virtual plInternal::NewInstance&lt; void &gt; AllocateInternal(plAllocator *pAllocator) override</div><div class="ttdoc">Will trigger an assert.</div><div class="ttdef"><b>Definition</b> RTTI.h:273</div></div>
<div class="ttc" id="astructpl_r_t_t_i_no_allocator_htm_a5a5efea012e7740080c318bb1bc09ea0"><div class="ttname"><a href="../../de/db7/structpl_r_t_t_i_no_allocator.htm#a5a5efea012e7740080c318bb1bc09ea0">plRTTINoAllocator::Deallocate</a></div><div class="ttdeci">virtual void Deallocate(void *pObject, plAllocator *pAllocator) override</div><div class="ttdoc">Will trigger an assert.</div><div class="ttdef"><b>Definition</b> RTTI.h:280</div></div>
<div class="ttc" id="astructpl_r_t_t_i_no_allocator_htm_aaeeb6954cc0a011fd17e31073cb650dd"><div class="ttname"><a href="../../de/db7/structpl_r_t_t_i_no_allocator.htm#aaeeb6954cc0a011fd17e31073cb650dd">plRTTINoAllocator::CanAllocate</a></div><div class="ttdeci">virtual bool CanAllocate() const override</div><div class="ttdoc">Returns false, because this type of allocator is used for classes that shall not be allocated dynamic...</div><div class="ttdef"><b>Definition</b> RTTI.h:270</div></div>
<div class="ttc" id="astructpl_trait_int_htm"><div class="ttname"><a href="../../de/d69/structpl_trait_int.htm">plTraitInt</a></div><div class="ttdoc">Type traits.</div><div class="ttdef"><b>Definition</b> TypeTraits.h:12</div></div>
<div class="ttc" id="astructpl_variant_type_htm_a4d10a99c083abdf7283ab1f48565de12"><div class="ttname"><a href="../../d6/d1e/structpl_variant_type.htm#a4d10a99c083abdf7283ab1f48565de12">plVariantType::Enum</a></div><div class="ttdeci">Enum</div><div class="ttdoc">This enum describes the type of data that is currently stored inside the variant. Note that changes t...</div><div class="ttdef"><b>Definition</b> VariantType.h:26</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_03dd0ffe19aabd3d1cd0d82a91256ab1.htm">Reflection</a></li><li class="navelem"><a class="el" href="../../dir_e37e67d8810cb9249b77d55deb37c5cb.htm">Implementation</a></li><li class="navelem"><b>RTTI.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
