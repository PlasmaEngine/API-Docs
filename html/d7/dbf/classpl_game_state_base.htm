<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>plEngine: plGameStateBase Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only-darkmode-toggle.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">plEngine<span id="projectnumber">&#160;Release 2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d7/dbf/classpl_game_state_base.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="../../df/df0/classpl_game_state_base-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plGameStateBase Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div></div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="../../db/d9b/classpl_game_state.htm" title="plGameState is the base class to build custom game logic upon. It works closely together with plGameA...">plGameState</a> is the base class to build custom game logic upon. It works closely together with <a class="el" href="../../db/d17/classpl_game_application.htm" title="The base class for all typical game applications made with plEngine.">plGameApplication</a>.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d6/d39/_game_state_base_8h_source.htm">GameStateBase.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for plGameStateBase:</div>
<div class="dyncontent">
<div class="center"><img src="../../da/dcf/classpl_game_state_base__inherit__graph.png" border="0" usemap="#apl_game_state_base_inherit__map" alt="Inheritance graph"/></div>
<map name="apl_game_state_base_inherit__map" id="apl_game_state_base_inherit__map">
<area shape="rect" title="plGameState is the base class to build custom game logic upon. It works closely together with plGameA..." alt="" coords="15,155,142,181"/>
<area shape="rect" href="../../db/d9b/classpl_game_state.htm" title="plGameState is the base class to build custom game logic upon. It works closely together with plGameA..." alt="" coords="30,229,127,256"/>
<area shape="poly" title=" " alt="" coords="81,197,81,229,76,229,76,197"/>
<area shape="rect" href="../../d4/d91/classpl_reflected_class.htm" title="All classes that should be dynamically reflectable, need to be derived from this base class." alt="" coords="19,80,138,107"/>
<area shape="poly" title=" " alt="" coords="81,122,81,154,76,154,76,122"/>
<area shape="rect" href="../../de/dc4/classpl_no_base.htm" title="Dummy type to pass to templates and macros that expect a base type for a class that has no base." alt="" coords="40,5,117,32"/>
<area shape="poly" title=" " alt="" coords="81,48,81,80,76,80,76,48"/>
<area shape="rect" href="../../d6/da5/classpl_fallback_game_state.htm" title="plFallbackGameState is an plGameState that can handle existing worlds when no other game state is ava..." alt="" coords="5,304,152,331"/>
<area shape="poly" title=" " alt="" coords="81,272,81,304,76,304,76,272"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad21420a72d14030e57cb7837889533c9" id="r_ad21420a72d14030e57cb7837889533c9"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad21420a72d14030e57cb7837889533c9">OnActivation</a> (<a class="el" href="../../d2/d12/classpl_world.htm">plWorld</a> *pWorld, const <a class="el" href="../../d6/d78/classpl_transform_template.htm">plTransform</a> *pStartPosition)=0</td></tr>
<tr class="memdesc:ad21420a72d14030e57cb7837889533c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">When a game state was chosen, it gets activated through this function.  <br /></td></tr>
<tr class="separator:ad21420a72d14030e57cb7837889533c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a56f9e31e21aa92861ded8dc75167bf" id="r_a4a56f9e31e21aa92861ded8dc75167bf"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4a56f9e31e21aa92861ded8dc75167bf">OnDeactivation</a> ()=0</td></tr>
<tr class="memdesc:a4a56f9e31e21aa92861ded8dc75167bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called when the game state is being shut down.  <br /></td></tr>
<tr class="separator:a4a56f9e31e21aa92861ded8dc75167bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e376ed2af5b56b422f2942559b9cacb" id="r_a9e376ed2af5b56b422f2942559b9cacb"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a9e376ed2af5b56b422f2942559b9cacb">ProcessInput</a> ()</td></tr>
<tr class="memdesc:a9e376ed2af5b56b422f2942559b9cacb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called once per game update. Should handle input updates here.  <br /></td></tr>
<tr class="separator:a9e376ed2af5b56b422f2942559b9cacb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff93e3af215cd4b8c250211b6f2600c1" id="r_aff93e3af215cd4b8c250211b6f2600c1"><td class="memItemLeft" align="right" valign="top"><a id="aff93e3af215cd4b8c250211b6f2600c1" name="aff93e3af215cd4b8c250211b6f2600c1"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><b>BeforeWorldUpdate</b> ()</td></tr>
<tr class="memdesc:aff93e3af215cd4b8c250211b6f2600c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called once each frame before the worlds are updated. <br /></td></tr>
<tr class="separator:aff93e3af215cd4b8c250211b6f2600c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7953f824240bfbcc9b198154c8981fa5" id="r_a7953f824240bfbcc9b198154c8981fa5"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7953f824240bfbcc9b198154c8981fa5">AfterWorldUpdate</a> ()</td></tr>
<tr class="memdesc:a7953f824240bfbcc9b198154c8981fa5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called once each frame after the worlds have been updated.  <br /></td></tr>
<tr class="separator:a7953f824240bfbcc9b198154c8981fa5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe9ed8e3c621e75aca2b3d92b6ece064" id="r_abe9ed8e3c621e75aca2b3d92b6ece064"><td class="memItemLeft" align="right" valign="top">virtual plGameStatePriority&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#abe9ed8e3c621e75aca2b3d92b6ece064">DeterminePriority</a> (<a class="el" href="../../d2/d12/classpl_world.htm">plWorld</a> *pWorld) const =0</td></tr>
<tr class="memdesc:abe9ed8e3c621e75aca2b3d92b6ece064"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called by <a class="el" href="../../db/d17/classpl_game_application.htm" title="The base class for all typical game applications made with plEngine.">plGameApplication</a> to determine which game state is best suited to handle a situation.  <br /></td></tr>
<tr class="separator:abe9ed8e3c621e75aca2b3d92b6ece064"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e110d9b3a25c6021608f5d54f036a47" id="r_a9e110d9b3a25c6021608f5d54f036a47"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a9e110d9b3a25c6021608f5d54f036a47">ScheduleRendering</a> ()=0</td></tr>
<tr class="memdesc:a9e110d9b3a25c6021608f5d54f036a47"><td class="mdescLeft">&#160;</td><td class="mdescRight">Has to call plRenderLoop::AddMainView for all views that need to be rendered.  <br /></td></tr>
<tr class="separator:a9e110d9b3a25c6021608f5d54f036a47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d73e81a96712306f628260e7c9937f2" id="r_a6d73e81a96712306f628260e7c9937f2"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6d73e81a96712306f628260e7c9937f2">RequestQuit</a> ()</td></tr>
<tr class="memdesc:a6d73e81a96712306f628260e7c9937f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Call this to signal that a game state requested the application to quit.  <br /></td></tr>
<tr class="separator:a6d73e81a96712306f628260e7c9937f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a578c06dde871240f3a87a0206c1ec60f" id="r_a578c06dde871240f3a87a0206c1ec60f"><td class="memItemLeft" align="right" valign="top"><a id="a578c06dde871240f3a87a0206c1ec60f" name="a578c06dde871240f3a87a0206c1ec60f"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>WasQuitRequested</b> () const</td></tr>
<tr class="memdesc:a578c06dde871240f3a87a0206c1ec60f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the game state wants to quit the application. <br /></td></tr>
<tr class="separator:a578c06dde871240f3a87a0206c1ec60f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classpl_reflected_class"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_classpl_reflected_class')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../d4/d91/classpl_reflected_class.htm">plReflectedClass</a></td></tr>
<tr class="memitem:a30a01812783d348746ff11a6db47d63f inherit pub_methods_classpl_reflected_class" id="r_a30a01812783d348746ff11a6db47d63f"><td class="memItemLeft" align="right" valign="top">
virtual const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetDynamicRTTI</b> () const</td></tr>
<tr class="separator:a30a01812783d348746ff11a6db47d63f inherit pub_methods_classpl_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa092c6d843ea7030165419c3c19dfe46 inherit pub_methods_classpl_reflected_class" id="r_aa092c6d843ea7030165419c3c19dfe46"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsInstanceOf</b> (const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *pType) const</td></tr>
<tr class="memdesc:aa092c6d843ea7030165419c3c19dfe46 inherit pub_methods_classpl_reflected_class"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the type of this instance is of the given type or derived from it. <br /></td></tr>
<tr class="separator:aa092c6d843ea7030165419c3c19dfe46 inherit pub_methods_classpl_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class" id="r_aa77e5cf0d600ccf2ec569e5d13c70887"><td class="memTemplParams" colspan="2">
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsInstanceOf</b> () const</td></tr>
<tr class="memdesc:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the type of this instance is of the given type or derived from it. <br /></td></tr>
<tr class="separator:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-attribs" name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:af8790ecc86f218e2b41ac95890fbdde4" id="r_af8790ecc86f218e2b41ac95890fbdde4"><td class="memItemLeft" align="right" valign="top"><a id="af8790ecc86f218e2b41ac95890fbdde4" name="af8790ecc86f218e2b41ac95890fbdde4"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>m_bStateWantsToQuit</b> = false</td></tr>
<tr class="separator:af8790ecc86f218e2b41ac95890fbdde4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="inherited" name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_static_methods_classpl_no_base"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_static_methods_classpl_no_base')"><img src="../../closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="../../de/dc4/classpl_no_base.htm">plNoBase</a></td></tr>
<tr class="memitem:af5fef4e4ea9a9dc1842d1dd3812e5d7f inherit pub_static_methods_classpl_no_base" id="r_af5fef4e4ea9a9dc1842d1dd3812e5d7f"><td class="memItemLeft" align="right" valign="top">
static const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetStaticRTTI</b> ()</td></tr>
<tr class="separator:af5fef4e4ea9a9dc1842d1dd3812e5d7f inherit pub_static_methods_classpl_no_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="../../db/d9b/classpl_game_state.htm" title="plGameState is the base class to build custom game logic upon. It works closely together with plGameA...">plGameState</a> is the base class to build custom game logic upon. It works closely together with <a class="el" href="../../db/d17/classpl_game_application.htm" title="The base class for all typical game applications made with plEngine.">plGameApplication</a>. </p>
<p>In a typical game there is always exactly one instance of an <a class="el" href="../../db/d9b/classpl_game_state.htm" title="plGameState is the base class to build custom game logic upon. It works closely together with plGameA...">plGameState</a> derived class active. The game state handles custom game logic, which must be handled outside <a class="el" href="../../d2/d12/classpl_world.htm" title="A world encapsulates a scene graph of game objects and various component managers and their component...">plWorld</a>, custom components and scripts.</p>
<p>For example a custom implementation of <a class="el" href="../../db/d9b/classpl_game_state.htm" title="plGameState is the base class to build custom game logic upon. It works closely together with plGameA...">plGameState</a> may handle how to show a menu, when to switch to another level, how multi-player works, or which player information is transitioned from one level to the next. It's main purpose is to implement high-level game logic.</p>
<p><a class="el" href="../../db/d17/classpl_game_application.htm" title="The base class for all typical game applications made with plEngine.">plGameApplication</a> will loop through all available <a class="el" href="../../db/d9b/classpl_game_state.htm" title="plGameState is the base class to build custom game logic upon. It works closely together with plGameA...">plGameState</a> implementations and ask each available one whether it can handle a certain level. Each game state returns a 'priority' how well it can handle the game.</p>
<p>In a typical game you only have one game state linked into the binary, so in that case there is no reason for such a system. However, in an editor you might have multiple game states available through plugins, but only one can take control. In such a case, each game state may inspect the given world and check whether it is e.g. a single-player or multi-player level, or whether it uses it's own game specific components, and then decide whether it is the best fit for that level.</p>
<dl class="section note"><dt>Note</dt><dd>Do not forget to reflect your derived class, otherwise <a class="el" href="../../db/d17/classpl_game_application.htm" title="The base class for all typical game applications made with plEngine.">plGameApplication</a> may not find it. </dd></dl>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a7953f824240bfbcc9b198154c8981fa5" name="a7953f824240bfbcc9b198154c8981fa5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7953f824240bfbcc9b198154c8981fa5">&#9670;&#160;</a></span>AfterWorldUpdate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plGameStateBase::AfterWorldUpdate </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called once each frame after the worlds have been updated. </p>

<p>Reimplemented in <a class="el" href="../../d6/da5/classpl_fallback_game_state.htm#a2c60fcdc74fb703b9cbc2580ce52d648">plFallbackGameState</a>.</p>

</div>
</div>
<a id="abe9ed8e3c621e75aca2b3d92b6ece064" name="abe9ed8e3c621e75aca2b3d92b6ece064"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe9ed8e3c621e75aca2b3d92b6ece064">&#9670;&#160;</a></span>DeterminePriority()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual plGameStatePriority plGameStateBase::DeterminePriority </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d2/d12/classpl_world.htm">plWorld</a> *</td>          <td class="paramname"><span class="paramname"><em>pWorld</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called by <a class="el" href="../../db/d17/classpl_game_application.htm" title="The base class for all typical game applications made with plEngine.">plGameApplication</a> to determine which game state is best suited to handle a situation. </p>
<p>If the application already has a world that should be shown, the game state can inspect it. If the game state is expected to create a new world, pWorld will be nullptr. </p>

<p>Implemented in <a class="el" href="../../d6/da5/classpl_fallback_game_state.htm#a30ddd557f74a97d770f1ea20a265fe06">plFallbackGameState</a>.</p>

</div>
</div>
<a id="ad21420a72d14030e57cb7837889533c9" name="ad21420a72d14030e57cb7837889533c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad21420a72d14030e57cb7837889533c9">&#9670;&#160;</a></span>OnActivation()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plGameStateBase::OnActivation </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d2/d12/classpl_world.htm">plWorld</a> *</td>          <td class="paramname"><span class="paramname"><em>pWorld</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d6/d78/classpl_transform_template.htm">plTransform</a> *</td>          <td class="paramname"><span class="paramname"><em>pStartPosition</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>When a game state was chosen, it gets activated through this function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pWorld</td><td>The game state is supposed to operate on the given world. In a stand-alone application pWorld will always be nullptr and the game state is expected to create worlds itself. When run inside the editor, pWorld will already exist and the game state is expected to work on it.</td></tr>
    <tr><td class="paramname">pStartPosition</td><td>An optional transform for the 'player object' to start at. Usually nullptr, but may be set by the editor to relocate or create the player object at the given destination. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="../../d6/da5/classpl_fallback_game_state.htm#a23befbbb17e472325ff36136379d2d78">plFallbackGameState</a>, and <a class="el" href="../../db/d9b/classpl_game_state.htm#a0a8eea1595495fd55a2adc678ccc5f89">plGameState</a>.</p>

</div>
</div>
<a id="a4a56f9e31e21aa92861ded8dc75167bf" name="a4a56f9e31e21aa92861ded8dc75167bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a56f9e31e21aa92861ded8dc75167bf">&#9670;&#160;</a></span>OnDeactivation()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plGameStateBase::OnDeactivation </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called when the game state is being shut down. </p>

<p>Implemented in <a class="el" href="../../d6/da5/classpl_fallback_game_state.htm#ad5085590e3bc800883eb8581aff7971d">plFallbackGameState</a>, and <a class="el" href="../../db/d9b/classpl_game_state.htm#a6127fffcdc7d6dc3d3c76b61c9abe264">plGameState</a>.</p>

</div>
</div>
<a id="a9e376ed2af5b56b422f2942559b9cacb" name="a9e376ed2af5b56b422f2942559b9cacb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e376ed2af5b56b422f2942559b9cacb">&#9670;&#160;</a></span>ProcessInput()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plGameStateBase::ProcessInput </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called once per game update. Should handle input updates here. </p>

<p>Reimplemented in <a class="el" href="../../d6/da5/classpl_fallback_game_state.htm#a780a1d5df2821f665b90181da76e533e">plFallbackGameState</a>.</p>

</div>
</div>
<a id="a6d73e81a96712306f628260e7c9937f2" name="a6d73e81a96712306f628260e7c9937f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d73e81a96712306f628260e7c9937f2">&#9670;&#160;</a></span>RequestQuit()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plGameStateBase::RequestQuit </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Call this to signal that a game state requested the application to quit. </p>
<p><a class="el" href="../../db/d17/classpl_game_application.htm" title="The base class for all typical game applications made with plEngine.">plGameApplication</a> will shut down when this happens. plEditor will stop play-the-game mode when it is running. </p>

</div>
</div>
<a id="a9e110d9b3a25c6021608f5d54f036a47" name="a9e110d9b3a25c6021608f5d54f036a47"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e110d9b3a25c6021608f5d54f036a47">&#9670;&#160;</a></span>ScheduleRendering()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plGameStateBase::ScheduleRendering </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Has to call plRenderLoop::AddMainView for all views that need to be rendered. </p>

<p>Implemented in <a class="el" href="../../db/d9b/classpl_game_state.htm#afb0701438cd8e974f42e3fa9f9a37efc">plGameState</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/Engine/Core/GameState/<a class="el" href="../../d6/d39/_game_state_base_8h_source.htm">GameStateBase.h</a></li>
<li>Code/Engine/Core/GameState/Implementation/<b>GameStateBase.cpp</b></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d7/dbf/classpl_game_state_base.htm">plGameStateBase</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
