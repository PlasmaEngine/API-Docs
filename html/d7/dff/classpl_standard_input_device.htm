<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Plasma Engine: plStandardInputDevice Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Plasma Engine<span id="projectnumber">&#160;2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d7/dff/classpl_standard_input_device.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="../../dd/d8e/classpl_standard_input_device-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plStandardInputDevice Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p>Android standard input device.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../de/d3b/_input_device__android_8h_source.htm">InputDevice_android.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for plStandardInputDevice:</div>
<div class="dyncontent">
<div class="center"><img src="../../d2/d3e/classpl_standard_input_device__inherit__graph.png" border="0" usemap="#apl_standard_input_device_inherit__map" alt="Inheritance graph"/></div>
<map name="apl_standard_input_device_inherit__map" id="apl_standard_input_device_inherit__map">
<area shape="rect" title="Android standard input device." alt="" coords="27,395,176,421"/>
<area shape="rect" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm" title="This is the base class for all input devices that handle mouse and keyboard input." alt="" coords="6,320,197,347"/>
<area shape="poly" title=" " alt="" coords="69,361,69,378,76,393,71,395,64,379,64,361"/>
<area shape="poly" title=" " alt="" coords="87,362,90,394,85,395,81,362"/>
<area shape="poly" title=" " alt="" coords="104,362,104,394,99,394,99,362"/>
<area shape="poly" title=" " alt="" coords="122,362,118,395,113,394,116,362"/>
<area shape="poly" title=" " alt="" coords="139,361,139,379,132,395,127,393,134,378,134,361"/>
<area shape="rect" href="../../d8/d58/classpl_input_device.htm" title="The base class for all input device types." alt="" coords="53,245,150,272"/>
<area shape="poly" title=" " alt="" coords="104,288,104,320,99,320,99,288"/>
<area shape="rect" href="../../db/d85/classpl_enumerable.htm" title=" " alt="" coords="5,155,198,197"/>
<area shape="poly" title=" " alt="" coords="104,213,104,245,99,245,99,213"/>
<area shape="rect" href="../../d4/d91/classpl_reflected_class.htm" title="All classes that should be dynamically reflectable, need to be derived from this base class." alt="" coords="42,80,161,107"/>
<area shape="poly" title=" " alt="" coords="104,122,104,154,99,154,99,122"/>
<area shape="rect" href="../../de/dc4/classpl_no_base.htm" title="Dummy type to pass to templates and macros that expect a base type for a class that has no base." alt="" coords="63,5,140,32"/>
<area shape="poly" title=" " alt="" coords="104,48,104,80,99,80,99,48"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a81fcfe334000c63e2e8286c756c4d17f" id="r_a81fcfe334000c63e2e8286c756c4d17f"><td class="memItemLeft" align="right" valign="top"><a id="a81fcfe334000c63e2e8286c756c4d17f" name="a81fcfe334000c63e2e8286c756c4d17f"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plStandardInputDevice</b> (plUInt32 uiWindowNumber)</td></tr>
<tr class="separator:a81fcfe334000c63e2e8286c756c4d17f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e843741c841f8820c6d684ffbbb9b3e" id="r_a2e843741c841f8820c6d684ffbbb9b3e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2e843741c841f8820c6d684ffbbb9b3e">SetShowMouseCursor</a> (bool bShow) override</td></tr>
<tr class="memdesc:a2e843741c841f8820c6d684ffbbb9b3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shows or hides the mouse cursor inside the application window.  <br /></td></tr>
<tr class="separator:a2e843741c841f8820c6d684ffbbb9b3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a70de43e402c77a499474ff7f733033" id="r_a8a70de43e402c77a499474ff7f733033"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a8a70de43e402c77a499474ff7f733033">GetShowMouseCursor</a> () const override</td></tr>
<tr class="memdesc:a8a70de43e402c77a499474ff7f733033"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the mouse cursor is shown.  <br /></td></tr>
<tr class="separator:a8a70de43e402c77a499474ff7f733033"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0875f19c6d522021904b4c52cc50ded" id="r_af0875f19c6d522021904b4c52cc50ded"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af0875f19c6d522021904b4c52cc50ded">SetClipMouseCursor</a> (<a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm#ac0050faebd818ab18a96181434ea9d16">plMouseCursorClipMode::Enum</a> mode) override</td></tr>
<tr class="memdesc:af0875f19c6d522021904b4c52cc50ded"><td class="mdescLeft">&#160;</td><td class="mdescRight">Will trap the mouse inside the application window. Should usually be enabled, to prevent accidental task switches.  <br /></td></tr>
<tr class="separator:af0875f19c6d522021904b4c52cc50ded"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7975c81c489711d3e817dbac0cc6344" id="r_ad7975c81c489711d3e817dbac0cc6344"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm#ac0050faebd818ab18a96181434ea9d16">plMouseCursorClipMode::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad7975c81c489711d3e817dbac0cc6344">GetClipMouseCursor</a> () const override</td></tr>
<tr class="memdesc:ad7975c81c489711d3e817dbac0cc6344"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the mouse is confined to the application window or not.  <br /></td></tr>
<tr class="separator:ad7975c81c489711d3e817dbac0cc6344"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8655d8b96e3769692cc249766e6483d" id="r_ae8655d8b96e3769692cc249766e6483d"><td class="memItemLeft" align="right" valign="top"><a id="ae8655d8b96e3769692cc249766e6483d" name="ae8655d8b96e3769692cc249766e6483d"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plStandardInputDevice</b> (plUInt32 uiWindowNumber, GLFWwindow *windowHandle)</td></tr>
<tr class="separator:ae8655d8b96e3769692cc249766e6483d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7bce4b22b918253ce0fe61981ae5c67" id="r_ac7bce4b22b918253ce0fe61981ae5c67"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac7bce4b22b918253ce0fe61981ae5c67">SetShowMouseCursor</a> (bool bShow) override</td></tr>
<tr class="memdesc:ac7bce4b22b918253ce0fe61981ae5c67"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shows or hides the mouse cursor inside the application window.  <br /></td></tr>
<tr class="separator:ac7bce4b22b918253ce0fe61981ae5c67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a007006a9ce1f7fbe892bdac5ee722734" id="r_a007006a9ce1f7fbe892bdac5ee722734"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a007006a9ce1f7fbe892bdac5ee722734">GetShowMouseCursor</a> () const override</td></tr>
<tr class="memdesc:a007006a9ce1f7fbe892bdac5ee722734"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the mouse cursor is shown.  <br /></td></tr>
<tr class="separator:a007006a9ce1f7fbe892bdac5ee722734"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec1d0a46f69e295a9c90a3323f09370e" id="r_aec1d0a46f69e295a9c90a3323f09370e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aec1d0a46f69e295a9c90a3323f09370e">SetClipMouseCursor</a> (<a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm#ac0050faebd818ab18a96181434ea9d16">plMouseCursorClipMode::Enum</a> mode) override</td></tr>
<tr class="memdesc:aec1d0a46f69e295a9c90a3323f09370e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Will trap the mouse inside the application window. Should usually be enabled, to prevent accidental task switches.  <br /></td></tr>
<tr class="separator:aec1d0a46f69e295a9c90a3323f09370e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0fa52f2d368f5e74b0304f516d34d07" id="r_ad0fa52f2d368f5e74b0304f516d34d07"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm#ac0050faebd818ab18a96181434ea9d16">plMouseCursorClipMode::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad0fa52f2d368f5e74b0304f516d34d07">GetClipMouseCursor</a> () const override</td></tr>
<tr class="memdesc:ad0fa52f2d368f5e74b0304f516d34d07"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the mouse is confined to the application window or not.  <br /></td></tr>
<tr class="separator:ad0fa52f2d368f5e74b0304f516d34d07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01bea0ff10e2a2bccc0bd00fbe230a5a" id="r_a01bea0ff10e2a2bccc0bd00fbe230a5a"><td class="memItemLeft" align="right" valign="top"><a id="a01bea0ff10e2a2bccc0bd00fbe230a5a" name="a01bea0ff10e2a2bccc0bd00fbe230a5a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>OnKey</b> (int key, int scancode, int action, int mods)</td></tr>
<tr class="separator:a01bea0ff10e2a2bccc0bd00fbe230a5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20064a3484a7424c2aa687d7e8c5dc56" id="r_a20064a3484a7424c2aa687d7e8c5dc56"><td class="memItemLeft" align="right" valign="top"><a id="a20064a3484a7424c2aa687d7e8c5dc56" name="a20064a3484a7424c2aa687d7e8c5dc56"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>OnCharacter</b> (unsigned int codepoint)</td></tr>
<tr class="separator:a20064a3484a7424c2aa687d7e8c5dc56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60c4cc085a93c5865c1b3d2286dbc83e" id="r_a60c4cc085a93c5865c1b3d2286dbc83e"><td class="memItemLeft" align="right" valign="top"><a id="a60c4cc085a93c5865c1b3d2286dbc83e" name="a60c4cc085a93c5865c1b3d2286dbc83e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>OnCursorPosition</b> (double xpos, double ypos)</td></tr>
<tr class="separator:a60c4cc085a93c5865c1b3d2286dbc83e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0cb1207107d9e351a050d33a8d3b3df" id="r_af0cb1207107d9e351a050d33a8d3b3df"><td class="memItemLeft" align="right" valign="top"><a id="af0cb1207107d9e351a050d33a8d3b3df" name="af0cb1207107d9e351a050d33a8d3b3df"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>OnMouseButton</b> (int button, int action, int mods)</td></tr>
<tr class="separator:af0cb1207107d9e351a050d33a8d3b3df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14fb86ac69b9436322c29a3ad1f71a9d" id="r_a14fb86ac69b9436322c29a3ad1f71a9d"><td class="memItemLeft" align="right" valign="top"><a id="a14fb86ac69b9436322c29a3ad1f71a9d" name="a14fb86ac69b9436322c29a3ad1f71a9d"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>OnScroll</b> (double xoffset, double yoffset)</td></tr>
<tr class="separator:a14fb86ac69b9436322c29a3ad1f71a9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81fcfe334000c63e2e8286c756c4d17f" id="r_a81fcfe334000c63e2e8286c756c4d17f"><td class="memItemLeft" align="right" valign="top"><a id="a81fcfe334000c63e2e8286c756c4d17f" name="a81fcfe334000c63e2e8286c756c4d17f"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plStandardInputDevice</b> (plUInt32 uiWindowNumber)</td></tr>
<tr class="separator:a81fcfe334000c63e2e8286c756c4d17f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7bce4b22b918253ce0fe61981ae5c67" id="r_ac7bce4b22b918253ce0fe61981ae5c67"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac7bce4b22b918253ce0fe61981ae5c67">SetShowMouseCursor</a> (bool bShow) override</td></tr>
<tr class="memdesc:ac7bce4b22b918253ce0fe61981ae5c67"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shows or hides the mouse cursor inside the application window.  <br /></td></tr>
<tr class="separator:ac7bce4b22b918253ce0fe61981ae5c67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a007006a9ce1f7fbe892bdac5ee722734" id="r_a007006a9ce1f7fbe892bdac5ee722734"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a007006a9ce1f7fbe892bdac5ee722734">GetShowMouseCursor</a> () const override</td></tr>
<tr class="memdesc:a007006a9ce1f7fbe892bdac5ee722734"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the mouse cursor is shown.  <br /></td></tr>
<tr class="separator:a007006a9ce1f7fbe892bdac5ee722734"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec1d0a46f69e295a9c90a3323f09370e" id="r_aec1d0a46f69e295a9c90a3323f09370e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aec1d0a46f69e295a9c90a3323f09370e">SetClipMouseCursor</a> (<a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm#ac0050faebd818ab18a96181434ea9d16">plMouseCursorClipMode::Enum</a> mode) override</td></tr>
<tr class="memdesc:aec1d0a46f69e295a9c90a3323f09370e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Will trap the mouse inside the application window. Should usually be enabled, to prevent accidental task switches.  <br /></td></tr>
<tr class="separator:aec1d0a46f69e295a9c90a3323f09370e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0fa52f2d368f5e74b0304f516d34d07" id="r_ad0fa52f2d368f5e74b0304f516d34d07"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm#ac0050faebd818ab18a96181434ea9d16">plMouseCursorClipMode::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad0fa52f2d368f5e74b0304f516d34d07">GetClipMouseCursor</a> () const override</td></tr>
<tr class="memdesc:ad0fa52f2d368f5e74b0304f516d34d07"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the mouse is confined to the application window or not.  <br /></td></tr>
<tr class="separator:ad0fa52f2d368f5e74b0304f516d34d07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a703a780335a64dbaa935d2725164136d" id="r_a703a780335a64dbaa935d2725164136d"><td class="memItemLeft" align="right" valign="top"><a id="a703a780335a64dbaa935d2725164136d" name="a703a780335a64dbaa935d2725164136d"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plStandardInputDevice</b> (ABI::Windows::UI::Core::ICoreWindow *coreWindow)</td></tr>
<tr class="separator:a703a780335a64dbaa935d2725164136d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec1d0a46f69e295a9c90a3323f09370e" id="r_aec1d0a46f69e295a9c90a3323f09370e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aec1d0a46f69e295a9c90a3323f09370e">SetClipMouseCursor</a> (<a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm#ac0050faebd818ab18a96181434ea9d16">plMouseCursorClipMode::Enum</a> mode) override</td></tr>
<tr class="memdesc:aec1d0a46f69e295a9c90a3323f09370e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Will trap the mouse inside the application window. Should usually be enabled, to prevent accidental task switches.  <br /></td></tr>
<tr class="separator:aec1d0a46f69e295a9c90a3323f09370e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0fa52f2d368f5e74b0304f516d34d07" id="r_ad0fa52f2d368f5e74b0304f516d34d07"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm#ac0050faebd818ab18a96181434ea9d16">plMouseCursorClipMode::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad0fa52f2d368f5e74b0304f516d34d07">GetClipMouseCursor</a> () const override</td></tr>
<tr class="memdesc:ad0fa52f2d368f5e74b0304f516d34d07"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the mouse is confined to the application window or not.  <br /></td></tr>
<tr class="separator:ad0fa52f2d368f5e74b0304f516d34d07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7bce4b22b918253ce0fe61981ae5c67" id="r_ac7bce4b22b918253ce0fe61981ae5c67"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac7bce4b22b918253ce0fe61981ae5c67">SetShowMouseCursor</a> (bool bShow) override</td></tr>
<tr class="memdesc:ac7bce4b22b918253ce0fe61981ae5c67"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shows or hides the mouse cursor inside the application window.  <br /></td></tr>
<tr class="separator:ac7bce4b22b918253ce0fe61981ae5c67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a007006a9ce1f7fbe892bdac5ee722734" id="r_a007006a9ce1f7fbe892bdac5ee722734"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a007006a9ce1f7fbe892bdac5ee722734">GetShowMouseCursor</a> () const override</td></tr>
<tr class="memdesc:a007006a9ce1f7fbe892bdac5ee722734"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the mouse cursor is shown.  <br /></td></tr>
<tr class="separator:a007006a9ce1f7fbe892bdac5ee722734"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81fcfe334000c63e2e8286c756c4d17f" id="r_a81fcfe334000c63e2e8286c756c4d17f"><td class="memItemLeft" align="right" valign="top"><a id="a81fcfe334000c63e2e8286c756c4d17f" name="a81fcfe334000c63e2e8286c756c4d17f"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plStandardInputDevice</b> (plUInt32 uiWindowNumber)</td></tr>
<tr class="separator:a81fcfe334000c63e2e8286c756c4d17f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a4a54272e320a2935ad073e74544843" id="r_a7a4a54272e320a2935ad073e74544843"><td class="memItemLeft" align="right" valign="top"><a id="a7a4a54272e320a2935ad073e74544843" name="a7a4a54272e320a2935ad073e74544843"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>WindowMessage</b> (plMinWindows::HWND hWnd, plMinWindows::UINT msg, plMinWindows::WPARAM wparam, plMinWindows::LPARAM lparam)</td></tr>
<tr class="memdesc:a7a4a54272e320a2935ad073e74544843"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function needs to be called by all Windows functions, to pass the input information through to this input device. <br /></td></tr>
<tr class="separator:a7a4a54272e320a2935ad073e74544843"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec1d0a46f69e295a9c90a3323f09370e" id="r_aec1d0a46f69e295a9c90a3323f09370e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aec1d0a46f69e295a9c90a3323f09370e">SetClipMouseCursor</a> (<a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm#ac0050faebd818ab18a96181434ea9d16">plMouseCursorClipMode::Enum</a> mode) override</td></tr>
<tr class="memdesc:aec1d0a46f69e295a9c90a3323f09370e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Will trap the mouse inside the application window. Should usually be enabled, to prevent accidental task switches.  <br /></td></tr>
<tr class="separator:aec1d0a46f69e295a9c90a3323f09370e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0fa52f2d368f5e74b0304f516d34d07" id="r_ad0fa52f2d368f5e74b0304f516d34d07"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm#ac0050faebd818ab18a96181434ea9d16">plMouseCursorClipMode::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad0fa52f2d368f5e74b0304f516d34d07">GetClipMouseCursor</a> () const override</td></tr>
<tr class="memdesc:ad0fa52f2d368f5e74b0304f516d34d07"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the mouse is confined to the application window or not.  <br /></td></tr>
<tr class="separator:ad0fa52f2d368f5e74b0304f516d34d07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7bce4b22b918253ce0fe61981ae5c67" id="r_ac7bce4b22b918253ce0fe61981ae5c67"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac7bce4b22b918253ce0fe61981ae5c67">SetShowMouseCursor</a> (bool bShow) override</td></tr>
<tr class="memdesc:ac7bce4b22b918253ce0fe61981ae5c67"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shows or hides the mouse cursor inside the application window.  <br /></td></tr>
<tr class="separator:ac7bce4b22b918253ce0fe61981ae5c67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a007006a9ce1f7fbe892bdac5ee722734" id="r_a007006a9ce1f7fbe892bdac5ee722734"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a007006a9ce1f7fbe892bdac5ee722734">GetShowMouseCursor</a> () const override</td></tr>
<tr class="memdesc:a007006a9ce1f7fbe892bdac5ee722734"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the mouse cursor is shown.  <br /></td></tr>
<tr class="separator:a007006a9ce1f7fbe892bdac5ee722734"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classpl_input_device_mouse_keyboard"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_classpl_input_device_mouse_keyboard')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm">plInputDeviceMouseKeyboard</a></td></tr>
<tr class="memitem:aae2c75723739a6f97ffd23c4c1fb302b inherit pub_methods_classpl_input_device_mouse_keyboard" id="r_aae2c75723739a6f97ffd23c4c1fb302b"><td class="memItemLeft" align="right" valign="top">
virtual void&#160;</td><td class="memItemRight" valign="bottom"><b>SetMouseSpeed</b> (const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2</a> &amp;vScale)</td></tr>
<tr class="memdesc:aae2c75723739a6f97ffd23c4c1fb302b inherit pub_methods_classpl_input_device_mouse_keyboard"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the scaling factor that is applied on all (relative) mouse input. <br /></td></tr>
<tr class="separator:aae2c75723739a6f97ffd23c4c1fb302b inherit pub_methods_classpl_input_device_mouse_keyboard"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f83238600f5ab25ae1f4877380b90f2 inherit pub_methods_classpl_input_device_mouse_keyboard" id="r_a8f83238600f5ab25ae1f4877380b90f2"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetMouseSpeed</b> () const</td></tr>
<tr class="memdesc:a8f83238600f5ab25ae1f4877380b90f2 inherit pub_methods_classpl_input_device_mouse_keyboard"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the scaling factor that is applied on all (relative) mouse input. <br /></td></tr>
<tr class="separator:a8f83238600f5ab25ae1f4877380b90f2 inherit pub_methods_classpl_input_device_mouse_keyboard"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae674dc02935b93c89dbad668df66b6e5 inherit pub_methods_classpl_input_device_mouse_keyboard" id="r_ae674dc02935b93c89dbad668df66b6e5"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsFocused</b> ()</td></tr>
<tr class="memdesc:ae674dc02935b93c89dbad668df66b6e5 inherit pub_methods_classpl_input_device_mouse_keyboard"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns if the associated <a class="el" href="../../df/d28/classpl_window.htm" title="A simple abstraction for platform specific window creation.">plWindow</a> has focus. <br /></td></tr>
<tr class="separator:ae674dc02935b93c89dbad668df66b6e5 inherit pub_methods_classpl_input_device_mouse_keyboard"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classpl_input_device"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_classpl_input_device')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../d8/d58/classpl_input_device.htm">plInputDevice</a></td></tr>
<tr class="memitem:af57c1b46b6f442cca14a7ff4625db140 inherit pub_methods_classpl_input_device" id="r_af57c1b46b6f442cca14a7ff4625db140"><td class="memItemLeft" align="right" valign="top">
&#160;</td><td class="memItemRight" valign="bottom"><b>plInputDevice</b> ()</td></tr>
<tr class="memdesc:af57c1b46b6f442cca14a7ff4625db140 inherit pub_methods_classpl_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Constructor. <br /></td></tr>
<tr class="separator:af57c1b46b6f442cca14a7ff4625db140 inherit pub_methods_classpl_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae131b9527d9c4fa711fb8d46651ae51 inherit pub_methods_classpl_input_device" id="r_aae131b9527d9c4fa711fb8d46651ae51"><td class="memItemLeft" align="right" valign="top">
float&#160;</td><td class="memItemRight" valign="bottom"><b>GetInputSlotState</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sSlot) const</td></tr>
<tr class="memdesc:aae131b9527d9c4fa711fb8d46651ae51 inherit pub_methods_classpl_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows to query current input values for the given slot. <br /></td></tr>
<tr class="separator:aae131b9527d9c4fa711fb8d46651ae51 inherit pub_methods_classpl_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f6616572a2308f59c78944a8fe4c291 inherit pub_methods_classpl_input_device" id="r_a6f6616572a2308f59c78944a8fe4c291"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d58/classpl_input_device.htm#a6f6616572a2308f59c78944a8fe4c291">HasDeviceBeenUsedLastFrame</a> () const</td></tr>
<tr class="memdesc:a6f6616572a2308f59c78944a8fe4c291 inherit pub_methods_classpl_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the device was 'used' during the last frame, ie. when it generated input due to some user interaction.  <br /></td></tr>
<tr class="separator:a6f6616572a2308f59c78944a8fe4c291 inherit pub_methods_classpl_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classpl_reflected_class"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_classpl_reflected_class')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../d4/d91/classpl_reflected_class.htm">plReflectedClass</a></td></tr>
<tr class="memitem:a30a01812783d348746ff11a6db47d63f inherit pub_methods_classpl_reflected_class" id="r_a30a01812783d348746ff11a6db47d63f"><td class="memItemLeft" align="right" valign="top">
virtual const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetDynamicRTTI</b> () const</td></tr>
<tr class="separator:a30a01812783d348746ff11a6db47d63f inherit pub_methods_classpl_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa092c6d843ea7030165419c3c19dfe46 inherit pub_methods_classpl_reflected_class" id="r_aa092c6d843ea7030165419c3c19dfe46"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsInstanceOf</b> (const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *pType) const</td></tr>
<tr class="memdesc:aa092c6d843ea7030165419c3c19dfe46 inherit pub_methods_classpl_reflected_class"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the type of this instance is of the given type or derived from it. <br /></td></tr>
<tr class="separator:aa092c6d843ea7030165419c3c19dfe46 inherit pub_methods_classpl_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class" id="r_aa77e5cf0d600ccf2ec569e5d13c70887"><td class="memTemplParams" colspan="2">
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsInstanceOf</b> () const</td></tr>
<tr class="memdesc:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the type of this instance is of the given type or derived from it. <br /></td></tr>
<tr class="separator:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-methods" name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a9c6a9461f0d14c88c3fc224733116c57" id="r_a9c6a9461f0d14c88c3fc224733116c57"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a9c6a9461f0d14c88c3fc224733116c57">LocalizeButtonDisplayNames</a> ()</td></tr>
<tr class="memdesc:a9c6a9461f0d14c88c3fc224733116c57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calling this function will 'translate' most key names from English to the OS language, by querying that information from the OS.  <br /></td></tr>
<tr class="separator:a9c6a9461f0d14c88c3fc224733116c57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_classpl_input_device_mouse_keyboard"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_static_methods_classpl_input_device_mouse_keyboard')"><img src="../../closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm">plInputDeviceMouseKeyboard</a></td></tr>
<tr class="memitem:aaece1d98c4c07418ed7746c600f3aa1f inherit pub_static_methods_classpl_input_device_mouse_keyboard" id="r_aaece1d98c4c07418ed7746c600f3aa1f"><td class="memItemLeft" align="right" valign="top">
static plInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GetWindowNumberMouseIsOver</b> ()</td></tr>
<tr class="memdesc:aaece1d98c4c07418ed7746c600f3aa1f inherit pub_static_methods_classpl_input_device_mouse_keyboard"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of the <a class="el" href="../../df/d28/classpl_window.htm" title="A simple abstraction for platform specific window creation.">plWindow</a> over which the mouse moved last. <br /></td></tr>
<tr class="separator:aaece1d98c4c07418ed7746c600f3aa1f inherit pub_static_methods_classpl_input_device_mouse_keyboard"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_classpl_no_base"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_static_methods_classpl_no_base')"><img src="../../closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="../../de/dc4/classpl_no_base.htm">plNoBase</a></td></tr>
<tr class="memitem:af5fef4e4ea9a9dc1842d1dd3812e5d7f inherit pub_static_methods_classpl_no_base" id="r_af5fef4e4ea9a9dc1842d1dd3812e5d7f"><td class="memItemLeft" align="right" valign="top">
static const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetStaticRTTI</b> ()</td></tr>
<tr class="separator:af5fef4e4ea9a9dc1842d1dd3812e5d7f inherit pub_static_methods_classpl_no_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-methods" name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a7f807b0243565cbe003d175acfeede19" id="r_a7f807b0243565cbe003d175acfeede19"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7f807b0243565cbe003d175acfeede19">InitializeDevice</a> () override</td></tr>
<tr class="memdesc:a7f807b0243565cbe003d175acfeede19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this if you need to do device specific initialization before the first use.  <br /></td></tr>
<tr class="separator:a7f807b0243565cbe003d175acfeede19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a293b7b7eccbf4d10a192c4df05139b3e" id="r_a293b7b7eccbf4d10a192c4df05139b3e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a293b7b7eccbf4d10a192c4df05139b3e">RegisterInputSlots</a> () override</td></tr>
<tr class="memdesc:a293b7b7eccbf4d10a192c4df05139b3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this to register all the input slots that this device exposes.  <br /></td></tr>
<tr class="separator:a293b7b7eccbf4d10a192c4df05139b3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab992f99b564d8b0aaf92ee7848809b74" id="r_ab992f99b564d8b0aaf92ee7848809b74"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab992f99b564d8b0aaf92ee7848809b74">ResetInputSlotValues</a> () override</td></tr>
<tr class="memdesc:ab992f99b564d8b0aaf92ee7848809b74"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this, if you need to reset certain input slot values to zero, after the <a class="el" href="../../d7/d6c/classpl_input_manager.htm" title="The central class to set up and query the state of all input.">plInputManager</a> is finished with the current frame update.  <br /></td></tr>
<tr class="separator:ab992f99b564d8b0aaf92ee7848809b74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bdef8211bd2f959a04308cd3fd7017b" id="r_a1bdef8211bd2f959a04308cd3fd7017b"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a1bdef8211bd2f959a04308cd3fd7017b">UpdateInputSlotValues</a> () override</td></tr>
<tr class="memdesc:a1bdef8211bd2f959a04308cd3fd7017b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this, if you need to query the state of the hardware to update the input slots.  <br /></td></tr>
<tr class="separator:a1bdef8211bd2f959a04308cd3fd7017b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classpl_input_device"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_methods_classpl_input_device')"><img src="../../closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="../../d8/d58/classpl_input_device.htm">plInputDevice</a></td></tr>
<tr class="memitem:a511af7ad1f755af01367218302bbc3ba inherit pro_methods_classpl_input_device" id="r_a511af7ad1f755af01367218302bbc3ba"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d58/classpl_input_device.htm#a511af7ad1f755af01367218302bbc3ba">UpdateHardwareState</a> (<a class="el" href="../../d1/df6/structpl_time.htm">plTime</a> tTimeDifference)</td></tr>
<tr class="memdesc:a511af7ad1f755af01367218302bbc3ba inherit pro_methods_classpl_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function is called once after <a class="el" href="../../d7/d6c/classpl_input_manager.htm#a99266a2977ca6f1430823992e7520bb7" title="Updates the state of the input manager. This should be called exactly once each frame.">plInputManager::Update</a> with the same time delta value. It allows to update hardware state, such as the vibration of gamepad motors.  <br /></td></tr>
<tr class="separator:a511af7ad1f755af01367218302bbc3ba inherit pro_methods_classpl_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pri-methods" name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:a769fe79f75927bf56583ff7e29057b3c" id="r_a769fe79f75927bf56583ff7e29057b3c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a769fe79f75927bf56583ff7e29057b3c">InitializeDevice</a> () override</td></tr>
<tr class="memdesc:a769fe79f75927bf56583ff7e29057b3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this if you need to do device specific initialization before the first use.  <br /></td></tr>
<tr class="separator:a769fe79f75927bf56583ff7e29057b3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03954e7a5806220d237bea9fbe7656fa" id="r_a03954e7a5806220d237bea9fbe7656fa"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a03954e7a5806220d237bea9fbe7656fa">RegisterInputSlots</a> () override</td></tr>
<tr class="memdesc:a03954e7a5806220d237bea9fbe7656fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this to register all the input slots that this device exposes.  <br /></td></tr>
<tr class="separator:a03954e7a5806220d237bea9fbe7656fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb972a749084b7b4c49b5d205d80d4b6" id="r_acb972a749084b7b4c49b5d205d80d4b6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#acb972a749084b7b4c49b5d205d80d4b6">ResetInputSlotValues</a> () override</td></tr>
<tr class="memdesc:acb972a749084b7b4c49b5d205d80d4b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this, if you need to reset certain input slot values to zero, after the <a class="el" href="../../d7/d6c/classpl_input_manager.htm" title="The central class to set up and query the state of all input.">plInputManager</a> is finished with the current frame update.  <br /></td></tr>
<tr class="separator:acb972a749084b7b4c49b5d205d80d4b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f807b0243565cbe003d175acfeede19" id="r_a7f807b0243565cbe003d175acfeede19"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7f807b0243565cbe003d175acfeede19">InitializeDevice</a> () override</td></tr>
<tr class="memdesc:a7f807b0243565cbe003d175acfeede19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this if you need to do device specific initialization before the first use.  <br /></td></tr>
<tr class="separator:a7f807b0243565cbe003d175acfeede19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a293b7b7eccbf4d10a192c4df05139b3e" id="r_a293b7b7eccbf4d10a192c4df05139b3e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a293b7b7eccbf4d10a192c4df05139b3e">RegisterInputSlots</a> () override</td></tr>
<tr class="memdesc:a293b7b7eccbf4d10a192c4df05139b3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this to register all the input slots that this device exposes.  <br /></td></tr>
<tr class="separator:a293b7b7eccbf4d10a192c4df05139b3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab992f99b564d8b0aaf92ee7848809b74" id="r_ab992f99b564d8b0aaf92ee7848809b74"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab992f99b564d8b0aaf92ee7848809b74">ResetInputSlotValues</a> () override</td></tr>
<tr class="memdesc:ab992f99b564d8b0aaf92ee7848809b74"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this, if you need to reset certain input slot values to zero, after the <a class="el" href="../../d7/d6c/classpl_input_manager.htm" title="The central class to set up and query the state of all input.">plInputManager</a> is finished with the current frame update.  <br /></td></tr>
<tr class="separator:ab992f99b564d8b0aaf92ee7848809b74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f807b0243565cbe003d175acfeede19" id="r_a7f807b0243565cbe003d175acfeede19"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7f807b0243565cbe003d175acfeede19">InitializeDevice</a> () override</td></tr>
<tr class="memdesc:a7f807b0243565cbe003d175acfeede19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this if you need to do device specific initialization before the first use.  <br /></td></tr>
<tr class="separator:a7f807b0243565cbe003d175acfeede19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a293b7b7eccbf4d10a192c4df05139b3e" id="r_a293b7b7eccbf4d10a192c4df05139b3e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a293b7b7eccbf4d10a192c4df05139b3e">RegisterInputSlots</a> () override</td></tr>
<tr class="memdesc:a293b7b7eccbf4d10a192c4df05139b3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this to register all the input slots that this device exposes.  <br /></td></tr>
<tr class="separator:a293b7b7eccbf4d10a192c4df05139b3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f807b0243565cbe003d175acfeede19" id="r_a7f807b0243565cbe003d175acfeede19"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7f807b0243565cbe003d175acfeede19">InitializeDevice</a> () override</td></tr>
<tr class="memdesc:a7f807b0243565cbe003d175acfeede19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this if you need to do device specific initialization before the first use.  <br /></td></tr>
<tr class="separator:a7f807b0243565cbe003d175acfeede19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a293b7b7eccbf4d10a192c4df05139b3e" id="r_a293b7b7eccbf4d10a192c4df05139b3e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a293b7b7eccbf4d10a192c4df05139b3e">RegisterInputSlots</a> () override</td></tr>
<tr class="memdesc:a293b7b7eccbf4d10a192c4df05139b3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this to register all the input slots that this device exposes.  <br /></td></tr>
<tr class="separator:a293b7b7eccbf4d10a192c4df05139b3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab992f99b564d8b0aaf92ee7848809b74" id="r_ab992f99b564d8b0aaf92ee7848809b74"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab992f99b564d8b0aaf92ee7848809b74">ResetInputSlotValues</a> () override</td></tr>
<tr class="memdesc:ab992f99b564d8b0aaf92ee7848809b74"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this, if you need to reset certain input slot values to zero, after the <a class="el" href="../../d7/d6c/classpl_input_manager.htm" title="The central class to set up and query the state of all input.">plInputManager</a> is finished with the current frame update.  <br /></td></tr>
<tr class="separator:ab992f99b564d8b0aaf92ee7848809b74"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="inherited" name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_static_methods_classpl_input_device"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_static_methods_classpl_input_device')"><img src="../../closed.png" alt="-"/>&#160;Static Protected Member Functions inherited from <a class="el" href="../../d8/d58/classpl_input_device.htm">plInputDevice</a></td></tr>
<tr class="memitem:af24f5f5d425517bf14ef293c6d63e3bd inherit pro_static_methods_classpl_input_device" id="r_af24f5f5d425517bf14ef293c6d63e3bd"><td class="memItemLeft" align="right" valign="top">
static void&#160;</td><td class="memItemRight" valign="bottom"><b>RegisterInputSlot</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sDefaultDisplayName, <a class="el" href="../../df/dd9/structpl_bitflags.htm">plBitflags</a>&lt; <a class="el" href="../../d5/d35/structpl_input_slot_flags.htm">plInputSlotFlags</a> &gt; SlotFlags)</td></tr>
<tr class="memdesc:af24f5f5d425517bf14ef293c6d63e3bd inherit pro_static_methods_classpl_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calls <a class="el" href="../../d8/d58/classpl_input_device.htm#af24f5f5d425517bf14ef293c6d63e3bd" title="Calls RegisterInputSlot() on the plInputManager and passes the parameters through.">RegisterInputSlot()</a> on the <a class="el" href="../../d7/d6c/classpl_input_manager.htm" title="The central class to set up and query the state of all input.">plInputManager</a> and passes the parameters through. <br /></td></tr>
<tr class="separator:af24f5f5d425517bf14ef293c6d63e3bd inherit pro_static_methods_classpl_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_classpl_input_device_mouse_keyboard"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_attribs_classpl_input_device_mouse_keyboard')"><img src="../../closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm">plInputDeviceMouseKeyboard</a></td></tr>
<tr class="memitem:ab6bf0a0af9851e7bb040eade54804054 inherit pro_attribs_classpl_input_device_mouse_keyboard" id="r_ab6bf0a0af9851e7bb040eade54804054"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../d1/df6/structpl_time.htm">plTime</a>&#160;</td><td class="memItemRight" valign="bottom"><b>m_DoubleClickTime</b> = <a class="el" href="../../d1/df6/structpl_time.htm#a29173814b302afee5a23a6c679cabc6a">plTime::MakeFromMilliseconds</a>(500)</td></tr>
<tr class="separator:ab6bf0a0af9851e7bb040eade54804054 inherit pro_attribs_classpl_input_device_mouse_keyboard"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_classpl_input_device"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_attribs_classpl_input_device')"><img src="../../closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="../../d8/d58/classpl_input_device.htm">plInputDevice</a></td></tr>
<tr class="memitem:a58a57c044af26a2471aa7bb6b4ff6c88 inherit pro_attribs_classpl_input_device" id="r_a58a57c044af26a2471aa7bb6b4ff6c88"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d9/d50/classpl_map.htm">plMap</a>&lt; <a class="el" href="../../d2/dea/structpl_hybrid_string.htm">plString</a>, float &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d58/classpl_input_device.htm#a58a57c044af26a2471aa7bb6b4ff6c88">m_InputSlotValues</a></td></tr>
<tr class="memdesc:a58a57c044af26a2471aa7bb6b4ff6c88 inherit pro_attribs_classpl_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores all the values for all input slots that this device handles.  <br /></td></tr>
<tr class="separator:a58a57c044af26a2471aa7bb6b4ff6c88 inherit pro_attribs_classpl_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e053200fc30e3efae873031f2f8b5fb inherit pro_attribs_classpl_input_device" id="r_a8e053200fc30e3efae873031f2f8b5fb"><td class="memItemLeft" align="right" valign="top">
plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>m_uiLastCharacter</b></td></tr>
<tr class="memdesc:a8e053200fc30e3efae873031f2f8b5fb inherit pro_attribs_classpl_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">If this input device type handles character input, it should write the last typed character into this variable. The <a class="el" href="../../d7/d6c/classpl_input_manager.htm" title="The central class to set up and query the state of all input.">plInputManager</a> calls RetrieveLastCharacter() to query what the user typed last. <br /></td></tr>
<tr class="separator:a8e053200fc30e3efae873031f2f8b5fb inherit pro_attribs_classpl_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_classpl_enumerable"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_attribs_classpl_enumerable')"><img src="../../closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="../../db/d85/classpl_enumerable.htm">plEnumerable&lt; plInputDevice, plReflectedClass &gt;</a></td></tr>
<tr class="memitem:aa4eba5b9c96dbe89638a952ae66077dc inherit pro_attribs_classpl_enumerable" id="r_aa4eba5b9c96dbe89638a952ae66077dc"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../db/d85/classpl_enumerable.htm">plEnumerable</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>m_pNextInstance</b></td></tr>
<tr class="separator:aa4eba5b9c96dbe89638a952ae66077dc inherit pro_attribs_classpl_enumerable"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_static_attribs_classpl_input_device_mouse_keyboard"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_static_attribs_classpl_input_device_mouse_keyboard')"><img src="../../closed.png" alt="-"/>&#160;Static Protected Attributes inherited from <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm">plInputDeviceMouseKeyboard</a></td></tr>
<tr class="memitem:a91431b8fe33ef6a38b97cc976ee60372 inherit pro_static_attribs_classpl_input_device_mouse_keyboard" id="r_a91431b8fe33ef6a38b97cc976ee60372"><td class="memItemLeft" align="right" valign="top">
static plInt32&#160;</td><td class="memItemRight" valign="bottom"><b>s_iMouseIsOverWindowNumber</b> = -1</td></tr>
<tr class="separator:a91431b8fe33ef6a38b97cc976ee60372 inherit pro_static_attribs_classpl_input_device_mouse_keyboard"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Android standard input device. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="ad7975c81c489711d3e817dbac0cc6344" name="ad7975c81c489711d3e817dbac0cc6344"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7975c81c489711d3e817dbac0cc6344">&#9670;&#160;</a></span>GetClipMouseCursor() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm#ac0050faebd818ab18a96181434ea9d16">plMouseCursorClipMode::Enum</a> plStandardInputDevice::GetClipMouseCursor </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns whether the mouse is confined to the application window or not. </p>

<p>Implements <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm#a20331a7f6053b76feb7553600cb75494">plInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="ad0fa52f2d368f5e74b0304f516d34d07" name="ad0fa52f2d368f5e74b0304f516d34d07"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0fa52f2d368f5e74b0304f516d34d07">&#9670;&#160;</a></span>GetClipMouseCursor() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm#ac0050faebd818ab18a96181434ea9d16">plMouseCursorClipMode::Enum</a> plStandardInputDevice::GetClipMouseCursor </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns whether the mouse is confined to the application window or not. </p>

<p>Implements <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm#a20331a7f6053b76feb7553600cb75494">plInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="ad0fa52f2d368f5e74b0304f516d34d07" name="ad0fa52f2d368f5e74b0304f516d34d07"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0fa52f2d368f5e74b0304f516d34d07">&#9670;&#160;</a></span>GetClipMouseCursor() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm#ac0050faebd818ab18a96181434ea9d16">plMouseCursorClipMode::Enum</a> plStandardInputDevice::GetClipMouseCursor </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns whether the mouse is confined to the application window or not. </p>

<p>Implements <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm#a20331a7f6053b76feb7553600cb75494">plInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="ad0fa52f2d368f5e74b0304f516d34d07" name="ad0fa52f2d368f5e74b0304f516d34d07"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0fa52f2d368f5e74b0304f516d34d07">&#9670;&#160;</a></span>GetClipMouseCursor() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm#ac0050faebd818ab18a96181434ea9d16">plMouseCursorClipMode::Enum</a> plStandardInputDevice::GetClipMouseCursor </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns whether the mouse is confined to the application window or not. </p>

<p>Implements <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm#a20331a7f6053b76feb7553600cb75494">plInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="ad0fa52f2d368f5e74b0304f516d34d07" name="ad0fa52f2d368f5e74b0304f516d34d07"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0fa52f2d368f5e74b0304f516d34d07">&#9670;&#160;</a></span>GetClipMouseCursor() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm#ac0050faebd818ab18a96181434ea9d16">plMouseCursorClipMode::Enum</a> plStandardInputDevice::GetClipMouseCursor </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns whether the mouse is confined to the application window or not. </p>

<p>Implements <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm#a20331a7f6053b76feb7553600cb75494">plInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="a8a70de43e402c77a499474ff7f733033" name="a8a70de43e402c77a499474ff7f733033"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a70de43e402c77a499474ff7f733033">&#9670;&#160;</a></span>GetShowMouseCursor() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool plStandardInputDevice::GetShowMouseCursor </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns whether the mouse cursor is shown. </p>

<p>Implements <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm#add175be32b5a26ba7f87b06b6d3bc2c1">plInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="a007006a9ce1f7fbe892bdac5ee722734" name="a007006a9ce1f7fbe892bdac5ee722734"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a007006a9ce1f7fbe892bdac5ee722734">&#9670;&#160;</a></span>GetShowMouseCursor() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool plStandardInputDevice::GetShowMouseCursor </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns whether the mouse cursor is shown. </p>

<p>Implements <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm#add175be32b5a26ba7f87b06b6d3bc2c1">plInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="a007006a9ce1f7fbe892bdac5ee722734" name="a007006a9ce1f7fbe892bdac5ee722734"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a007006a9ce1f7fbe892bdac5ee722734">&#9670;&#160;</a></span>GetShowMouseCursor() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool plStandardInputDevice::GetShowMouseCursor </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns whether the mouse cursor is shown. </p>

<p>Implements <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm#add175be32b5a26ba7f87b06b6d3bc2c1">plInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="a007006a9ce1f7fbe892bdac5ee722734" name="a007006a9ce1f7fbe892bdac5ee722734"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a007006a9ce1f7fbe892bdac5ee722734">&#9670;&#160;</a></span>GetShowMouseCursor() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool plStandardInputDevice::GetShowMouseCursor </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns whether the mouse cursor is shown. </p>

<p>Implements <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm#add175be32b5a26ba7f87b06b6d3bc2c1">plInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="a007006a9ce1f7fbe892bdac5ee722734" name="a007006a9ce1f7fbe892bdac5ee722734"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a007006a9ce1f7fbe892bdac5ee722734">&#9670;&#160;</a></span>GetShowMouseCursor() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool plStandardInputDevice::GetShowMouseCursor </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns whether the mouse cursor is shown. </p>

<p>Implements <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm#add175be32b5a26ba7f87b06b6d3bc2c1">plInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="a769fe79f75927bf56583ff7e29057b3c" name="a769fe79f75927bf56583ff7e29057b3c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a769fe79f75927bf56583ff7e29057b3c">&#9670;&#160;</a></span>InitializeDevice() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardInputDevice::InitializeDevice </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">private</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this if you need to do device specific initialization before the first use. </p>

<p>Implements <a class="el" href="../../d8/d58/classpl_input_device.htm#ae979467dda16cc0b8d3f557dac50c3a2">plInputDevice</a>.</p>

</div>
</div>
<a id="a7f807b0243565cbe003d175acfeede19" name="a7f807b0243565cbe003d175acfeede19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f807b0243565cbe003d175acfeede19">&#9670;&#160;</a></span>InitializeDevice() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plStandardInputDevice::InitializeDevice </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">private</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this if you need to do device specific initialization before the first use. </p>

<p>Implements <a class="el" href="../../d8/d58/classpl_input_device.htm#ae979467dda16cc0b8d3f557dac50c3a2">plInputDevice</a>.</p>

</div>
</div>
<a id="a7f807b0243565cbe003d175acfeede19" name="a7f807b0243565cbe003d175acfeede19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f807b0243565cbe003d175acfeede19">&#9670;&#160;</a></span>InitializeDevice() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plStandardInputDevice::InitializeDevice </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">private</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this if you need to do device specific initialization before the first use. </p>

<p>Implements <a class="el" href="../../d8/d58/classpl_input_device.htm#ae979467dda16cc0b8d3f557dac50c3a2">plInputDevice</a>.</p>

</div>
</div>
<a id="a7f807b0243565cbe003d175acfeede19" name="a7f807b0243565cbe003d175acfeede19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f807b0243565cbe003d175acfeede19">&#9670;&#160;</a></span>InitializeDevice() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plStandardInputDevice::InitializeDevice </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">private</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this if you need to do device specific initialization before the first use. </p>

<p>Implements <a class="el" href="../../d8/d58/classpl_input_device.htm#ae979467dda16cc0b8d3f557dac50c3a2">plInputDevice</a>.</p>

</div>
</div>
<a id="a7f807b0243565cbe003d175acfeede19" name="a7f807b0243565cbe003d175acfeede19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f807b0243565cbe003d175acfeede19">&#9670;&#160;</a></span>InitializeDevice() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plStandardInputDevice::InitializeDevice </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this if you need to do device specific initialization before the first use. </p>

<p>Implements <a class="el" href="../../d8/d58/classpl_input_device.htm#ae979467dda16cc0b8d3f557dac50c3a2">plInputDevice</a>.</p>

</div>
</div>
<a id="a9c6a9461f0d14c88c3fc224733116c57" name="a9c6a9461f0d14c88c3fc224733116c57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c6a9461f0d14c88c3fc224733116c57">&#9670;&#160;</a></span>LocalizeButtonDisplayNames()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardInputDevice::LocalizeButtonDisplayNames </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calling this function will 'translate' most key names from English to the OS language, by querying that information from the OS. </p>
<p>The OS translation might not always be perfect for all keys. The translation can change when the user changes the keyboard layout. So if he switches from an English layout to a German layout, <a class="el" href="#a9c6a9461f0d14c88c3fc224733116c57" title="Calling this function will &#39;translate&#39; most key names from English to the OS language,...">LocalizeButtonDisplayNames()</a> should be called again, to update the display names, if that is required. </p>

</div>
</div>
<a id="a03954e7a5806220d237bea9fbe7656fa" name="a03954e7a5806220d237bea9fbe7656fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a03954e7a5806220d237bea9fbe7656fa">&#9670;&#160;</a></span>RegisterInputSlots() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardInputDevice::RegisterInputSlots </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">private</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this to register all the input slots that this device exposes. </p>
<p>This is called once during initialization. It needs to call <a class="el" href="../../d8/d58/classpl_input_device.htm#af24f5f5d425517bf14ef293c6d63e3bd" title="Calls RegisterInputSlot() on the plInputManager and passes the parameters through.">RegisterInputSlot()</a> once for every input slot that this device exposes to the system. </p>

<p>Implements <a class="el" href="../../d8/d58/classpl_input_device.htm#affc9a06096720f741b0a347003de785c">plInputDevice</a>.</p>

</div>
</div>
<a id="a293b7b7eccbf4d10a192c4df05139b3e" name="a293b7b7eccbf4d10a192c4df05139b3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a293b7b7eccbf4d10a192c4df05139b3e">&#9670;&#160;</a></span>RegisterInputSlots() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plStandardInputDevice::RegisterInputSlots </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">private</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this to register all the input slots that this device exposes. </p>
<p>This is called once during initialization. It needs to call <a class="el" href="../../d8/d58/classpl_input_device.htm#af24f5f5d425517bf14ef293c6d63e3bd" title="Calls RegisterInputSlot() on the plInputManager and passes the parameters through.">RegisterInputSlot()</a> once for every input slot that this device exposes to the system. </p>

<p>Implements <a class="el" href="../../d8/d58/classpl_input_device.htm#affc9a06096720f741b0a347003de785c">plInputDevice</a>.</p>

</div>
</div>
<a id="a293b7b7eccbf4d10a192c4df05139b3e" name="a293b7b7eccbf4d10a192c4df05139b3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a293b7b7eccbf4d10a192c4df05139b3e">&#9670;&#160;</a></span>RegisterInputSlots() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plStandardInputDevice::RegisterInputSlots </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">private</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this to register all the input slots that this device exposes. </p>
<p>This is called once during initialization. It needs to call <a class="el" href="../../d8/d58/classpl_input_device.htm#af24f5f5d425517bf14ef293c6d63e3bd" title="Calls RegisterInputSlot() on the plInputManager and passes the parameters through.">RegisterInputSlot()</a> once for every input slot that this device exposes to the system. </p>

<p>Implements <a class="el" href="../../d8/d58/classpl_input_device.htm#affc9a06096720f741b0a347003de785c">plInputDevice</a>.</p>

</div>
</div>
<a id="a293b7b7eccbf4d10a192c4df05139b3e" name="a293b7b7eccbf4d10a192c4df05139b3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a293b7b7eccbf4d10a192c4df05139b3e">&#9670;&#160;</a></span>RegisterInputSlots() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plStandardInputDevice::RegisterInputSlots </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">private</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this to register all the input slots that this device exposes. </p>
<p>This is called once during initialization. It needs to call <a class="el" href="../../d8/d58/classpl_input_device.htm#af24f5f5d425517bf14ef293c6d63e3bd" title="Calls RegisterInputSlot() on the plInputManager and passes the parameters through.">RegisterInputSlot()</a> once for every input slot that this device exposes to the system. </p>

<p>Implements <a class="el" href="../../d8/d58/classpl_input_device.htm#affc9a06096720f741b0a347003de785c">plInputDevice</a>.</p>

</div>
</div>
<a id="a293b7b7eccbf4d10a192c4df05139b3e" name="a293b7b7eccbf4d10a192c4df05139b3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a293b7b7eccbf4d10a192c4df05139b3e">&#9670;&#160;</a></span>RegisterInputSlots() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plStandardInputDevice::RegisterInputSlots </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this to register all the input slots that this device exposes. </p>
<p>This is called once during initialization. It needs to call <a class="el" href="../../d8/d58/classpl_input_device.htm#af24f5f5d425517bf14ef293c6d63e3bd" title="Calls RegisterInputSlot() on the plInputManager and passes the parameters through.">RegisterInputSlot()</a> once for every input slot that this device exposes to the system. </p>

<p>Implements <a class="el" href="../../d8/d58/classpl_input_device.htm#affc9a06096720f741b0a347003de785c">plInputDevice</a>.</p>

</div>
</div>
<a id="acb972a749084b7b4c49b5d205d80d4b6" name="acb972a749084b7b4c49b5d205d80d4b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb972a749084b7b4c49b5d205d80d4b6">&#9670;&#160;</a></span>ResetInputSlotValues() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardInputDevice::ResetInputSlotValues </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">private</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this, if you need to reset certain input slot values to zero, after the <a class="el" href="../../d7/d6c/classpl_input_manager.htm" title="The central class to set up and query the state of all input.">plInputManager</a> is finished with the current frame update. </p>

<p>Reimplemented from <a class="el" href="../../d8/d58/classpl_input_device.htm#a94fc5982ebae3db958cb6ff01548229c">plInputDevice</a>.</p>

</div>
</div>
<a id="ab992f99b564d8b0aaf92ee7848809b74" name="ab992f99b564d8b0aaf92ee7848809b74"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab992f99b564d8b0aaf92ee7848809b74">&#9670;&#160;</a></span>ResetInputSlotValues() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plStandardInputDevice::ResetInputSlotValues </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">private</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this, if you need to reset certain input slot values to zero, after the <a class="el" href="../../d7/d6c/classpl_input_manager.htm" title="The central class to set up and query the state of all input.">plInputManager</a> is finished with the current frame update. </p>

<p>Reimplemented from <a class="el" href="../../d8/d58/classpl_input_device.htm#a94fc5982ebae3db958cb6ff01548229c">plInputDevice</a>.</p>

</div>
</div>
<a id="ab992f99b564d8b0aaf92ee7848809b74" name="ab992f99b564d8b0aaf92ee7848809b74"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab992f99b564d8b0aaf92ee7848809b74">&#9670;&#160;</a></span>ResetInputSlotValues() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plStandardInputDevice::ResetInputSlotValues </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">private</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this, if you need to reset certain input slot values to zero, after the <a class="el" href="../../d7/d6c/classpl_input_manager.htm" title="The central class to set up and query the state of all input.">plInputManager</a> is finished with the current frame update. </p>

<p>Reimplemented from <a class="el" href="../../d8/d58/classpl_input_device.htm#a94fc5982ebae3db958cb6ff01548229c">plInputDevice</a>.</p>

</div>
</div>
<a id="ab992f99b564d8b0aaf92ee7848809b74" name="ab992f99b564d8b0aaf92ee7848809b74"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab992f99b564d8b0aaf92ee7848809b74">&#9670;&#160;</a></span>ResetInputSlotValues() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plStandardInputDevice::ResetInputSlotValues </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this, if you need to reset certain input slot values to zero, after the <a class="el" href="../../d7/d6c/classpl_input_manager.htm" title="The central class to set up and query the state of all input.">plInputManager</a> is finished with the current frame update. </p>

<p>Reimplemented from <a class="el" href="../../d8/d58/classpl_input_device.htm#a94fc5982ebae3db958cb6ff01548229c">plInputDevice</a>.</p>

</div>
</div>
<a id="af0875f19c6d522021904b4c52cc50ded" name="af0875f19c6d522021904b4c52cc50ded"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0875f19c6d522021904b4c52cc50ded">&#9670;&#160;</a></span>SetClipMouseCursor() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardInputDevice::SetClipMouseCursor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm#ac0050faebd818ab18a96181434ea9d16">plMouseCursorClipMode::Enum</a></td>          <td class="paramname"><span class="paramname"><em>mode</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Will trap the mouse inside the application window. Should usually be enabled, to prevent accidental task switches. </p>
<p>Especially on multi-monitor systems, the mouse can easily leave the application window (even in fullscreen mode). Do NOT use this function when you have multiple windows and require absolute mouse positions.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm" title="Specifies how to restrict movement of the Operating System mouse.">plMouseCursorClipMode</a> </dd></dl>

<p>Implements <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm#ac06849be45a1c476cacf0245f14c9963">plInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="aec1d0a46f69e295a9c90a3323f09370e" name="aec1d0a46f69e295a9c90a3323f09370e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec1d0a46f69e295a9c90a3323f09370e">&#9670;&#160;</a></span>SetClipMouseCursor() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plStandardInputDevice::SetClipMouseCursor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm#ac0050faebd818ab18a96181434ea9d16">plMouseCursorClipMode::Enum</a></td>          <td class="paramname"><span class="paramname"><em>mode</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Will trap the mouse inside the application window. Should usually be enabled, to prevent accidental task switches. </p>
<p>Especially on multi-monitor systems, the mouse can easily leave the application window (even in fullscreen mode). Do NOT use this function when you have multiple windows and require absolute mouse positions.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm" title="Specifies how to restrict movement of the Operating System mouse.">plMouseCursorClipMode</a> </dd></dl>

<p>Implements <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm#ac06849be45a1c476cacf0245f14c9963">plInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="aec1d0a46f69e295a9c90a3323f09370e" name="aec1d0a46f69e295a9c90a3323f09370e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec1d0a46f69e295a9c90a3323f09370e">&#9670;&#160;</a></span>SetClipMouseCursor() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plStandardInputDevice::SetClipMouseCursor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm#ac0050faebd818ab18a96181434ea9d16">plMouseCursorClipMode::Enum</a></td>          <td class="paramname"><span class="paramname"><em>mode</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Will trap the mouse inside the application window. Should usually be enabled, to prevent accidental task switches. </p>
<p>Especially on multi-monitor systems, the mouse can easily leave the application window (even in fullscreen mode). Do NOT use this function when you have multiple windows and require absolute mouse positions.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm" title="Specifies how to restrict movement of the Operating System mouse.">plMouseCursorClipMode</a> </dd></dl>

<p>Implements <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm#ac06849be45a1c476cacf0245f14c9963">plInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="aec1d0a46f69e295a9c90a3323f09370e" name="aec1d0a46f69e295a9c90a3323f09370e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec1d0a46f69e295a9c90a3323f09370e">&#9670;&#160;</a></span>SetClipMouseCursor() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plStandardInputDevice::SetClipMouseCursor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm#ac0050faebd818ab18a96181434ea9d16">plMouseCursorClipMode::Enum</a></td>          <td class="paramname"><span class="paramname"><em>mode</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Will trap the mouse inside the application window. Should usually be enabled, to prevent accidental task switches. </p>
<p>Especially on multi-monitor systems, the mouse can easily leave the application window (even in fullscreen mode). Do NOT use this function when you have multiple windows and require absolute mouse positions.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm" title="Specifies how to restrict movement of the Operating System mouse.">plMouseCursorClipMode</a> </dd></dl>

<p>Implements <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm#ac06849be45a1c476cacf0245f14c9963">plInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="aec1d0a46f69e295a9c90a3323f09370e" name="aec1d0a46f69e295a9c90a3323f09370e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec1d0a46f69e295a9c90a3323f09370e">&#9670;&#160;</a></span>SetClipMouseCursor() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plStandardInputDevice::SetClipMouseCursor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm#ac0050faebd818ab18a96181434ea9d16">plMouseCursorClipMode::Enum</a></td>          <td class="paramname"><span class="paramname"><em>mode</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Will trap the mouse inside the application window. Should usually be enabled, to prevent accidental task switches. </p>
<p>Especially on multi-monitor systems, the mouse can easily leave the application window (even in fullscreen mode). Do NOT use this function when you have multiple windows and require absolute mouse positions.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../df/dd1/structpl_mouse_cursor_clip_mode.htm" title="Specifies how to restrict movement of the Operating System mouse.">plMouseCursorClipMode</a> </dd></dl>

<p>Implements <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm#ac06849be45a1c476cacf0245f14c9963">plInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="a2e843741c841f8820c6d684ffbbb9b3e" name="a2e843741c841f8820c6d684ffbbb9b3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e843741c841f8820c6d684ffbbb9b3e">&#9670;&#160;</a></span>SetShowMouseCursor() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardInputDevice::SetShowMouseCursor </td>
          <td>(</td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bShow</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Shows or hides the mouse cursor inside the application window. </p>

<p>Implements <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm#a014a1509a2f6947dd266641e1e8f9fb5">plInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="ac7bce4b22b918253ce0fe61981ae5c67" name="ac7bce4b22b918253ce0fe61981ae5c67"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7bce4b22b918253ce0fe61981ae5c67">&#9670;&#160;</a></span>SetShowMouseCursor() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plStandardInputDevice::SetShowMouseCursor </td>
          <td>(</td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bShow</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Shows or hides the mouse cursor inside the application window. </p>

<p>Implements <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm#a014a1509a2f6947dd266641e1e8f9fb5">plInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="ac7bce4b22b918253ce0fe61981ae5c67" name="ac7bce4b22b918253ce0fe61981ae5c67"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7bce4b22b918253ce0fe61981ae5c67">&#9670;&#160;</a></span>SetShowMouseCursor() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plStandardInputDevice::SetShowMouseCursor </td>
          <td>(</td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bShow</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Shows or hides the mouse cursor inside the application window. </p>

<p>Implements <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm#a014a1509a2f6947dd266641e1e8f9fb5">plInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="ac7bce4b22b918253ce0fe61981ae5c67" name="ac7bce4b22b918253ce0fe61981ae5c67"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7bce4b22b918253ce0fe61981ae5c67">&#9670;&#160;</a></span>SetShowMouseCursor() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plStandardInputDevice::SetShowMouseCursor </td>
          <td>(</td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bShow</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Shows or hides the mouse cursor inside the application window. </p>

<p>Implements <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm#a014a1509a2f6947dd266641e1e8f9fb5">plInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="ac7bce4b22b918253ce0fe61981ae5c67" name="ac7bce4b22b918253ce0fe61981ae5c67"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7bce4b22b918253ce0fe61981ae5c67">&#9670;&#160;</a></span>SetShowMouseCursor() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plStandardInputDevice::SetShowMouseCursor </td>
          <td>(</td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>bShow</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Shows or hides the mouse cursor inside the application window. </p>

<p>Implements <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm#a014a1509a2f6947dd266641e1e8f9fb5">plInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="a1bdef8211bd2f959a04308cd3fd7017b" name="a1bdef8211bd2f959a04308cd3fd7017b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bdef8211bd2f959a04308cd3fd7017b">&#9670;&#160;</a></span>UpdateInputSlotValues()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardInputDevice::UpdateInputSlotValues </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this, if you need to query the state of the hardware to update the input slots. </p>
<dl class="section note"><dt>Note</dt><dd>This function might be called multiple times before <a class="el" href="#acb972a749084b7b4c49b5d205d80d4b6" title="Override this, if you need to reset certain input slot values to zero, after the plInputManager is fi...">ResetInputSlotValues()</a> is called. This will be the case when <a class="el" href="../../d7/d6c/classpl_input_manager.htm#af6d9ee3bc636777a20828ab44e00e95c" title="Makes sure that hardware input is processed at this moment, which allows to do this more often than U...">plInputManager::PollHardware</a> is used to make more frequent hardware updates than input is actually processed. Just make sure to always accumulate delta values (such as mouse move values) and don't expect <a class="el" href="#acb972a749084b7b4c49b5d205d80d4b6" title="Override this, if you need to reset certain input slot values to zero, after the plInputManager is fi...">ResetInputSlotValues()</a> to be called in tandem with this function and it will be fine. </dd></dl>

<p>Reimplemented from <a class="el" href="../../d4/d90/classpl_input_device_mouse_keyboard.htm#a252d2f33232a7f0339bdb5174799a6a0">plInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/Engine/Core/System/Implementation/android/<a class="el" href="../../de/d3b/_input_device__android_8h_source.htm">InputDevice_android.h</a></li>
<li>Code/Engine/Core/System/Implementation/glfw/<a class="el" href="../../df/d5f/_input_device__glfw_8h_source.htm">InputDevice_glfw.h</a></li>
<li>Code/Engine/Core/System/Implementation/uwp/<a class="el" href="../../d4/d85/_input_device__uwp_8h_source.htm">InputDevice_uwp.h</a></li>
<li>Code/Engine/Core/System/Implementation/Win/<a class="el" href="../../d4/dfe/_input_device__win32_8h_source.htm">InputDevice_win32.h</a></li>
<li>Code/Engine/Core/System/Implementation/null/<a class="el" href="../../d9/deb/_input_device__null_8h_source.htm">InputDevice_null.h</a></li>
<li>Code/Engine/Core/System/Implementation/android/<b>InputDevice_android.inl</b></li>
<li>Code/Engine/Core/System/Implementation/glfw/<b>InputDevice_glfw.inl</b></li>
<li>Code/Engine/Core/System/Implementation/null/<a class="el" href="../../de/d92/_input_device__null_8inl_source.htm">InputDevice_null.inl</a></li>
<li>Code/Engine/Core/System/Implementation/uwp/<b>InputDevice_uwp.inl</b></li>
<li>Code/Engine/Core/System/Implementation/Win/<b>InputDevice_win32.inl</b></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d7/dff/classpl_standard_input_device.htm">plStandardInputDevice</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
