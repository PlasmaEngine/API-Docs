<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>plEngine: Code/Tools/Libs/ToolsFoundation/Reflection/PhantomProperty.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only-darkmode-toggle.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">plEngine<span id="projectnumber">&#160;Release 2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d7/d0a/_phantom_property_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">PhantomProperty.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;Foundation/Reflection/Reflection.h&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="preprocessor">#include &lt;ToolsFoundation/Reflection/ReflectedType.h&gt;</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span> </div>
<div class="foldopen" id="foldopen00006" data-start="{" data-end="};">
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno"><a class="line" href="../../df/d94/classpl_phantom_constant_property.htm">    6</a></span><span class="keyword">class </span><a class="code hl_class" href="../../df/d94/classpl_phantom_constant_property.htm">plPhantomConstantProperty</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../d7/d64/classpl_abstract_constant_property.htm">plAbstractConstantProperty</a></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span>{</div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span>  <a class="code hl_class" href="../../df/d94/classpl_phantom_constant_property.htm">plPhantomConstantProperty</a>(<span class="keyword">const</span> <a class="code hl_struct" href="../../da/d7e/structpl_reflected_property_descriptor.htm">plReflectedPropertyDescriptor</a>* pDesc);</div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span>  <a class="code hl_class" href="../../df/d94/classpl_phantom_constant_property.htm">~plPhantomConstantProperty</a>();</div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span> </div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* <a class="code hl_function" href="../../df/d94/classpl_phantom_constant_property.htm#a1a35d2d2475d19dcb213acd0dc9907f0">GetSpecificType</a>() <span class="keyword">const override</span>;</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span>* <a class="code hl_function" href="../../df/d94/classpl_phantom_constant_property.htm#a87d9f326027bfa84884d5981117a184f">GetPropertyPointer</a>() <span class="keyword">const override</span>;</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno"><a class="line" href="../../df/d94/classpl_phantom_constant_property.htm#a3ed6c735737fa854fc8c98ac01af11e1">   14</a></span>  <span class="keyword">virtual</span> <a class="code hl_class" href="../../da/d4c/classpl_variant.htm">plVariant</a> <a class="code hl_function" href="../../df/d94/classpl_phantom_constant_property.htm#a3ed6c735737fa854fc8c98ac01af11e1">GetConstant</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_Value; }</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span> </div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>  <a class="code hl_class" href="../../da/d4c/classpl_variant.htm">plVariant</a> m_Value;</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>  <a class="code hl_class" href="../../d2/dea/structpl_hybrid_string.htm">plString</a> m_sPropertyNameStorage;</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* m_pPropertyType;</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>};</div>
</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span> </div>
<div class="foldopen" id="foldopen00022" data-start="{" data-end="};">
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno"><a class="line" href="../../df/d17/classpl_phantom_member_property.htm">   22</a></span><span class="keyword">class </span><a class="code hl_class" href="../../df/d17/classpl_phantom_member_property.htm">plPhantomMemberProperty</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../d3/d73/classpl_abstract_member_property.htm">plAbstractMemberProperty</a></div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>{</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>  <a class="code hl_class" href="../../df/d17/classpl_phantom_member_property.htm">plPhantomMemberProperty</a>(<span class="keyword">const</span> <a class="code hl_struct" href="../../da/d7e/structpl_reflected_property_descriptor.htm">plReflectedPropertyDescriptor</a>* pDesc);</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>  <a class="code hl_class" href="../../df/d17/classpl_phantom_member_property.htm">~plPhantomMemberProperty</a>();</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span> </div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* <a class="code hl_function" href="../../df/d17/classpl_phantom_member_property.htm#a06ef79894334cce4e480b3161ff94391">GetSpecificType</a>() <span class="keyword">const override</span>;</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno"><a class="line" href="../../df/d17/classpl_phantom_member_property.htm#a2dadad7020d792a127626777eb67fb38">   29</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span>* <a class="code hl_function" href="../../df/d17/classpl_phantom_member_property.htm#a2dadad7020d792a127626777eb67fb38">GetPropertyPointer</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> <span class="keyword">nullptr</span>; }</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno"><a class="line" href="../../df/d17/classpl_phantom_member_property.htm#ad285b9463a9553302ab14ebdb7b17392">   30</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../df/d17/classpl_phantom_member_property.htm#ad285b9463a9553302ab14ebdb7b17392">GetValuePtr</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override </span>{}</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno"><a class="line" href="../../df/d17/classpl_phantom_member_property.htm#a7a4baf16bf4cfc86a1f34bb719d036bd">   31</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../df/d17/classpl_phantom_member_property.htm#a7a4baf16bf4cfc86a1f34bb719d036bd">SetValuePtr</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override </span>{}</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span> </div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>  <a class="code hl_class" href="../../d2/dea/structpl_hybrid_string.htm">plString</a> m_sPropertyNameStorage;</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* m_pPropertyType;</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>};</div>
</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span> </div>
<div class="foldopen" id="foldopen00038" data-start="{" data-end="};">
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno"><a class="line" href="../../d2/db1/classpl_phantom_function_property.htm">   38</a></span><span class="keyword">class </span><a class="code hl_class" href="../../d2/db1/classpl_phantom_function_property.htm">plPhantomFunctionProperty</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../d7/de1/classpl_abstract_function_property.htm">plAbstractFunctionProperty</a></div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>{</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span>  <a class="code hl_class" href="../../d2/db1/classpl_phantom_function_property.htm">plPhantomFunctionProperty</a>(<a class="code hl_struct" href="../../d5/dcd/structpl_reflected_function_descriptor.htm">plReflectedFunctionDescriptor</a>* pDesc);</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>  <a class="code hl_class" href="../../d2/db1/classpl_phantom_function_property.htm">~plPhantomFunctionProperty</a>();</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span> </div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>  <span class="keyword">virtual</span> <a class="code hl_enumeration" href="../../d9/dc8/structpl_function_type.htm#af271404fdafe238815ecd4cf373026b8">plFunctionType::Enum</a> <a class="code hl_function" href="../../d2/db1/classpl_phantom_function_property.htm#a61a560bd0f774d3914a7eeebacefcf6c">GetFunctionType</a>() <span class="keyword">const override</span>;</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* <a class="code hl_function" href="../../d2/db1/classpl_phantom_function_property.htm#af746b89cbff6624e385e872d14a3f849">GetReturnType</a>() <span class="keyword">const override</span>;</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>  <span class="keyword">virtual</span> <a class="code hl_struct" href="../../df/dd9/structpl_bitflags.htm">plBitflags&lt;plPropertyFlags&gt;</a> <a class="code hl_function" href="../../d2/db1/classpl_phantom_function_property.htm#a57176fa38f568a02289c268f42df8a21">GetReturnFlags</a>() <span class="keyword">const override</span>;</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>  <span class="keyword">virtual</span> plUInt32 <a class="code hl_function" href="../../d2/db1/classpl_phantom_function_property.htm#a4588c621014565290ec8d9447b6ccc08">GetArgumentCount</a>() <span class="keyword">const override</span>;</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* <a class="code hl_function" href="../../d2/db1/classpl_phantom_function_property.htm#a93ba64a84aff52e3078e4c85976ff5f2">GetArgumentType</a>(plUInt32 uiParamIndex) <span class="keyword">const override</span>;</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>  <span class="keyword">virtual</span> <a class="code hl_struct" href="../../df/dd9/structpl_bitflags.htm">plBitflags&lt;plPropertyFlags&gt;</a> <a class="code hl_function" href="../../d2/db1/classpl_phantom_function_property.htm#ae5296d29c2fad0fe69a9ac72e13ed860">GetArgumentFlags</a>(plUInt32 uiParamIndex) <span class="keyword">const override</span>;</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/db1/classpl_phantom_function_property.htm#adf562d6ffd706cba88c009a35f69a29e">Execute</a>(<span class="keywordtype">void</span>* pInstance, <a class="code hl_class" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr&lt;plVariant&gt;</a> values, <a class="code hl_class" href="../../da/d4c/classpl_variant.htm">plVariant</a>&amp; ref_returnValue) <span class="keyword">const override</span>;</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span> </div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span>  <a class="code hl_class" href="../../d2/dea/structpl_hybrid_string.htm">plString</a> m_sPropertyNameStorage;</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>  <a class="code hl_struct" href="../../dd/d09/structpl_enum.htm">plEnum&lt;plFunctionType&gt;</a> m_FunctionType;</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>  <a class="code hl_struct" href="../../d5/d39/structpl_function_argument_descriptor.htm">plFunctionArgumentDescriptor</a> m_ReturnValue;</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>  <a class="code hl_class" href="../../d0/d4e/classpl_dynamic_array.htm">plDynamicArray&lt;plFunctionArgumentDescriptor&gt;</a> m_Arguments;</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>};</div>
</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span> </div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span> </div>
<div class="foldopen" id="foldopen00060" data-start="{" data-end="};">
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno"><a class="line" href="../../d9/d22/classpl_phantom_array_property.htm">   60</a></span><span class="keyword">class </span><a class="code hl_class" href="../../d9/d22/classpl_phantom_array_property.htm">plPhantomArrayProperty</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../dc/d4a/classpl_abstract_array_property.htm">plAbstractArrayProperty</a></div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>{</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>  <a class="code hl_class" href="../../d9/d22/classpl_phantom_array_property.htm">plPhantomArrayProperty</a>(<span class="keyword">const</span> <a class="code hl_struct" href="../../da/d7e/structpl_reflected_property_descriptor.htm">plReflectedPropertyDescriptor</a>* pDesc);</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>  <a class="code hl_class" href="../../d9/d22/classpl_phantom_array_property.htm">~plPhantomArrayProperty</a>();</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span> </div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* <a class="code hl_function" href="../../d9/d22/classpl_phantom_array_property.htm#a654188078d2c08d744a91459983e19a6">GetSpecificType</a>() <span class="keyword">const override</span>;</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno"><a class="line" href="../../d9/d22/classpl_phantom_array_property.htm#ab5f128e928c86406d76ebbf5c51aa089">   67</a></span>  <span class="keyword">virtual</span> plUInt32 <a class="code hl_function" href="../../d9/d22/classpl_phantom_array_property.htm#ab5f128e928c86406d76ebbf5c51aa089">GetCount</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> 0; }</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno"><a class="line" href="../../d9/d22/classpl_phantom_array_property.htm#a7ca4f5510367b10f9dd379f1a91c2164">   68</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d9/d22/classpl_phantom_array_property.htm#a7ca4f5510367b10f9dd379f1a91c2164">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, plUInt32 uiIndex, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override </span>{}</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno"><a class="line" href="../../d9/d22/classpl_phantom_array_property.htm#a6652711d20ae6c933dfdc140e9dd8c1d">   69</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d9/d22/classpl_phantom_array_property.htm#a6652711d20ae6c933dfdc140e9dd8c1d">SetValue</a>(<span class="keywordtype">void</span>* pInstance, plUInt32 uiIndex, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override </span>{}</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno"><a class="line" href="../../d9/d22/classpl_phantom_array_property.htm#a94ab0751683d0624eb2a23edbe345074">   70</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d9/d22/classpl_phantom_array_property.htm#a94ab0751683d0624eb2a23edbe345074">Insert</a>(<span class="keywordtype">void</span>* pInstance, plUInt32 uiIndex, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override </span>{}</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno"><a class="line" href="../../d9/d22/classpl_phantom_array_property.htm#ad0b62f908039ddad795b6612b24927d9">   71</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d9/d22/classpl_phantom_array_property.htm#ad0b62f908039ddad795b6612b24927d9">Remove</a>(<span class="keywordtype">void</span>* pInstance, plUInt32 uiIndex)<span class="keyword"> const override </span>{}</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno"><a class="line" href="../../d9/d22/classpl_phantom_array_property.htm#abf98c1a07fe904657fa27d7379dc0b09">   72</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d9/d22/classpl_phantom_array_property.htm#abf98c1a07fe904657fa27d7379dc0b09">Clear</a>(<span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{}</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno"><a class="line" href="../../d9/d22/classpl_phantom_array_property.htm#a1b9e42f1862a218bea09e86591b81aed">   73</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d9/d22/classpl_phantom_array_property.htm#a1b9e42f1862a218bea09e86591b81aed">SetCount</a>(<span class="keywordtype">void</span>* pInstance, plUInt32 uiCount)<span class="keyword"> const override </span>{}</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span> </div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span> </div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>  <a class="code hl_class" href="../../d2/dea/structpl_hybrid_string.htm">plString</a> m_sPropertyNameStorage;</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* m_pPropertyType;</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>};</div>
</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span> </div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span> </div>
<div class="foldopen" id="foldopen00082" data-start="{" data-end="};">
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno"><a class="line" href="../../d2/de2/classpl_phantom_set_property.htm">   82</a></span><span class="keyword">class </span><a class="code hl_class" href="../../d2/de2/classpl_phantom_set_property.htm">plPhantomSetProperty</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../de/dec/classpl_abstract_set_property.htm">plAbstractSetProperty</a></div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>{</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>  <a class="code hl_class" href="../../d2/de2/classpl_phantom_set_property.htm">plPhantomSetProperty</a>(<span class="keyword">const</span> <a class="code hl_struct" href="../../da/d7e/structpl_reflected_property_descriptor.htm">plReflectedPropertyDescriptor</a>* pDesc);</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>  <a class="code hl_class" href="../../d2/de2/classpl_phantom_set_property.htm">~plPhantomSetProperty</a>();</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span> </div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* <a class="code hl_function" href="../../d2/de2/classpl_phantom_set_property.htm#a7731fa9e1ebd680df064b57600e26646">GetSpecificType</a>() <span class="keyword">const override</span>;</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno"><a class="line" href="../../d2/de2/classpl_phantom_set_property.htm#ad027b677c4deac53fd78ff5617a4058b">   89</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d2/de2/classpl_phantom_set_property.htm#ad027b677c4deac53fd78ff5617a4058b">IsEmpty</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> <span class="keyword">true</span>; }</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno"><a class="line" href="../../d2/de2/classpl_phantom_set_property.htm#ac460ee4da4238c08c3086addd7a04706">   90</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/de2/classpl_phantom_set_property.htm#ac460ee4da4238c08c3086addd7a04706">Clear</a>(<span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{}</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno"><a class="line" href="../../d2/de2/classpl_phantom_set_property.htm#a8141666df6b689b5cca36a20e75c43a0">   91</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/de2/classpl_phantom_set_property.htm#a8141666df6b689b5cca36a20e75c43a0">Insert</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override </span>{}</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno"><a class="line" href="../../d2/de2/classpl_phantom_set_property.htm#a3e421847f428ecfc6de27bfa9ac7f92e">   92</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/de2/classpl_phantom_set_property.htm#a3e421847f428ecfc6de27bfa9ac7f92e">Remove</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override </span>{}</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno"><a class="line" href="../../d2/de2/classpl_phantom_set_property.htm#a5747ec613616c84aeb76020484bcf001">   93</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d2/de2/classpl_phantom_set_property.htm#a5747ec613616c84aeb76020484bcf001">Contains</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno"><a class="line" href="../../d2/de2/classpl_phantom_set_property.htm#adf420ea067c9d992d0ef0ea414b54b5a">   94</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d2/de2/classpl_phantom_set_property.htm#adf420ea067c9d992d0ef0ea414b54b5a">GetValues</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code hl_class" href="../../d0/d4e/classpl_dynamic_array.htm">plDynamicArray&lt;plVariant&gt;</a>&amp; out_keys)<span class="keyword"> const override </span>{}</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span> </div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>  <a class="code hl_class" href="../../d2/dea/structpl_hybrid_string.htm">plString</a> m_sPropertyNameStorage;</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* m_pPropertyType;</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>};</div>
</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span> </div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span> </div>
<div class="foldopen" id="foldopen00102" data-start="{" data-end="};">
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno"><a class="line" href="../../d3/df3/classpl_phantom_map_property.htm">  102</a></span><span class="keyword">class </span><a class="code hl_class" href="../../d3/df3/classpl_phantom_map_property.htm">plPhantomMapProperty</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../d1/dfe/classpl_abstract_map_property.htm">plAbstractMapProperty</a></div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>{</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>  <a class="code hl_class" href="../../d3/df3/classpl_phantom_map_property.htm">plPhantomMapProperty</a>(<span class="keyword">const</span> <a class="code hl_struct" href="../../da/d7e/structpl_reflected_property_descriptor.htm">plReflectedPropertyDescriptor</a>* pDesc);</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>  <a class="code hl_class" href="../../d3/df3/classpl_phantom_map_property.htm">~plPhantomMapProperty</a>();</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span> </div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* <a class="code hl_function" href="../../d3/df3/classpl_phantom_map_property.htm#aa33caaacf61283f1da316a403ab278db">GetSpecificType</a>() <span class="keyword">const override</span>;</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno"><a class="line" href="../../d3/df3/classpl_phantom_map_property.htm#a874ecf6f01ab1041509a917c295ff381">  109</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d3/df3/classpl_phantom_map_property.htm#a874ecf6f01ab1041509a917c295ff381">IsEmpty</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> <span class="keyword">true</span>; }</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno"><a class="line" href="../../d3/df3/classpl_phantom_map_property.htm#a4b76ce665b8ec38f5796421f91f4708f">  110</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d3/df3/classpl_phantom_map_property.htm#a4b76ce665b8ec38f5796421f91f4708f">Clear</a>(<span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{}</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno"><a class="line" href="../../d3/df3/classpl_phantom_map_property.htm#a901f4b1ea35d702ee2ac003819a41548">  111</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d3/df3/classpl_phantom_map_property.htm#a901f4b1ea35d702ee2ac003819a41548">Insert</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override </span>{}</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno"><a class="line" href="../../d3/df3/classpl_phantom_map_property.htm#a77588716689da80cf26b4e6c3907fd5b">  112</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d3/df3/classpl_phantom_map_property.htm#a77588716689da80cf26b4e6c3907fd5b">Remove</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey)<span class="keyword"> const override </span>{}</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno"><a class="line" href="../../d3/df3/classpl_phantom_map_property.htm#a2f98f52e1b1dce4f7b8357bd92398a5a">  113</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d3/df3/classpl_phantom_map_property.htm#a2f98f52e1b1dce4f7b8357bd92398a5a">Contains</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno"><a class="line" href="../../d3/df3/classpl_phantom_map_property.htm#a903c4d826fca31f3e1574e244523a2e8">  114</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d3/df3/classpl_phantom_map_property.htm#a903c4d826fca31f3e1574e244523a2e8">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* szKey, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno"><a class="line" href="../../d3/df3/classpl_phantom_map_property.htm#a723bbc1d9b86fa25ae03106e06b00382">  115</a></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d3/df3/classpl_phantom_map_property.htm#a723bbc1d9b86fa25ae03106e06b00382">GetKeys</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code hl_class" href="../../d8/dcc/classpl_hybrid_array.htm">plHybridArray&lt;plString, 16&gt;</a>&amp; out_keys)<span class="keyword"> const override </span>{}</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span> </div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>  <a class="code hl_class" href="../../d2/dea/structpl_hybrid_string.htm">plString</a> m_sPropertyNameStorage;</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a>* m_pPropertyType;</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>};</div>
</div>
<div class="ttc" id="aclasspl_abstract_array_property_htm"><div class="ttname"><a href="../../dc/d4a/classpl_abstract_array_property.htm">plAbstractArrayProperty</a></div><div class="ttdoc">The base class for a property that represents an array of values.</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:273</div></div>
<div class="ttc" id="aclasspl_abstract_constant_property_htm"><div class="ttname"><a href="../../d7/d64/classpl_abstract_constant_property.htm">plAbstractConstantProperty</a></div><div class="ttdoc">This is the base class for all constant properties that are stored inside the RTTI data.</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:213</div></div>
<div class="ttc" id="aclasspl_abstract_function_property_htm"><div class="ttname"><a href="../../d7/de1/classpl_abstract_function_property.htm">plAbstractFunctionProperty</a></div><div class="ttdoc">The base class for a property that represents a function.</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:535</div></div>
<div class="ttc" id="aclasspl_abstract_map_property_htm"><div class="ttname"><a href="../../d1/dfe/classpl_abstract_map_property.htm">plAbstractMapProperty</a></div><div class="ttdoc">The base class for a property that represents a set of values.</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:348</div></div>
<div class="ttc" id="aclasspl_abstract_member_property_htm"><div class="ttname"><a href="../../d3/d73/classpl_abstract_member_property.htm">plAbstractMemberProperty</a></div><div class="ttdoc">This is the base class for all properties that are members of a class. It provides more information a...</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:237</div></div>
<div class="ttc" id="aclasspl_abstract_set_property_htm"><div class="ttname"><a href="../../de/dec/classpl_abstract_set_property.htm">plAbstractSetProperty</a></div><div class="ttdoc">The base class for a property that represents a set of values.</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:313</div></div>
<div class="ttc" id="aclasspl_array_ptr_htm"><div class="ttname"><a href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a></div><div class="ttdoc">This class encapsulates an array and it's size. It is recommended to use this class instead of plain ...</div><div class="ttdef"><b>Definition</b> ArrayPtr.h:37</div></div>
<div class="ttc" id="aclasspl_dynamic_array_htm"><div class="ttname"><a href="../../d0/d4e/classpl_dynamic_array.htm">plDynamicArray</a></div><div class="ttdef"><b>Definition</b> DynamicArray.h:81</div></div>
<div class="ttc" id="aclasspl_hybrid_array_htm"><div class="ttname"><a href="../../d8/dcc/classpl_hybrid_array.htm">plHybridArray</a></div><div class="ttdoc">A hybrid array uses in-place storage to handle the first few elements without any allocation....</div><div class="ttdef"><b>Definition</b> HybridArray.h:12</div></div>
<div class="ttc" id="aclasspl_phantom_array_property_htm"><div class="ttname"><a href="../../d9/d22/classpl_phantom_array_property.htm">plPhantomArrayProperty</a></div><div class="ttdef"><b>Definition</b> PhantomProperty.h:61</div></div>
<div class="ttc" id="aclasspl_phantom_array_property_htm_a1b9e42f1862a218bea09e86591b81aed"><div class="ttname"><a href="../../d9/d22/classpl_phantom_array_property.htm#a1b9e42f1862a218bea09e86591b81aed">plPhantomArrayProperty::SetCount</a></div><div class="ttdeci">virtual void SetCount(void *pInstance, plUInt32 uiCount) const override</div><div class="ttdoc">Resizes the array to uiCount.</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:73</div></div>
<div class="ttc" id="aclasspl_phantom_array_property_htm_a654188078d2c08d744a91459983e19a6"><div class="ttname"><a href="../../d9/d22/classpl_phantom_array_property.htm#a654188078d2c08d744a91459983e19a6">plPhantomArrayProperty::GetSpecificType</a></div><div class="ttdeci">virtual const plRTTI * GetSpecificType() const override</div><div class="ttdoc">Returns the type information of the constant property. Use this to cast this property to a specific v...</div><div class="ttdef"><b>Definition</b> PhantomProperty.cpp:149</div></div>
<div class="ttc" id="aclasspl_phantom_array_property_htm_a6652711d20ae6c933dfdc140e9dd8c1d"><div class="ttname"><a href="../../d9/d22/classpl_phantom_array_property.htm#a6652711d20ae6c933dfdc140e9dd8c1d">plPhantomArrayProperty::SetValue</a></div><div class="ttdeci">virtual void SetValue(void *pInstance, plUInt32 uiIndex, const void *pObject) const override</div><div class="ttdoc">Writes the target of pObject to the element at index uiIndex.</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:69</div></div>
<div class="ttc" id="aclasspl_phantom_array_property_htm_a7ca4f5510367b10f9dd379f1a91c2164"><div class="ttname"><a href="../../d9/d22/classpl_phantom_array_property.htm#a7ca4f5510367b10f9dd379f1a91c2164">plPhantomArrayProperty::GetValue</a></div><div class="ttdeci">virtual void GetValue(const void *pInstance, plUInt32 uiIndex, void *pObject) const override</div><div class="ttdoc">Writes element at index uiIndex to the target of pObject.</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:68</div></div>
<div class="ttc" id="aclasspl_phantom_array_property_htm_a94ab0751683d0624eb2a23edbe345074"><div class="ttname"><a href="../../d9/d22/classpl_phantom_array_property.htm#a94ab0751683d0624eb2a23edbe345074">plPhantomArrayProperty::Insert</a></div><div class="ttdeci">virtual void Insert(void *pInstance, plUInt32 uiIndex, const void *pObject) const override</div><div class="ttdoc">Inserts the target of pObject into the array at index uiIndex.</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:70</div></div>
<div class="ttc" id="aclasspl_phantom_array_property_htm_ab5f128e928c86406d76ebbf5c51aa089"><div class="ttname"><a href="../../d9/d22/classpl_phantom_array_property.htm#ab5f128e928c86406d76ebbf5c51aa089">plPhantomArrayProperty::GetCount</a></div><div class="ttdeci">virtual plUInt32 GetCount(const void *pInstance) const override</div><div class="ttdoc">Returns number of elements.</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:67</div></div>
<div class="ttc" id="aclasspl_phantom_array_property_htm_abf98c1a07fe904657fa27d7379dc0b09"><div class="ttname"><a href="../../d9/d22/classpl_phantom_array_property.htm#abf98c1a07fe904657fa27d7379dc0b09">plPhantomArrayProperty::Clear</a></div><div class="ttdeci">virtual void Clear(void *pInstance) const override</div><div class="ttdoc">Clears the array.</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:72</div></div>
<div class="ttc" id="aclasspl_phantom_array_property_htm_ad0b62f908039ddad795b6612b24927d9"><div class="ttname"><a href="../../d9/d22/classpl_phantom_array_property.htm#ad0b62f908039ddad795b6612b24927d9">plPhantomArrayProperty::Remove</a></div><div class="ttdeci">virtual void Remove(void *pInstance, plUInt32 uiIndex) const override</div><div class="ttdoc">Removes the element in the array at index uiIndex.</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:71</div></div>
<div class="ttc" id="aclasspl_phantom_constant_property_htm"><div class="ttname"><a href="../../df/d94/classpl_phantom_constant_property.htm">plPhantomConstantProperty</a></div><div class="ttdef"><b>Definition</b> PhantomProperty.h:7</div></div>
<div class="ttc" id="aclasspl_phantom_constant_property_htm_a1a35d2d2475d19dcb213acd0dc9907f0"><div class="ttname"><a href="../../df/d94/classpl_phantom_constant_property.htm#a1a35d2d2475d19dcb213acd0dc9907f0">plPhantomConstantProperty::GetSpecificType</a></div><div class="ttdeci">virtual const plRTTI * GetSpecificType() const override</div><div class="ttdoc">Returns the type information of the constant property. Use this to cast this property to a specific v...</div><div class="ttdef"><b>Definition</b> PhantomProperty.cpp:28</div></div>
<div class="ttc" id="aclasspl_phantom_constant_property_htm_a3ed6c735737fa854fc8c98ac01af11e1"><div class="ttname"><a href="../../df/d94/classpl_phantom_constant_property.htm#a3ed6c735737fa854fc8c98ac01af11e1">plPhantomConstantProperty::GetConstant</a></div><div class="ttdeci">virtual plVariant GetConstant() const override</div><div class="ttdoc">Returns the constant value as an plVariant.</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:14</div></div>
<div class="ttc" id="aclasspl_phantom_constant_property_htm_a87d9f326027bfa84884d5981117a184f"><div class="ttname"><a href="../../df/d94/classpl_phantom_constant_property.htm#a87d9f326027bfa84884d5981117a184f">plPhantomConstantProperty::GetPropertyPointer</a></div><div class="ttdeci">virtual void * GetPropertyPointer() const override</div><div class="ttdoc">Returns a pointer to the constant data or nullptr. See plAbstractMemberProperty::GetPropertyPointer f...</div><div class="ttdef"><b>Definition</b> PhantomProperty.cpp:33</div></div>
<div class="ttc" id="aclasspl_phantom_function_property_htm"><div class="ttname"><a href="../../d2/db1/classpl_phantom_function_property.htm">plPhantomFunctionProperty</a></div><div class="ttdef"><b>Definition</b> PhantomProperty.h:39</div></div>
<div class="ttc" id="aclasspl_phantom_function_property_htm_a4588c621014565290ec8d9447b6ccc08"><div class="ttname"><a href="../../d2/db1/classpl_phantom_function_property.htm#a4588c621014565290ec8d9447b6ccc08">plPhantomFunctionProperty::GetArgumentCount</a></div><div class="ttdeci">virtual plUInt32 GetArgumentCount() const override</div><div class="ttdoc">Returns the number of arguments.</div><div class="ttdef"><b>Definition</b> PhantomProperty.cpp:108</div></div>
<div class="ttc" id="aclasspl_phantom_function_property_htm_a57176fa38f568a02289c268f42df8a21"><div class="ttname"><a href="../../d2/db1/classpl_phantom_function_property.htm#a57176fa38f568a02289c268f42df8a21">plPhantomFunctionProperty::GetReturnFlags</a></div><div class="ttdeci">virtual plBitflags&lt; plPropertyFlags &gt; GetReturnFlags() const override</div><div class="ttdoc">Returns property flags of the return value.</div><div class="ttdef"><b>Definition</b> PhantomProperty.cpp:103</div></div>
<div class="ttc" id="aclasspl_phantom_function_property_htm_a61a560bd0f774d3914a7eeebacefcf6c"><div class="ttname"><a href="../../d2/db1/classpl_phantom_function_property.htm#a61a560bd0f774d3914a7eeebacefcf6c">plPhantomFunctionProperty::GetFunctionType</a></div><div class="ttdeci">virtual plFunctionType::Enum GetFunctionType() const override</div><div class="ttdoc">Returns the type of function, see plFunctionPropertyType::Enum.</div><div class="ttdef"><b>Definition</b> PhantomProperty.cpp:93</div></div>
<div class="ttc" id="aclasspl_phantom_function_property_htm_a93ba64a84aff52e3078e4c85976ff5f2"><div class="ttname"><a href="../../d2/db1/classpl_phantom_function_property.htm#a93ba64a84aff52e3078e4c85976ff5f2">plPhantomFunctionProperty::GetArgumentType</a></div><div class="ttdeci">virtual const plRTTI * GetArgumentType(plUInt32 uiParamIndex) const override</div><div class="ttdoc">Returns the type of the given argument.</div><div class="ttdef"><b>Definition</b> PhantomProperty.cpp:113</div></div>
<div class="ttc" id="aclasspl_phantom_function_property_htm_adf562d6ffd706cba88c009a35f69a29e"><div class="ttname"><a href="../../d2/db1/classpl_phantom_function_property.htm#adf562d6ffd706cba88c009a35f69a29e">plPhantomFunctionProperty::Execute</a></div><div class="ttdeci">virtual void Execute(void *pInstance, plArrayPtr&lt; plVariant &gt; values, plVariant &amp;ref_returnValue) const override</div><div class="ttdoc">Calls the function. Provide the instance on which the function is supposed to be called.</div><div class="ttdef"><b>Definition</b> PhantomProperty.cpp:123</div></div>
<div class="ttc" id="aclasspl_phantom_function_property_htm_ae5296d29c2fad0fe69a9ac72e13ed860"><div class="ttname"><a href="../../d2/db1/classpl_phantom_function_property.htm#ae5296d29c2fad0fe69a9ac72e13ed860">plPhantomFunctionProperty::GetArgumentFlags</a></div><div class="ttdeci">virtual plBitflags&lt; plPropertyFlags &gt; GetArgumentFlags(plUInt32 uiParamIndex) const override</div><div class="ttdoc">Returns the property flags of the given argument.</div><div class="ttdef"><b>Definition</b> PhantomProperty.cpp:118</div></div>
<div class="ttc" id="aclasspl_phantom_function_property_htm_af746b89cbff6624e385e872d14a3f849"><div class="ttname"><a href="../../d2/db1/classpl_phantom_function_property.htm#af746b89cbff6624e385e872d14a3f849">plPhantomFunctionProperty::GetReturnType</a></div><div class="ttdeci">virtual const plRTTI * GetReturnType() const override</div><div class="ttdoc">Returns the type of the return value.</div><div class="ttdef"><b>Definition</b> PhantomProperty.cpp:98</div></div>
<div class="ttc" id="aclasspl_phantom_map_property_htm"><div class="ttname"><a href="../../d3/df3/classpl_phantom_map_property.htm">plPhantomMapProperty</a></div><div class="ttdef"><b>Definition</b> PhantomProperty.h:103</div></div>
<div class="ttc" id="aclasspl_phantom_map_property_htm_a2f98f52e1b1dce4f7b8357bd92398a5a"><div class="ttname"><a href="../../d3/df3/classpl_phantom_map_property.htm#a2f98f52e1b1dce4f7b8357bd92398a5a">plPhantomMapProperty::Contains</a></div><div class="ttdeci">virtual bool Contains(const void *pInstance, const char *szKey) const override</div><div class="ttdoc">Returns whether the target of pObject is in the set.</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:113</div></div>
<div class="ttc" id="aclasspl_phantom_map_property_htm_a4b76ce665b8ec38f5796421f91f4708f"><div class="ttname"><a href="../../d3/df3/classpl_phantom_map_property.htm#a4b76ce665b8ec38f5796421f91f4708f">plPhantomMapProperty::Clear</a></div><div class="ttdeci">virtual void Clear(void *pInstance) const override</div><div class="ttdoc">Clears the set.</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:110</div></div>
<div class="ttc" id="aclasspl_phantom_map_property_htm_a723bbc1d9b86fa25ae03106e06b00382"><div class="ttname"><a href="../../d3/df3/classpl_phantom_map_property.htm#a723bbc1d9b86fa25ae03106e06b00382">plPhantomMapProperty::GetKeys</a></div><div class="ttdeci">virtual void GetKeys(const void *pInstance, plHybridArray&lt; plString, 16 &gt; &amp;out_keys) const override</div><div class="ttdoc">Writes the content of the set to out_keys.</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:115</div></div>
<div class="ttc" id="aclasspl_phantom_map_property_htm_a77588716689da80cf26b4e6c3907fd5b"><div class="ttname"><a href="../../d3/df3/classpl_phantom_map_property.htm#a77588716689da80cf26b4e6c3907fd5b">plPhantomMapProperty::Remove</a></div><div class="ttdeci">virtual void Remove(void *pInstance, const char *szKey) const override</div><div class="ttdoc">Removes the target of pObject from the set.</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:112</div></div>
<div class="ttc" id="aclasspl_phantom_map_property_htm_a874ecf6f01ab1041509a917c295ff381"><div class="ttname"><a href="../../d3/df3/classpl_phantom_map_property.htm#a874ecf6f01ab1041509a917c295ff381">plPhantomMapProperty::IsEmpty</a></div><div class="ttdeci">virtual bool IsEmpty(const void *pInstance) const override</div><div class="ttdoc">Returns whether the set is empty.</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:109</div></div>
<div class="ttc" id="aclasspl_phantom_map_property_htm_a901f4b1ea35d702ee2ac003819a41548"><div class="ttname"><a href="../../d3/df3/classpl_phantom_map_property.htm#a901f4b1ea35d702ee2ac003819a41548">plPhantomMapProperty::Insert</a></div><div class="ttdeci">virtual void Insert(void *pInstance, const char *szKey, const void *pObject) const override</div><div class="ttdoc">Inserts the target of pObject into the set.</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:111</div></div>
<div class="ttc" id="aclasspl_phantom_map_property_htm_a903c4d826fca31f3e1574e244523a2e8"><div class="ttname"><a href="../../d3/df3/classpl_phantom_map_property.htm#a903c4d826fca31f3e1574e244523a2e8">plPhantomMapProperty::GetValue</a></div><div class="ttdeci">virtual bool GetValue(const void *pInstance, const char *szKey, void *pObject) const override</div><div class="ttdoc">Writes element at index uiIndex to the target of pObject.</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:114</div></div>
<div class="ttc" id="aclasspl_phantom_map_property_htm_aa33caaacf61283f1da316a403ab278db"><div class="ttname"><a href="../../d3/df3/classpl_phantom_map_property.htm#aa33caaacf61283f1da316a403ab278db">plPhantomMapProperty::GetSpecificType</a></div><div class="ttdeci">virtual const plRTTI * GetSpecificType() const override</div><div class="ttdoc">Returns the type information of the constant property. Use this to cast this property to a specific v...</div><div class="ttdef"><b>Definition</b> PhantomProperty.cpp:201</div></div>
<div class="ttc" id="aclasspl_phantom_member_property_htm"><div class="ttname"><a href="../../df/d17/classpl_phantom_member_property.htm">plPhantomMemberProperty</a></div><div class="ttdef"><b>Definition</b> PhantomProperty.h:23</div></div>
<div class="ttc" id="aclasspl_phantom_member_property_htm_a06ef79894334cce4e480b3161ff94391"><div class="ttname"><a href="../../df/d17/classpl_phantom_member_property.htm#a06ef79894334cce4e480b3161ff94391">plPhantomMemberProperty::GetSpecificType</a></div><div class="ttdeci">virtual const plRTTI * GetSpecificType() const override</div><div class="ttdoc">Returns the type information of the constant property. Use this to cast this property to a specific v...</div><div class="ttdef"><b>Definition</b> PhantomProperty.cpp:61</div></div>
<div class="ttc" id="aclasspl_phantom_member_property_htm_a2dadad7020d792a127626777eb67fb38"><div class="ttname"><a href="../../df/d17/classpl_phantom_member_property.htm#a2dadad7020d792a127626777eb67fb38">plPhantomMemberProperty::GetPropertyPointer</a></div><div class="ttdeci">virtual void * GetPropertyPointer(const void *pInstance) const override</div><div class="ttdoc">Returns a pointer to the property data or nullptr. If a valid pointer is returned,...</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:29</div></div>
<div class="ttc" id="aclasspl_phantom_member_property_htm_a7a4baf16bf4cfc86a1f34bb719d036bd"><div class="ttname"><a href="../../df/d17/classpl_phantom_member_property.htm#a7a4baf16bf4cfc86a1f34bb719d036bd">plPhantomMemberProperty::SetValuePtr</a></div><div class="ttdeci">virtual void SetValuePtr(void *pInstance, const void *pObject) const override</div><div class="ttdoc">Sets the value of pObject to the property in pInstance. pObject needs to point to an instance of this...</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:31</div></div>
<div class="ttc" id="aclasspl_phantom_member_property_htm_ad285b9463a9553302ab14ebdb7b17392"><div class="ttname"><a href="../../df/d17/classpl_phantom_member_property.htm#ad285b9463a9553302ab14ebdb7b17392">plPhantomMemberProperty::GetValuePtr</a></div><div class="ttdeci">virtual void GetValuePtr(const void *pInstance, void *pObject) const override</div><div class="ttdoc">Writes the value of this property in pInstance to pObject. pObject needs to point to an instance of t...</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:30</div></div>
<div class="ttc" id="aclasspl_phantom_set_property_htm"><div class="ttname"><a href="../../d2/de2/classpl_phantom_set_property.htm">plPhantomSetProperty</a></div><div class="ttdef"><b>Definition</b> PhantomProperty.h:83</div></div>
<div class="ttc" id="aclasspl_phantom_set_property_htm_a3e421847f428ecfc6de27bfa9ac7f92e"><div class="ttname"><a href="../../d2/de2/classpl_phantom_set_property.htm#a3e421847f428ecfc6de27bfa9ac7f92e">plPhantomSetProperty::Remove</a></div><div class="ttdeci">virtual void Remove(void *pInstance, const void *pObject) const override</div><div class="ttdoc">Removes the target of pObject from the set.</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:92</div></div>
<div class="ttc" id="aclasspl_phantom_set_property_htm_a5747ec613616c84aeb76020484bcf001"><div class="ttname"><a href="../../d2/de2/classpl_phantom_set_property.htm#a5747ec613616c84aeb76020484bcf001">plPhantomSetProperty::Contains</a></div><div class="ttdeci">virtual bool Contains(const void *pInstance, const void *pObject) const override</div><div class="ttdoc">Returns whether the target of pObject is in the set.</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:93</div></div>
<div class="ttc" id="aclasspl_phantom_set_property_htm_a7731fa9e1ebd680df064b57600e26646"><div class="ttname"><a href="../../d2/de2/classpl_phantom_set_property.htm#a7731fa9e1ebd680df064b57600e26646">plPhantomSetProperty::GetSpecificType</a></div><div class="ttdeci">virtual const plRTTI * GetSpecificType() const override</div><div class="ttdoc">Returns the type information of the constant property. Use this to cast this property to a specific v...</div><div class="ttdef"><b>Definition</b> PhantomProperty.cpp:175</div></div>
<div class="ttc" id="aclasspl_phantom_set_property_htm_a8141666df6b689b5cca36a20e75c43a0"><div class="ttname"><a href="../../d2/de2/classpl_phantom_set_property.htm#a8141666df6b689b5cca36a20e75c43a0">plPhantomSetProperty::Insert</a></div><div class="ttdeci">virtual void Insert(void *pInstance, const void *pObject) const override</div><div class="ttdoc">Inserts the target of pObject into the set.</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:91</div></div>
<div class="ttc" id="aclasspl_phantom_set_property_htm_ac460ee4da4238c08c3086addd7a04706"><div class="ttname"><a href="../../d2/de2/classpl_phantom_set_property.htm#ac460ee4da4238c08c3086addd7a04706">plPhantomSetProperty::Clear</a></div><div class="ttdeci">virtual void Clear(void *pInstance) const override</div><div class="ttdoc">Clears the set.</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:90</div></div>
<div class="ttc" id="aclasspl_phantom_set_property_htm_ad027b677c4deac53fd78ff5617a4058b"><div class="ttname"><a href="../../d2/de2/classpl_phantom_set_property.htm#ad027b677c4deac53fd78ff5617a4058b">plPhantomSetProperty::IsEmpty</a></div><div class="ttdeci">virtual bool IsEmpty(const void *pInstance) const override</div><div class="ttdoc">Returns whether the set is empty.</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:89</div></div>
<div class="ttc" id="aclasspl_phantom_set_property_htm_adf420ea067c9d992d0ef0ea414b54b5a"><div class="ttname"><a href="../../d2/de2/classpl_phantom_set_property.htm#adf420ea067c9d992d0ef0ea414b54b5a">plPhantomSetProperty::GetValues</a></div><div class="ttdeci">virtual void GetValues(const void *pInstance, plDynamicArray&lt; plVariant &gt; &amp;out_keys) const override</div><div class="ttdoc">Writes the content of the set to out_keys.</div><div class="ttdef"><b>Definition</b> PhantomProperty.h:94</div></div>
<div class="ttc" id="aclasspl_r_t_t_i_htm"><div class="ttname"><a href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a></div><div class="ttdoc">This class holds information about reflected types. Each instance represents one type that is known t...</div><div class="ttdef"><b>Definition</b> RTTI.h:30</div></div>
<div class="ttc" id="aclasspl_variant_htm"><div class="ttname"><a href="../../da/d4c/classpl_variant.htm">plVariant</a></div><div class="ttdoc">plVariant is a class that can store different types of variables, which is useful in situations where...</div><div class="ttdef"><b>Definition</b> Variant.h:44</div></div>
<div class="ttc" id="astructpl_bitflags_htm"><div class="ttname"><a href="../../df/dd9/structpl_bitflags.htm">plBitflags</a></div><div class="ttdoc">The plBitflags class allows you to work with type-safe bitflags.</div><div class="ttdef"><b>Definition</b> Bitflags.h:82</div></div>
<div class="ttc" id="astructpl_enum_htm"><div class="ttname"><a href="../../dd/d09/structpl_enum.htm">plEnum</a></div><div class="ttdoc">A custom enum implementation that allows to define the underlying storage type to control its memory ...</div><div class="ttdef"><b>Definition</b> Enum.h:37</div></div>
<div class="ttc" id="astructpl_function_argument_descriptor_htm"><div class="ttname"><a href="../../d5/d39/structpl_function_argument_descriptor.htm">plFunctionArgumentDescriptor</a></div><div class="ttdef"><b>Definition</b> ReflectedType.h:65</div></div>
<div class="ttc" id="astructpl_function_type_htm_af271404fdafe238815ecd4cf373026b8"><div class="ttname"><a href="../../d9/dc8/structpl_function_type.htm#af271404fdafe238815ecd4cf373026b8">plFunctionType::Enum</a></div><div class="ttdeci">Enum</div><div class="ttdef"><b>Definition</b> AbstractProperty.h:525</div></div>
<div class="ttc" id="astructpl_hybrid_string_htm"><div class="ttname"><a href="../../d2/dea/structpl_hybrid_string.htm">plHybridString&lt; 32, plDefaultAllocatorWrapper &gt;</a></div></div>
<div class="ttc" id="astructpl_reflected_function_descriptor_htm"><div class="ttname"><a href="../../d5/dcd/structpl_reflected_function_descriptor.htm">plReflectedFunctionDescriptor</a></div><div class="ttdoc">Stores the description of a reflected function in a serializable form, used by plReflectedTypeDescrip...</div><div class="ttdef"><b>Definition</b> ReflectedType.h:75</div></div>
<div class="ttc" id="astructpl_reflected_property_descriptor_htm"><div class="ttname"><a href="../../da/d7e/structpl_reflected_property_descriptor.htm">plReflectedPropertyDescriptor</a></div><div class="ttdoc">Stores the description of a reflected property in a serializable form, used by plReflectedTypeDescrip...</div><div class="ttdef"><b>Definition</b> ReflectedType.h:43</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_a18ec4e478d0892d46cd34f4447ab752.htm">Tools</a></li><li class="navelem"><a class="el" href="../../dir_595f99531fecac5ffcb641b224362b43.htm">Libs</a></li><li class="navelem"><a class="el" href="../../dir_9b5d28a44f719084dd63d5a83ee6a415.htm">ToolsFoundation</a></li><li class="navelem"><a class="el" href="../../dir_ab4bebba3739f5cb3fe043d7ccac505e.htm">Reflection</a></li><li class="navelem"><b>PhantomProperty.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
