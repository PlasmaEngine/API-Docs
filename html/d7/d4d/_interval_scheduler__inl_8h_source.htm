<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<!-- BEGIN opengraph metadata -->
<meta property="og:title" content="Doxygen Awesome" />
<meta property="og:image" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta property="og:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<meta property="og:url" content="https://jothepro.github.io/doxygen-awesome-css/" />
<!-- END opengraph metadata -->
<!-- BEGIN twitter metadata -->
<meta name="twitter:image:src" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta name="twitter:title" content="Doxygen Awesome" />
<meta name="twitter:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<!-- END twitter metadata -->
<title>Plasma Engine: Code/Engine/Core/Utils/Implementation/IntervalScheduler_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link rel="icon" type="image/svg+xml" href="logo.drawio.svg"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-paragraph-link.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-tabs.js"></script>
<script type="text/javascript" src="../../toggle-alternative-theme.js"></script>
<script type="text/javascript">
    DoxygenAwesomeFragmentCopyButton.init()
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeParagraphLink.init()
    DoxygenAwesomeInteractiveToc.init()
    DoxygenAwesomeTabs.init()
</script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Plasma Engine
   &#160;<span id="projectnumber">2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d7/d4d/_interval_scheduler__inl_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">IntervalScheduler_inl.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span> </div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span><span class="preprocessor">#include &lt;Foundation/SimdMath/SimdRandom.h&gt;</span></div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span> </div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span>PL_ALWAYS_INLINE plUInt32 plIntervalSchedulerBase::GetHistogramIndex(<a class="code hl_struct" href="../../d1/df6/structpl_time.htm">plTime</a> value)</div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span>{</div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span>  <span class="keywordflow">if</span> (value.<a class="code hl_function" href="../../d1/df6/structpl_time.htm#a8f033fc0c2f036c606c1a15673ad435e">IsZero</a>())</div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span>    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span> </div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span>  <span class="keyword">constexpr</span> plUInt32 maxSlotIndex = HistogramSize - 1;</div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span>  <span class="keyword">const</span> <span class="keywordtype">double</span> x = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">plMath::Max</a>((value - m_MinInterval).GetSeconds() * m_fInvIntervalRange, 0.0);</div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span>  <span class="keyword">const</span> <span class="keywordtype">double</span> i = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#aae02023b382e3990f9ebf91f40473310">plMath::Sqrt</a>(x) * (maxSlotIndex - 1) + 1;</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a314b24989122e22968ae0a11cc872e28">plMath::Min</a>(<span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(i), maxSlotIndex);</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>}</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span> </div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span>PL_ALWAYS_INLINE <a class="code hl_struct" href="../../d1/df6/structpl_time.htm">plTime</a> plIntervalSchedulerBase::GetHistogramSlotValue(plUInt32 uiIndex)</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span>{</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>  <span class="keywordflow">if</span> (uiIndex == 0)</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>    <span class="keywordflow">return</span> <a class="code hl_function" href="../../d1/df6/structpl_time.htm#a48cd39d05bfa55f8504cc3c056576c9e">plTime::MakeZero</a>();</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span> </div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>  <span class="keyword">constexpr</span> <span class="keywordtype">double</span> norm = 1.0 / (HistogramSize - 2.0);</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>  <span class="keyword">const</span> <span class="keywordtype">double</span> x = (uiIndex - 1) * norm;</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>  <span class="keywordflow">return</span> (x * x) * (m_MaxInterval - m_MinInterval) + m_MinInterval;</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>}</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span> </div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span><span class="comment">// static</span></div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>PL_ALWAYS_INLINE <span class="keywordtype">float</span> plIntervalSchedulerBase::GetRandomZeroToOne(<span class="keywordtype">int</span> pos, plUInt32&amp; seed)</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>{</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../df/de1/structpl_simd_random.htm#ae04ea00b3b1f6d624b81f750027e01bb">plSimdRandom::FloatZeroToOne</a>(<a class="code hl_class" href="../../d0/d45/classpl_simd_vec4i.htm">plSimdVec4i</a>(pos), <a class="code hl_class" href="../../d7/d1d/classpl_simd_vec4u.htm">plSimdVec4u</a>(seed++)).x();</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>}</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span> </div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span><span class="keyword">constexpr</span> <a class="code hl_struct" href="../../d1/df6/structpl_time.htm">plTime</a> s_JitterRange = <a class="code hl_function" href="../../d1/df6/structpl_time.htm#ab0bdbb8d9dd869dd2b7a578b9add7275">plTime::MakeFromMicroseconds</a>(10);</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span> </div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span><span class="comment">// static</span></div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>PL_ALWAYS_INLINE <a class="code hl_struct" href="../../d1/df6/structpl_time.htm">plTime</a> plIntervalSchedulerBase::GetRandomTimeJitter(<span class="keywordtype">int</span> pos, plUInt32&amp; seed)</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span>{</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>  <span class="keyword">const</span> <span class="keywordtype">float</span> x = <a class="code hl_function" href="../../df/de1/structpl_simd_random.htm#ae04ea00b3b1f6d624b81f750027e01bb">plSimdRandom::FloatZeroToOne</a>(<a class="code hl_class" href="../../d0/d45/classpl_simd_vec4i.htm">plSimdVec4i</a>(pos), <a class="code hl_class" href="../../d7/d1d/classpl_simd_vec4u.htm">plSimdVec4u</a>(seed++)).x();</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>  <span class="keywordflow">return</span> s_JitterRange * (x * 2.0f - 1.0f);</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>}</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span> </div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span> </div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span><span class="keywordtype">bool</span> <a class="code hl_class" href="../../de/d76/classpl_interval_scheduler.htm">plIntervalScheduler&lt;T&gt;::Data::IsValid</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>  <span class="keywordflow">return</span> m_Interval.<a class="code hl_function" href="../../d1/df6/structpl_time.htm#a962c549d5399bc05f4c82ef7d201aef9">IsZeroOrPositive</a>();</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>}</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span> </div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span><span class="keywordtype">void</span> <a class="code hl_class" href="../../de/d76/classpl_interval_scheduler.htm">plIntervalScheduler&lt;T&gt;::Data::MarkAsInvalid</a>()</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>{</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>  m_Interval = <a class="code hl_function" href="../../d1/df6/structpl_time.htm#a3d1efa40afb39795fad0f3b6401626f1">plTime::MakeFromSeconds</a>(-1);</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>}</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span> </div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span> </div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span><span class="keywordtype">void</span> <a class="code hl_class" href="../../de/d76/classpl_interval_scheduler.htm">plIntervalScheduler&lt;T&gt;::AddOrUpdateWork</a>(<span class="keyword">const</span> T&amp; work, <a class="code hl_struct" href="../../d1/df6/structpl_time.htm">plTime</a> interval)</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>{</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>  <span class="keyword">typename</span> DataMap::Iterator it;</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>  <span class="keywordflow">if</span> (m_WorkIdToData.<a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a48353ae8728017bf107e01ba0b8b3841">TryGetValue</a>(work, it))</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>  {</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>    <span class="keyword">auto</span>&amp; data = it.Value();</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>    <a class="code hl_struct" href="../../d1/df6/structpl_time.htm">plTime</a> oldInterval = data.m_Interval;</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>    <span class="keywordflow">if</span> (interval == oldInterval)</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>      <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span> </div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>    data.MarkAsInvalid();</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span> </div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>    <span class="keyword">const</span> plUInt32 uiHistogramIndex = GetHistogramIndex(oldInterval);</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>    m_Histogram[uiHistogramIndex]--;</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>  }</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span> </div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>  Data data;</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>  data.m_Work = work;</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>  data.m_Interval = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">plMath::Max</a>(interval, <a class="code hl_function" href="../../d1/df6/structpl_time.htm#a48cd39d05bfa55f8504cc3c056576c9e">plTime::MakeZero</a>());</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>  data.m_DueTime = m_CurrentTime + GetRandomZeroToOne(m_Data.<a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a7836b1f7942107dbda516f8ab84acc3c">GetCount</a>(), m_uiSeed) * data.m_Interval;</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>  data.m_LastScheduledTime = m_CurrentTime;</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span> </div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>  m_WorkIdToData[work] = InsertData(data);</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span> </div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>  <span class="keyword">const</span> plUInt32 uiHistogramIndex = GetHistogramIndex(data.m_Interval);</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>  m_Histogram[uiHistogramIndex]++;</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>}</div>
<div class="foldopen" id="foldopen00084" data-start="{" data-end="}">
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno"><a class="line" href="../../de/d76/classpl_interval_scheduler.htm#aa5662f242fd88299fedfbe0c3c0a2de8">   84</a></span> </div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span><span class="keywordtype">void</span> <a class="code hl_class" href="../../de/d76/classpl_interval_scheduler.htm">plIntervalScheduler&lt;T&gt;::RemoveWork</a>(<span class="keyword">const</span> T&amp; work)</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>{</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>  <span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">DataMap::Iterator</a> it;</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>  <span class="keywordflow">if</span> (m_WorkIdToData.<a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#aa03f76a0cc178f84de2c32937c9ace5c">Remove</a>(work, &amp;it))</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>  {</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>    <span class="keyword">auto</span>&amp; data = it.<a class="code hl_function" href="../../d3/d91/structpl_map_base_iterator_base.htm#ac5c5b9eaafa638ce83a1b21df77ac329">Value</a>();</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>    <a class="code hl_struct" href="../../d1/df6/structpl_time.htm">plTime</a> oldInterval = data.m_Interval;</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>    data.MarkAsInvalid();</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span> </div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>    <span class="keyword">const</span> plUInt32 uiHistogramIndex = GetHistogramIndex(oldInterval);</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>    m_Histogram[uiHistogramIndex]--;</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>  }</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>}</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span> </div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span><a class="code hl_struct" href="../../d1/df6/structpl_time.htm">plTime</a> <a class="code hl_class" href="../../de/d76/classpl_interval_scheduler.htm">plIntervalScheduler&lt;T&gt;::GetInterval</a>(<span class="keyword">const</span> T&amp; work)<span class="keyword"> const</span></div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>  <span class="keyword">typename</span> DataMap::Iterator it;</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>  PL_VERIFY(m_WorkIdToData.<a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a48353ae8728017bf107e01ba0b8b3841">TryGetValue</a>(work, it), <span class="stringliteral">&quot;Entry not found&quot;</span>);</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>  <span class="keywordflow">return</span> it.Value().m_Interval;</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>}</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span> </div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00109" data-start="{" data-end="}">
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno"><a class="line" href="../../de/d76/classpl_interval_scheduler.htm#aa5662f242fd88299fedfbe0c3c0a2de8">  109</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../de/d76/classpl_interval_scheduler.htm#aa5662f242fd88299fedfbe0c3c0a2de8">plIntervalScheduler&lt;T&gt;::Update</a>(<a class="code hl_struct" href="../../d1/df6/structpl_time.htm">plTime</a> deltaTime, <a class="code hl_struct" href="../../df/df1/structpl_delegate.htm">RunWorkCallback</a> runWorkCallback)</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>{</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>  <span class="keywordflow">if</span> (deltaTime.<a class="code hl_function" href="../../d1/df6/structpl_time.htm#a3480b7af9b914d2b316ee190205d5e34">IsZeroOrNegative</a>())</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>    <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span> </div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>  m_CurrentTime += deltaTime;</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span> </div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>  <span class="keywordflow">if</span> (m_Data.<a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a5bee4eaab7d49005eba4c3387d37541d">IsEmpty</a>())</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>    <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span> </div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>  {</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>    <span class="keywordtype">double</span> fNumWork = 0;</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>    <span class="keywordflow">for</span> (plUInt32 i = 1; i &lt; HistogramSize; ++i)</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>    {</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>      fNumWork += (1.0 / <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">plMath::Max</a>(m_HistogramSlotValues[i], deltaTime).GetSeconds()) * m_Histogram[i];</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>    }</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>    fNumWork *= deltaTime.<a class="code hl_function" href="../../d1/df6/structpl_time.htm#aa2f9feda7c35e5293c476438c5ad546a">GetSeconds</a>();</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span> </div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>    <span class="keyword">const</span> <span class="keywordtype">float</span> fRemainder = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a56d77e019b9b7dcc6c27ef6a5714851d">plMath::Fraction</a>(fNumWork));</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>    <span class="keyword">const</span> <span class="keywordtype">int</span> pos = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(m_CurrentTime.<a class="code hl_function" href="../../d1/df6/structpl_time.htm#a90b23f008cab12333f495a11ca3073fe">GetNanoseconds</a>());</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>    <span class="keyword">const</span> plUInt32 extra = GetRandomZeroToOne(pos, m_uiSeed) &lt; fRemainder ? 1 : 0;</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>    <span class="keyword">const</span> plUInt32 uiScheduleCount = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a314b24989122e22968ae0a11cc872e28">plMath::Min</a>(<span class="keyword">static_cast&lt;</span>plUInt32<span class="keyword">&gt;</span>(fNumWork) + extra + m_Histogram[0], m_Data.<a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a7836b1f7942107dbda516f8ab84acc3c">GetCount</a>());</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span> </div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>    <span class="comment">// schedule work</span></div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>    {</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>      <span class="keyword">auto</span> RunWork = [&amp;](<span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">DataMap::Iterator</a> it, plUInt32 uiIndex) {</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>        <span class="keyword">auto</span>&amp; data = it.<a class="code hl_function" href="../../d3/d91/structpl_map_base_iterator_base.htm#ac5c5b9eaafa638ce83a1b21df77ac329">Value</a>();</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>        <span class="keywordflow">if</span> (data.IsValid())</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>        {</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>          <span class="keywordflow">if</span> (runWorkCallback.IsValid())</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>          {</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>            runWorkCallback(data.m_Work, m_CurrentTime - data.m_LastScheduledTime);</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>          }</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span> </div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>          <span class="comment">// add a little bit of random jitter so we don&#39;t end up with perfect timings that might collide with other work</span></div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>          data.m_DueTime = m_CurrentTime + data.m_Interval + GetRandomTimeJitter(uiIndex, m_uiSeed);</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>          data.m_LastScheduledTime = m_CurrentTime;</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>        }</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span> </div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>        m_ScheduledWork.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#a3e8ff51c4a7aa0afcfac3aa6206e08ff">PushBack</a>(it);</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>      };</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span> </div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>      <span class="keyword">auto</span> it = m_Data.<a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a8f38cc470721aee5fd73ceddfbd79064">GetIterator</a>();</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>      <span class="keywordflow">for</span> (plUInt32 i = 0; i &lt; uiScheduleCount; ++i, ++it)</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>      {</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>        RunWork(it, i);</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>      }</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span> </div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>      <span class="comment">// check if the next works have a zero interval if so execute them as well to fulfill the every frame guarantee</span></div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>      plUInt32 uiNumExtras = 0;</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>      <span class="keywordflow">while</span> (it.<a class="code hl_function" href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a36468855199076bf69a567c64da9622e">IsValid</a>())</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>      {</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>        <span class="keyword">auto</span>&amp; data = it.<a class="code hl_function" href="../../d3/d91/structpl_map_base_iterator_base.htm#ac5c5b9eaafa638ce83a1b21df77ac329">Value</a>();</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>        <span class="keywordflow">if</span> (data.m_Interval.IsPositive())</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>          <span class="keywordflow">break</span>;</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span> </div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>        RunWork(it, uiNumExtras);</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span> </div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>        ++uiNumExtras;</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>        ++it;</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>      }</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>    }</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span> </div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>    <span class="comment">// re-sort</span></div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>    <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; it : m_ScheduledWork)</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>    {</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>      <span class="keywordflow">if</span> (it.Value().IsValid())</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>      {</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>        <span class="comment">// make a copy of data and re-insert at new due time</span></div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>        Data data = it.<a class="code hl_function" href="../../d3/d91/structpl_map_base_iterator_base.htm#ac5c5b9eaafa638ce83a1b21df77ac329">Value</a>();</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>        m_WorkIdToData[data.m_Work] = InsertData(data);</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>      }</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span> </div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>      m_Data.<a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a70634f90fcf604ed5e48d867cabd532e">Remove</a>(it);</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>    }</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>    m_ScheduledWork.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#a595f66bad2baf69b07afd02a8d8e43c6">Clear</a>();</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>  }</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>}</div>
</div>
</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span> </div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span><span class="keywordtype">void</span> <a class="code hl_class" href="../../de/d76/classpl_interval_scheduler.htm">plIntervalScheduler&lt;T&gt;::Clear</a>()</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>{</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>  m_CurrentTime = <a class="code hl_function" href="../../d1/df6/structpl_time.htm#a48cd39d05bfa55f8504cc3c056576c9e">plTime::MakeZero</a>();</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>  m_uiSeed = 0;</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>  <a class="code hl_function" href="../../df/d4d/classpl_memory_utils.htm#aeb44ed929d54c464ebc79e29c0e6f62e">plMemoryUtils::ZeroFill</a>(m_Histogram, HistogramSize);</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span> </div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>  m_Data.<a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a4781441e042445a110a5f31fe570a639">Clear</a>();</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>  m_WorkIdToData.<a class="code hl_function" href="../../d1/d77/classpl_hash_table_base.htm#a95c6a29c1fdd09be149dde078baa3b89">Clear</a>();</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>}</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span> </div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>PL_FORCE_INLINE <span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/d91/structpl_map_base_iterator_base.htm">plIntervalScheduler&lt;T&gt;::DataMap::Iterator</a> <a class="code hl_class" href="../../de/d76/classpl_interval_scheduler.htm">plIntervalScheduler&lt;T&gt;::InsertData</a>(Data&amp; data)</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>{</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>  <span class="comment">// make sure that we have a unique due time since the map can&#39;t store multiple keys with the same value</span></div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>  <span class="keywordtype">int</span> pos = 0;</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>  <span class="keywordflow">while</span> (m_Data.<a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a038ae61aac3d268ee637b8069fff8b79">Contains</a>(data.m_DueTime))</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>  {</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>    data.m_DueTime += GetRandomTimeJitter(pos++, m_uiSeed);</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>  }</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span> </div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span>  <span class="keywordflow">return</span> m_Data.<a class="code hl_function" href="../../d9/dbe/classpl_map_base.htm#a6c58266978a54ec4697ba4a981c1b80b">Insert</a>(data.m_DueTime, data);</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>}</div>
<div class="ttc" id="aclasspl_array_base_htm_a3e8ff51c4a7aa0afcfac3aa6206e08ff"><div class="ttname"><a href="../../d4/dc8/classpl_array_base.htm#a3e8ff51c4a7aa0afcfac3aa6206e08ff">plArrayBase::PushBack</a></div><div class="ttdeci">void PushBack(const T &amp;value)</div><div class="ttdoc">Pushes value at the end of the array.</div><div class="ttdef"><b>Definition</b> ArrayBase_inl.h:333</div></div>
<div class="ttc" id="aclasspl_array_base_htm_a595f66bad2baf69b07afd02a8d8e43c6"><div class="ttname"><a href="../../d4/dc8/classpl_array_base.htm#a595f66bad2baf69b07afd02a8d8e43c6">plArrayBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Clears the array.</div><div class="ttdef"><b>Definition</b> ArrayBase_inl.h:184</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a48353ae8728017bf107e01ba0b8b3841"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a48353ae8728017bf107e01ba0b8b3841">plHashTableBase::TryGetValue</a></div><div class="ttdeci">bool TryGetValue(const CompatibleKeyType &amp;key, ValueType &amp;out_value) const</div><div class="ttdoc">Returns whether an entry with the given key was found and if found writes out the corresponding value...</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_a95c6a29c1fdd09be149dde078baa3b89"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#a95c6a29c1fdd09be149dde078baa3b89">plHashTableBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Clears the table.</div><div class="ttdef"><b>Definition</b> HashTable_inl.h:355</div></div>
<div class="ttc" id="aclasspl_hash_table_base_htm_aa03f76a0cc178f84de2c32937c9ace5c"><div class="ttname"><a href="../../d1/d77/classpl_hash_table_base.htm#aa03f76a0cc178f84de2c32937c9ace5c">plHashTableBase::Remove</a></div><div class="ttdeci">bool Remove(const CompatibleKeyType &amp;key, ValueType *out_pOldValue=nullptr)</div><div class="ttdoc">Removes the entry with the given key. Returns whether an entry was removed and optionally writes out ...</div></div>
<div class="ttc" id="aclasspl_interval_scheduler_htm"><div class="ttname"><a href="../../de/d76/classpl_interval_scheduler.htm">plIntervalScheduler</a></div><div class="ttdef"><b>Definition</b> IntervalScheduler.h:65</div></div>
<div class="ttc" id="aclasspl_interval_scheduler_htm_aa5662f242fd88299fedfbe0c3c0a2de8"><div class="ttname"><a href="../../de/d76/classpl_interval_scheduler.htm#aa5662f242fd88299fedfbe0c3c0a2de8">plIntervalScheduler::Update</a></div><div class="ttdeci">void Update(plTime deltaTime, RunWorkCallback runWorkCallback)</div><div class="ttdoc">Advances the scheduler by deltaTime and triggers runWorkCallback for each work that should be run dur...</div><div class="ttdef"><b>Definition</b> IntervalScheduler_inl.h:109</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a038ae61aac3d268ee637b8069fff8b79"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a038ae61aac3d268ee637b8069fff8b79">plMapBase::Contains</a></div><div class="ttdeci">bool Contains(const CompatibleKeyType &amp;key) const</div><div class="ttdoc">Checks whether the given key is in the container.</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a4781441e042445a110a5f31fe570a639"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a4781441e042445a110a5f31fe570a639">plMapBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Destroys all elements in the map and resets its size to zero.</div><div class="ttdef"><b>Definition</b> Map_inl.h:175</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a5bee4eaab7d49005eba4c3387d37541d"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a5bee4eaab7d49005eba4c3387d37541d">plMapBase::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns whether there are no elements in the map. O(1) operation.</div><div class="ttdef"><b>Definition</b> Map_inl.h:194</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a6c58266978a54ec4697ba4a981c1b80b"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a6c58266978a54ec4697ba4a981c1b80b">plMapBase::Insert</a></div><div class="ttdeci">Iterator Insert(CompatibleKeyType &amp;&amp;key, CompatibleValueType &amp;&amp;value)</div><div class="ttdoc">Inserts the key/value pair into the tree and returns an Iterator to it. O(log n) operation.</div><div class="ttdef"><b>Definition</b> Map_inl.h:535</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a70634f90fcf604ed5e48d867cabd532e"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a70634f90fcf604ed5e48d867cabd532e">plMapBase::Remove</a></div><div class="ttdeci">bool Remove(const CompatibleKeyType &amp;key)</div><div class="ttdoc">Erases the key/value pair with the given key, if it exists. O(log n) operation.</div><div class="ttdef"><b>Definition</b> Map_inl.h:545</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a7836b1f7942107dbda516f8ab84acc3c"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a7836b1f7942107dbda516f8ab84acc3c">plMapBase::GetCount</a></div><div class="ttdeci">plUInt32 GetCount() const</div><div class="ttdoc">Returns the number of elements currently stored in the map. O(1) operation.</div><div class="ttdef"><b>Definition</b> Map_inl.h:200</div></div>
<div class="ttc" id="aclasspl_map_base_htm_a8f38cc470721aee5fd73ceddfbd79064"><div class="ttname"><a href="../../d9/dbe/classpl_map_base.htm#a8f38cc470721aee5fd73ceddfbd79064">plMapBase::GetIterator</a></div><div class="ttdeci">Iterator GetIterator()</div><div class="ttdoc">Returns an Iterator to the very first element.</div><div class="ttdef"><b>Definition</b> Map_inl.h:207</div></div>
<div class="ttc" id="aclasspl_memory_utils_htm_aeb44ed929d54c464ebc79e29c0e6f62e"><div class="ttname"><a href="../../df/d4d/classpl_memory_utils.htm#aeb44ed929d54c464ebc79e29c0e6f62e">plMemoryUtils::ZeroFill</a></div><div class="ttdeci">static void ZeroFill(T *pDestination, size_t uiCount=1)</div><div class="ttdoc">Zeros every byte in the provided memory buffer.</div></div>
<div class="ttc" id="aclasspl_simd_vec4i_htm"><div class="ttname"><a href="../../d0/d45/classpl_simd_vec4i.htm">plSimdVec4i</a></div><div class="ttdoc">A SIMD 4-component vector class of signed 32b integers.</div><div class="ttdef"><b>Definition</b> SimdVec4i.h:9</div></div>
<div class="ttc" id="aclasspl_simd_vec4u_htm"><div class="ttname"><a href="../../d7/d1d/classpl_simd_vec4u.htm">plSimdVec4u</a></div><div class="ttdoc">A SIMD 4-component vector class of unsigned 32b integers.</div><div class="ttdef"><b>Definition</b> SimdVec4u.h:7</div></div>
<div class="ttc" id="anamespacepl_math_htm_a314b24989122e22968ae0a11cc872e28"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a314b24989122e22968ae0a11cc872e28">plMath::Min</a></div><div class="ttdeci">constexpr PL_ALWAYS_INLINE T Min(T f1, T f2)</div><div class="ttdoc">Returns the smaller value, f1 or f2.</div><div class="ttdef"><b>Definition</b> Math_inl.h:27</div></div>
<div class="ttc" id="anamespacepl_math_htm_a56d77e019b9b7dcc6c27ef6a5714851d"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a56d77e019b9b7dcc6c27ef6a5714851d">plMath::Fraction</a></div><div class="ttdeci">PL_ALWAYS_INLINE Type Fraction(Type f)</div><div class="ttdoc">Returns the fraction-part of f.</div><div class="ttdef"><b>Definition</b> Math_inl.h:305</div></div>
<div class="ttc" id="anamespacepl_math_htm_aae02023b382e3990f9ebf91f40473310"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#aae02023b382e3990f9ebf91f40473310">plMath::Sqrt</a></div><div class="ttdeci">PL_ALWAYS_INLINE double Sqrt(double f)</div><div class="ttdoc">Returns the square root of f.</div><div class="ttdef"><b>Definition</b> MathDouble_inl.h:99</div></div>
<div class="ttc" id="anamespacepl_math_htm_ad724a3f51a1faa9bcc3e6a53fd6b9a4f"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#ad724a3f51a1faa9bcc3e6a53fd6b9a4f">plMath::Max</a></div><div class="ttdeci">constexpr PL_ALWAYS_INLINE T Max(T f1, T f2)</div><div class="ttdoc">Returns the greater value, f1 or f2.</div><div class="ttdef"><b>Definition</b> Math_inl.h:39</div></div>
<div class="ttc" id="astructpl_delegate_htm"><div class="ttname"><a href="../../df/df1/structpl_delegate.htm">plDelegate</a></div><div class="ttdoc">A generic delegate class which supports static functions and member functions.</div><div class="ttdef"><b>Definition</b> Delegate.h:76</div></div>
<div class="ttc" id="astructpl_map_base_const_iterator_base_htm_a36468855199076bf69a567c64da9622e"><div class="ttname"><a href="../../d9/dad/structpl_map_base_const_iterator_base.htm#a36468855199076bf69a567c64da9622e">plMapBaseConstIteratorBase::IsValid</a></div><div class="ttdeci">PL_ALWAYS_INLINE bool IsValid() const</div><div class="ttdoc">Checks whether this iterator points to a valid element.</div><div class="ttdef"><b>Definition</b> Map.h:27</div></div>
<div class="ttc" id="astructpl_map_base_iterator_base_htm"><div class="ttname"><a href="../../d3/d91/structpl_map_base_iterator_base.htm">plMapBaseIteratorBase</a></div><div class="ttdoc">Forward Iterator to iterate over all elements in sorted order.</div><div class="ttdef"><b>Definition</b> Map.h:103</div></div>
<div class="ttc" id="astructpl_map_base_iterator_base_htm_ac5c5b9eaafa638ce83a1b21df77ac329"><div class="ttname"><a href="../../d3/d91/structpl_map_base_iterator_base.htm#ac5c5b9eaafa638ce83a1b21df77ac329">plMapBaseIteratorBase::Value</a></div><div class="ttdeci">PL_FORCE_INLINE ValueType &amp; Value()</div><div class="ttdoc">Returns the 'value' of the element that this iterator points to.</div><div class="ttdef"><b>Definition</b> Map.h:119</div></div>
<div class="ttc" id="astructpl_simd_random_htm_ae04ea00b3b1f6d624b81f750027e01bb"><div class="ttname"><a href="../../df/de1/structpl_simd_random.htm#ae04ea00b3b1f6d624b81f750027e01bb">plSimdRandom::FloatZeroToOne</a></div><div class="ttdeci">static plSimdVec4f FloatZeroToOne(const plSimdVec4i &amp;vPosition, const plSimdVec4u &amp;vSeed=plSimdVec4u::MakeZero())</div><div class="ttdoc">Returns 4 random float values in range [0.0 ; 1.0], ie. including zero and one.</div><div class="ttdef"><b>Definition</b> SimdRandom_inl.h:24</div></div>
<div class="ttc" id="astructpl_time_htm"><div class="ttname"><a href="../../d1/df6/structpl_time.htm">plTime</a></div><div class="ttdoc">The time class encapsulates a double value storing the time in seconds.</div><div class="ttdef"><b>Definition</b> Time.h:12</div></div>
<div class="ttc" id="astructpl_time_htm_a3480b7af9b914d2b316ee190205d5e34"><div class="ttname"><a href="../../d1/df6/structpl_time.htm#a3480b7af9b914d2b316ee190205d5e34">plTime::IsZeroOrNegative</a></div><div class="ttdeci">PL_ALWAYS_INLINE constexpr bool IsZeroOrNegative() const</div><div class="ttdoc">Returns true if the stored time is zero or negative.</div><div class="ttdef"><b>Definition</b> Time.h:59</div></div>
<div class="ttc" id="astructpl_time_htm_a3d1efa40afb39795fad0f3b6401626f1"><div class="ttname"><a href="../../d1/df6/structpl_time.htm#a3d1efa40afb39795fad0f3b6401626f1">plTime::MakeFromSeconds</a></div><div class="ttdeci">PL_ALWAYS_INLINE static constexpr plTime MakeFromSeconds(double fSeconds)</div><div class="ttdoc">Creates an instance of plTime that was initialized from seconds.</div><div class="ttdef"><b>Definition</b> Time.h:30</div></div>
<div class="ttc" id="astructpl_time_htm_a48cd39d05bfa55f8504cc3c056576c9e"><div class="ttname"><a href="../../d1/df6/structpl_time.htm#a48cd39d05bfa55f8504cc3c056576c9e">plTime::MakeZero</a></div><div class="ttdeci">PL_ALWAYS_INLINE static constexpr plTime MakeZero()</div><div class="ttdoc">Creates an instance of plTime that was initialized with zero.</div><div class="ttdef"><b>Definition</b> Time.h:42</div></div>
<div class="ttc" id="astructpl_time_htm_a8f033fc0c2f036c606c1a15673ad435e"><div class="ttname"><a href="../../d1/df6/structpl_time.htm#a8f033fc0c2f036c606c1a15673ad435e">plTime::IsZero</a></div><div class="ttdeci">PL_ALWAYS_INLINE constexpr bool IsZero() const</div><div class="ttdoc">Returns true if the stored time is exactly zero. That typically means the value was not changed from ...</div><div class="ttdef"><b>Definition</b> Time.h:50</div></div>
<div class="ttc" id="astructpl_time_htm_a90b23f008cab12333f495a11ca3073fe"><div class="ttname"><a href="../../d1/df6/structpl_time.htm#a90b23f008cab12333f495a11ca3073fe">plTime::GetNanoseconds</a></div><div class="ttdeci">constexpr double GetNanoseconds() const</div><div class="ttdoc">Returns the nanoseconds value.</div><div class="ttdef"><b>Definition</b> Time_inl.h:15</div></div>
<div class="ttc" id="astructpl_time_htm_a962c549d5399bc05f4c82ef7d201aef9"><div class="ttname"><a href="../../d1/df6/structpl_time.htm#a962c549d5399bc05f4c82ef7d201aef9">plTime::IsZeroOrPositive</a></div><div class="ttdeci">PL_ALWAYS_INLINE constexpr bool IsZeroOrPositive() const</div><div class="ttdoc">Returns true if the stored time is zero or positive.</div><div class="ttdef"><b>Definition</b> Time.h:62</div></div>
<div class="ttc" id="astructpl_time_htm_aa2f9feda7c35e5293c476438c5ad546a"><div class="ttname"><a href="../../d1/df6/structpl_time.htm#aa2f9feda7c35e5293c476438c5ad546a">plTime::GetSeconds</a></div><div class="ttdeci">constexpr double GetSeconds() const</div><div class="ttdoc">Returns the seconds value.</div><div class="ttdef"><b>Definition</b> Time_inl.h:30</div></div>
<div class="ttc" id="astructpl_time_htm_ab0bdbb8d9dd869dd2b7a578b9add7275"><div class="ttname"><a href="../../d1/df6/structpl_time.htm#ab0bdbb8d9dd869dd2b7a578b9add7275">plTime::MakeFromMicroseconds</a></div><div class="ttdeci">PL_ALWAYS_INLINE static constexpr plTime MakeFromMicroseconds(double fMicroseconds)</div><div class="ttdoc">Creates an instance of plTime that was initialized from microseconds.</div><div class="ttdef"><b>Definition</b> Time.h:22</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_e62ae2b329024d6cec02491cff116055.htm">Core</a></li><li class="navelem"><a class="el" href="../../dir_25d93f1d622147133e6e3a1704705773.htm">Utils</a></li><li class="navelem"><a class="el" href="../../dir_ee3a6acb20f2d9da5604a4aa61afac15.htm">Implementation</a></li><li class="navelem"><b>IntervalScheduler_inl.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
