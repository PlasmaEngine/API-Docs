<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>plEngine: plSemaphore Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only-darkmode-toggle.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">plEngine<span id="projectnumber">&#160;Release 2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('db/d53/classpl_semaphore.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="../../d6/d96/classpl_semaphore-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plSemaphore Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p>A semaphore is used to synchronize threads, similar to a mutex (see <a class="el" href="../../d1/df4/classpl_mutex.htm" title="Provides a simple mechanism for mutual exclusion to prevent multiple threads from accessing a shared ...">plMutex</a>).  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d2/d6d/_semaphore_8h_source.htm">Semaphore.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a8c323bcec00235388951f0b8b24eb128" id="r_a8c323bcec00235388951f0b8b24eb128"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a8c323bcec00235388951f0b8b24eb128">Create</a> (plUInt32 uiInitialTokenCount=0, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sSharedName=<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>())</td></tr>
<tr class="memdesc:a8c323bcec00235388951f0b8b24eb128"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attempts to create a new semaphore with an initial number of available tokens.  <br /></td></tr>
<tr class="separator:a8c323bcec00235388951f0b8b24eb128"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd9220ffe8e23f315165e8e3c2477668" id="r_acd9220ffe8e23f315165e8e3c2477668"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#acd9220ffe8e23f315165e8e3c2477668">Open</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sSharedName)</td></tr>
<tr class="memdesc:acd9220ffe8e23f315165e8e3c2477668"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attempts to open an existing named semaphore.  <br /></td></tr>
<tr class="separator:acd9220ffe8e23f315165e8e3c2477668"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7496251e04442e0d07f164ca343d465" id="r_ab7496251e04442e0d07f164ca343d465"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab7496251e04442e0d07f164ca343d465">AcquireToken</a> ()</td></tr>
<tr class="memdesc:ab7496251e04442e0d07f164ca343d465"><td class="mdescLeft">&#160;</td><td class="mdescRight">Waits until a token is available and acquires it.  <br /></td></tr>
<tr class="separator:ab7496251e04442e0d07f164ca343d465"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ba16c032f560d36a87d65a5652ff648" id="r_a6ba16c032f560d36a87d65a5652ff648"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6ba16c032f560d36a87d65a5652ff648">ReturnToken</a> ()</td></tr>
<tr class="memdesc:a6ba16c032f560d36a87d65a5652ff648"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a single token. If another thread is currently waiting for a token, this will wake it up.  <br /></td></tr>
<tr class="separator:a6ba16c032f560d36a87d65a5652ff648"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b4c3fc4e2365d46c0dcf039f875879c" id="r_a8b4c3fc4e2365d46c0dcf039f875879c"><td class="memItemLeft" align="right" valign="top"><a id="a8b4c3fc4e2365d46c0dcf039f875879c" name="a8b4c3fc4e2365d46c0dcf039f875879c"></a>
<a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><b>TryAcquireToken</b> (<a class="el" href="../../d1/df6/structpl_time.htm">plTime</a> timeout=<a class="el" href="../../d1/df6/structpl_time.htm#a48cd39d05bfa55f8504cc3c056576c9e">plTime::MakeZero</a>())</td></tr>
<tr class="memdesc:a8b4c3fc4e2365d46c0dcf039f875879c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="#ab7496251e04442e0d07f164ca343d465" title="Waits until a token is available and acquires it.">AcquireToken()</a> but returns immediately with PL_FAILURE, if currently not tokens are available. <br /></td></tr>
<tr class="separator:a8b4c3fc4e2365d46c0dcf039f875879c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A semaphore is used to synchronize threads, similar to a mutex (see <a class="el" href="../../d1/df4/classpl_mutex.htm" title="Provides a simple mechanism for mutual exclusion to prevent multiple threads from accessing a shared ...">plMutex</a>). </p>
<p>There are three main differences to a mutex:</p><ol type="1">
<li>The thread that acquires a token from a semaphore and the one that returns a token, don't have to be the same.</li>
<li>A semaphore can be locked up to N times by multiple threads in parallel. So it can be used to implement constructs like single-writer / multiple/readers.</li>
<li>A 'named' semaphore can be opened by other processes as well, which allows you to implement the basics for inter process communication (IPC).</li>
</ol>
<p>Semaphores are quite a bit slower than mutexes (10x or so), so don't use them unless you need the added flexibility.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d1/df4/classpl_mutex.htm" title="Provides a simple mechanism for mutual exclusion to prevent multiple threads from accessing a shared ...">plMutex</a>, <a class="el" href="../../dc/d2a/classpl_condition_variable.htm" title="Condition variables are used to put threads to sleep and wake them up upon certain events.">plConditionVariable</a> </dd></dl>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="ab7496251e04442e0d07f164ca343d465" name="ab7496251e04442e0d07f164ca343d465"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7496251e04442e0d07f164ca343d465">&#9670;&#160;</a></span>AcquireToken()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void plSemaphore::AcquireToken </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Waits until a token is available and acquires it. </p>
<p>Use <a class="el" href="#a8b4c3fc4e2365d46c0dcf039f875879c" title="Same as AcquireToken() but returns immediately with PL_FAILURE, if currently not tokens are available...">TryAcquireToken()</a> to prevent blocking if desired. <a class="el" href="#ab7496251e04442e0d07f164ca343d465" title="Waits until a token is available and acquires it.">AcquireToken()</a> and <a class="el" href="#a6ba16c032f560d36a87d65a5652ff648" title="Returns a single token. If another thread is currently waiting for a token, this will wake it up.">ReturnToken()</a> may be called from different threads. </p>

</div>
</div>
<a id="a8c323bcec00235388951f0b8b24eb128" name="a8c323bcec00235388951f0b8b24eb128"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c323bcec00235388951f0b8b24eb128">&#9670;&#160;</a></span>Create()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/dce/structpl_result.htm">plResult</a> plSemaphore::Create </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiInitialTokenCount</em></span><span class="paramdefsep"> = </span><span class="paramdefval">0</span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sSharedName</em></span><span class="paramdefsep"> = </span><span class="paramdefval"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a>()</span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Attempts to create a new semaphore with an initial number of available tokens. </p>
<p>If szSharedName is a non-empty string, a 'named' semaphore is created, which can be opened on other processes as well.</p>
<p>This call can fail, if a semaphore with the same name already exists. Use <a class="el" href="#acd9220ffe8e23f315165e8e3c2477668" title="Attempts to open an existing named semaphore.">plSemaphore::Open()</a> instead. </p>

</div>
</div>
<a id="acd9220ffe8e23f315165e8e3c2477668" name="acd9220ffe8e23f315165e8e3c2477668"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd9220ffe8e23f315165e8e3c2477668">&#9670;&#160;</a></span>Open()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/dce/structpl_result.htm">plResult</a> plSemaphore::Open </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sSharedName</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Attempts to open an existing named semaphore. </p>
<p>Fails if no such semaphore exists. </p>

</div>
</div>
<a id="a6ba16c032f560d36a87d65a5652ff648" name="a6ba16c032f560d36a87d65a5652ff648"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ba16c032f560d36a87d65a5652ff648">&#9670;&#160;</a></span>ReturnToken()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void plSemaphore::ReturnToken </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a single token. If another thread is currently waiting for a token, this will wake it up. </p>
<p><a class="el" href="#ab7496251e04442e0d07f164ca343d465" title="Waits until a token is available and acquires it.">AcquireToken()</a> and <a class="el" href="#a6ba16c032f560d36a87d65a5652ff648" title="Returns a single token. If another thread is currently waiting for a token, this will wake it up.">ReturnToken()</a> may be called from different threads. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/Engine/Foundation/Threading/<a class="el" href="../../d2/d6d/_semaphore_8h_source.htm">Semaphore.h</a></li>
<li>Code/Engine/Foundation/Platform/Posix/<a class="el" href="../../db/d4e/_semaphore___posix_8h_source.htm">Semaphore_Posix.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../db/d53/classpl_semaphore.htm">plSemaphore</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
