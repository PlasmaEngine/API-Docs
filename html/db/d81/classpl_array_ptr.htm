<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<!-- BEGIN opengraph metadata -->
<meta property="og:title" content="Doxygen Awesome" />
<meta property="og:image" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta property="og:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<meta property="og:url" content="https://jothepro.github.io/doxygen-awesome-css/" />
<!-- END opengraph metadata -->
<!-- BEGIN twitter metadata -->
<meta name="twitter:image:src" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta name="twitter:title" content="Doxygen Awesome" />
<meta name="twitter:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<!-- END twitter metadata -->
<title>Plasma Engine: plArrayPtr&lt; T &gt; Class Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link rel="icon" type="image/svg+xml" href="logo.drawio.svg"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-paragraph-link.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-tabs.js"></script>
<script type="text/javascript" src="../../toggle-alternative-theme.js"></script>
<script type="text/javascript">
    DoxygenAwesomeFragmentCopyButton.init()
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeParagraphLink.init()
    DoxygenAwesomeInteractiveToc.init()
    DoxygenAwesomeTabs.init()
</script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Plasma Engine
   &#160;<span id="projectnumber">2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('db/d81/classpl_array_ptr.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="../../d5/db8/classpl_array_ptr-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plArrayPtr&lt; T &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p>This class encapsulates an array and it's size. It is recommended to use this class instead of plain C arrays.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d0/d20/_array_ptr_8h_source.htm">ArrayPtr.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a677123c81bfd98a064a718639a4c65a5" id="r_a677123c81bfd98a064a718639a4c65a5"><td class="memItemLeft" align="right" valign="top"><a id="a677123c81bfd98a064a718639a4c65a5" name="a677123c81bfd98a064a718639a4c65a5"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>ByteType</b> = typename <a class="el" href="../../de/d25/structpl_array_ptr_detail_1_1_byte_type_helper.htm">plArrayPtrDetail::ByteTypeHelper</a>&lt;T&gt;::type</td></tr>
<tr class="separator:a677123c81bfd98a064a718639a4c65a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf7335187f75035239226a7df5100905" id="r_acf7335187f75035239226a7df5100905"><td class="memItemLeft" align="right" valign="top"><a id="acf7335187f75035239226a7df5100905" name="acf7335187f75035239226a7df5100905"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>ValueType</b> = T</td></tr>
<tr class="separator:acf7335187f75035239226a7df5100905"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af70d0c7ef6383b49d3fd2ae6899ea2af" id="r_af70d0c7ef6383b49d3fd2ae6899ea2af"><td class="memItemLeft" align="right" valign="top"><a id="af70d0c7ef6383b49d3fd2ae6899ea2af" name="af70d0c7ef6383b49d3fd2ae6899ea2af"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>PointerType</b> = T*</td></tr>
<tr class="separator:af70d0c7ef6383b49d3fd2ae6899ea2af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afeb3d3ed26186546696e09ddfa5cdf46" id="r_afeb3d3ed26186546696e09ddfa5cdf46"><td class="memItemLeft" align="right" valign="top"><a id="afeb3d3ed26186546696e09ddfa5cdf46" name="afeb3d3ed26186546696e09ddfa5cdf46"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_iterator</b> = const T*</td></tr>
<tr class="separator:afeb3d3ed26186546696e09ddfa5cdf46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad592d07e27515a7bf36d4db094b246ee" id="r_ad592d07e27515a7bf36d4db094b246ee"><td class="memItemLeft" align="right" valign="top"><a id="ad592d07e27515a7bf36d4db094b246ee" name="ad592d07e27515a7bf36d4db094b246ee"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_reverse_iterator</b> = <a class="el" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">const_reverse_pointer_iterator</a>&lt;T&gt;</td></tr>
<tr class="separator:ad592d07e27515a7bf36d4db094b246ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c703ee78b866d840efe0e284aa26685" id="r_a0c703ee78b866d840efe0e284aa26685"><td class="memItemLeft" align="right" valign="top"><a id="a0c703ee78b866d840efe0e284aa26685" name="a0c703ee78b866d840efe0e284aa26685"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>iterator</b> = T*</td></tr>
<tr class="separator:a0c703ee78b866d840efe0e284aa26685"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7abf0733a4e10767167d5b2a20f127c5" id="r_a7abf0733a4e10767167d5b2a20f127c5"><td class="memItemLeft" align="right" valign="top"><a id="a7abf0733a4e10767167d5b2a20f127c5" name="a7abf0733a4e10767167d5b2a20f127c5"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>reverse_iterator</b> = <a class="el" href="../../d3/df2/structreverse__pointer__iterator.htm">reverse_pointer_iterator</a>&lt;T&gt;</td></tr>
<tr class="separator:a7abf0733a4e10767167d5b2a20f127c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:afd352be8dcf53284e1175621afa0f352" id="r_afd352be8dcf53284e1175621afa0f352"><td class="memItemLeft" align="right" valign="top"><a id="afd352be8dcf53284e1175621afa0f352" name="afd352be8dcf53284e1175621afa0f352"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>PL_DECLARE_POD_TYPE</b> ()</td></tr>
<tr class="separator:afd352be8dcf53284e1175621afa0f352"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc44a43828bcee345b2386b4d010d5a7" id="r_acc44a43828bcee345b2386b4d010d5a7"><td class="memItemLeft" align="right" valign="top"><a id="acc44a43828bcee345b2386b4d010d5a7" name="acc44a43828bcee345b2386b4d010d5a7"></a>
PL_ALWAYS_INLINE&#160;</td><td class="memItemRight" valign="bottom"><b>plArrayPtr</b> ()</td></tr>
<tr class="memdesc:acc44a43828bcee345b2386b4d010d5a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the <a class="el" href="../../db/d81/classpl_array_ptr.htm" title="This class encapsulates an array and it&#39;s size. It is recommended to use this class instead of plain ...">plArrayPtr</a> to be empty. <br /></td></tr>
<tr class="separator:acc44a43828bcee345b2386b4d010d5a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe6a58c7dd6e6a12eea5f2e8be14a79e" id="r_abe6a58c7dd6e6a12eea5f2e8be14a79e"><td class="memItemLeft" align="right" valign="top"><a id="abe6a58c7dd6e6a12eea5f2e8be14a79e" name="abe6a58c7dd6e6a12eea5f2e8be14a79e"></a>
PL_ALWAYS_INLINE&#160;</td><td class="memItemRight" valign="bottom"><b>plArrayPtr</b> (const <a class="el" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a>&lt; T &gt; &amp;other)</td></tr>
<tr class="memdesc:abe6a58c7dd6e6a12eea5f2e8be14a79e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the pointer and size of /a other. Does not allocate any data. <br /></td></tr>
<tr class="separator:abe6a58c7dd6e6a12eea5f2e8be14a79e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad690ce8d4276d05d6de5ef2e93e71508" id="r_ad690ce8d4276d05d6de5ef2e93e71508"><td class="memItemLeft" align="right" valign="top"><a id="ad690ce8d4276d05d6de5ef2e93e71508" name="ad690ce8d4276d05d6de5ef2e93e71508"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plArrayPtr</b> (T *pPtr, plUInt32 uiCount)</td></tr>
<tr class="memdesc:ad690ce8d4276d05d6de5ef2e93e71508"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the <a class="el" href="../../db/d81/classpl_array_ptr.htm" title="This class encapsulates an array and it&#39;s size. It is recommended to use this class instead of plain ...">plArrayPtr</a> with the given pointer and number of elements. No memory is allocated or copied. <br /></td></tr>
<tr class="separator:ad690ce8d4276d05d6de5ef2e93e71508"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add4cec32d94cae8b6465ee80f5f67fa0" id="r_add4cec32d94cae8b6465ee80f5f67fa0"><td class="memTemplParams" colspan="2"><a id="add4cec32d94cae8b6465ee80f5f67fa0" name="add4cec32d94cae8b6465ee80f5f67fa0"></a>
template&lt;size_t N&gt; </td></tr>
<tr class="memitem:add4cec32d94cae8b6465ee80f5f67fa0"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>plArrayPtr</b> (T(&amp;staticArray)[N])</td></tr>
<tr class="memdesc:add4cec32d94cae8b6465ee80f5f67fa0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the <a class="el" href="../../db/d81/classpl_array_ptr.htm" title="This class encapsulates an array and it&#39;s size. It is recommended to use this class instead of plain ...">plArrayPtr</a> to encapsulate the given array. <br /></td></tr>
<tr class="separator:add4cec32d94cae8b6465ee80f5f67fa0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35daebff4d592b9fc7eed69c7dae234c" id="r_a35daebff4d592b9fc7eed69c7dae234c"><td class="memTemplParams" colspan="2"><a id="a35daebff4d592b9fc7eed69c7dae234c" name="a35daebff4d592b9fc7eed69c7dae234c"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a35daebff4d592b9fc7eed69c7dae234c"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>plArrayPtr</b> (const <a class="el" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a>&lt; U &gt; &amp;other)</td></tr>
<tr class="memdesc:a35daebff4d592b9fc7eed69c7dae234c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the <a class="el" href="../../db/d81/classpl_array_ptr.htm" title="This class encapsulates an array and it&#39;s size. It is recommended to use this class instead of plain ...">plArrayPtr</a> to be a copy of <em>other</em>. No memory is allocated or copied. <br /></td></tr>
<tr class="separator:a35daebff4d592b9fc7eed69c7dae234c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3eddbccf4ef541cc67b80f6a42a6a0b7" id="r_a3eddbccf4ef541cc67b80f6a42a6a0b7"><td class="memItemLeft" align="right" valign="top"><a id="a3eddbccf4ef541cc67b80f6a42a6a0b7" name="a3eddbccf4ef541cc67b80f6a42a6a0b7"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>operator plArrayPtr&lt; const T &gt;</b> () const</td></tr>
<tr class="memdesc:a3eddbccf4ef541cc67b80f6a42a6a0b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert to const version. <br /></td></tr>
<tr class="separator:a3eddbccf4ef541cc67b80f6a42a6a0b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d1a94c319176372462d1a36aa88702d" id="r_a3d1a94c319176372462d1a36aa88702d"><td class="memItemLeft" align="right" valign="top"><a id="a3d1a94c319176372462d1a36aa88702d" name="a3d1a94c319176372462d1a36aa88702d"></a>
PL_ALWAYS_INLINE void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a>&lt; T &gt; &amp;other)</td></tr>
<tr class="memdesc:a3d1a94c319176372462d1a36aa88702d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the pointer and size of /a other. Does not allocate any data. <br /></td></tr>
<tr class="separator:a3d1a94c319176372462d1a36aa88702d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66fb8303400b4988d7e7003ea8904f09" id="r_a66fb8303400b4988d7e7003ea8904f09"><td class="memItemLeft" align="right" valign="top"><a id="a66fb8303400b4988d7e7003ea8904f09" name="a66fb8303400b4988d7e7003ea8904f09"></a>
PL_ALWAYS_INLINE void&#160;</td><td class="memItemRight" valign="bottom"><b>Clear</b> ()</td></tr>
<tr class="memdesc:a66fb8303400b4988d7e7003ea8904f09"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clears the array. <br /></td></tr>
<tr class="separator:a66fb8303400b4988d7e7003ea8904f09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5f0affe2218b31f1d0792b3ce574f34" id="r_aa5f0affe2218b31f1d0792b3ce574f34"><td class="memItemLeft" align="right" valign="top"><a id="aa5f0affe2218b31f1d0792b3ce574f34" name="aa5f0affe2218b31f1d0792b3ce574f34"></a>
PL_ALWAYS_INLINE void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (std::nullptr_t)</td></tr>
<tr class="separator:aa5f0affe2218b31f1d0792b3ce574f34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d9dbf629f70c956b654471e53baf2be" id="r_a6d9dbf629f70c956b654471e53baf2be"><td class="memItemLeft" align="right" valign="top"><a id="a6d9dbf629f70c956b654471e53baf2be" name="a6d9dbf629f70c956b654471e53baf2be"></a>
PL_ALWAYS_INLINE PointerType&#160;</td><td class="memItemRight" valign="bottom"><b>GetPtr</b> () const</td></tr>
<tr class="memdesc:a6d9dbf629f70c956b654471e53baf2be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the pointer to the array. <br /></td></tr>
<tr class="separator:a6d9dbf629f70c956b654471e53baf2be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d5b63bd64bdbe32e3e8b22212914496" id="r_a0d5b63bd64bdbe32e3e8b22212914496"><td class="memItemLeft" align="right" valign="top"><a id="a0d5b63bd64bdbe32e3e8b22212914496" name="a0d5b63bd64bdbe32e3e8b22212914496"></a>
PL_ALWAYS_INLINE PointerType&#160;</td><td class="memItemRight" valign="bottom"><b>GetPtr</b> ()</td></tr>
<tr class="memdesc:a0d5b63bd64bdbe32e3e8b22212914496"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the pointer to the array. <br /></td></tr>
<tr class="separator:a0d5b63bd64bdbe32e3e8b22212914496"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a5dbc591921d43225076af3cb40833d" id="r_a5a5dbc591921d43225076af3cb40833d"><td class="memItemLeft" align="right" valign="top"><a id="a5a5dbc591921d43225076af3cb40833d" name="a5a5dbc591921d43225076af3cb40833d"></a>
PL_ALWAYS_INLINE PointerType&#160;</td><td class="memItemRight" valign="bottom"><b>GetEndPtr</b> ()</td></tr>
<tr class="memdesc:a5a5dbc591921d43225076af3cb40833d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the pointer behind the last element of the array. <br /></td></tr>
<tr class="separator:a5a5dbc591921d43225076af3cb40833d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afceda289aea31323df689a45a4b8e17b" id="r_afceda289aea31323df689a45a4b8e17b"><td class="memItemLeft" align="right" valign="top"><a id="afceda289aea31323df689a45a4b8e17b" name="afceda289aea31323df689a45a4b8e17b"></a>
PL_ALWAYS_INLINE PointerType&#160;</td><td class="memItemRight" valign="bottom"><b>GetEndPtr</b> () const</td></tr>
<tr class="memdesc:afceda289aea31323df689a45a4b8e17b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the pointer behind the last element of the array. <br /></td></tr>
<tr class="separator:afceda289aea31323df689a45a4b8e17b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a922032d830d89bdd3b73fbb71969040b" id="r_a922032d830d89bdd3b73fbb71969040b"><td class="memItemLeft" align="right" valign="top"><a id="a922032d830d89bdd3b73fbb71969040b" name="a922032d830d89bdd3b73fbb71969040b"></a>
PL_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEmpty</b> () const</td></tr>
<tr class="memdesc:a922032d830d89bdd3b73fbb71969040b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the array is empty. <br /></td></tr>
<tr class="separator:a922032d830d89bdd3b73fbb71969040b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a025ba83275da5ff5008495fa3245b9b2" id="r_a025ba83275da5ff5008495fa3245b9b2"><td class="memItemLeft" align="right" valign="top"><a id="a025ba83275da5ff5008495fa3245b9b2" name="a025ba83275da5ff5008495fa3245b9b2"></a>
PL_ALWAYS_INLINE plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GetCount</b> () const</td></tr>
<tr class="memdesc:a025ba83275da5ff5008495fa3245b9b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of elements in the array. <br /></td></tr>
<tr class="separator:a025ba83275da5ff5008495fa3245b9b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab735c6509042b44981f8d9505df35281" id="r_ab735c6509042b44981f8d9505df35281"><td class="memItemLeft" align="right" valign="top"><a id="ab735c6509042b44981f8d9505df35281" name="ab735c6509042b44981f8d9505df35281"></a>
PL_FORCE_INLINE <a class="el" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a>&lt; T &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>GetSubArray</b> (plUInt32 uiStart, plUInt32 uiCount) const</td></tr>
<tr class="memdesc:ab735c6509042b44981f8d9505df35281"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a sub-array from this array. <br /></td></tr>
<tr class="separator:ab735c6509042b44981f8d9505df35281"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affce41e648b2614da5eb2ab315465704" id="r_affce41e648b2614da5eb2ab315465704"><td class="memItemLeft" align="right" valign="top">PL_FORCE_INLINE <a class="el" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a>&lt; T &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#affce41e648b2614da5eb2ab315465704">GetSubArray</a> (plUInt32 uiStart) const</td></tr>
<tr class="memdesc:affce41e648b2614da5eb2ab315465704"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a sub-array from this array.  <br /></td></tr>
<tr class="separator:affce41e648b2614da5eb2ab315465704"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3c9487595e390c71c7a7e2f533b0d3e" id="r_aa3c9487595e390c71c7a7e2f533b0d3e"><td class="memItemLeft" align="right" valign="top"><a id="aa3c9487595e390c71c7a7e2f533b0d3e" name="aa3c9487595e390c71c7a7e2f533b0d3e"></a>
PL_ALWAYS_INLINE <a class="el" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a>&lt; const ByteType &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>ToByteArray</b> () const</td></tr>
<tr class="memdesc:aa3c9487595e390c71c7a7e2f533b0d3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reinterprets this array as a byte array. <br /></td></tr>
<tr class="separator:aa3c9487595e390c71c7a7e2f533b0d3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2cedd73a6b95eba0763ffc1c7606556d" id="r_a2cedd73a6b95eba0763ffc1c7606556d"><td class="memItemLeft" align="right" valign="top"><a id="a2cedd73a6b95eba0763ffc1c7606556d" name="a2cedd73a6b95eba0763ffc1c7606556d"></a>
PL_ALWAYS_INLINE <a class="el" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a>&lt; ByteType &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>ToByteArray</b> ()</td></tr>
<tr class="memdesc:a2cedd73a6b95eba0763ffc1c7606556d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reinterprets this array as a byte array. <br /></td></tr>
<tr class="separator:a2cedd73a6b95eba0763ffc1c7606556d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58b1f3df5ebd13fc18716aee53ef3104" id="r_a58b1f3df5ebd13fc18716aee53ef3104"><td class="memTemplParams" colspan="2"><a id="a58b1f3df5ebd13fc18716aee53ef3104" name="a58b1f3df5ebd13fc18716aee53ef3104"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a58b1f3df5ebd13fc18716aee53ef3104"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE <a class="el" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a>&lt; U &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Cast</b> ()</td></tr>
<tr class="memdesc:a58b1f3df5ebd13fc18716aee53ef3104"><td class="mdescLeft">&#160;</td><td class="mdescRight">Cast an ArrayPtr to an ArrayPtr to a different, but same size, type. <br /></td></tr>
<tr class="separator:a58b1f3df5ebd13fc18716aee53ef3104"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abded8036c1387703098c4a3276a6b592" id="r_abded8036c1387703098c4a3276a6b592"><td class="memTemplParams" colspan="2"><a id="abded8036c1387703098c4a3276a6b592" name="abded8036c1387703098c4a3276a6b592"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:abded8036c1387703098c4a3276a6b592"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE <a class="el" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a>&lt; const U &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Cast</b> () const</td></tr>
<tr class="memdesc:abded8036c1387703098c4a3276a6b592"><td class="mdescLeft">&#160;</td><td class="mdescRight">Cast an ArrayPtr to an ArrayPtr to a different, but same size, type. <br /></td></tr>
<tr class="separator:abded8036c1387703098c4a3276a6b592"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b38365af386eea4e3749ac561ca4cba" id="r_a6b38365af386eea4e3749ac561ca4cba"><td class="memItemLeft" align="right" valign="top"><a id="a6b38365af386eea4e3749ac561ca4cba" name="a6b38365af386eea4e3749ac561ca4cba"></a>
PL_FORCE_INLINE const ValueType &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator[]</b> (plUInt32 uiIndex) const</td></tr>
<tr class="memdesc:a6b38365af386eea4e3749ac561ca4cba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Index access. <br /></td></tr>
<tr class="separator:a6b38365af386eea4e3749ac561ca4cba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18bd12e5b850ceb2a108e4b10f9d597d" id="r_a18bd12e5b850ceb2a108e4b10f9d597d"><td class="memItemLeft" align="right" valign="top"><a id="a18bd12e5b850ceb2a108e4b10f9d597d" name="a18bd12e5b850ceb2a108e4b10f9d597d"></a>
PL_FORCE_INLINE ValueType &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>operator[]</b> (plUInt32 uiIndex)</td></tr>
<tr class="memdesc:a18bd12e5b850ceb2a108e4b10f9d597d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Index access. <br /></td></tr>
<tr class="separator:a18bd12e5b850ceb2a108e4b10f9d597d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acdea6fbf90b00e01faa1bd5c03e8fe24" id="r_acdea6fbf90b00e01faa1bd5c03e8fe24"><td class="memTemplParams" colspan="2"><a id="acdea6fbf90b00e01faa1bd5c03e8fe24" name="acdea6fbf90b00e01faa1bd5c03e8fe24"></a>
template&lt;typename  = typename std::enable_if&lt;std::is_const&lt;T&gt;::value == false&gt;&gt; </td></tr>
<tr class="memitem:acdea6fbf90b00e01faa1bd5c03e8fe24"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator==</b> (const <a class="el" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a>&lt; const T &gt; &amp;other) const</td></tr>
<tr class="memdesc:acdea6fbf90b00e01faa1bd5c03e8fe24"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares the two arrays for equality. <br /></td></tr>
<tr class="separator:acdea6fbf90b00e01faa1bd5c03e8fe24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a496162d4143ef19f8ffae7f8df381078" id="r_a496162d4143ef19f8ffae7f8df381078"><td class="memItemLeft" align="right" valign="top"><a id="a496162d4143ef19f8ffae7f8df381078" name="a496162d4143ef19f8ffae7f8df381078"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator==</b> (const <a class="el" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a>&lt; T &gt; &amp;other) const</td></tr>
<tr class="memdesc:a496162d4143ef19f8ffae7f8df381078"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares the two arrays for equality. <br /></td></tr>
<tr class="separator:a496162d4143ef19f8ffae7f8df381078"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aceebd94ec3d01758ee878e498a00b912" id="r_aceebd94ec3d01758ee878e498a00b912"><td class="memItemLeft" align="right" valign="top"><a id="aceebd94ec3d01758ee878e498a00b912" name="aceebd94ec3d01758ee878e498a00b912"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>PL_ADD_DEFAULT_OPERATOR_NOTEQUAL</b> (const <a class="el" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a>&lt; T &gt; &amp;)</td></tr>
<tr class="separator:aceebd94ec3d01758ee878e498a00b912"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e1e7dd015611520bea5551678daff57" id="r_a2e1e7dd015611520bea5551678daff57"><td class="memItemLeft" align="right" valign="top"><a id="a2e1e7dd015611520bea5551678daff57" name="a2e1e7dd015611520bea5551678daff57"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&lt;</b> (const <a class="el" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a>&lt; const T &gt; &amp;other) const</td></tr>
<tr class="memdesc:a2e1e7dd015611520bea5551678daff57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares the two arrays for less. <br /></td></tr>
<tr class="separator:a2e1e7dd015611520bea5551678daff57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1777acb5f75329c862b5d7afe1244c9e" id="r_a1777acb5f75329c862b5d7afe1244c9e"><td class="memItemLeft" align="right" valign="top"><a id="a1777acb5f75329c862b5d7afe1244c9e" name="a1777acb5f75329c862b5d7afe1244c9e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>CopyFrom</b> (const <a class="el" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a>&lt; const T &gt; &amp;other)</td></tr>
<tr class="memdesc:a1777acb5f75329c862b5d7afe1244c9e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from <em>other</em> into this array. The arrays must have the exact same size. <br /></td></tr>
<tr class="separator:a1777acb5f75329c862b5d7afe1244c9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57f948bc051e6576505c1ad06b7107b8" id="r_a57f948bc051e6576505c1ad06b7107b8"><td class="memItemLeft" align="right" valign="top"><a id="a57f948bc051e6576505c1ad06b7107b8" name="a57f948bc051e6576505c1ad06b7107b8"></a>
PL_ALWAYS_INLINE void&#160;</td><td class="memItemRight" valign="bottom"><b>Swap</b> (<a class="el" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a>&lt; T &gt; &amp;other)</td></tr>
<tr class="separator:a57f948bc051e6576505c1ad06b7107b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c45ef6fae6a64e21444f86ad186142a" id="r_a5c45ef6fae6a64e21444f86ad186142a"><td class="memItemLeft" align="right" valign="top"><a id="a5c45ef6fae6a64e21444f86ad186142a" name="a5c45ef6fae6a64e21444f86ad186142a"></a>
PL_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>Contains</b> (const T &amp;value) const</td></tr>
<tr class="memdesc:a5c45ef6fae6a64e21444f86ad186142a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given value can be found in the array. O(n) complexity. <br /></td></tr>
<tr class="separator:a5c45ef6fae6a64e21444f86ad186142a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3428377b26b3505caf22046a167647fb" id="r_a3428377b26b3505caf22046a167647fb"><td class="memItemLeft" align="right" valign="top"><a id="a3428377b26b3505caf22046a167647fb" name="a3428377b26b3505caf22046a167647fb"></a>
plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>IndexOf</b> (const T &amp;value, plUInt32 uiStartIndex=0) const</td></tr>
<tr class="memdesc:a3428377b26b3505caf22046a167647fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Searches for the first occurrence of the given value and returns its index or plInvalidIndex if not found. <br /></td></tr>
<tr class="separator:a3428377b26b3505caf22046a167647fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9db0af30c839c31cde57bf92f2621f67" id="r_a9db0af30c839c31cde57bf92f2621f67"><td class="memItemLeft" align="right" valign="top"><a id="a9db0af30c839c31cde57bf92f2621f67" name="a9db0af30c839c31cde57bf92f2621f67"></a>
plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>LastIndexOf</b> (const T &amp;value, plUInt32 uiStartIndex=plInvalidIndex) const</td></tr>
<tr class="memdesc:a9db0af30c839c31cde57bf92f2621f67"><td class="mdescLeft">&#160;</td><td class="mdescRight">Searches for the last occurrence of the given value and returns its index or plInvalidIndex if not found. <br /></td></tr>
<tr class="separator:a9db0af30c839c31cde57bf92f2621f67"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><div class="compoundTemplParams">template&lt;typename T&gt;<br />
class plArrayPtr&lt; T &gt;</div><p>This class encapsulates an array and it's size. It is recommended to use this class instead of plain C arrays. </p>
<p>No data is deallocated at destruction, the <a class="el" href="../../db/d81/classpl_array_ptr.htm" title="This class encapsulates an array and it&#39;s size. It is recommended to use this class instead of plain ...">plArrayPtr</a> only allows for easier access. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="affce41e648b2614da5eb2ab315465704" name="affce41e648b2614da5eb2ab315465704"></a>
<h2 class="memtitle"><span class="permalink"><a href="#affce41e648b2614da5eb2ab315465704">&#9670;&#160;</a></span>GetSubArray()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">PL_FORCE_INLINE <a class="el" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a>&lt; T &gt; <a class="el" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a>&lt; T &gt;::GetSubArray </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiStart</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a sub-array from this array. </p>
<dl class="section note"><dt>Note</dt><dd><div class="fragment"><div class="line">ap.GetSubArray(i) </div>
</div><!-- fragment --> is equivalent to <div class="fragment"><div class="line">ap.GetSubArray(i, ap.GetCount() - i) </div>
</div><!-- fragment -->. </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>Code/Engine/Foundation/Types/<a class="el" href="../../d0/d20/_array_ptr_8h_source.htm">ArrayPtr.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../db/d81/classpl_array_ptr.htm">plArrayPtr</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
