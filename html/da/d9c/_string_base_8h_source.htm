<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Plasma Engine: Code/Engine/Foundation/Strings/Implementation/StringBase.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Plasma Engine<span id="projectnumber">&#160;2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('da/d9c/_string_base_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">StringBase.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;Foundation/Strings/StringView.h&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span> </div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="keyword">namespace </span>plInternal</div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span>{</div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> isString&gt;</div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno"><a class="line" href="../../db/d0a/structpl_internal_1_1_hash_helper_impl.htm">    8</a></span>  <span class="keyword">struct </span><a class="code hl_struct" href="../../db/d0a/structpl_internal_1_1_hash_helper_impl.htm">HashHelperImpl</a>;</div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span>}</div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span> </div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="foldopen" id="foldopen00013" data-start="{" data-end="};">
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm">   13</a></span><span class="keyword">struct </span><a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase</a> : <span class="keyword">public</span> <a class="code hl_struct" href="../../da/d54/structpl_this_is_a_string.htm">plThisIsAString</a></div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>{</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span>  <span class="keyword">using </span><a class="code hl_struct" href="../../d3/da5/structpl_string_iterator.htm">iterator</a> = <a class="code hl_struct" href="../../d3/da5/structpl_string_iterator.htm">plStringIterator</a>;</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>  <span class="keyword">using </span><a class="code hl_struct" href="../../d3/da5/structpl_string_iterator.htm">const_iterator</a> = <a class="code hl_struct" href="../../d3/da5/structpl_string_iterator.htm">plStringIterator</a>;</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>  <span class="keyword">using </span><a class="code hl_struct" href="../../d8/d32/structpl_string_reverse_iterator.htm">reverse_iterator</a> = <a class="code hl_struct" href="../../d8/d32/structpl_string_reverse_iterator.htm">plStringReverseIterator</a>;</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>  <span class="keyword">using </span><a class="code hl_struct" href="../../d8/d32/structpl_string_reverse_iterator.htm">const_reverse_iterator</a> = <a class="code hl_struct" href="../../d8/d32/structpl_string_reverse_iterator.htm">plStringReverseIterator</a>;</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span> </div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a7ac3a243ee9ea1f99f7d82dd8e1d60b5">IsEmpty</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span> </div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a6ae403b4b3e534b94edd50edd888b4f0">StartsWith</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStartsWith) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span> </div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a4af994336831ee8ce7ea1aa392388ed6">StartsWith_NoCase</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStartsWith) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span> </div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#ab6961a7b6896b3b482b20df06de7c689">EndsWith</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sEndsWith) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span> </div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a8986dab73aa8d7095b79ddf761cf6b0d">EndsWith_NoCase</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sEndsWith) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span> </div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>  <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#afb80af12ae97555d0870359e86bd1a68">FindSubString</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStringToFind, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt = <span class="keyword">nullptr</span>) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span> </div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>  <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a8972e55722d17be6604b1df08082cf83">FindSubString_NoCase</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStringToFind, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt = <span class="keyword">nullptr</span>) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span> </div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>  <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a2d116e5f43c0ae774c2346b5f94a992c">FindLastSubString</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStringToFind, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt = <span class="keyword">nullptr</span>) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span> </div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>  <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a54c2b870afa5c0a2fb437e32219eb7d1">FindLastSubString_NoCase</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sStringToFind, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt = <span class="keyword">nullptr</span>) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span> </div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>  <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#af40ca95f7c2b77e18266ffe6ff7483a8">FindWholeWord</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szSearchFor, <a class="code hl_typedef" href="../../de/d4d/classpl_string_utils.htm#a8bc7e3a526fc09382eaa1276895f3266">plStringUtils::PL_CHARACTER_FILTER</a> isDelimiterCB, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt = <span class="keyword">nullptr</span>) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span> </div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>  <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a8b6659ee0b76480c3ba534f74a4089fa">FindWholeWord_NoCase</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szSearchFor, <a class="code hl_typedef" href="../../de/d4d/classpl_string_utils.htm#a8bc7e3a526fc09382eaa1276895f3266">plStringUtils::PL_CHARACTER_FILTER</a> isDelimiterCB, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt = <span class="keyword">nullptr</span>) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span> </div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>  plInt32 <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a71ac29b18708a376ce3e9f03bb756a82">Compare</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span> </div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>  plInt32 <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a946009c071c70e5b2ad616a16213d113">CompareN</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther, plUInt32 uiCharsToCompare) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span> </div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>  plInt32 <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a91a71d7390204850be0e8fc9193e0f31">Compare_NoCase</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span> </div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>  plInt32 <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a4af63c140fc4fe56e1a290df992cec7e">CompareN_NoCase</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther, plUInt32 uiCharsToCompare) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span> </div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a928260385c9a80109751fbdb1849b321">IsEqual</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span> </div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a1854b21f65a086f15e164f739d53950d">IsEqualN</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther, plUInt32 uiCharsToCompare) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span> </div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#ad0801b3fafc90b1beba38313c205e704">IsEqual_NoCase</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span> </div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a632d41fe7d33c9e42391ee905a361b06">IsEqualN_NoCase</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sOther, plUInt32 uiCharsToCompare) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span> </div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>  <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#aa5dc9b2300f37b7bb4a42999870e6092">ComputeCharacterPosition</a>(plUInt32 uiCharacterIndex) <span class="keyword">const</span>;</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span> </div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>  <a class="code hl_struct" href="../../d3/da5/structpl_string_iterator.htm">iterator</a> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#ac5f533a25843450da719ad9c78827c29">GetIteratorFront</a>() <span class="keyword">const</span>;</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span> </div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>  <a class="code hl_struct" href="../../d8/d32/structpl_string_reverse_iterator.htm">reverse_iterator</a> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a97bd0de57b678794224901f970b864b7">GetIteratorBack</a>() <span class="keyword">const</span>;</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span> </div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>  <span class="keyword">operator</span> <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span> </div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>  <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#ae137b75721c90c6ca1b8aec2b9fa7653">GetView</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span> </div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno"><a class="line" href="../../de/d73/structpl_string_base.htm#a7ac5057709ce4884266502eb53a12a2b">  108</a></span>  PL_ALWAYS_INLINE <span class="keyword">operator</span> <span class="keyword">const</span> <span class="keywordtype">char</span>*() <span class="keyword">const</span> { <span class="keywordflow">return</span> InternalGetData(); }</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span> </div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a9a9997394d0cbb4121601246cfd910c6">Split</a>(<span class="keywordtype">bool</span> bReturnEmptyStrings, Container&amp; ref_output, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator1, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator2 = <span class="keyword">nullptr</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator3 = <span class="keyword">nullptr</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator4 = <span class="keyword">nullptr</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator5 = <span class="keyword">nullptr</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator6 = <span class="keyword">nullptr</span>) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span> </div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a99dd48e46918eea24a01ee4893f8301a">HasAnyExtension</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span> </div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#abdbf19533811ec120710ad7caffe7ad0">HasExtension</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sExtension) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span> </div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>  <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#ad0543d52d510868337e70f18ab4467a6">GetFileExtension</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span> </div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>  <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a8b26dfed7384bb3264d3f134648396f9">GetFileName</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span> </div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>  <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a5be3ebeaf3a8e57322061b6424ca25a8">GetFileNameAndExtension</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span> </div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>  <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#ad8352abf502483f0e4e10c6733bde642">GetFileDirectory</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span> </div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a275c7069b3e5ddd9daf7ea75352128a3">IsAbsolutePath</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span> </div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a4a340cb26613564b37461946d685215f">IsRelativePath</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span> </div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#aef9d9918c2d608eb5451b735057a272f">IsRootedPath</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span> </div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>  <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> <a class="code hl_function" href="../../de/d73/structpl_string_base.htm#a97a42649db4dba41449786ad43a237cf">GetRootedPathRootName</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span> </div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span><span class="preprocessor">#if PL_ENABLED(PL_INTEROP_STL_STRINGS)</span></div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>  PL_ALWAYS_INLINE std::string_view GetAsStdView()<span class="keyword"> const</span></div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>    <span class="keywordflow">return</span> std::string_view(InternalGetData(), <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(InternalGetElementCount()));</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>  }</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>  PL_ALWAYS_INLINE std::string GetAsStdString()<span class="keyword"> const</span></div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>    <span class="keywordflow">return</span> std::string(GetAsStdView());</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>  }</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span> </div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>  PL_ALWAYS_INLINE <span class="keyword">operator</span> std::string_view()<span class="keyword"> const</span></div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>    <span class="keywordflow">return</span> GetAsStdView();</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>  }</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span> </div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>  PL_ALWAYS_INLINE <span class="keyword">operator</span> std::string()<span class="keyword"> const</span></div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span><span class="keyword">  </span>{</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>    <span class="keywordflow">return</span> std::string(GetAsStdView());</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>  }</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span> </div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span><span class="keyword">private</span>:</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>  <span class="keyword">const</span> <span class="keywordtype">char</span>* InternalGetData() <span class="keyword">const</span>;</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>  <span class="keyword">const</span> <span class="keywordtype">char</span>* InternalGetDataEnd() <span class="keyword">const</span>;</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>  plUInt32 InternalGetElementCount() <span class="keyword">const</span>;</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span> </div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived2&gt;</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>  <span class="keyword">friend</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/da5/structpl_string_iterator.htm">plStringBase&lt;Derived2&gt;::iterator</a> begin(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;Derived2&gt;</a>&amp; container);</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span> </div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived2&gt;</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>  <span class="keyword">friend</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/da5/structpl_string_iterator.htm">plStringBase&lt;Derived2&gt;::const_iterator</a> cbegin(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;Derived2&gt;</a>&amp; container);</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span> </div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived2&gt;</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>  <span class="keyword">friend</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/da5/structpl_string_iterator.htm">plStringBase&lt;Derived2&gt;::iterator</a> end(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;Derived2&gt;</a>&amp; container);</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span> </div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived2&gt;</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>  <span class="keyword">friend</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/da5/structpl_string_iterator.htm">plStringBase&lt;Derived2&gt;::const_iterator</a> cend(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;Derived2&gt;</a>&amp; container);</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span> </div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived2&gt;</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>  <span class="keyword">friend</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d8/d32/structpl_string_reverse_iterator.htm">plStringBase&lt;Derived2&gt;::reverse_iterator</a> rbegin(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;Derived2&gt;</a>&amp; container);</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span> </div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived2&gt;</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span>  <span class="keyword">friend</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d8/d32/structpl_string_reverse_iterator.htm">plStringBase&lt;Derived2&gt;::const_reverse_iterator</a> crbegin(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;Derived2&gt;</a>&amp; container);</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span> </div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived2&gt;</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>  <span class="keyword">friend</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d8/d32/structpl_string_reverse_iterator.htm">plStringBase&lt;Derived2&gt;::reverse_iterator</a> rend(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;Derived2&gt;</a>&amp; container);</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span> </div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived2&gt;</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span>  <span class="keyword">friend</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d8/d32/structpl_string_reverse_iterator.htm">plStringBase&lt;Derived2&gt;::const_reverse_iterator</a> crend(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;Derived2&gt;</a>&amp; container);</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>};</div>
</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span> </div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span> </div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/da5/structpl_string_iterator.htm">plStringBase&lt;Derived&gt;::iterator</a> begin(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;Derived&gt;</a>&amp; container)</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>{</div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span>  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/da5/structpl_string_iterator.htm">plStringBase&lt;Derived&gt;::iterator</a>(container.InternalGetData(), container.InternalGetDataEnd(), container.InternalGetData());</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>}</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span> </div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/da5/structpl_string_iterator.htm">plStringBase&lt;Derived&gt;::const_iterator</a> cbegin(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;Derived&gt;</a>&amp; container)</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>{</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span>  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/da5/structpl_string_iterator.htm">plStringBase&lt;Derived&gt;::const_iterator</a>(container.InternalGetData(), container.InternalGetDataEnd(), container.InternalGetData());</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>}</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span> </div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/da5/structpl_string_iterator.htm">plStringBase&lt;Derived&gt;::iterator</a> end(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;Derived&gt;</a>&amp; container)</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>{</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/da5/structpl_string_iterator.htm">plStringBase&lt;Derived&gt;::iterator</a>(container.InternalGetData(), container.InternalGetDataEnd(), container.InternalGetDataEnd());</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>}</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span> </div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/da5/structpl_string_iterator.htm">plStringBase&lt;Derived&gt;::const_iterator</a> cend(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;Derived&gt;</a>&amp; container)</div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>{</div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d3/da5/structpl_string_iterator.htm">plStringBase&lt;Derived&gt;::const_iterator</a>(container.InternalGetData(), container.InternalGetDataEnd(), container.InternalGetDataEnd());</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>}</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span> </div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span> </div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d8/d32/structpl_string_reverse_iterator.htm">plStringBase&lt;Derived&gt;::reverse_iterator</a> rbegin(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;Derived&gt;</a>&amp; container)</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>{</div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span>  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d8/d32/structpl_string_reverse_iterator.htm">plStringBase&lt;Derived&gt;::reverse_iterator</a>(container.InternalGetData(), container.InternalGetDataEnd(), container.InternalGetDataEnd());</div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>}</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span> </div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d8/d32/structpl_string_reverse_iterator.htm">plStringBase&lt;Derived&gt;::const_reverse_iterator</a> crbegin(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;Derived&gt;</a>&amp; container)</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span>{</div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span>  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d8/d32/structpl_string_reverse_iterator.htm">plStringBase&lt;Derived&gt;::const_reverse_iterator</a>(container.InternalGetData(), container.InternalGetDataEnd(), container.InternalGetDataEnd());</div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span>}</div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span> </div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d8/d32/structpl_string_reverse_iterator.htm">plStringBase&lt;Derived&gt;::reverse_iterator</a> rend(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;Derived&gt;</a>&amp; container)</div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span>{</div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span>  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d8/d32/structpl_string_reverse_iterator.htm">plStringBase&lt;Derived&gt;::reverse_iterator</a>(container.InternalGetData(), container.InternalGetDataEnd(), <span class="keyword">nullptr</span>);</div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span>}</div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span> </div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span><span class="keyword">typename</span> <a class="code hl_struct" href="../../d8/d32/structpl_string_reverse_iterator.htm">plStringBase&lt;Derived&gt;::const_reverse_iterator</a> crend(<span class="keyword">const</span> <a class="code hl_struct" href="../../de/d73/structpl_string_base.htm">plStringBase&lt;Derived&gt;</a>&amp; container)</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span>{</div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span>  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code hl_struct" href="../../d8/d32/structpl_string_reverse_iterator.htm">plStringBase&lt;Derived&gt;::const_reverse_iterator</a>(container.InternalGetData(), container.InternalGetDataEnd(), <span class="keyword">nullptr</span>);</div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span>}</div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span> </div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span><span class="preprocessor">#include &lt;Foundation/Strings/Implementation/StringBase_inl.h&gt;</span></div>
<div class="ttc" id="aclasspl_string_utils_htm_a8bc7e3a526fc09382eaa1276895f3266"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#a8bc7e3a526fc09382eaa1276895f3266">plStringUtils::PL_CHARACTER_FILTER</a></div><div class="ttdeci">bool(*)(plUInt32 uiChar) PL_CHARACTER_FILTER</div><div class="ttdoc">Function Definition for a function that determines whether a (Utf32) character belongs to a certain c...</div><div class="ttdef"><b>Definition</b> StringUtils.h:209</div></div>
<div class="ttc" id="aclasspl_string_view_htm"><div class="ttname"><a href="../../d6/d79/classpl_string_view.htm">plStringView</a></div><div class="ttdoc">plStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...</div><div class="ttdef"><b>Definition</b> StringView.h:34</div></div>
<div class="ttc" id="astructpl_internal_1_1_hash_helper_impl_htm"><div class="ttname"><a href="../../db/d0a/structpl_internal_1_1_hash_helper_impl.htm">plInternal::HashHelperImpl</a></div><div class="ttdef"><b>Definition</b> StringBase.h:8</div></div>
<div class="ttc" id="astructpl_string_base_htm"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm">plStringBase</a></div><div class="ttdoc">Base class for strings, which implements all read-only string functions.</div><div class="ttdef"><b>Definition</b> StringBase.h:14</div></div>
<div class="ttc" id="astructpl_string_base_htm_a1854b21f65a086f15e164f739d53950d"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a1854b21f65a086f15e164f739d53950d">plStringBase::IsEqualN</a></div><div class="ttdeci">bool IsEqualN(plStringView sOther, plUInt32 uiCharsToCompare) const</div><div class="ttdoc">Compares up to a given number of characters of this string with the other string for equality....</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:153</div></div>
<div class="ttc" id="astructpl_string_base_htm_a275c7069b3e5ddd9daf7ea75352128a3"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a275c7069b3e5ddd9daf7ea75352128a3">plStringBase::IsAbsolutePath</a></div><div class="ttdeci">bool IsAbsolutePath() const</div><div class="ttdoc">Returns true, if the given path represents an absolute path on the current OS.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:360</div></div>
<div class="ttc" id="astructpl_string_base_htm_a2d116e5f43c0ae774c2346b5f94a992c"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a2d116e5f43c0ae774c2346b5f94a992c">plStringBase::FindLastSubString</a></div><div class="ttdeci">const char * FindLastSubString(plStringView sStringToFind, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:77</div></div>
<div class="ttc" id="astructpl_string_base_htm_a4a340cb26613564b37461946d685215f"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a4a340cb26613564b37461946d685215f">plStringBase::IsRelativePath</a></div><div class="ttdeci">bool IsRelativePath() const</div><div class="ttdoc">Returns true, if the given path represents a relative path on the current OS.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:354</div></div>
<div class="ttc" id="astructpl_string_base_htm_a4af63c140fc4fe56e1a290df992cec7e"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a4af63c140fc4fe56e1a290df992cec7e">plStringBase::CompareN_NoCase</a></div><div class="ttdeci">plInt32 CompareN_NoCase(plStringView sOther, plUInt32 uiCharsToCompare) const</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:141</div></div>
<div class="ttc" id="astructpl_string_base_htm_a4af994336831ee8ce7ea1aa392388ed6"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a4af994336831ee8ce7ea1aa392388ed6">plStringBase::StartsWith_NoCase</a></div><div class="ttdeci">bool StartsWith_NoCase(plStringView sStartsWith) const</div><div class="ttdoc">Returns true, if this string starts with the given string. Case insensitive.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:37</div></div>
<div class="ttc" id="astructpl_string_base_htm_a54c2b870afa5c0a2fb437e32219eb7d1"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a54c2b870afa5c0a2fb437e32219eb7d1">plStringBase::FindLastSubString_NoCase</a></div><div class="ttdeci">const char * FindLastSubString_NoCase(plStringView sStringToFind, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:89</div></div>
<div class="ttc" id="astructpl_string_base_htm_a5be3ebeaf3a8e57322061b6424ca25a8"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a5be3ebeaf3a8e57322061b6424ca25a8">plStringBase::GetFileNameAndExtension</a></div><div class="ttdeci">plStringView GetFileNameAndExtension() const</div><div class="ttdoc">Returns the substring that represents the file name including the file extension.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:372</div></div>
<div class="ttc" id="astructpl_string_base_htm_a632d41fe7d33c9e42391ee905a361b06"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a632d41fe7d33c9e42391ee905a361b06">plStringBase::IsEqualN_NoCase</a></div><div class="ttdeci">bool IsEqualN_NoCase(plStringView sOther, plUInt32 uiCharsToCompare) const</div><div class="ttdoc">Compares up to a given number of characters of this string with the other string for equality....</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:165</div></div>
<div class="ttc" id="astructpl_string_base_htm_a6ae403b4b3e534b94edd50edd888b4f0"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a6ae403b4b3e534b94edd50edd888b4f0">plStringBase::StartsWith</a></div><div class="ttdeci">bool StartsWith(plStringView sStartsWith) const</div><div class="ttdoc">Returns true, if this string starts with the given string.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:31</div></div>
<div class="ttc" id="astructpl_string_base_htm_a71ac29b18708a376ce3e9f03bb756a82"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a71ac29b18708a376ce3e9f03bb756a82">plStringBase::Compare</a></div><div class="ttdeci">plInt32 Compare(plStringView sOther) const</div><div class="ttdoc">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller',...</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:123</div></div>
<div class="ttc" id="astructpl_string_base_htm_a7ac3a243ee9ea1f99f7d82dd8e1d60b5"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a7ac3a243ee9ea1f99f7d82dd8e1d60b5">plStringBase::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns whether the string is an empty string.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:25</div></div>
<div class="ttc" id="astructpl_string_base_htm_a8972e55722d17be6604b1df08082cf83"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a8972e55722d17be6604b1df08082cf83">plStringBase::FindSubString_NoCase</a></div><div class="ttdeci">const char * FindSubString_NoCase(plStringView sStringToFind, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:66</div></div>
<div class="ttc" id="astructpl_string_base_htm_a8986dab73aa8d7095b79ddf761cf6b0d"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a8986dab73aa8d7095b79ddf761cf6b0d">plStringBase::EndsWith_NoCase</a></div><div class="ttdeci">bool EndsWith_NoCase(plStringView sEndsWith) const</div><div class="ttdoc">Returns true, if this string ends with the given string. Case insensitive.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:49</div></div>
<div class="ttc" id="astructpl_string_base_htm_a8b26dfed7384bb3264d3f134648396f9"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a8b26dfed7384bb3264d3f134648396f9">plStringBase::GetFileName</a></div><div class="ttdeci">plStringView GetFileName() const</div><div class="ttdoc">Returns the file name of a path, excluding the path and extension.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:378</div></div>
<div class="ttc" id="astructpl_string_base_htm_a8b6659ee0b76480c3ba534f74a4089fa"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a8b6659ee0b76480c3ba534f74a4089fa">plStringBase::FindWholeWord_NoCase</a></div><div class="ttdeci">const char * FindWholeWord_NoCase(const char *szSearchFor, plStringUtils::PL_CHARACTER_FILTER isDelimiterCB, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:112</div></div>
<div class="ttc" id="astructpl_string_base_htm_a91a71d7390204850be0e8fc9193e0f31"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a91a71d7390204850be0e8fc9193e0f31">plStringBase::Compare_NoCase</a></div><div class="ttdeci">plInt32 Compare_NoCase(plStringView sOther) const</div><div class="ttdoc">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller',...</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:135</div></div>
<div class="ttc" id="astructpl_string_base_htm_a928260385c9a80109751fbdb1849b321"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a928260385c9a80109751fbdb1849b321">plStringBase::IsEqual</a></div><div class="ttdeci">bool IsEqual(plStringView sOther) const</div><div class="ttdoc">Compares this string with the other string for equality.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:147</div></div>
<div class="ttc" id="astructpl_string_base_htm_a946009c071c70e5b2ad616a16213d113"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a946009c071c70e5b2ad616a16213d113">plStringBase::CompareN</a></div><div class="ttdeci">plInt32 CompareN(plStringView sOther, plUInt32 uiCharsToCompare) const</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:129</div></div>
<div class="ttc" id="astructpl_string_base_htm_a97a42649db4dba41449786ad43a237cf"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a97a42649db4dba41449786ad43a237cf">plStringBase::GetRootedPathRootName</a></div><div class="ttdeci">plStringView GetRootedPathRootName() const</div><div class="ttdoc">Extracts the root name from a rooted path.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:342</div></div>
<div class="ttc" id="astructpl_string_base_htm_a97bd0de57b678794224901f970b864b7"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a97bd0de57b678794224901f970b864b7">plStringBase::GetIteratorBack</a></div><div class="ttdeci">reverse_iterator GetIteratorBack() const</div><div class="ttdoc">Returns an iterator to this string, which points to the very last character (NOT the end).</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:187</div></div>
<div class="ttc" id="astructpl_string_base_htm_a99dd48e46918eea24a01ee4893f8301a"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a99dd48e46918eea24a01ee4893f8301a">plStringBase::HasAnyExtension</a></div><div class="ttdeci">bool HasAnyExtension() const</div><div class="ttdoc">Checks whether the given path has any file extension.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:396</div></div>
<div class="ttc" id="astructpl_string_base_htm_a9a9997394d0cbb4121601246cfd910c6"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#a9a9997394d0cbb4121601246cfd910c6">plStringBase::Split</a></div><div class="ttdeci">void Split(bool bReturnEmptyStrings, Container &amp;ref_output, const char *szSeparator1, const char *szSeparator2=nullptr, const char *szSeparator3=nullptr, const char *szSeparator4=nullptr, const char *szSeparator5=nullptr, const char *szSeparator6=nullptr) const</div><div class="ttdoc">Fills the given container with plStringView's which represent each found substring....</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:336</div></div>
<div class="ttc" id="astructpl_string_base_htm_aa5dc9b2300f37b7bb4a42999870e6092"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#aa5dc9b2300f37b7bb4a42999870e6092">plStringBase::ComputeCharacterPosition</a></div><div class="ttdeci">const char * ComputeCharacterPosition(plUInt32 uiCharacterIndex) const</div><div class="ttdoc">Computes the pointer to the n-th character in the string. This is a linear search from the start.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:171</div></div>
<div class="ttc" id="astructpl_string_base_htm_ab6961a7b6896b3b482b20df06de7c689"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#ab6961a7b6896b3b482b20df06de7c689">plStringBase::EndsWith</a></div><div class="ttdeci">bool EndsWith(plStringView sEndsWith) const</div><div class="ttdoc">Returns true, if this string ends with the given string.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:43</div></div>
<div class="ttc" id="astructpl_string_base_htm_abdbf19533811ec120710ad7caffe7ad0"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#abdbf19533811ec120710ad7caffe7ad0">plStringBase::HasExtension</a></div><div class="ttdeci">bool HasExtension(plStringView sExtension) const</div><div class="ttdoc">Checks whether the given path ends with the given extension. szExtension should start with a '....</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:390</div></div>
<div class="ttc" id="astructpl_string_base_htm_ac5f533a25843450da719ad9c78827c29"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#ac5f533a25843450da719ad9c78827c29">plStringBase::GetIteratorFront</a></div><div class="ttdeci">iterator GetIteratorFront() const</div><div class="ttdoc">Returns an iterator to this string, which points to the very first character.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:181</div></div>
<div class="ttc" id="astructpl_string_base_htm_ad0543d52d510868337e70f18ab4467a6"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#ad0543d52d510868337e70f18ab4467a6">plStringBase::GetFileExtension</a></div><div class="ttdeci">plStringView GetFileExtension() const</div><div class="ttdoc">Returns the file extension of the given path. Will be empty, if the path does not end with a proper e...</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:384</div></div>
<div class="ttc" id="astructpl_string_base_htm_ad0801b3fafc90b1beba38313c205e704"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#ad0801b3fafc90b1beba38313c205e704">plStringBase::IsEqual_NoCase</a></div><div class="ttdeci">bool IsEqual_NoCase(plStringView sOther) const</div><div class="ttdoc">Compares this string with the other string for equality.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:159</div></div>
<div class="ttc" id="astructpl_string_base_htm_ad8352abf502483f0e4e10c6733bde642"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#ad8352abf502483f0e4e10c6733bde642">plStringBase::GetFileDirectory</a></div><div class="ttdeci">plStringView GetFileDirectory() const</div><div class="ttdoc">Returns the directory of the given file, which is the substring up to the last path separator.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:366</div></div>
<div class="ttc" id="astructpl_string_base_htm_ae137b75721c90c6ca1b8aec2b9fa7653"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#ae137b75721c90c6ca1b8aec2b9fa7653">plStringBase::GetView</a></div><div class="ttdeci">plStringView GetView() const</div><div class="ttdoc">Returns a string view to this string's data.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:329</div></div>
<div class="ttc" id="astructpl_string_base_htm_aef9d9918c2d608eb5451b735057a272f"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#aef9d9918c2d608eb5451b735057a272f">plStringBase::IsRootedPath</a></div><div class="ttdeci">bool IsRootedPath() const</div><div class="ttdoc">Returns true, if the given path represents a 'rooted' path. See plFileSystem for details.</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:348</div></div>
<div class="ttc" id="astructpl_string_base_htm_af40ca95f7c2b77e18266ffe6ff7483a8"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#af40ca95f7c2b77e18266ffe6ff7483a8">plStringBase::FindWholeWord</a></div><div class="ttdeci">const char * FindWholeWord(const char *szSearchFor, plStringUtils::PL_CHARACTER_FILTER isDelimiterCB, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:101</div></div>
<div class="ttc" id="astructpl_string_base_htm_afb80af12ae97555d0870359e86bd1a68"><div class="ttname"><a href="../../de/d73/structpl_string_base.htm#afb80af12ae97555d0870359e86bd1a68">plStringBase::FindSubString</a></div><div class="ttdeci">const char * FindSubString(plStringView sStringToFind, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition</b> StringBase_inl.h:55</div></div>
<div class="ttc" id="astructpl_string_iterator_htm"><div class="ttname"><a href="../../d3/da5/structpl_string_iterator.htm">plStringIterator</a></div><div class="ttdoc">STL forward iterator used by all string classes. Iterates over unicode characters....</div><div class="ttdef"><b>Definition</b> StringIterator.h:10</div></div>
<div class="ttc" id="astructpl_string_reverse_iterator_htm"><div class="ttname"><a href="../../d8/d32/structpl_string_reverse_iterator.htm">plStringReverseIterator</a></div><div class="ttdoc">STL reverse iterator used by all string classes. Iterates over unicode characters....</div><div class="ttdef"><b>Definition</b> StringIterator.h:163</div></div>
<div class="ttc" id="astructpl_this_is_a_string_htm"><div class="ttname"><a href="../../da/d54/structpl_this_is_a_string.htm">plThisIsAString</a></div><div class="ttdoc">Base class which marks a class as containing string data.</div><div class="ttdef"><b>Definition</b> StringView.h:19</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_93f3a51c0220f51fc2c286c08d531e1e.htm">Strings</a></li><li class="navelem"><a class="el" href="../../dir_fec2b21556ce2cf7e27237dfb4edc8a6.htm">Implementation</a></li><li class="navelem"><b>StringBase.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
