<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Plasma Engine: plMapBase&lt; KeyType, ValueType, Comparer &gt; Class Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Plasma Engine<span id="projectnumber">&#160;2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d9/dbe/classpl_map_base.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="../../d4/d11/classpl_map_base-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plMapBase&lt; KeyType, ValueType, Comparer &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p>An associative container. Similar to STL::map.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d3/d63/_map_8h_source.htm">Map.h</a>&gt;</code></p>

<p>Inherited by <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plGeometry::Vertex, plUInt32 &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; class plATLEvent &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUuid, plAbstractObjectNode * &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plStringView, plAbstractObjectNode * &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, CategoryData &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plHybridString &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUuid, plTreeNode&lt; plActionMapDescriptor &gt; * &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plActionMap * &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plRTTI *, plActorPlugin * &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; SectorID, plAiNavMeshSector &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plAiNavMesh * &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, dtQueryFilter &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plAmplitudeConfiguration &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plAnimGraphNode *, ConnectionsTo &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plSkeletonResource *, CachedAnim &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plHybridArray&lt; plUuid, 1 &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plUniquePtr&lt; plAssetDocumentInfo &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plFileStatus &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plSet&lt; plHybridString &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plAssetTable::ManagerResource &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plPlatformProfile *, plUniquePtr&lt; plAssetTable &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; class plATLEntity &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; class plATLListener &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; class plATLTrigger &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; class plATLRtpc &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; class plATLSwitchState &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; class plATLEnvironment &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; class plATLSoundBank &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, FileCheckCache &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, CustomAction &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, const plDocumentTypeDescriptor * &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plPin *, plHybridArray&lt; const plConnection *, 6 &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUInt64, plHybridString &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plDynamicBitflags &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plInt32, plHybridString &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plDynamicEnum &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plDynamicTree::plMultiMapKey, plDynamicTree::plObjectData &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plDynamicStringEnum &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; HandleType, plUuid &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUuid, plEditorEngineSyncObject * &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUuid, plHybridArray&lt; GoReferenceTo, 4 &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUuid, plHybridArray&lt; GoReferencedBy, 4 &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUuid, ParamData &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plFileSystemMirror::DirEntry &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, T &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plUInt16 &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, FileCacheStatus &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUInt32, plDelegate &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, float &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plFmodConfiguration &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUInt32, plDynamicArray&lt; plGPUResourcePool::TextureHandleWithAge &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUInt32, plDynamicArray&lt; plGPUResourcePool::BufferHandleWithAge &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plRTTI *, plGameObjectEditTool * &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plString, plActionMap &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plString, plInputSlot &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plTime, Data &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plJoltRagdollComponent *, plInt32 &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plJoltRopeComponent *, plInt32 &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUInt64, plJoltContactListener::TriggerObj &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; DebugBodyShapeKey, DebugGeo &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const void *, DebugGeoShape &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plDocument *, Data &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plVariant &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plModelImporter2::OutputTexture &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUInt32, plHybridArray&lt; MeshInstance, 4 &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; TextureSemantic, plHybridString &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; PropertySemantic, plVariant &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plTransformTemplate &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plOBJLoader::Material &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plDocumentObject *, plHybridArray &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plOpenDdlReaderElement * &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plColor &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plParticleEffectHandle &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plParticleStreamFactory * &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHashedString, plHashSet&lt; plHashedString &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; vk::Image, ImageState &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; vk::Buffer, BufferState &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plPluginBundle &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUInt64, plUniquePtr&lt; plAbstractObjectGraph &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUuid, plUniquePtr&lt; PrefabData &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plDocument *, plMap&lt; const plRTTI *, plPreferences * &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, MacroDefinition &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plPropertyUiState &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUuid, Binding &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plCVarWidgetData &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, TransferData &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, TransferDataObject &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plInt64, QCheckBox * &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plUInt32 &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, GlobalEventsData &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; QString, CacheEntry &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; QString, QPixmap &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, ImageGeneratorFunc &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, QTreeWidgetItem * &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, SlotData &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, ActionData &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, StatData &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUInt32, AllocatorData &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plDocumentObject *, plQtNode * &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plDocumentObject *, plQtConnection * &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plDocumentObject * &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, PluginsData &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUuid, const plDocument * &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUInt32, bool &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plActionDescriptorHandle, QWeakPointer&lt; plQtProxy &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plDocument *, plMap&lt; plActionDescriptorHandle, QWeakPointer&lt; plQtProxy &gt; &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; QWidget *, plMap&lt; plActionDescriptorHandle, QWeakPointer&lt; plQtProxy &gt; &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, TypeData &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUuid, plQtGameObjectWidget * &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, QStandardItem * &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, StatsData &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, SubsystemData &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, ClockData &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; QModelIndex, bool &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, PropertyWidgetData &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, QIcon &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, QImage &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, QPixmap &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plSharedPtr&lt; plRasterizerObject &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plRTTI *, ReflectedTypeStorageMapping * &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; ShaderVertexDecl, plGALVertexDeclarationHandle &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUInt32, plDynamicArray&lt; plConstantBufferStorageBase * &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plRenderPipelinePass *, ConnectionData &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plRenderWorld::CameraConfig &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plRefCounted *, plHybridArray&lt; GraphicsPipelineMap::Iterator, 1 &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plRefCounted *, plHybridArray&lt; ComputePipelineMap::Iterator, 1 &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plRTTI *, plResourcePriority &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plRTTI *, plResourceTypeLoader * &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plResource *, plUniquePtr&lt; plResourceTypeLoader &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plRTTI *, plHybridArray&lt; plResourceManager::DerivedTypeInfo, 4 &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, const plRTTI * &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plRTTI *, plResourceManager::ResourceTypeInfo &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUuid, plScriptCompendiumResourceDesc::ComponentTypeInfo &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plHybridArray&lt; plHybridString, 4 &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUInt32, plShaderStageBinary &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, ShaderData &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; size_t, plSingletonRegistry::SingletonEntry &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, FileContent &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plTempHashedString, plTag &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUInt64, MessageQueue &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plTokenizedFileCache::FileData &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plToolsTag &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plTimestamp &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUuid, bool &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUuid, plTypeScriptBinding::TsComponentInfo &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plUniquePtr&lt; plCVar &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, plTypeScriptBinding::ConsoleFuncBinding &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plGameObjectHandle, plUInt32 &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plComponentHandle, plUInt32 &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUuid, TsComponentInfo &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plHybridString, PropertyValue &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plRTTI *, plVisualScriptNodeRegistry::NodeDesc &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plDocumentObject *, NodeState &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plPin *, OutputPinState &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plInt8, plSet&lt; plHybridString &gt; &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plRTTI *, plVisualShaderNodeDescriptor &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; const plDocument *, DocData &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plGameObjectHandle, plUuid &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plComponentHandle, plUuid &gt;</a>, <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; plUInt32, plUuid &gt;</a>, and <a class="el" href="../../d9/d50/classpl_map.htm">plMap&lt; KeyType, ValueType, Comparer, AllocatorWrapper &gt;</a>.</p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a90d7be99c3ce5f016f7ca3d3336f0003" id="r_a90d7be99c3ce5f016f7ca3d3336f0003"><td class="memItemLeft" align="right" valign="top"><a id="a90d7be99c3ce5f016f7ca3d3336f0003" name="a90d7be99c3ce5f016f7ca3d3336f0003"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>ConstIterator</b> = <a class="el" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">plMapBaseConstIteratorBase</a>&lt;KeyType, ValueType, Comparer, false&gt;</td></tr>
<tr class="separator:a90d7be99c3ce5f016f7ca3d3336f0003"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70db21cf220fe7b38c6c6437af51b7cf" id="r_a70db21cf220fe7b38c6c6437af51b7cf"><td class="memItemLeft" align="right" valign="top"><a id="a70db21cf220fe7b38c6c6437af51b7cf" name="a70db21cf220fe7b38c6c6437af51b7cf"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>ConstReverseIterator</b> = <a class="el" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">plMapBaseConstIteratorBase</a>&lt;KeyType, ValueType, Comparer, true&gt;</td></tr>
<tr class="separator:a70db21cf220fe7b38c6c6437af51b7cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c305bbc8512bb81a6892a8994f7746e" id="r_a4c305bbc8512bb81a6892a8994f7746e"><td class="memItemLeft" align="right" valign="top"><a id="a4c305bbc8512bb81a6892a8994f7746e" name="a4c305bbc8512bb81a6892a8994f7746e"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>Iterator</b> = <a class="el" href="../../d3/d91/structpl_map_base_iterator_base.htm">plMapBaseIteratorBase</a>&lt;KeyType, ValueType, Comparer, false&gt;</td></tr>
<tr class="separator:a4c305bbc8512bb81a6892a8994f7746e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79c35d1fa77c4fe393021dff1e2d4951" id="r_a79c35d1fa77c4fe393021dff1e2d4951"><td class="memItemLeft" align="right" valign="top"><a id="a79c35d1fa77c4fe393021dff1e2d4951" name="a79c35d1fa77c4fe393021dff1e2d4951"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>ReverseIterator</b> = <a class="el" href="../../d3/d91/structpl_map_base_iterator_base.htm">plMapBaseIteratorBase</a>&lt;KeyType, ValueType, Comparer, true&gt;</td></tr>
<tr class="separator:a79c35d1fa77c4fe393021dff1e2d4951"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a5bee4eaab7d49005eba4c3387d37541d" id="r_a5bee4eaab7d49005eba4c3387d37541d"><td class="memItemLeft" align="right" valign="top"><a id="a5bee4eaab7d49005eba4c3387d37541d" name="a5bee4eaab7d49005eba4c3387d37541d"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEmpty</b> () const</td></tr>
<tr class="memdesc:a5bee4eaab7d49005eba4c3387d37541d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether there are no elements in the map. O(1) operation. <br /></td></tr>
<tr class="separator:a5bee4eaab7d49005eba4c3387d37541d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7836b1f7942107dbda516f8ab84acc3c" id="r_a7836b1f7942107dbda516f8ab84acc3c"><td class="memItemLeft" align="right" valign="top"><a id="a7836b1f7942107dbda516f8ab84acc3c" name="a7836b1f7942107dbda516f8ab84acc3c"></a>
plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GetCount</b> () const</td></tr>
<tr class="memdesc:a7836b1f7942107dbda516f8ab84acc3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of elements currently stored in the map. O(1) operation. <br /></td></tr>
<tr class="separator:a7836b1f7942107dbda516f8ab84acc3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4781441e042445a110a5f31fe570a639" id="r_a4781441e042445a110a5f31fe570a639"><td class="memItemLeft" align="right" valign="top"><a id="a4781441e042445a110a5f31fe570a639" name="a4781441e042445a110a5f31fe570a639"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Clear</b> ()</td></tr>
<tr class="memdesc:a4781441e042445a110a5f31fe570a639"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys all elements in the map and resets its size to zero. <br /></td></tr>
<tr class="separator:a4781441e042445a110a5f31fe570a639"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f38cc470721aee5fd73ceddfbd79064" id="r_a8f38cc470721aee5fd73ceddfbd79064"><td class="memItemLeft" align="right" valign="top"><a id="a8f38cc470721aee5fd73ceddfbd79064" name="a8f38cc470721aee5fd73ceddfbd79064"></a>
<a class="el" href="../../d3/d91/structpl_map_base_iterator_base.htm">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetIterator</b> ()</td></tr>
<tr class="memdesc:a8f38cc470721aee5fd73ceddfbd79064"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an Iterator to the very first element. <br /></td></tr>
<tr class="separator:a8f38cc470721aee5fd73ceddfbd79064"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ac11bae58d9463d029b4f55e2057ad5" id="r_a6ac11bae58d9463d029b4f55e2057ad5"><td class="memItemLeft" align="right" valign="top"><a id="a6ac11bae58d9463d029b4f55e2057ad5" name="a6ac11bae58d9463d029b4f55e2057ad5"></a>
<a class="el" href="../../d3/d91/structpl_map_base_iterator_base.htm">ReverseIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetReverseIterator</b> ()</td></tr>
<tr class="memdesc:a6ac11bae58d9463d029b4f55e2057ad5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a ReverseIterator to the very last element. <br /></td></tr>
<tr class="separator:a6ac11bae58d9463d029b4f55e2057ad5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33a8d6f1b767aec337daa1cc86406e46" id="r_a33a8d6f1b767aec337daa1cc86406e46"><td class="memItemLeft" align="right" valign="top"><a id="a33a8d6f1b767aec337daa1cc86406e46" name="a33a8d6f1b767aec337daa1cc86406e46"></a>
<a class="el" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetIterator</b> () const</td></tr>
<tr class="memdesc:a33a8d6f1b767aec337daa1cc86406e46"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a constant Iterator to the very first element. <br /></td></tr>
<tr class="separator:a33a8d6f1b767aec337daa1cc86406e46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17294186dce1335dba35cd054c254840" id="r_a17294186dce1335dba35cd054c254840"><td class="memItemLeft" align="right" valign="top"><a id="a17294186dce1335dba35cd054c254840" name="a17294186dce1335dba35cd054c254840"></a>
<a class="el" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">ConstReverseIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetReverseIterator</b> () const</td></tr>
<tr class="memdesc:a17294186dce1335dba35cd054c254840"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a constant ReverseIterator to the very last element. <br /></td></tr>
<tr class="separator:a17294186dce1335dba35cd054c254840"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c58266978a54ec4697ba4a981c1b80b" id="r_a6c58266978a54ec4697ba4a981c1b80b"><td class="memTemplParams" colspan="2"><a id="a6c58266978a54ec4697ba4a981c1b80b" name="a6c58266978a54ec4697ba4a981c1b80b"></a>
template&lt;typename CompatibleKeyType , typename CompatibleValueType &gt; </td></tr>
<tr class="memitem:a6c58266978a54ec4697ba4a981c1b80b"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d3/d91/structpl_map_base_iterator_base.htm">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Insert</b> (CompatibleKeyType &amp;&amp;key, CompatibleValueType &amp;&amp;value)</td></tr>
<tr class="memdesc:a6c58266978a54ec4697ba4a981c1b80b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inserts the key/value pair into the tree and returns an Iterator to it. O(log n) operation. <br /></td></tr>
<tr class="separator:a6c58266978a54ec4697ba4a981c1b80b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70634f90fcf604ed5e48d867cabd532e" id="r_a70634f90fcf604ed5e48d867cabd532e"><td class="memTemplParams" colspan="2"><a id="a70634f90fcf604ed5e48d867cabd532e" name="a70634f90fcf604ed5e48d867cabd532e"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a70634f90fcf604ed5e48d867cabd532e"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Remove</b> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="memdesc:a70634f90fcf604ed5e48d867cabd532e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erases the key/value pair with the given key, if it exists. O(log n) operation. <br /></td></tr>
<tr class="separator:a70634f90fcf604ed5e48d867cabd532e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46ffc429675f4df5e95968470e6c1997" id="r_a46ffc429675f4df5e95968470e6c1997"><td class="memItemLeft" align="right" valign="top"><a id="a46ffc429675f4df5e95968470e6c1997" name="a46ffc429675f4df5e95968470e6c1997"></a>
<a class="el" href="../../d3/d91/structpl_map_base_iterator_base.htm">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><b>Remove</b> (const <a class="el" href="../../d3/d91/structpl_map_base_iterator_base.htm">Iterator</a> &amp;pos)</td></tr>
<tr class="memdesc:a46ffc429675f4df5e95968470e6c1997"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erases the key/value pair at the given Iterator. O(log n) operation. Returns an iterator to the element after the given iterator. <br /></td></tr>
<tr class="separator:a46ffc429675f4df5e95968470e6c1997"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b122c28aeba0192fbfba01001d61b75" id="r_a7b122c28aeba0192fbfba01001d61b75"><td class="memTemplParams" colspan="2"><a id="a7b122c28aeba0192fbfba01001d61b75" name="a7b122c28aeba0192fbfba01001d61b75"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a7b122c28aeba0192fbfba01001d61b75"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d3/d91/structpl_map_base_iterator_base.htm">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><b>FindOrAdd</b> (CompatibleKeyType &amp;&amp;key, bool *out_pExisted=nullptr)</td></tr>
<tr class="memdesc:a7b122c28aeba0192fbfba01001d61b75"><td class="mdescLeft">&#160;</td><td class="mdescRight">Searches for the given key and returns an iterator to it. If it did not exist yet, it is default-created. <em>bExisted</em> is set to true, if the key was found, false if it needed to be created. <br /></td></tr>
<tr class="separator:a7b122c28aeba0192fbfba01001d61b75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a632300492d4f3c9390a61d58f6cb4758" id="r_a632300492d4f3c9390a61d58f6cb4758"><td class="memTemplParams" colspan="2"><a id="a632300492d4f3c9390a61d58f6cb4758" name="a632300492d4f3c9390a61d58f6cb4758"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a632300492d4f3c9390a61d58f6cb4758"><td class="memTemplItemLeft" align="right" valign="top">ValueType &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator[]</b> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="memdesc:a632300492d4f3c9390a61d58f6cb4758"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows read/write access to the value stored under the given key. If there is no such key, a new element is default-constructed. <br /></td></tr>
<tr class="separator:a632300492d4f3c9390a61d58f6cb4758"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a1ffdef36aac6973903da9b8de0ec2a" id="r_a5a1ffdef36aac6973903da9b8de0ec2a"><td class="memTemplParams" colspan="2"><a id="a5a1ffdef36aac6973903da9b8de0ec2a" name="a5a1ffdef36aac6973903da9b8de0ec2a"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a5a1ffdef36aac6973903da9b8de0ec2a"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, ValueType &amp;out_value) const</td></tr>
<tr class="memdesc:a5a1ffdef36aac6973903da9b8de0ec2a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether an entry with the given key was found and if found writes out the corresponding value to out_value. <br /></td></tr>
<tr class="separator:a5a1ffdef36aac6973903da9b8de0ec2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7b2140fd6c972a8b1b282686cfa300c" id="r_af7b2140fd6c972a8b1b282686cfa300c"><td class="memTemplParams" colspan="2"><a id="af7b2140fd6c972a8b1b282686cfa300c" name="af7b2140fd6c972a8b1b282686cfa300c"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:af7b2140fd6c972a8b1b282686cfa300c"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, const ValueType *&amp;out_pValue) const</td></tr>
<tr class="memdesc:af7b2140fd6c972a8b1b282686cfa300c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether an entry with the given key was found and if found writes out the pointer to the corresponding value to out_pValue. <br /></td></tr>
<tr class="separator:af7b2140fd6c972a8b1b282686cfa300c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d8bf9ca79ff5233bb09054f3a4d9d7c" id="r_a8d8bf9ca79ff5233bb09054f3a4d9d7c"><td class="memTemplParams" colspan="2"><a id="a8d8bf9ca79ff5233bb09054f3a4d9d7c" name="a8d8bf9ca79ff5233bb09054f3a4d9d7c"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a8d8bf9ca79ff5233bb09054f3a4d9d7c"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, ValueType *&amp;out_pValue) const</td></tr>
<tr class="memdesc:a8d8bf9ca79ff5233bb09054f3a4d9d7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether an entry with the given key was found and if found writes out the pointer to the corresponding value to out_pValue. <br /></td></tr>
<tr class="separator:a8d8bf9ca79ff5233bb09054f3a4d9d7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7be4a03b4d477d14abfcdf06727e06fc" id="r_a7be4a03b4d477d14abfcdf06727e06fc"><td class="memTemplParams" colspan="2"><a id="a7be4a03b4d477d14abfcdf06727e06fc" name="a7be4a03b4d477d14abfcdf06727e06fc"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a7be4a03b4d477d14abfcdf06727e06fc"><td class="memTemplItemLeft" align="right" valign="top">const ValueType *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetValue</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="memdesc:a7be4a03b4d477d14abfcdf06727e06fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the value of the entry with the given key if found, otherwise returns nullptr. <br /></td></tr>
<tr class="separator:a7be4a03b4d477d14abfcdf06727e06fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf459d880c010ca7d61808bff8b3afd2" id="r_abf459d880c010ca7d61808bff8b3afd2"><td class="memTemplParams" colspan="2"><a id="abf459d880c010ca7d61808bff8b3afd2" name="abf459d880c010ca7d61808bff8b3afd2"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:abf459d880c010ca7d61808bff8b3afd2"><td class="memTemplItemLeft" align="right" valign="top">ValueType *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetValue</b> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="memdesc:abf459d880c010ca7d61808bff8b3afd2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the value of the entry with the given key if found, otherwise returns nullptr. <br /></td></tr>
<tr class="separator:abf459d880c010ca7d61808bff8b3afd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6a86c64b4c9288757b309bccf89dc1b" id="r_ac6a86c64b4c9288757b309bccf89dc1b"><td class="memTemplParams" colspan="2"><a id="ac6a86c64b4c9288757b309bccf89dc1b" name="ac6a86c64b4c9288757b309bccf89dc1b"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:ac6a86c64b4c9288757b309bccf89dc1b"><td class="memTemplItemLeft" align="right" valign="top">const ValueType &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetValueOrDefault</b> (const CompatibleKeyType &amp;key, const ValueType &amp;defaultValue) const</td></tr>
<tr class="memdesc:ac6a86c64b4c9288757b309bccf89dc1b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Either returns the value of the entry with the given key, if found, or the provided default value. <br /></td></tr>
<tr class="separator:ac6a86c64b4c9288757b309bccf89dc1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a279536d38132faa38825432d5e37ae21" id="r_a279536d38132faa38825432d5e37ae21"><td class="memTemplParams" colspan="2"><a id="a279536d38132faa38825432d5e37ae21" name="a279536d38132faa38825432d5e37ae21"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a279536d38132faa38825432d5e37ae21"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d3/d91/structpl_map_base_iterator_base.htm">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Find</b> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="memdesc:a279536d38132faa38825432d5e37ae21"><td class="mdescLeft">&#160;</td><td class="mdescRight">Searches for key, returns an Iterator to it or an invalid iterator, if no such key is found. O(log n) operation. <br /></td></tr>
<tr class="separator:a279536d38132faa38825432d5e37ae21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d1160f85c4c9e36666c1efd2c9d7f73" id="r_a5d1160f85c4c9e36666c1efd2c9d7f73"><td class="memTemplParams" colspan="2"><a id="a5d1160f85c4c9e36666c1efd2c9d7f73" name="a5d1160f85c4c9e36666c1efd2c9d7f73"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a5d1160f85c4c9e36666c1efd2c9d7f73"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d3/d91/structpl_map_base_iterator_base.htm">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><b>LowerBound</b> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="memdesc:a5d1160f85c4c9e36666c1efd2c9d7f73"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an Iterator to the element with a key equal or larger than the given key. Returns an invalid iterator, if there is no such element. <br /></td></tr>
<tr class="separator:a5d1160f85c4c9e36666c1efd2c9d7f73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:accd65f874df0ae04c6273323dba8cb23" id="r_accd65f874df0ae04c6273323dba8cb23"><td class="memTemplParams" colspan="2"><a id="accd65f874df0ae04c6273323dba8cb23" name="accd65f874df0ae04c6273323dba8cb23"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:accd65f874df0ae04c6273323dba8cb23"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d3/d91/structpl_map_base_iterator_base.htm">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><b>UpperBound</b> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="memdesc:accd65f874df0ae04c6273323dba8cb23"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an Iterator to the element with a key that is LARGER than the given key. Returns an invalid iterator, if there is no such element. <br /></td></tr>
<tr class="separator:accd65f874df0ae04c6273323dba8cb23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41a4177e7e2b472c746227615fd1b3b7" id="r_a41a4177e7e2b472c746227615fd1b3b7"><td class="memTemplParams" colspan="2"><a id="a41a4177e7e2b472c746227615fd1b3b7" name="a41a4177e7e2b472c746227615fd1b3b7"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a41a4177e7e2b472c746227615fd1b3b7"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">ConstIterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Find</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="memdesc:a41a4177e7e2b472c746227615fd1b3b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Searches for key, returns an Iterator to it or an invalid iterator, if no such key is found. O(log n) operation. <br /></td></tr>
<tr class="separator:a41a4177e7e2b472c746227615fd1b3b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a038ae61aac3d268ee637b8069fff8b79" id="r_a038ae61aac3d268ee637b8069fff8b79"><td class="memTemplParams" colspan="2"><a id="a038ae61aac3d268ee637b8069fff8b79" name="a038ae61aac3d268ee637b8069fff8b79"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a038ae61aac3d268ee637b8069fff8b79"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Contains</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="memdesc:a038ae61aac3d268ee637b8069fff8b79"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given key is in the container. <br /></td></tr>
<tr class="separator:a038ae61aac3d268ee637b8069fff8b79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5d444d275fdfd9531961373cc0df257" id="r_ac5d444d275fdfd9531961373cc0df257"><td class="memTemplParams" colspan="2"><a id="ac5d444d275fdfd9531961373cc0df257" name="ac5d444d275fdfd9531961373cc0df257"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:ac5d444d275fdfd9531961373cc0df257"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">ConstIterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><b>LowerBound</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="memdesc:ac5d444d275fdfd9531961373cc0df257"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an Iterator to the element with a key equal or larger than the given key. Returns an invalid iterator, if there is no such element. <br /></td></tr>
<tr class="separator:ac5d444d275fdfd9531961373cc0df257"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c8ae402009ca98a62b7e57fce8da46d" id="r_a1c8ae402009ca98a62b7e57fce8da46d"><td class="memTemplParams" colspan="2"><a id="a1c8ae402009ca98a62b7e57fce8da46d" name="a1c8ae402009ca98a62b7e57fce8da46d"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a1c8ae402009ca98a62b7e57fce8da46d"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d9/dad/structpl_map_base_const_iterator_base.htm">ConstIterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><b>UpperBound</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="memdesc:a1c8ae402009ca98a62b7e57fce8da46d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an Iterator to the element with a key that is LARGER than the given key. Returns an invalid iterator, if there is no such element. <br /></td></tr>
<tr class="separator:a1c8ae402009ca98a62b7e57fce8da46d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08587ef06af6915d4493add683eb390c" id="r_a08587ef06af6915d4493add683eb390c"><td class="memItemLeft" align="right" valign="top"><a id="a08587ef06af6915d4493add683eb390c" name="a08587ef06af6915d4493add683eb390c"></a>
<a class="el" href="../../da/df3/classpl_allocator.htm">plAllocator</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetAllocator</b> () const</td></tr>
<tr class="memdesc:a08587ef06af6915d4493add683eb390c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the allocator that is used by this instance. <br /></td></tr>
<tr class="separator:a08587ef06af6915d4493add683eb390c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b629b43b77f5f089d2bb963947343f2" id="r_a4b629b43b77f5f089d2bb963947343f2"><td class="memItemLeft" align="right" valign="top"><a id="a4b629b43b77f5f089d2bb963947343f2" name="a4b629b43b77f5f089d2bb963947343f2"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator==</b> (const <a class="el" href="../../d9/dbe/classpl_map_base.htm">plMapBase</a>&lt; KeyType, ValueType, Comparer &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a4b629b43b77f5f089d2bb963947343f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Comparison operator. <br /></td></tr>
<tr class="separator:a4b629b43b77f5f089d2bb963947343f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad0e02aed36f0907eb3d5f6e59947e87" id="r_aad0e02aed36f0907eb3d5f6e59947e87"><td class="memItemLeft" align="right" valign="top"><a id="aad0e02aed36f0907eb3d5f6e59947e87" name="aad0e02aed36f0907eb3d5f6e59947e87"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>PL_ADD_DEFAULT_OPERATOR_NOTEQUAL</b> (const <a class="el" href="../../d9/dbe/classpl_map_base.htm">plMapBase</a>&lt; KeyType, ValueType, Comparer &gt; &amp;)</td></tr>
<tr class="separator:aad0e02aed36f0907eb3d5f6e59947e87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a535d608aaab6cdeca2628c88841691dd" id="r_a535d608aaab6cdeca2628c88841691dd"><td class="memItemLeft" align="right" valign="top"><a id="a535d608aaab6cdeca2628c88841691dd" name="a535d608aaab6cdeca2628c88841691dd"></a>
plUInt64&#160;</td><td class="memItemRight" valign="bottom"><b>GetHeapMemoryUsage</b> () const</td></tr>
<tr class="memdesc:a535d608aaab6cdeca2628c88841691dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the amount of bytes that are currently allocated on the heap. <br /></td></tr>
<tr class="separator:a535d608aaab6cdeca2628c88841691dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a311f73ffbb7f917ad665d57c961248" id="r_a9a311f73ffbb7f917ad665d57c961248"><td class="memItemLeft" align="right" valign="top"><a id="a9a311f73ffbb7f917ad665d57c961248" name="a9a311f73ffbb7f917ad665d57c961248"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Swap</b> (<a class="el" href="../../d9/dbe/classpl_map_base.htm">plMapBase</a>&lt; KeyType, ValueType, Comparer &gt; &amp;other)</td></tr>
<tr class="memdesc:a9a311f73ffbb7f917ad665d57c961248"><td class="mdescLeft">&#160;</td><td class="mdescRight">Swaps this map with the other one. <br /></td></tr>
<tr class="separator:a9a311f73ffbb7f917ad665d57c961248"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a886acd978e96be8ee98dd6082db79ebc" id="r_a886acd978e96be8ee98dd6082db79ebc"><td class="memTemplParams" colspan="2"><a id="a886acd978e96be8ee98dd6082db79ebc" name="a886acd978e96be8ee98dd6082db79ebc"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a886acd978e96be8ee98dd6082db79ebc"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, ValueType &amp;out_value) const</td></tr>
<tr class="separator:a886acd978e96be8ee98dd6082db79ebc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a582499d413ab04df4f9836969a0fd6fa" id="r_a582499d413ab04df4f9836969a0fd6fa"><td class="memTemplParams" colspan="2"><a id="a582499d413ab04df4f9836969a0fd6fa" name="a582499d413ab04df4f9836969a0fd6fa"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a582499d413ab04df4f9836969a0fd6fa"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, const ValueType *&amp;out_pValue) const</td></tr>
<tr class="separator:a582499d413ab04df4f9836969a0fd6fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af95ab2f2dee41d550626865e2bfabf4c" id="r_af95ab2f2dee41d550626865e2bfabf4c"><td class="memTemplParams" colspan="2"><a id="af95ab2f2dee41d550626865e2bfabf4c" name="af95ab2f2dee41d550626865e2bfabf4c"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:af95ab2f2dee41d550626865e2bfabf4c"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, ValueType *&amp;out_pValue) const</td></tr>
<tr class="separator:af95ab2f2dee41d550626865e2bfabf4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a559a18ed24e6047f6a3e885d71b4b2ac" id="r_a559a18ed24e6047f6a3e885d71b4b2ac"><td class="memTemplParams" colspan="2"><a id="a559a18ed24e6047f6a3e885d71b4b2ac" name="a559a18ed24e6047f6a3e885d71b4b2ac"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a559a18ed24e6047f6a3e885d71b4b2ac"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE const ValueType *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetValue</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="separator:a559a18ed24e6047f6a3e885d71b4b2ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a420b5475db0d5eb5f01b7f5dfc238246" id="r_a420b5475db0d5eb5f01b7f5dfc238246"><td class="memTemplParams" colspan="2"><a id="a420b5475db0d5eb5f01b7f5dfc238246" name="a420b5475db0d5eb5f01b7f5dfc238246"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a420b5475db0d5eb5f01b7f5dfc238246"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE ValueType *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetValue</b> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="separator:a420b5475db0d5eb5f01b7f5dfc238246"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ea14de07c6361dd1aa6d5272cc7d9cd" id="r_a3ea14de07c6361dd1aa6d5272cc7d9cd"><td class="memTemplParams" colspan="2"><a id="a3ea14de07c6361dd1aa6d5272cc7d9cd" name="a3ea14de07c6361dd1aa6d5272cc7d9cd"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a3ea14de07c6361dd1aa6d5272cc7d9cd"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE const ValueType &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetValueOrDefault</b> (const CompatibleKeyType &amp;key, const ValueType &amp;defaultValue) const</td></tr>
<tr class="separator:a3ea14de07c6361dd1aa6d5272cc7d9cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca284a301098fbdf6e158de335ca24a4" id="r_aca284a301098fbdf6e158de335ca24a4"><td class="memTemplParams" colspan="2"><a id="aca284a301098fbdf6e158de335ca24a4" name="aca284a301098fbdf6e158de335ca24a4"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:aca284a301098fbdf6e158de335ca24a4"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE <a class="el" href="../../d9/dbe/classpl_map_base.htm">plMapBase</a>&lt; KeyType, ValueType, Comparer &gt;::Iterator&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Find</b> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="separator:aca284a301098fbdf6e158de335ca24a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8fdd5704676dbc6dfda7d5682131587f" id="r_a8fdd5704676dbc6dfda7d5682131587f"><td class="memTemplParams" colspan="2"><a id="a8fdd5704676dbc6dfda7d5682131587f" name="a8fdd5704676dbc6dfda7d5682131587f"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a8fdd5704676dbc6dfda7d5682131587f"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE <a class="el" href="../../d9/dbe/classpl_map_base.htm">plMapBase</a>&lt; KeyType, ValueType, Comparer &gt;::ConstIterator&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Find</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="separator:a8fdd5704676dbc6dfda7d5682131587f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18bd73778cb6ce35ae7be96eb8673c11" id="r_a18bd73778cb6ce35ae7be96eb8673c11"><td class="memTemplParams" colspan="2"><a id="a18bd73778cb6ce35ae7be96eb8673c11" name="a18bd73778cb6ce35ae7be96eb8673c11"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a18bd73778cb6ce35ae7be96eb8673c11"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Contains</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="separator:a18bd73778cb6ce35ae7be96eb8673c11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac59387a697296fd5cce7607f469937cd" id="r_ac59387a697296fd5cce7607f469937cd"><td class="memTemplParams" colspan="2"><a id="ac59387a697296fd5cce7607f469937cd" name="ac59387a697296fd5cce7607f469937cd"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:ac59387a697296fd5cce7607f469937cd"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE <a class="el" href="../../d9/dbe/classpl_map_base.htm">plMapBase</a>&lt; KeyType, ValueType, Comparer &gt;::Iterator&#160;</td><td class="memTemplItemRight" valign="bottom"><b>LowerBound</b> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="separator:ac59387a697296fd5cce7607f469937cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c6549b44844ad90df22d322f0556e88" id="r_a5c6549b44844ad90df22d322f0556e88"><td class="memTemplParams" colspan="2"><a id="a5c6549b44844ad90df22d322f0556e88" name="a5c6549b44844ad90df22d322f0556e88"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a5c6549b44844ad90df22d322f0556e88"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE <a class="el" href="../../d9/dbe/classpl_map_base.htm">plMapBase</a>&lt; KeyType, ValueType, Comparer &gt;::ConstIterator&#160;</td><td class="memTemplItemRight" valign="bottom"><b>LowerBound</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="separator:a5c6549b44844ad90df22d322f0556e88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6140f196aacc5219195746bb4cfbeb86" id="r_a6140f196aacc5219195746bb4cfbeb86"><td class="memTemplParams" colspan="2"><a id="a6140f196aacc5219195746bb4cfbeb86" name="a6140f196aacc5219195746bb4cfbeb86"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a6140f196aacc5219195746bb4cfbeb86"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE <a class="el" href="../../d9/dbe/classpl_map_base.htm">plMapBase</a>&lt; KeyType, ValueType, Comparer &gt;::Iterator&#160;</td><td class="memTemplItemRight" valign="bottom"><b>UpperBound</b> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="separator:a6140f196aacc5219195746bb4cfbeb86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2df266f1e9e0cbf305182e60f8a1733" id="r_aa2df266f1e9e0cbf305182e60f8a1733"><td class="memTemplParams" colspan="2"><a id="aa2df266f1e9e0cbf305182e60f8a1733" name="aa2df266f1e9e0cbf305182e60f8a1733"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:aa2df266f1e9e0cbf305182e60f8a1733"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE <a class="el" href="../../d9/dbe/classpl_map_base.htm">plMapBase</a>&lt; KeyType, ValueType, Comparer &gt;::ConstIterator&#160;</td><td class="memTemplItemRight" valign="bottom"><b>UpperBound</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="separator:aa2df266f1e9e0cbf305182e60f8a1733"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-methods" name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:ac24bfa33be79545a3745c3bb5c219967" id="r_ac24bfa33be79545a3745c3bb5c219967"><td class="memItemLeft" align="right" valign="top"><a id="ac24bfa33be79545a3745c3bb5c219967" name="ac24bfa33be79545a3745c3bb5c219967"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plMapBase</b> (const Comparer &amp;comparer, <a class="el" href="../../da/df3/classpl_allocator.htm">plAllocator</a> *pAllocator)</td></tr>
<tr class="memdesc:ac24bfa33be79545a3745c3bb5c219967"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the map to be empty. <br /></td></tr>
<tr class="separator:ac24bfa33be79545a3745c3bb5c219967"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa34cec785e33823ae671e595a9b657a7" id="r_aa34cec785e33823ae671e595a9b657a7"><td class="memItemLeft" align="right" valign="top"><a id="aa34cec785e33823ae671e595a9b657a7" name="aa34cec785e33823ae671e595a9b657a7"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plMapBase</b> (const <a class="el" href="../../d9/dbe/classpl_map_base.htm">plMapBase</a>&lt; KeyType, ValueType, Comparer &gt; &amp;cc, <a class="el" href="../../da/df3/classpl_allocator.htm">plAllocator</a> *pAllocator)</td></tr>
<tr class="memdesc:aa34cec785e33823ae671e595a9b657a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies all key/value pairs from the given map into this one. <br /></td></tr>
<tr class="separator:aa34cec785e33823ae671e595a9b657a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48616ebe02686a94d9ac03eeb07d33e2" id="r_a48616ebe02686a94d9ac03eeb07d33e2"><td class="memItemLeft" align="right" valign="top"><a id="a48616ebe02686a94d9ac03eeb07d33e2" name="a48616ebe02686a94d9ac03eeb07d33e2"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>~plMapBase</b> ()</td></tr>
<tr class="memdesc:a48616ebe02686a94d9ac03eeb07d33e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys all elements from the map. <br /></td></tr>
<tr class="separator:a48616ebe02686a94d9ac03eeb07d33e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9809e273e5ba5c48b7be9ac4f2e06013" id="r_a9809e273e5ba5c48b7be9ac4f2e06013"><td class="memItemLeft" align="right" valign="top"><a id="a9809e273e5ba5c48b7be9ac4f2e06013" name="a9809e273e5ba5c48b7be9ac4f2e06013"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="../../d9/dbe/classpl_map_base.htm">plMapBase</a>&lt; KeyType, ValueType, Comparer &gt; &amp;rhs)</td></tr>
<tr class="memdesc:a9809e273e5ba5c48b7be9ac4f2e06013"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies all key/value pairs from the given map into this one. <br /></td></tr>
<tr class="separator:a9809e273e5ba5c48b7be9ac4f2e06013"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><div class="compoundTemplParams">template&lt;typename KeyType, typename ValueType, typename Comparer&gt;<br />
class plMapBase&lt; KeyType, ValueType, Comparer &gt;</div><p>An associative container. Similar to STL::map. </p>
<p>A map allows to store key/value pairs. This in turn allows to search for values by looking them up with a certain key. Key/Value pairs can also be erased again. All insertion/erasure/lookup functions take O(log n) time. The map is implemented using a balanced tree (a red-black tree), which means the order of insertions/erasures is not important, since it can never create a degenerated tree, and performance will always stay the same.<br  />
<br  />
KeyType is the key type. For example a string.<br  />
ValueType is the value type. For example int.<br  />
Comparer is a helper class that implements a strictly weak-ordering comparison for Key types. </p>
</div><hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/Engine/Foundation/Containers/<a class="el" href="../../d3/d63/_map_8h_source.htm">Map.h</a></li>
<li>Code/Engine/Foundation/Containers/Implementation/<a class="el" href="../../de/d1a/_map__inl_8h_source.htm">Map_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d9/dbe/classpl_map_base.htm">plMapBase</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
