<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Plasma Engine: plStandardJSONWriter Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Plasma Engine<span id="projectnumber">&#160;2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d9/d73/classpl_standard_j_s_o_n_writer.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-types">Protected Types</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="../../d0/d4b/classpl_standard_j_s_o_n_writer-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plStandardJSONWriter Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p>Implements a standard compliant JSON writer, all numbers are output as double values.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d7/d97/_j_s_o_n_writer_8h_source.htm">JSONWriter.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for plStandardJSONWriter:</div>
<div class="dyncontent">
<div class="center"><img src="../../de/df0/classpl_standard_j_s_o_n_writer__inherit__graph.png" border="0" usemap="#apl_standard_j_s_o_n_writer_inherit__map" alt="Inheritance graph"/></div>
<map name="apl_standard_j_s_o_n_writer_inherit__map" id="apl_standard_j_s_o_n_writer_inherit__map">
<area shape="rect" title="Implements a standard compliant JSON writer, all numbers are output as double values." alt="" coords="5,80,158,107"/>
<area shape="rect" href="../../da/dcd/classpl_j_s_o_n_writer.htm" title="The base class for JSON writers." alt="" coords="31,5,132,32"/>
<area shape="poly" title=" " alt="" coords="84,48,84,80,79,80,79,48"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d47/structpl_standard_j_s_o_n_writer_1_1_comma_writer.htm">CommaWriter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/d71/structpl_standard_j_s_o_n_writer_1_1_j_s_o_n_state.htm">JSONState</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a40cfe4f0d678bc228e2dffb02b12cb38" id="r_a40cfe4f0d678bc228e2dffb02b12cb38"><td class="memItemLeft" align="right" valign="top"><a id="a40cfe4f0d678bc228e2dffb02b12cb38" name="a40cfe4f0d678bc228e2dffb02b12cb38"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plStandardJSONWriter</b> ()</td></tr>
<tr class="memdesc:a40cfe4f0d678bc228e2dffb02b12cb38"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor. <br /></td></tr>
<tr class="separator:a40cfe4f0d678bc228e2dffb02b12cb38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68adf7c7620494c9aa3fcf41097f1434" id="r_a68adf7c7620494c9aa3fcf41097f1434"><td class="memItemLeft" align="right" valign="top"><a id="a68adf7c7620494c9aa3fcf41097f1434" name="a68adf7c7620494c9aa3fcf41097f1434"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>~plStandardJSONWriter</b> ()</td></tr>
<tr class="memdesc:a68adf7c7620494c9aa3fcf41097f1434"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor. <br /></td></tr>
<tr class="separator:a68adf7c7620494c9aa3fcf41097f1434"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb6b13a40fb5c361c9c91ff30324cc73" id="r_adb6b13a40fb5c361c9c91ff30324cc73"><td class="memItemLeft" align="right" valign="top"><a id="adb6b13a40fb5c361c9c91ff30324cc73" name="adb6b13a40fb5c361c9c91ff30324cc73"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetOutputStream</b> (<a class="el" href="../../d6/d90/classpl_stream_writer.htm">plStreamWriter</a> *pOutput)</td></tr>
<tr class="memdesc:adb6b13a40fb5c361c9c91ff30324cc73"><td class="mdescLeft">&#160;</td><td class="mdescRight">All output is written to this binary stream. <br /></td></tr>
<tr class="separator:adb6b13a40fb5c361c9c91ff30324cc73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1cca9687b4aa0ee7e1d7b77a270a5a11" id="r_a1cca9687b4aa0ee7e1d7b77a270a5a11"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a1cca9687b4aa0ee7e1d7b77a270a5a11">WriteBool</a> (bool value) override</td></tr>
<tr class="memdesc:a1cca9687b4aa0ee7e1d7b77a270a5a11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a bool to the JSON file. Can only be called between <a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a4a9e0274b936827b0ff04a77019125a7" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#a6e0593e41f493722a5d858a4fc49ad81" title="Ends outputting an array variable.">EndArray()</a>.     <br /></td></tr>
<tr class="separator:a1cca9687b4aa0ee7e1d7b77a270a5a11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a2cf4d7c61a65dea7cc79b396225b5b" id="r_a9a2cf4d7c61a65dea7cc79b396225b5b"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a9a2cf4d7c61a65dea7cc79b396225b5b">WriteInt32</a> (plInt32 value) override</td></tr>
<tr class="memdesc:a9a2cf4d7c61a65dea7cc79b396225b5b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes an int32 to the JSON file. Can only be called between <a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a4a9e0274b936827b0ff04a77019125a7" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#a6e0593e41f493722a5d858a4fc49ad81" title="Ends outputting an array variable.">EndArray()</a>.     <br /></td></tr>
<tr class="separator:a9a2cf4d7c61a65dea7cc79b396225b5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b308240d39ef2f67ac4979719ee45e0" id="r_a7b308240d39ef2f67ac4979719ee45e0"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7b308240d39ef2f67ac4979719ee45e0">WriteUInt32</a> (plUInt32 value) override</td></tr>
<tr class="memdesc:a7b308240d39ef2f67ac4979719ee45e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a uint32 to the JSON file. Can only be called between <a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a4a9e0274b936827b0ff04a77019125a7" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#a6e0593e41f493722a5d858a4fc49ad81" title="Ends outputting an array variable.">EndArray()</a>.     <br /></td></tr>
<tr class="separator:a7b308240d39ef2f67ac4979719ee45e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9028b74ddaa6246a222803e5f8c1e419" id="r_a9028b74ddaa6246a222803e5f8c1e419"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a9028b74ddaa6246a222803e5f8c1e419">WriteInt64</a> (plInt64 value) override</td></tr>
<tr class="memdesc:a9028b74ddaa6246a222803e5f8c1e419"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes an int64 to the JSON file. Can only be called between <a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a4a9e0274b936827b0ff04a77019125a7" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#a6e0593e41f493722a5d858a4fc49ad81" title="Ends outputting an array variable.">EndArray()</a>.     <br /></td></tr>
<tr class="separator:a9028b74ddaa6246a222803e5f8c1e419"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad293c05a4036cbc54fbb5c53da2d8dae" id="r_ad293c05a4036cbc54fbb5c53da2d8dae"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad293c05a4036cbc54fbb5c53da2d8dae">WriteUInt64</a> (plUInt64 value) override</td></tr>
<tr class="memdesc:ad293c05a4036cbc54fbb5c53da2d8dae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a uint64 to the JSON file. Can only be called between <a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a4a9e0274b936827b0ff04a77019125a7" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#a6e0593e41f493722a5d858a4fc49ad81" title="Ends outputting an array variable.">EndArray()</a>.     <br /></td></tr>
<tr class="separator:ad293c05a4036cbc54fbb5c53da2d8dae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35ff38ccf8a21eca8df9c472d8e88010" id="r_a35ff38ccf8a21eca8df9c472d8e88010"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a35ff38ccf8a21eca8df9c472d8e88010">WriteFloat</a> (float value) override</td></tr>
<tr class="memdesc:a35ff38ccf8a21eca8df9c472d8e88010"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a float to the JSON file. Can only be called between <a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a4a9e0274b936827b0ff04a77019125a7" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#a6e0593e41f493722a5d858a4fc49ad81" title="Ends outputting an array variable.">EndArray()</a>.     <br /></td></tr>
<tr class="separator:a35ff38ccf8a21eca8df9c472d8e88010"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e19e275f676713f15796f258294a8f2" id="r_a2e19e275f676713f15796f258294a8f2"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2e19e275f676713f15796f258294a8f2">WriteDouble</a> (double value) override</td></tr>
<tr class="memdesc:a2e19e275f676713f15796f258294a8f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a double to the JSON file. Can only be called between <a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a4a9e0274b936827b0ff04a77019125a7" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#a6e0593e41f493722a5d858a4fc49ad81" title="Ends outputting an array variable.">EndArray()</a>.     <br /></td></tr>
<tr class="separator:a2e19e275f676713f15796f258294a8f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae897572a415ff2e76c74d797909cfc13" id="r_ae897572a415ff2e76c74d797909cfc13"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae897572a415ff2e76c74d797909cfc13">WriteString</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> value) override</td></tr>
<tr class="memdesc:ae897572a415ff2e76c74d797909cfc13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a string to the JSON file. Can only be called between <a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a4a9e0274b936827b0ff04a77019125a7" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#a6e0593e41f493722a5d858a4fc49ad81" title="Ends outputting an array variable.">EndArray()</a>.     <br /></td></tr>
<tr class="separator:ae897572a415ff2e76c74d797909cfc13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b1cbf15ee49c2f2ac84a83e0fd0b0fa" id="r_a3b1cbf15ee49c2f2ac84a83e0fd0b0fa"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3b1cbf15ee49c2f2ac84a83e0fd0b0fa">WriteNULL</a> () override</td></tr>
<tr class="memdesc:a3b1cbf15ee49c2f2ac84a83e0fd0b0fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes the value 'null' to the JSON file. Can only be called between <a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a4a9e0274b936827b0ff04a77019125a7" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#a6e0593e41f493722a5d858a4fc49ad81" title="Ends outputting an array variable.">EndArray()</a>.     <br /></td></tr>
<tr class="separator:a3b1cbf15ee49c2f2ac84a83e0fd0b0fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5719293d2dc1ac7912a40001f13645f" id="r_ad5719293d2dc1ac7912a40001f13645f"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad5719293d2dc1ac7912a40001f13645f">WriteTime</a> (<a class="el" href="../../d1/df6/structpl_time.htm">plTime</a> value) override</td></tr>
<tr class="memdesc:ad5719293d2dc1ac7912a40001f13645f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes the time value as a double (i.e. redirects to <a class="el" href="#a2e19e275f676713f15796f258294a8f2" title="Writes a double to the JSON file. Can only be called between BeginVariable() / EndVariable() or Begin...">WriteDouble()</a>).  <br /></td></tr>
<tr class="separator:ad5719293d2dc1ac7912a40001f13645f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bc2d6bd4bb22c9ac7c02628baafa636" id="r_a2bc2d6bd4bb22c9ac7c02628baafa636"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2bc2d6bd4bb22c9ac7c02628baafa636">WriteColor</a> (const <a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a> &amp;value) override</td></tr>
<tr class="memdesc:a2bc2d6bd4bb22c9ac7c02628baafa636"><td class="mdescLeft">&#160;</td><td class="mdescRight">Outputs the value via <a class="el" href="#a2412a879411105fb689ef98752cde996" title="Outputs the value via WriteBinaryData().">WriteVec4()</a>.  <br /></td></tr>
<tr class="separator:a2bc2d6bd4bb22c9ac7c02628baafa636"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63afb645bbd51c2689ae66f613a8089d" id="r_a63afb645bbd51c2689ae66f613a8089d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a63afb645bbd51c2689ae66f613a8089d">WriteColorGamma</a> (const <a class="el" href="../../dd/dd8/classpl_color_gamma_u_b.htm">plColorGammaUB</a> &amp;value) override</td></tr>
<tr class="memdesc:a63afb645bbd51c2689ae66f613a8089d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Outputs the value via <a class="el" href="#a2412a879411105fb689ef98752cde996" title="Outputs the value via WriteBinaryData().">WriteVec4()</a>.  <br /></td></tr>
<tr class="separator:a63afb645bbd51c2689ae66f613a8089d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6354c042b68727116fbe8c8bf6e97bbf" id="r_a6354c042b68727116fbe8c8bf6e97bbf"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6354c042b68727116fbe8c8bf6e97bbf">WriteVec2</a> (const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2</a> &amp;value) override</td></tr>
<tr class="memdesc:a6354c042b68727116fbe8c8bf6e97bbf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Outputs the value via <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a>.  <br /></td></tr>
<tr class="separator:a6354c042b68727116fbe8c8bf6e97bbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3332699cbe91b58e408bc70c78d405e5" id="r_a3332699cbe91b58e408bc70c78d405e5"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3332699cbe91b58e408bc70c78d405e5">WriteVec3</a> (const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;value) override</td></tr>
<tr class="memdesc:a3332699cbe91b58e408bc70c78d405e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Outputs the value via <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a>.  <br /></td></tr>
<tr class="separator:a3332699cbe91b58e408bc70c78d405e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2412a879411105fb689ef98752cde996" id="r_a2412a879411105fb689ef98752cde996"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2412a879411105fb689ef98752cde996">WriteVec4</a> (const <a class="el" href="../../d1/d4b/classpl_vec4_template.htm">plVec4</a> &amp;value) override</td></tr>
<tr class="memdesc:a2412a879411105fb689ef98752cde996"><td class="mdescLeft">&#160;</td><td class="mdescRight">Outputs the value via <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a>.  <br /></td></tr>
<tr class="separator:a2412a879411105fb689ef98752cde996"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9096629ce17a2e7ee6b235ebaf8c0fe" id="r_af9096629ce17a2e7ee6b235ebaf8c0fe"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af9096629ce17a2e7ee6b235ebaf8c0fe">WriteVec2I32</a> (const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2I32</a> &amp;value) override</td></tr>
<tr class="memdesc:af9096629ce17a2e7ee6b235ebaf8c0fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Outputs the value via <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a>.  <br /></td></tr>
<tr class="separator:af9096629ce17a2e7ee6b235ebaf8c0fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec1b2d980e099bbecdb909c517c65ec4" id="r_aec1b2d980e099bbecdb909c517c65ec4"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aec1b2d980e099bbecdb909c517c65ec4">WriteVec3I32</a> (const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3I32</a> &amp;value) override</td></tr>
<tr class="memdesc:aec1b2d980e099bbecdb909c517c65ec4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Outputs the value via <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a>.  <br /></td></tr>
<tr class="separator:aec1b2d980e099bbecdb909c517c65ec4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b121a035b775bd204fce3536331549c" id="r_a6b121a035b775bd204fce3536331549c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6b121a035b775bd204fce3536331549c">WriteVec4I32</a> (const <a class="el" href="../../d1/d4b/classpl_vec4_template.htm">plVec4I32</a> &amp;value) override</td></tr>
<tr class="memdesc:a6b121a035b775bd204fce3536331549c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Outputs the value via <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a>.  <br /></td></tr>
<tr class="separator:a6b121a035b775bd204fce3536331549c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aedb594f6bd10b0a8410ac598aa2cbe27" id="r_aedb594f6bd10b0a8410ac598aa2cbe27"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aedb594f6bd10b0a8410ac598aa2cbe27">WriteQuat</a> (const <a class="el" href="../../d6/dad/classpl_quat_template.htm">plQuat</a> &amp;value) override</td></tr>
<tr class="memdesc:aedb594f6bd10b0a8410ac598aa2cbe27"><td class="mdescLeft">&#160;</td><td class="mdescRight">Outputs the value via <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a>.  <br /></td></tr>
<tr class="separator:aedb594f6bd10b0a8410ac598aa2cbe27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1f2a6a730d0cb5a1b352a7f83ef621a" id="r_af1f2a6a730d0cb5a1b352a7f83ef621a"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af1f2a6a730d0cb5a1b352a7f83ef621a">WriteMat3</a> (const <a class="el" href="../../d5/d81/classpl_mat3_template.htm">plMat3</a> &amp;value) override</td></tr>
<tr class="memdesc:af1f2a6a730d0cb5a1b352a7f83ef621a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Outputs the value via <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a>.  <br /></td></tr>
<tr class="separator:af1f2a6a730d0cb5a1b352a7f83ef621a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a0de95f78eacf359c06e82bce46808b" id="r_a1a0de95f78eacf359c06e82bce46808b"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a1a0de95f78eacf359c06e82bce46808b">WriteMat4</a> (const <a class="el" href="../../d4/dbd/classpl_mat4_template.htm">plMat4</a> &amp;value) override</td></tr>
<tr class="memdesc:a1a0de95f78eacf359c06e82bce46808b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Outputs the value via <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a>.  <br /></td></tr>
<tr class="separator:a1a0de95f78eacf359c06e82bce46808b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6001cd65ef61b63e5d10a26d06ee2885" id="r_a6001cd65ef61b63e5d10a26d06ee2885"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6001cd65ef61b63e5d10a26d06ee2885">WriteUuid</a> (const <a class="el" href="../../d6/d33/classpl_uuid.htm">plUuid</a> &amp;value) override</td></tr>
<tr class="memdesc:a6001cd65ef61b63e5d10a26d06ee2885"><td class="mdescLeft">&#160;</td><td class="mdescRight">Outputs the value via <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a>.  <br /></td></tr>
<tr class="separator:a6001cd65ef61b63e5d10a26d06ee2885"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70dd91f5887ae5235251dc6c7682138d" id="r_a70dd91f5887ae5235251dc6c7682138d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a70dd91f5887ae5235251dc6c7682138d">WriteAngle</a> (<a class="el" href="../../d4/dfd/classpl_angle.htm">plAngle</a> value) override</td></tr>
<tr class="memdesc:a70dd91f5887ae5235251dc6c7682138d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a float to the JSON file. Can only be called between <a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a4a9e0274b936827b0ff04a77019125a7" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#a6e0593e41f493722a5d858a4fc49ad81" title="Ends outputting an array variable.">EndArray()</a>.     <br /></td></tr>
<tr class="separator:a70dd91f5887ae5235251dc6c7682138d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a472f9c5b2636004c30415478d942388c" id="r_a472f9c5b2636004c30415478d942388c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a472f9c5b2636004c30415478d942388c">WriteDataBuffer</a> (const <a class="el" href="../../d0/d4e/classpl_dynamic_array.htm">plDataBuffer</a> &amp;value) override</td></tr>
<tr class="memdesc:a472f9c5b2636004c30415478d942388c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Outputs the value via <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a>.  <br /></td></tr>
<tr class="separator:a472f9c5b2636004c30415478d942388c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa13fdb6a1c83cb24be617634c78002a" id="r_aaa13fdb6a1c83cb24be617634c78002a"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a">WriteBinaryData</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sDataType, const void *pData, plUInt32 uiBytes, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sValueString=nullptr) override</td></tr>
<tr class="memdesc:aaa13fdb6a1c83cb24be617634c78002a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Implements the MongoDB way of writing binary data. First writes a "$type" variable, then a "$binary" variable that represents the raw data (Hex encoded, little endian).  <br /></td></tr>
<tr class="separator:aaa13fdb6a1c83cb24be617634c78002a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a04d8f8d50b3504c7bfca51c3ee9e81" id="r_a4a04d8f8d50b3504c7bfca51c3ee9e81"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81">BeginVariable</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName) override</td></tr>
<tr class="memdesc:a4a04d8f8d50b3504c7bfca51c3ee9e81"><td class="mdescLeft">&#160;</td><td class="mdescRight">Begins outputting a variable. <em>szName</em> is the variable name.     <br /></td></tr>
<tr class="separator:a4a04d8f8d50b3504c7bfca51c3ee9e81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a414b598a4003d3da5e8d8dbe4ceea73e" id="r_a414b598a4003d3da5e8d8dbe4ceea73e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e">EndVariable</a> () override</td></tr>
<tr class="memdesc:a414b598a4003d3da5e8d8dbe4ceea73e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Ends outputting a variable.     <br /></td></tr>
<tr class="separator:a414b598a4003d3da5e8d8dbe4ceea73e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a9e0274b936827b0ff04a77019125a7" id="r_a4a9e0274b936827b0ff04a77019125a7"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a4a9e0274b936827b0ff04a77019125a7">BeginArray</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName={}) override</td></tr>
<tr class="memdesc:a4a9e0274b936827b0ff04a77019125a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Begins outputting an array variable.     <br /></td></tr>
<tr class="separator:a4a9e0274b936827b0ff04a77019125a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e0593e41f493722a5d858a4fc49ad81" id="r_a6e0593e41f493722a5d858a4fc49ad81"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6e0593e41f493722a5d858a4fc49ad81">EndArray</a> () override</td></tr>
<tr class="memdesc:a6e0593e41f493722a5d858a4fc49ad81"><td class="mdescLeft">&#160;</td><td class="mdescRight">Ends outputting an array variable.     <br /></td></tr>
<tr class="separator:a6e0593e41f493722a5d858a4fc49ad81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab06994bb514ab532bb62be4a8422b13f" id="r_ab06994bb514ab532bb62be4a8422b13f"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ab06994bb514ab532bb62be4a8422b13f">BeginObject</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName={}) override</td></tr>
<tr class="memdesc:ab06994bb514ab532bb62be4a8422b13f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Begins outputting an object variable.     <br /></td></tr>
<tr class="separator:ab06994bb514ab532bb62be4a8422b13f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a1ba5d6bcf753cf8592db1abdbf2b5e" id="r_a0a1ba5d6bcf753cf8592db1abdbf2b5e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a0a1ba5d6bcf753cf8592db1abdbf2b5e">EndObject</a> () override</td></tr>
<tr class="memdesc:a0a1ba5d6bcf753cf8592db1abdbf2b5e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Ends outputting an object variable.     <br /></td></tr>
<tr class="separator:a0a1ba5d6bcf753cf8592db1abdbf2b5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classpl_j_s_o_n_writer"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_classpl_j_s_o_n_writer')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm">plJSONWriter</a></td></tr>
<tr class="memitem:ac5d596bfb581032de1e3b036d960661a inherit pub_methods_classpl_j_s_o_n_writer" id="r_ac5d596bfb581032de1e3b036d960661a"><td class="memItemLeft" align="right" valign="top">
&#160;</td><td class="memItemRight" valign="bottom"><b>plJSONWriter</b> ()</td></tr>
<tr class="memdesc:ac5d596bfb581032de1e3b036d960661a inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor. <br /></td></tr>
<tr class="separator:ac5d596bfb581032de1e3b036d960661a inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bbaf973eb4c17448409f137749bac24 inherit pub_methods_classpl_j_s_o_n_writer" id="r_a6bbaf973eb4c17448409f137749bac24"><td class="memItemLeft" align="right" valign="top">
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>~plJSONWriter</b> ()</td></tr>
<tr class="memdesc:a6bbaf973eb4c17448409f137749bac24 inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor. <br /></td></tr>
<tr class="separator:a6bbaf973eb4c17448409f137749bac24 inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a956aa5200a1265e00c793fd72ee42c inherit pub_methods_classpl_j_s_o_n_writer" id="r_a4a956aa5200a1265e00c793fd72ee42c"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetWhitespaceMode</b> (<a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#ae6c53bd0fe35fde17db547951607bc40">WhitespaceMode</a> whitespaceMode)</td></tr>
<tr class="memdesc:a4a956aa5200a1265e00c793fd72ee42c inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures how much whitespace is output. <br /></td></tr>
<tr class="separator:a4a956aa5200a1265e00c793fd72ee42c inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac45b83379636adc57e90c6792cb4339b inherit pub_methods_classpl_j_s_o_n_writer" id="r_ac45b83379636adc57e90c6792cb4339b"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetArrayMode</b> (<a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#ae0121c409d0e170ca20f3a00577da987">ArrayMode</a> arrayMode)</td></tr>
<tr class="memdesc:ac45b83379636adc57e90c6792cb4339b inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures how arrays are written. <br /></td></tr>
<tr class="separator:ac45b83379636adc57e90c6792cb4339b inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8022d847aefdf72ea1f3d1c73cd89ec8 inherit pub_methods_classpl_j_s_o_n_writer" id="r_a8022d847aefdf72ea1f3d1c73cd89ec8"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableBool</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, bool value)</td></tr>
<tr class="memdesc:a8022d847aefdf72ea1f3d1c73cd89ec8 inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteBool(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a8022d847aefdf72ea1f3d1c73cd89ec8 inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a596bc640afcb1e03e9c70a0c1b31deb0 inherit pub_methods_classpl_j_s_o_n_writer" id="r_a596bc640afcb1e03e9c70a0c1b31deb0"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableInt32</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, plInt32 value)</td></tr>
<tr class="memdesc:a596bc640afcb1e03e9c70a0c1b31deb0 inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteInt32(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a596bc640afcb1e03e9c70a0c1b31deb0 inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90f0b373ae6ea84c6c2d04aaffb147d3 inherit pub_methods_classpl_j_s_o_n_writer" id="r_a90f0b373ae6ea84c6c2d04aaffb147d3"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableUInt32</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, plUInt32 value)</td></tr>
<tr class="memdesc:a90f0b373ae6ea84c6c2d04aaffb147d3 inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteUInt32(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a90f0b373ae6ea84c6c2d04aaffb147d3 inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a870e930d34870ec411d7f626a8d8a0ad inherit pub_methods_classpl_j_s_o_n_writer" id="r_a870e930d34870ec411d7f626a8d8a0ad"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableInt64</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, plInt64 value)</td></tr>
<tr class="memdesc:a870e930d34870ec411d7f626a8d8a0ad inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteInt64(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a870e930d34870ec411d7f626a8d8a0ad inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2b5cb6464b009f2a21f1da2934c494d inherit pub_methods_classpl_j_s_o_n_writer" id="r_ac2b5cb6464b009f2a21f1da2934c494d"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableUInt64</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, plUInt64 value)</td></tr>
<tr class="memdesc:ac2b5cb6464b009f2a21f1da2934c494d inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteUInt64(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:ac2b5cb6464b009f2a21f1da2934c494d inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d9c45240f435d4465a04087e4215457 inherit pub_methods_classpl_j_s_o_n_writer" id="r_a8d9c45240f435d4465a04087e4215457"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableFloat</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, float value)</td></tr>
<tr class="memdesc:a8d9c45240f435d4465a04087e4215457 inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteFloat(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a8d9c45240f435d4465a04087e4215457 inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1804d4c5d10c84755a4cd65cbdd29875 inherit pub_methods_classpl_j_s_o_n_writer" id="r_a1804d4c5d10c84755a4cd65cbdd29875"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableDouble</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, double value)</td></tr>
<tr class="memdesc:a1804d4c5d10c84755a4cd65cbdd29875 inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteDouble(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a1804d4c5d10c84755a4cd65cbdd29875 inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d4cdc66dc158f61a5bd14ebc39e5f2d inherit pub_methods_classpl_j_s_o_n_writer" id="r_a1d4cdc66dc158f61a5bd14ebc39e5f2d"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableString</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> value)</td></tr>
<tr class="memdesc:a1d4cdc66dc158f61a5bd14ebc39e5f2d inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteString(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a1d4cdc66dc158f61a5bd14ebc39e5f2d inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad88f69d8d1d327c71399d3dee26c9b55 inherit pub_methods_classpl_j_s_o_n_writer" id="r_ad88f69d8d1d327c71399d3dee26c9b55"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableNULL</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName)</td></tr>
<tr class="memdesc:ad88f69d8d1d327c71399d3dee26c9b55 inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteNULL(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:ad88f69d8d1d327c71399d3dee26c9b55 inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01d434a07f36c1b57b5a2a50adcc873d inherit pub_methods_classpl_j_s_o_n_writer" id="r_a01d434a07f36c1b57b5a2a50adcc873d"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableTime</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, <a class="el" href="../../d1/df6/structpl_time.htm">plTime</a> value)</td></tr>
<tr class="memdesc:a01d434a07f36c1b57b5a2a50adcc873d inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteTime(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a01d434a07f36c1b57b5a2a50adcc873d inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a102183562736a17b946aee8de00390d7 inherit pub_methods_classpl_j_s_o_n_writer" id="r_a102183562736a17b946aee8de00390d7"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableUuid</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, <a class="el" href="../../d6/d33/classpl_uuid.htm">plUuid</a> value)</td></tr>
<tr class="memdesc:a102183562736a17b946aee8de00390d7 inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteUuid(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a102183562736a17b946aee8de00390d7 inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca0951f8c5c0dc397628fe671e9d569c inherit pub_methods_classpl_j_s_o_n_writer" id="r_aca0951f8c5c0dc397628fe671e9d569c"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableAngle</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, <a class="el" href="../../d4/dfd/classpl_angle.htm">plAngle</a> value)</td></tr>
<tr class="memdesc:aca0951f8c5c0dc397628fe671e9d569c inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteAngle(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:aca0951f8c5c0dc397628fe671e9d569c inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f9a68f2c08c314122523b5b9cae2f90 inherit pub_methods_classpl_j_s_o_n_writer" id="r_a1f9a68f2c08c314122523b5b9cae2f90"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableColor</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a> &amp;value)</td></tr>
<tr class="memdesc:a1f9a68f2c08c314122523b5b9cae2f90 inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteColor(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a1f9a68f2c08c314122523b5b9cae2f90 inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa24f38e4c81b5d5dbe548f52fcd1aeea inherit pub_methods_classpl_j_s_o_n_writer" id="r_aa24f38e4c81b5d5dbe548f52fcd1aeea"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableColorGamma</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../dd/dd8/classpl_color_gamma_u_b.htm">plColorGammaUB</a> &amp;value)</td></tr>
<tr class="memdesc:aa24f38e4c81b5d5dbe548f52fcd1aeea inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteColorGamma(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:aa24f38e4c81b5d5dbe548f52fcd1aeea inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2da0eb538a66b5a7997c97399eca0267 inherit pub_methods_classpl_j_s_o_n_writer" id="r_a2da0eb538a66b5a7997c97399eca0267"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableVec2</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2</a> &amp;value)</td></tr>
<tr class="memdesc:a2da0eb538a66b5a7997c97399eca0267 inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteVec2(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a2da0eb538a66b5a7997c97399eca0267 inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1dbcdd800f3f4a2f2ceec7492cb55cb4 inherit pub_methods_classpl_j_s_o_n_writer" id="r_a1dbcdd800f3f4a2f2ceec7492cb55cb4"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableVec3</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;value)</td></tr>
<tr class="memdesc:a1dbcdd800f3f4a2f2ceec7492cb55cb4 inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteVec3(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a1dbcdd800f3f4a2f2ceec7492cb55cb4 inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2f8258ef53e6efd60f6d3db2d97bf10 inherit pub_methods_classpl_j_s_o_n_writer" id="r_ab2f8258ef53e6efd60f6d3db2d97bf10"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableVec4</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../d1/d4b/classpl_vec4_template.htm">plVec4</a> &amp;value)</td></tr>
<tr class="memdesc:ab2f8258ef53e6efd60f6d3db2d97bf10 inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteVec4(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:ab2f8258ef53e6efd60f6d3db2d97bf10 inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af92fa302d4f9961dbebf7256e96145d7 inherit pub_methods_classpl_j_s_o_n_writer" id="r_af92fa302d4f9961dbebf7256e96145d7"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableVec2I32</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2I32</a> &amp;value)</td></tr>
<tr class="memdesc:af92fa302d4f9961dbebf7256e96145d7 inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteVec2I32(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:af92fa302d4f9961dbebf7256e96145d7 inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbb6f734db6f8809ca5e359ab7b35314 inherit pub_methods_classpl_j_s_o_n_writer" id="r_acbb6f734db6f8809ca5e359ab7b35314"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableVec3I32</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3I32</a> &amp;value)</td></tr>
<tr class="memdesc:acbb6f734db6f8809ca5e359ab7b35314 inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteVec3I32(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:acbb6f734db6f8809ca5e359ab7b35314 inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28cfa263a01f8412a10bf8055b216e6b inherit pub_methods_classpl_j_s_o_n_writer" id="r_a28cfa263a01f8412a10bf8055b216e6b"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableVec4I32</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../d1/d4b/classpl_vec4_template.htm">plVec4I32</a> &amp;value)</td></tr>
<tr class="memdesc:a28cfa263a01f8412a10bf8055b216e6b inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteVec4I32(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a28cfa263a01f8412a10bf8055b216e6b inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ec62830396b7f2b01bdc709bd9fdf57 inherit pub_methods_classpl_j_s_o_n_writer" id="r_a3ec62830396b7f2b01bdc709bd9fdf57"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableQuat</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../d6/dad/classpl_quat_template.htm">plQuat</a> &amp;value)</td></tr>
<tr class="memdesc:a3ec62830396b7f2b01bdc709bd9fdf57 inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteQuat(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a3ec62830396b7f2b01bdc709bd9fdf57 inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad456a26f694ab5a9b034dcea17fdfb8d inherit pub_methods_classpl_j_s_o_n_writer" id="r_ad456a26f694ab5a9b034dcea17fdfb8d"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableMat3</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../d5/d81/classpl_mat3_template.htm">plMat3</a> &amp;value)</td></tr>
<tr class="memdesc:ad456a26f694ab5a9b034dcea17fdfb8d inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteMat3(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:ad456a26f694ab5a9b034dcea17fdfb8d inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8fdd15fafb06d3bb5363876e682f28f inherit pub_methods_classpl_j_s_o_n_writer" id="r_ae8fdd15fafb06d3bb5363876e682f28f"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableMat4</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../d4/dbd/classpl_mat4_template.htm">plMat4</a> &amp;value)</td></tr>
<tr class="memdesc:ae8fdd15fafb06d3bb5363876e682f28f inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteMat4(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:ae8fdd15fafb06d3bb5363876e682f28f inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e55eb23aea57aec93f6c16aa08fa698 inherit pub_methods_classpl_j_s_o_n_writer" id="r_a0e55eb23aea57aec93f6c16aa08fa698"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableDataBuffer</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../d0/d4e/classpl_dynamic_array.htm">plDataBuffer</a> &amp;value)</td></tr>
<tr class="memdesc:a0e55eb23aea57aec93f6c16aa08fa698 inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteDataBuffer(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a0e55eb23aea57aec93f6c16aa08fa698 inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c833e17245e09986f51572924da7895 inherit pub_methods_classpl_j_s_o_n_writer" id="r_a0c833e17245e09986f51572924da7895"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableVariant</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../da/d4c/classpl_variant.htm">plVariant</a> &amp;value)</td></tr>
<tr class="memdesc:a0c833e17245e09986f51572924da7895 inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteVariant(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a0c833e17245e09986f51572924da7895 inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae94f2056440b6a75fc78433f8f0b8961 inherit pub_methods_classpl_j_s_o_n_writer" id="r_ae94f2056440b6a75fc78433f8f0b8961"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#ae94f2056440b6a75fc78433f8f0b8961">WriteVariant</a> (const <a class="el" href="../../da/d4c/classpl_variant.htm">plVariant</a> &amp;value)</td></tr>
<tr class="memdesc:ae94f2056440b6a75fc78433f8f0b8961 inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">The default implementation dispatches all supported types to WriteBool, WriteInt32, etc. and asserts on the more complex types.  <br /></td></tr>
<tr class="separator:ae94f2056440b6a75fc78433f8f0b8961 inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7eb1f51c210e80ede4807cf885b6938d inherit pub_methods_classpl_j_s_o_n_writer" id="r_a7eb1f51c210e80ede4807cf885b6938d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#a7eb1f51c210e80ede4807cf885b6938d">HadWriteError</a> () const</td></tr>
<tr class="memdesc:a7eb1f51c210e80ede4807cf885b6938d inherit pub_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicates if an error was encountered while writing.  <br /></td></tr>
<tr class="separator:a7eb1f51c210e80ede4807cf885b6938d inherit pub_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-types" name="pro-types"></a>
Protected Types</h2></td></tr>
<tr class="memitem:afc67590ad4149117493cfb49cb72b79f" id="r_afc67590ad4149117493cfb49cb72b79f"><td class="memItemLeft" align="right" valign="top"><a id="afc67590ad4149117493cfb49cb72b79f" name="afc67590ad4149117493cfb49cb72b79f"></a>enum &#160;</td><td class="memItemRight" valign="bottom"><b>State</b> { <br />
&#160;&#160;<b>Invalid</b>
, <b>Empty</b>
, <b>Variable</b>
, <b>Object</b>
, <br />
&#160;&#160;<b>NamedObject</b>
, <b>Array</b>
, <b>NamedArray</b>
<br />
 }</td></tr>
<tr class="separator:afc67590ad4149117493cfb49cb72b79f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-methods" name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a63da14060c38784edc7272406ceb901b" id="r_a63da14060c38784edc7272406ceb901b"><td class="memItemLeft" align="right" valign="top"><a id="a63da14060c38784edc7272406ceb901b" name="a63da14060c38784edc7272406ceb901b"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>End</b> ()</td></tr>
<tr class="separator:a63da14060c38784edc7272406ceb901b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7d46b52a6a0c6daa906b204dc774e43" id="r_ae7d46b52a6a0c6daa906b204dc774e43"><td class="memItemLeft" align="right" valign="top"><a id="ae7d46b52a6a0c6daa906b204dc774e43" name="ae7d46b52a6a0c6daa906b204dc774e43"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>OutputString</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> s)</td></tr>
<tr class="separator:ae7d46b52a6a0c6daa906b204dc774e43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1aa2028151fa1cb823b01a1e3f7b2d1" id="r_aa1aa2028151fa1cb823b01a1e3f7b2d1"><td class="memItemLeft" align="right" valign="top"><a id="aa1aa2028151fa1cb823b01a1e3f7b2d1" name="aa1aa2028151fa1cb823b01a1e3f7b2d1"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>OutputEscapedString</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> s)</td></tr>
<tr class="separator:aa1aa2028151fa1cb823b01a1e3f7b2d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ed94d81d51dd78381542928b8aeae40" id="r_a1ed94d81d51dd78381542928b8aeae40"><td class="memItemLeft" align="right" valign="top"><a id="a1ed94d81d51dd78381542928b8aeae40" name="a1ed94d81d51dd78381542928b8aeae40"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>OutputIndentation</b> ()</td></tr>
<tr class="separator:a1ed94d81d51dd78381542928b8aeae40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classpl_j_s_o_n_writer"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_methods_classpl_j_s_o_n_writer')"><img src="../../closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm">plJSONWriter</a></td></tr>
<tr class="memitem:a09ffa3bc6302141e81a9d519e90828b7 inherit pro_methods_classpl_j_s_o_n_writer" id="r_a09ffa3bc6302141e81a9d519e90828b7"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetWriteErrorState</b> ()</td></tr>
<tr class="memdesc:a09ffa3bc6302141e81a9d519e90828b7 inherit pro_methods_classpl_j_s_o_n_writer"><td class="mdescLeft">&#160;</td><td class="mdescRight">called internally when there was an error during writing <br /></td></tr>
<tr class="separator:a09ffa3bc6302141e81a9d519e90828b7 inherit pro_methods_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-attribs" name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:ad8833ae486e5305a07e0f6a66eb8a103" id="r_ad8833ae486e5305a07e0f6a66eb8a103"><td class="memItemLeft" align="right" valign="top"><a id="ad8833ae486e5305a07e0f6a66eb8a103" name="ad8833ae486e5305a07e0f6a66eb8a103"></a>
plInt32&#160;</td><td class="memItemRight" valign="bottom"><b>m_iIndentation</b></td></tr>
<tr class="separator:ad8833ae486e5305a07e0f6a66eb8a103"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40e6a0b5c14fe950956005df9902f547" id="r_a40e6a0b5c14fe950956005df9902f547"><td class="memItemLeft" align="right" valign="top"><a id="a40e6a0b5c14fe950956005df9902f547" name="a40e6a0b5c14fe950956005df9902f547"></a>
<a class="el" href="../../d6/d90/classpl_stream_writer.htm">plStreamWriter</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>m_pOutput</b></td></tr>
<tr class="separator:a40e6a0b5c14fe950956005df9902f547"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad81dd26f813856247c283c4c0a68748f" id="r_ad81dd26f813856247c283c4c0a68748f"><td class="memItemLeft" align="right" valign="top"><a id="ad81dd26f813856247c283c4c0a68748f" name="ad81dd26f813856247c283c4c0a68748f"></a>
<a class="el" href="../../d8/dcc/classpl_hybrid_array.htm">plHybridArray</a>&lt; <a class="el" href="../../db/d71/structpl_standard_j_s_o_n_writer_1_1_j_s_o_n_state.htm">JSONState</a>, 16 &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>m_StateStack</b></td></tr>
<tr class="separator:ad81dd26f813856247c283c4c0a68748f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_classpl_j_s_o_n_writer"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_attribs_classpl_j_s_o_n_writer')"><img src="../../closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm">plJSONWriter</a></td></tr>
<tr class="memitem:abf45e32ce485e88b7f982fd3faa52037 inherit pro_attribs_classpl_j_s_o_n_writer" id="r_abf45e32ce485e88b7f982fd3faa52037"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#ae6c53bd0fe35fde17db547951607bc40">WhitespaceMode</a>&#160;</td><td class="memItemRight" valign="bottom"><b>m_WhitespaceMode</b> = <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#ae6c53bd0fe35fde17db547951607bc40ab1c94ca2fbc3e78fc30069c8d0f01680">WhitespaceMode::All</a></td></tr>
<tr class="separator:abf45e32ce485e88b7f982fd3faa52037 inherit pro_attribs_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74de23733a1cf3cbb8e2575be9d89314 inherit pro_attribs_classpl_j_s_o_n_writer" id="r_a74de23733a1cf3cbb8e2575be9d89314"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#ae0121c409d0e170ca20f3a00577da987">ArrayMode</a>&#160;</td><td class="memItemRight" valign="bottom"><b>m_ArrayMode</b> = <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#ae0121c409d0e170ca20f3a00577da987aefcb056b0921dbe898eb4c86e334c06c">ArrayMode::InOneLine</a></td></tr>
<tr class="separator:a74de23733a1cf3cbb8e2575be9d89314 inherit pro_attribs_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="inherited" name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_classpl_j_s_o_n_writer"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_types_classpl_j_s_o_n_writer')"><img src="../../closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm">plJSONWriter</a></td></tr>
<tr class="memitem:ae6c53bd0fe35fde17db547951607bc40 inherit pub_types_classpl_j_s_o_n_writer" id="r_ae6c53bd0fe35fde17db547951607bc40"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#ae6c53bd0fe35fde17db547951607bc40">WhitespaceMode</a> { <br />
&#160;&#160;<a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#ae6c53bd0fe35fde17db547951607bc40ab1c94ca2fbc3e78fc30069c8d0f01680">All</a>
, <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#ae6c53bd0fe35fde17db547951607bc40af1b93b10a0f5f3fc4ac9a01b0e43ebc8">LessIndentation</a>
, <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#ae6c53bd0fe35fde17db547951607bc40a77df809fc4dda1dfad604be6f3b09a9a">NoIndentation</a>
, <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#ae6c53bd0fe35fde17db547951607bc40a159988bd112cc0da6f701bc46843b89d">NewlinesOnly</a>
, <br />
&#160;&#160;<a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#ae6c53bd0fe35fde17db547951607bc40a6adf97f83acf6453d4a6a4b1070f3754">None</a>
<br />
 }</td></tr>
<tr class="memdesc:ae6c53bd0fe35fde17db547951607bc40"><td class="mdescLeft">&#160;</td><td class="mdescRight">Modes to configure how much whitespace the JSON writer will output.  <a href="../../da/dcd/classpl_j_s_o_n_writer.htm#ae6c53bd0fe35fde17db547951607bc40">More...</a><br /></td></tr>
<tr class="separator:ae6c53bd0fe35fde17db547951607bc40 inherit pub_types_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0121c409d0e170ca20f3a00577da987 inherit pub_types_classpl_j_s_o_n_writer" id="r_ae0121c409d0e170ca20f3a00577da987"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#ae0121c409d0e170ca20f3a00577da987">ArrayMode</a> { <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#ae0121c409d0e170ca20f3a00577da987aefcb056b0921dbe898eb4c86e334c06c">InOneLine</a>
, <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#ae0121c409d0e170ca20f3a00577da987a0a2c674aedb0dda5c5b29d44aa8c8549">OneLinePerItem</a>
 }</td></tr>
<tr class="memdesc:ae0121c409d0e170ca20f3a00577da987"><td class="mdescLeft">&#160;</td><td class="mdescRight">Modes to configure how arrays are written.  <a href="../../da/dcd/classpl_j_s_o_n_writer.htm#ae0121c409d0e170ca20f3a00577da987">More...</a><br /></td></tr>
<tr class="separator:ae0121c409d0e170ca20f3a00577da987 inherit pub_types_classpl_j_s_o_n_writer"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Implements a standard compliant JSON writer, all numbers are output as double values. </p>
<p><a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm" title="Implements a standard compliant JSON writer, all numbers are output as double values.">plStandardJSONWriter</a> also implements <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a> and the functions <a class="el" href="#a6354c042b68727116fbe8c8bf6e97bbf" title="Outputs the value via WriteBinaryData().">WriteVec2()</a> etc., for which there is no standard way to implement them in JSON. <a class="el" href="#a6354c042b68727116fbe8c8bf6e97bbf" title="Outputs the value via WriteBinaryData().">WriteVec2()</a> etc. will simply redirect to <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a>, which in turn implements the MongoDB convention of outputting binary data. I.e. it will turn the data into a JSON object which contains one variable called "$type" that identifies the data type, and one variable called "$binary" which contains the raw binary data Hex encoded in little endian format. If you want to write a fully standard compliant JSON file, just don't output any of these types. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a4a9e0274b936827b0ff04a77019125a7" name="a4a9e0274b936827b0ff04a77019125a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a9e0274b936827b0ff04a77019125a7">&#9670;&#160;</a></span>BeginArray()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::BeginArray </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sName</em></span><span class="paramdefsep"> = </span><span class="paramdefval">{}</span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Begins outputting an array variable.    </p>
<p>If szName is nullptr this will create an anonymous array, which is necessary when you want to put an array as a value into another array. <a class="el" href="#a4a9e0274b936827b0ff04a77019125a7" title="Begins outputting an array variable.">BeginArray()</a> with a non-nullptr value for <em>szName</em> is identical to calling <a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> first. In this case <a class="el" href="#a6e0593e41f493722a5d858a4fc49ad81" title="Ends outputting an array variable.">EndArray()</a> will also end the variable definition, so no additional call to <a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e" title="Ends outputting a variable.">EndVariable()</a> is required.    </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#a313dd46de4ebef09a89856f8de796661">plJSONWriter</a>.</p>

</div>
</div>
<a id="ab06994bb514ab532bb62be4a8422b13f" name="ab06994bb514ab532bb62be4a8422b13f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab06994bb514ab532bb62be4a8422b13f">&#9670;&#160;</a></span>BeginObject()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::BeginObject </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sName</em></span><span class="paramdefsep"> = </span><span class="paramdefval">{}</span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Begins outputting an object variable.    </p>
<p>If szName is nullptr this will create an anonymous object, which is necessary when you want to put an object as a value into an array. <a class="el" href="#ab06994bb514ab532bb62be4a8422b13f" title="Begins outputting an object variable.">BeginObject()</a> with a non-nullptr value for <em>szName</em> is identical to calling <a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> first. In this case <a class="el" href="#a0a1ba5d6bcf753cf8592db1abdbf2b5e" title="Ends outputting an object variable.">EndObject()</a> will also end the variable definition, so no additional call to <a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e" title="Ends outputting a variable.">EndVariable()</a> is required.    </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#a20d5bbee34268194b0f0c353bd732519">plJSONWriter</a>.</p>

</div>
</div>
<a id="a4a04d8f8d50b3504c7bfca51c3ee9e81" name="a4a04d8f8d50b3504c7bfca51c3ee9e81"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a04d8f8d50b3504c7bfca51c3ee9e81">&#9670;&#160;</a></span>BeginVariable()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::BeginVariable </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sName</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Begins outputting a variable. <em>szName</em> is the variable name.    </p>
<p>Between <a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> and <a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e" title="Ends outputting a variable.">EndVariable()</a> you can call the WriteXYZ functions once to write out the variable's data. You can also call <a class="el" href="#a4a9e0274b936827b0ff04a77019125a7" title="Begins outputting an array variable.">BeginArray()</a> and <a class="el" href="#ab06994bb514ab532bb62be4a8422b13f" title="Begins outputting an object variable.">BeginObject()</a> without a variable name to output an array or object variable.    </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#a63c9c62d9b33c92a807c3ecea326778d">plJSONWriter</a>.</p>

</div>
</div>
<a id="a6e0593e41f493722a5d858a4fc49ad81" name="a6e0593e41f493722a5d858a4fc49ad81"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e0593e41f493722a5d858a4fc49ad81">&#9670;&#160;</a></span>EndArray()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::EndArray </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Ends outputting an array variable.    </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#ae00f9321179a3443f7510eaaef6cc245">plJSONWriter</a>.</p>

</div>
</div>
<a id="a0a1ba5d6bcf753cf8592db1abdbf2b5e" name="a0a1ba5d6bcf753cf8592db1abdbf2b5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a1ba5d6bcf753cf8592db1abdbf2b5e">&#9670;&#160;</a></span>EndObject()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::EndObject </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Ends outputting an object variable.    </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#a177c92840f1657a9db1537013a12f9ea">plJSONWriter</a>.</p>

</div>
</div>
<a id="a414b598a4003d3da5e8d8dbe4ceea73e" name="a414b598a4003d3da5e8d8dbe4ceea73e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a414b598a4003d3da5e8d8dbe4ceea73e">&#9670;&#160;</a></span>EndVariable()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::EndVariable </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Ends outputting a variable.    </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#adc5513e41881417d442baaf01850ee31">plJSONWriter</a>.</p>

</div>
</div>
<a id="a70dd91f5887ae5235251dc6c7682138d" name="a70dd91f5887ae5235251dc6c7682138d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70dd91f5887ae5235251dc6c7682138d">&#9670;&#160;</a></span>WriteAngle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteAngle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d4/dfd/classpl_angle.htm">plAngle</a></td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes a float to the JSON file. Can only be called between <a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a4a9e0274b936827b0ff04a77019125a7" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#a6e0593e41f493722a5d858a4fc49ad81" title="Ends outputting an array variable.">EndArray()</a>.    </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#a2eaee0b07d49bd1399c759cf6889fc28">plJSONWriter</a>.</p>

</div>
</div>
<a id="aaa13fdb6a1c83cb24be617634c78002a" name="aaa13fdb6a1c83cb24be617634c78002a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa13fdb6a1c83cb24be617634c78002a">&#9670;&#160;</a></span>WriteBinaryData()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteBinaryData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sDataType</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiBytes</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sValueString</em></span><span class="paramdefsep"> = </span><span class="paramdefval">nullptr</span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements the MongoDB way of writing binary data. First writes a "$type" variable, then a "$binary" variable that represents the raw data (Hex encoded, little endian). </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#aabccad48dedfc4d785add78d385121c6">plJSONWriter</a>.</p>

</div>
</div>
<a id="a1cca9687b4aa0ee7e1d7b77a270a5a11" name="a1cca9687b4aa0ee7e1d7b77a270a5a11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1cca9687b4aa0ee7e1d7b77a270a5a11">&#9670;&#160;</a></span>WriteBool()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteBool </td>
          <td>(</td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes a bool to the JSON file. Can only be called between <a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a4a9e0274b936827b0ff04a77019125a7" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#a6e0593e41f493722a5d858a4fc49ad81" title="Ends outputting an array variable.">EndArray()</a>.    </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#a2de3a845cbdc894fc15c259cda9eea04">plJSONWriter</a>.</p>

</div>
</div>
<a id="a2bc2d6bd4bb22c9ac7c02628baafa636" name="a2bc2d6bd4bb22c9ac7c02628baafa636"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2bc2d6bd4bb22c9ac7c02628baafa636">&#9670;&#160;</a></span>WriteColor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteColor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Outputs the value via <a class="el" href="#a2412a879411105fb689ef98752cde996" title="Outputs the value via WriteBinaryData().">WriteVec4()</a>. </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#a86485212233dcb8a5b716300bc750399">plJSONWriter</a>.</p>

</div>
</div>
<a id="a63afb645bbd51c2689ae66f613a8089d" name="a63afb645bbd51c2689ae66f613a8089d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63afb645bbd51c2689ae66f613a8089d">&#9670;&#160;</a></span>WriteColorGamma()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteColorGamma </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../dd/dd8/classpl_color_gamma_u_b.htm">plColorGammaUB</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Outputs the value via <a class="el" href="#a2412a879411105fb689ef98752cde996" title="Outputs the value via WriteBinaryData().">WriteVec4()</a>. </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#ad0bf3dcbd7cc114920cad79fb2b7722d">plJSONWriter</a>.</p>

</div>
</div>
<a id="a472f9c5b2636004c30415478d942388c" name="a472f9c5b2636004c30415478d942388c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a472f9c5b2636004c30415478d942388c">&#9670;&#160;</a></span>WriteDataBuffer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteDataBuffer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d0/d4e/classpl_dynamic_array.htm">plDataBuffer</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Outputs the value via <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a>. </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#a3656739d6db81def926f25be01fd061b">plJSONWriter</a>.</p>

</div>
</div>
<a id="a2e19e275f676713f15796f258294a8f2" name="a2e19e275f676713f15796f258294a8f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e19e275f676713f15796f258294a8f2">&#9670;&#160;</a></span>WriteDouble()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteDouble </td>
          <td>(</td>
          <td class="paramtype">double</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes a double to the JSON file. Can only be called between <a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a4a9e0274b936827b0ff04a77019125a7" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#a6e0593e41f493722a5d858a4fc49ad81" title="Ends outputting an array variable.">EndArray()</a>.    </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#a5663f7a9f9f40976e9ef49a8e2724baf">plJSONWriter</a>.</p>

</div>
</div>
<a id="a35ff38ccf8a21eca8df9c472d8e88010" name="a35ff38ccf8a21eca8df9c472d8e88010"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a35ff38ccf8a21eca8df9c472d8e88010">&#9670;&#160;</a></span>WriteFloat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteFloat </td>
          <td>(</td>
          <td class="paramtype">float</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes a float to the JSON file. Can only be called between <a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a4a9e0274b936827b0ff04a77019125a7" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#a6e0593e41f493722a5d858a4fc49ad81" title="Ends outputting an array variable.">EndArray()</a>.    </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#af4cf1a4b14151eb6d0d9ebe9f10ca90b">plJSONWriter</a>.</p>

</div>
</div>
<a id="a9a2cf4d7c61a65dea7cc79b396225b5b" name="a9a2cf4d7c61a65dea7cc79b396225b5b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a2cf4d7c61a65dea7cc79b396225b5b">&#9670;&#160;</a></span>WriteInt32()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteInt32 </td>
          <td>(</td>
          <td class="paramtype">plInt32</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes an int32 to the JSON file. Can only be called between <a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a4a9e0274b936827b0ff04a77019125a7" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#a6e0593e41f493722a5d858a4fc49ad81" title="Ends outputting an array variable.">EndArray()</a>.    </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#ac39a7a4003aba063886636e4c2088ad6">plJSONWriter</a>.</p>

</div>
</div>
<a id="a9028b74ddaa6246a222803e5f8c1e419" name="a9028b74ddaa6246a222803e5f8c1e419"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9028b74ddaa6246a222803e5f8c1e419">&#9670;&#160;</a></span>WriteInt64()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteInt64 </td>
          <td>(</td>
          <td class="paramtype">plInt64</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes an int64 to the JSON file. Can only be called between <a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a4a9e0274b936827b0ff04a77019125a7" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#a6e0593e41f493722a5d858a4fc49ad81" title="Ends outputting an array variable.">EndArray()</a>.    </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#adcac7ca17ade82d758b42884ac4b928f">plJSONWriter</a>.</p>

</div>
</div>
<a id="af1f2a6a730d0cb5a1b352a7f83ef621a" name="af1f2a6a730d0cb5a1b352a7f83ef621a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1f2a6a730d0cb5a1b352a7f83ef621a">&#9670;&#160;</a></span>WriteMat3()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteMat3 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d5/d81/classpl_mat3_template.htm">plMat3</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Outputs the value via <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a>. </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#a85e89542a5c5e754d4ba239d4a645614">plJSONWriter</a>.</p>

</div>
</div>
<a id="a1a0de95f78eacf359c06e82bce46808b" name="a1a0de95f78eacf359c06e82bce46808b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a0de95f78eacf359c06e82bce46808b">&#9670;&#160;</a></span>WriteMat4()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteMat4 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d4/dbd/classpl_mat4_template.htm">plMat4</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Outputs the value via <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a>. </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#a6699b33d940e87b4c1fbac0380c52a39">plJSONWriter</a>.</p>

</div>
</div>
<a id="a3b1cbf15ee49c2f2ac84a83e0fd0b0fa" name="a3b1cbf15ee49c2f2ac84a83e0fd0b0fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b1cbf15ee49c2f2ac84a83e0fd0b0fa">&#9670;&#160;</a></span>WriteNULL()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteNULL </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes the value 'null' to the JSON file. Can only be called between <a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a4a9e0274b936827b0ff04a77019125a7" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#a6e0593e41f493722a5d858a4fc49ad81" title="Ends outputting an array variable.">EndArray()</a>.    </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#acd159430dae889f3a059834939cd7273">plJSONWriter</a>.</p>

</div>
</div>
<a id="aedb594f6bd10b0a8410ac598aa2cbe27" name="aedb594f6bd10b0a8410ac598aa2cbe27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aedb594f6bd10b0a8410ac598aa2cbe27">&#9670;&#160;</a></span>WriteQuat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteQuat </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/dad/classpl_quat_template.htm">plQuat</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Outputs the value via <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a>. </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#ac253121b7c9ccf67b17e5ea95471140e">plJSONWriter</a>.</p>

</div>
</div>
<a id="ae897572a415ff2e76c74d797909cfc13" name="ae897572a415ff2e76c74d797909cfc13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae897572a415ff2e76c74d797909cfc13">&#9670;&#160;</a></span>WriteString()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteString </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes a string to the JSON file. Can only be called between <a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a4a9e0274b936827b0ff04a77019125a7" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#a6e0593e41f493722a5d858a4fc49ad81" title="Ends outputting an array variable.">EndArray()</a>.    </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#a632550ec23fdff56d86b83040c7d6843">plJSONWriter</a>.</p>

</div>
</div>
<a id="ad5719293d2dc1ac7912a40001f13645f" name="ad5719293d2dc1ac7912a40001f13645f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad5719293d2dc1ac7912a40001f13645f">&#9670;&#160;</a></span>WriteTime()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteTime </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d1/df6/structpl_time.htm">plTime</a></td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes the time value as a double (i.e. redirects to <a class="el" href="#a2e19e275f676713f15796f258294a8f2" title="Writes a double to the JSON file. Can only be called between BeginVariable() / EndVariable() or Begin...">WriteDouble()</a>). </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#a346da1c8e48ec5dc81c07d8325445d19">plJSONWriter</a>.</p>

</div>
</div>
<a id="a7b308240d39ef2f67ac4979719ee45e0" name="a7b308240d39ef2f67ac4979719ee45e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b308240d39ef2f67ac4979719ee45e0">&#9670;&#160;</a></span>WriteUInt32()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteUInt32 </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes a uint32 to the JSON file. Can only be called between <a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a4a9e0274b936827b0ff04a77019125a7" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#a6e0593e41f493722a5d858a4fc49ad81" title="Ends outputting an array variable.">EndArray()</a>.    </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#a1c04a88c09eda33fcb35a3f5ac0f911a">plJSONWriter</a>.</p>

</div>
</div>
<a id="ad293c05a4036cbc54fbb5c53da2d8dae" name="ad293c05a4036cbc54fbb5c53da2d8dae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad293c05a4036cbc54fbb5c53da2d8dae">&#9670;&#160;</a></span>WriteUInt64()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteUInt64 </td>
          <td>(</td>
          <td class="paramtype">plUInt64</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes a uint64 to the JSON file. Can only be called between <a class="el" href="#a4a04d8f8d50b3504c7bfca51c3ee9e81" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#a414b598a4003d3da5e8d8dbe4ceea73e" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a4a9e0274b936827b0ff04a77019125a7" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#a6e0593e41f493722a5d858a4fc49ad81" title="Ends outputting an array variable.">EndArray()</a>.    </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#ac698aafa87b596cc7e70f9012950590d">plJSONWriter</a>.</p>

</div>
</div>
<a id="a6001cd65ef61b63e5d10a26d06ee2885" name="a6001cd65ef61b63e5d10a26d06ee2885"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6001cd65ef61b63e5d10a26d06ee2885">&#9670;&#160;</a></span>WriteUuid()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteUuid </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/d33/classpl_uuid.htm">plUuid</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Outputs the value via <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a>. </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#aa6f9134e78d853f9103632f6cb8da245">plJSONWriter</a>.</p>

</div>
</div>
<a id="a6354c042b68727116fbe8c8bf6e97bbf" name="a6354c042b68727116fbe8c8bf6e97bbf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6354c042b68727116fbe8c8bf6e97bbf">&#9670;&#160;</a></span>WriteVec2()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteVec2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Outputs the value via <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a>. </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#aec201ce7aa809b0bc877211de955d8f7">plJSONWriter</a>.</p>

</div>
</div>
<a id="af9096629ce17a2e7ee6b235ebaf8c0fe" name="af9096629ce17a2e7ee6b235ebaf8c0fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9096629ce17a2e7ee6b235ebaf8c0fe">&#9670;&#160;</a></span>WriteVec2I32()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteVec2I32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2I32</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Outputs the value via <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a>. </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#a7afec4e39ba729ef0e9972b3e5de093d">plJSONWriter</a>.</p>

</div>
</div>
<a id="a3332699cbe91b58e408bc70c78d405e5" name="a3332699cbe91b58e408bc70c78d405e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3332699cbe91b58e408bc70c78d405e5">&#9670;&#160;</a></span>WriteVec3()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteVec3 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Outputs the value via <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a>. </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#acd938fe601d885e636651d6d07149c71">plJSONWriter</a>.</p>

</div>
</div>
<a id="aec1b2d980e099bbecdb909c517c65ec4" name="aec1b2d980e099bbecdb909c517c65ec4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec1b2d980e099bbecdb909c517c65ec4">&#9670;&#160;</a></span>WriteVec3I32()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteVec3I32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3I32</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Outputs the value via <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a>. </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#a84f2f1b413781a47030409d5ac24b947">plJSONWriter</a>.</p>

</div>
</div>
<a id="a2412a879411105fb689ef98752cde996" name="a2412a879411105fb689ef98752cde996"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2412a879411105fb689ef98752cde996">&#9670;&#160;</a></span>WriteVec4()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteVec4 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d1/d4b/classpl_vec4_template.htm">plVec4</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Outputs the value via <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a>. </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#ac32d3953c81896103fe0859c1dc2684a">plJSONWriter</a>.</p>

</div>
</div>
<a id="a6b121a035b775bd204fce3536331549c" name="a6b121a035b775bd204fce3536331549c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b121a035b775bd204fce3536331549c">&#9670;&#160;</a></span>WriteVec4I32()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plStandardJSONWriter::WriteVec4I32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d1/d4b/classpl_vec4_template.htm">plVec4I32</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Outputs the value via <a class="el" href="#aaa13fdb6a1c83cb24be617634c78002a" title="Implements the MongoDB way of writing binary data. First writes a &quot;$type&quot; variable,...">WriteBinaryData()</a>. </p>

<p>Implements <a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm#aca3e9cdfada4bd1b575bc6ceee38fdc3">plJSONWriter</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/Engine/Foundation/IO/<a class="el" href="../../d7/d97/_j_s_o_n_writer_8h_source.htm">JSONWriter.h</a></li>
<li>Code/Engine/Foundation/IO/Implementation/<b>StandardJSONWriter.cpp</b></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm">plStandardJSONWriter</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
