<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Plasma Engine: plJSONWriter Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Plasma Engine<span id="projectnumber">&#160;2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('da/dcd/classpl_j_s_o_n_writer.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="../../d2/db5/classpl_j_s_o_n_writer-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plJSONWriter Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div></div>
</div><!--header-->
<div class="contents">

<p>The base class for JSON writers.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d7/d97/_j_s_o_n_writer_8h_source.htm">JSONWriter.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for plJSONWriter:</div>
<div class="dyncontent">
<div class="center"><img src="../../d3/d1f/classpl_j_s_o_n_writer__inherit__graph.png" border="0" usemap="#apl_j_s_o_n_writer_inherit__map" alt="Inheritance graph"/></div>
<map name="apl_j_s_o_n_writer_inherit__map" id="apl_j_s_o_n_writer_inherit__map">
<area shape="rect" title="The base class for JSON writers." alt="" coords="31,5,132,32"/>
<area shape="rect" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm" title="Implements a standard compliant JSON writer, all numbers are output as double values." alt="" coords="5,80,158,107"/>
<area shape="poly" title=" " alt="" coords="84,48,84,80,79,80,79,48"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ae6c53bd0fe35fde17db547951607bc40" id="r_ae6c53bd0fe35fde17db547951607bc40"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae6c53bd0fe35fde17db547951607bc40">WhitespaceMode</a> { <br />
&#160;&#160;<a class="el" href="#ae6c53bd0fe35fde17db547951607bc40ab1c94ca2fbc3e78fc30069c8d0f01680">All</a>
, <a class="el" href="#ae6c53bd0fe35fde17db547951607bc40af1b93b10a0f5f3fc4ac9a01b0e43ebc8">LessIndentation</a>
, <a class="el" href="#ae6c53bd0fe35fde17db547951607bc40a77df809fc4dda1dfad604be6f3b09a9a">NoIndentation</a>
, <a class="el" href="#ae6c53bd0fe35fde17db547951607bc40a159988bd112cc0da6f701bc46843b89d">NewlinesOnly</a>
, <br />
&#160;&#160;<a class="el" href="#ae6c53bd0fe35fde17db547951607bc40a6adf97f83acf6453d4a6a4b1070f3754">None</a>
<br />
 }</td></tr>
<tr class="memdesc:ae6c53bd0fe35fde17db547951607bc40"><td class="mdescLeft">&#160;</td><td class="mdescRight">Modes to configure how much whitespace the JSON writer will output.  <a href="#ae6c53bd0fe35fde17db547951607bc40">More...</a><br /></td></tr>
<tr class="separator:ae6c53bd0fe35fde17db547951607bc40"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0121c409d0e170ca20f3a00577da987" id="r_ae0121c409d0e170ca20f3a00577da987"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae0121c409d0e170ca20f3a00577da987">ArrayMode</a> { <a class="el" href="#ae0121c409d0e170ca20f3a00577da987aefcb056b0921dbe898eb4c86e334c06c">InOneLine</a>
, <a class="el" href="#ae0121c409d0e170ca20f3a00577da987a0a2c674aedb0dda5c5b29d44aa8c8549">OneLinePerItem</a>
 }</td></tr>
<tr class="memdesc:ae0121c409d0e170ca20f3a00577da987"><td class="mdescLeft">&#160;</td><td class="mdescRight">Modes to configure how arrays are written.  <a href="#ae0121c409d0e170ca20f3a00577da987">More...</a><br /></td></tr>
<tr class="separator:ae0121c409d0e170ca20f3a00577da987"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ac5d596bfb581032de1e3b036d960661a" id="r_ac5d596bfb581032de1e3b036d960661a"><td class="memItemLeft" align="right" valign="top"><a id="ac5d596bfb581032de1e3b036d960661a" name="ac5d596bfb581032de1e3b036d960661a"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>plJSONWriter</b> ()</td></tr>
<tr class="memdesc:ac5d596bfb581032de1e3b036d960661a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor. <br /></td></tr>
<tr class="separator:ac5d596bfb581032de1e3b036d960661a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bbaf973eb4c17448409f137749bac24" id="r_a6bbaf973eb4c17448409f137749bac24"><td class="memItemLeft" align="right" valign="top"><a id="a6bbaf973eb4c17448409f137749bac24" name="a6bbaf973eb4c17448409f137749bac24"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>~plJSONWriter</b> ()</td></tr>
<tr class="memdesc:a6bbaf973eb4c17448409f137749bac24"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor. <br /></td></tr>
<tr class="separator:a6bbaf973eb4c17448409f137749bac24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a956aa5200a1265e00c793fd72ee42c" id="r_a4a956aa5200a1265e00c793fd72ee42c"><td class="memItemLeft" align="right" valign="top"><a id="a4a956aa5200a1265e00c793fd72ee42c" name="a4a956aa5200a1265e00c793fd72ee42c"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetWhitespaceMode</b> (<a class="el" href="#ae6c53bd0fe35fde17db547951607bc40">WhitespaceMode</a> whitespaceMode)</td></tr>
<tr class="memdesc:a4a956aa5200a1265e00c793fd72ee42c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures how much whitespace is output. <br /></td></tr>
<tr class="separator:a4a956aa5200a1265e00c793fd72ee42c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac45b83379636adc57e90c6792cb4339b" id="r_ac45b83379636adc57e90c6792cb4339b"><td class="memItemLeft" align="right" valign="top"><a id="ac45b83379636adc57e90c6792cb4339b" name="ac45b83379636adc57e90c6792cb4339b"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetArrayMode</b> (<a class="el" href="#ae0121c409d0e170ca20f3a00577da987">ArrayMode</a> arrayMode)</td></tr>
<tr class="memdesc:ac45b83379636adc57e90c6792cb4339b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures how arrays are written. <br /></td></tr>
<tr class="separator:ac45b83379636adc57e90c6792cb4339b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8022d847aefdf72ea1f3d1c73cd89ec8" id="r_a8022d847aefdf72ea1f3d1c73cd89ec8"><td class="memItemLeft" align="right" valign="top"><a id="a8022d847aefdf72ea1f3d1c73cd89ec8" name="a8022d847aefdf72ea1f3d1c73cd89ec8"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableBool</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, bool value)</td></tr>
<tr class="memdesc:a8022d847aefdf72ea1f3d1c73cd89ec8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteBool(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a8022d847aefdf72ea1f3d1c73cd89ec8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a596bc640afcb1e03e9c70a0c1b31deb0" id="r_a596bc640afcb1e03e9c70a0c1b31deb0"><td class="memItemLeft" align="right" valign="top"><a id="a596bc640afcb1e03e9c70a0c1b31deb0" name="a596bc640afcb1e03e9c70a0c1b31deb0"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableInt32</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, plInt32 value)</td></tr>
<tr class="memdesc:a596bc640afcb1e03e9c70a0c1b31deb0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteInt32(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a596bc640afcb1e03e9c70a0c1b31deb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90f0b373ae6ea84c6c2d04aaffb147d3" id="r_a90f0b373ae6ea84c6c2d04aaffb147d3"><td class="memItemLeft" align="right" valign="top"><a id="a90f0b373ae6ea84c6c2d04aaffb147d3" name="a90f0b373ae6ea84c6c2d04aaffb147d3"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableUInt32</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, plUInt32 value)</td></tr>
<tr class="memdesc:a90f0b373ae6ea84c6c2d04aaffb147d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteUInt32(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a90f0b373ae6ea84c6c2d04aaffb147d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a870e930d34870ec411d7f626a8d8a0ad" id="r_a870e930d34870ec411d7f626a8d8a0ad"><td class="memItemLeft" align="right" valign="top"><a id="a870e930d34870ec411d7f626a8d8a0ad" name="a870e930d34870ec411d7f626a8d8a0ad"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableInt64</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, plInt64 value)</td></tr>
<tr class="memdesc:a870e930d34870ec411d7f626a8d8a0ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteInt64(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a870e930d34870ec411d7f626a8d8a0ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2b5cb6464b009f2a21f1da2934c494d" id="r_ac2b5cb6464b009f2a21f1da2934c494d"><td class="memItemLeft" align="right" valign="top"><a id="ac2b5cb6464b009f2a21f1da2934c494d" name="ac2b5cb6464b009f2a21f1da2934c494d"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableUInt64</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, plUInt64 value)</td></tr>
<tr class="memdesc:ac2b5cb6464b009f2a21f1da2934c494d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteUInt64(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:ac2b5cb6464b009f2a21f1da2934c494d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d9c45240f435d4465a04087e4215457" id="r_a8d9c45240f435d4465a04087e4215457"><td class="memItemLeft" align="right" valign="top"><a id="a8d9c45240f435d4465a04087e4215457" name="a8d9c45240f435d4465a04087e4215457"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableFloat</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, float value)</td></tr>
<tr class="memdesc:a8d9c45240f435d4465a04087e4215457"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteFloat(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a8d9c45240f435d4465a04087e4215457"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1804d4c5d10c84755a4cd65cbdd29875" id="r_a1804d4c5d10c84755a4cd65cbdd29875"><td class="memItemLeft" align="right" valign="top"><a id="a1804d4c5d10c84755a4cd65cbdd29875" name="a1804d4c5d10c84755a4cd65cbdd29875"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableDouble</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, double value)</td></tr>
<tr class="memdesc:a1804d4c5d10c84755a4cd65cbdd29875"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteDouble(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a1804d4c5d10c84755a4cd65cbdd29875"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d4cdc66dc158f61a5bd14ebc39e5f2d" id="r_a1d4cdc66dc158f61a5bd14ebc39e5f2d"><td class="memItemLeft" align="right" valign="top"><a id="a1d4cdc66dc158f61a5bd14ebc39e5f2d" name="a1d4cdc66dc158f61a5bd14ebc39e5f2d"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableString</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> value)</td></tr>
<tr class="memdesc:a1d4cdc66dc158f61a5bd14ebc39e5f2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteString(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a1d4cdc66dc158f61a5bd14ebc39e5f2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad88f69d8d1d327c71399d3dee26c9b55" id="r_ad88f69d8d1d327c71399d3dee26c9b55"><td class="memItemLeft" align="right" valign="top"><a id="ad88f69d8d1d327c71399d3dee26c9b55" name="ad88f69d8d1d327c71399d3dee26c9b55"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableNULL</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName)</td></tr>
<tr class="memdesc:ad88f69d8d1d327c71399d3dee26c9b55"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteNULL(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:ad88f69d8d1d327c71399d3dee26c9b55"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01d434a07f36c1b57b5a2a50adcc873d" id="r_a01d434a07f36c1b57b5a2a50adcc873d"><td class="memItemLeft" align="right" valign="top"><a id="a01d434a07f36c1b57b5a2a50adcc873d" name="a01d434a07f36c1b57b5a2a50adcc873d"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableTime</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, <a class="el" href="../../d1/df6/structpl_time.htm">plTime</a> value)</td></tr>
<tr class="memdesc:a01d434a07f36c1b57b5a2a50adcc873d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteTime(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a01d434a07f36c1b57b5a2a50adcc873d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a102183562736a17b946aee8de00390d7" id="r_a102183562736a17b946aee8de00390d7"><td class="memItemLeft" align="right" valign="top"><a id="a102183562736a17b946aee8de00390d7" name="a102183562736a17b946aee8de00390d7"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableUuid</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, <a class="el" href="../../d6/d33/classpl_uuid.htm">plUuid</a> value)</td></tr>
<tr class="memdesc:a102183562736a17b946aee8de00390d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteUuid(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a102183562736a17b946aee8de00390d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca0951f8c5c0dc397628fe671e9d569c" id="r_aca0951f8c5c0dc397628fe671e9d569c"><td class="memItemLeft" align="right" valign="top"><a id="aca0951f8c5c0dc397628fe671e9d569c" name="aca0951f8c5c0dc397628fe671e9d569c"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableAngle</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, <a class="el" href="../../d4/dfd/classpl_angle.htm">plAngle</a> value)</td></tr>
<tr class="memdesc:aca0951f8c5c0dc397628fe671e9d569c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteAngle(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:aca0951f8c5c0dc397628fe671e9d569c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f9a68f2c08c314122523b5b9cae2f90" id="r_a1f9a68f2c08c314122523b5b9cae2f90"><td class="memItemLeft" align="right" valign="top"><a id="a1f9a68f2c08c314122523b5b9cae2f90" name="a1f9a68f2c08c314122523b5b9cae2f90"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableColor</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a> &amp;value)</td></tr>
<tr class="memdesc:a1f9a68f2c08c314122523b5b9cae2f90"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteColor(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a1f9a68f2c08c314122523b5b9cae2f90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa24f38e4c81b5d5dbe548f52fcd1aeea" id="r_aa24f38e4c81b5d5dbe548f52fcd1aeea"><td class="memItemLeft" align="right" valign="top"><a id="aa24f38e4c81b5d5dbe548f52fcd1aeea" name="aa24f38e4c81b5d5dbe548f52fcd1aeea"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableColorGamma</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../dd/dd8/classpl_color_gamma_u_b.htm">plColorGammaUB</a> &amp;value)</td></tr>
<tr class="memdesc:aa24f38e4c81b5d5dbe548f52fcd1aeea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteColorGamma(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:aa24f38e4c81b5d5dbe548f52fcd1aeea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2da0eb538a66b5a7997c97399eca0267" id="r_a2da0eb538a66b5a7997c97399eca0267"><td class="memItemLeft" align="right" valign="top"><a id="a2da0eb538a66b5a7997c97399eca0267" name="a2da0eb538a66b5a7997c97399eca0267"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableVec2</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2</a> &amp;value)</td></tr>
<tr class="memdesc:a2da0eb538a66b5a7997c97399eca0267"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteVec2(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a2da0eb538a66b5a7997c97399eca0267"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1dbcdd800f3f4a2f2ceec7492cb55cb4" id="r_a1dbcdd800f3f4a2f2ceec7492cb55cb4"><td class="memItemLeft" align="right" valign="top"><a id="a1dbcdd800f3f4a2f2ceec7492cb55cb4" name="a1dbcdd800f3f4a2f2ceec7492cb55cb4"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableVec3</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;value)</td></tr>
<tr class="memdesc:a1dbcdd800f3f4a2f2ceec7492cb55cb4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteVec3(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a1dbcdd800f3f4a2f2ceec7492cb55cb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2f8258ef53e6efd60f6d3db2d97bf10" id="r_ab2f8258ef53e6efd60f6d3db2d97bf10"><td class="memItemLeft" align="right" valign="top"><a id="ab2f8258ef53e6efd60f6d3db2d97bf10" name="ab2f8258ef53e6efd60f6d3db2d97bf10"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableVec4</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../d1/d4b/classpl_vec4_template.htm">plVec4</a> &amp;value)</td></tr>
<tr class="memdesc:ab2f8258ef53e6efd60f6d3db2d97bf10"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteVec4(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:ab2f8258ef53e6efd60f6d3db2d97bf10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af92fa302d4f9961dbebf7256e96145d7" id="r_af92fa302d4f9961dbebf7256e96145d7"><td class="memItemLeft" align="right" valign="top"><a id="af92fa302d4f9961dbebf7256e96145d7" name="af92fa302d4f9961dbebf7256e96145d7"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableVec2I32</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2I32</a> &amp;value)</td></tr>
<tr class="memdesc:af92fa302d4f9961dbebf7256e96145d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteVec2I32(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:af92fa302d4f9961dbebf7256e96145d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbb6f734db6f8809ca5e359ab7b35314" id="r_acbb6f734db6f8809ca5e359ab7b35314"><td class="memItemLeft" align="right" valign="top"><a id="acbb6f734db6f8809ca5e359ab7b35314" name="acbb6f734db6f8809ca5e359ab7b35314"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableVec3I32</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3I32</a> &amp;value)</td></tr>
<tr class="memdesc:acbb6f734db6f8809ca5e359ab7b35314"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteVec3I32(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:acbb6f734db6f8809ca5e359ab7b35314"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28cfa263a01f8412a10bf8055b216e6b" id="r_a28cfa263a01f8412a10bf8055b216e6b"><td class="memItemLeft" align="right" valign="top"><a id="a28cfa263a01f8412a10bf8055b216e6b" name="a28cfa263a01f8412a10bf8055b216e6b"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableVec4I32</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../d1/d4b/classpl_vec4_template.htm">plVec4I32</a> &amp;value)</td></tr>
<tr class="memdesc:a28cfa263a01f8412a10bf8055b216e6b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteVec4I32(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a28cfa263a01f8412a10bf8055b216e6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ec62830396b7f2b01bdc709bd9fdf57" id="r_a3ec62830396b7f2b01bdc709bd9fdf57"><td class="memItemLeft" align="right" valign="top"><a id="a3ec62830396b7f2b01bdc709bd9fdf57" name="a3ec62830396b7f2b01bdc709bd9fdf57"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableQuat</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../d6/dad/classpl_quat_template.htm">plQuat</a> &amp;value)</td></tr>
<tr class="memdesc:a3ec62830396b7f2b01bdc709bd9fdf57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteQuat(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a3ec62830396b7f2b01bdc709bd9fdf57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad456a26f694ab5a9b034dcea17fdfb8d" id="r_ad456a26f694ab5a9b034dcea17fdfb8d"><td class="memItemLeft" align="right" valign="top"><a id="ad456a26f694ab5a9b034dcea17fdfb8d" name="ad456a26f694ab5a9b034dcea17fdfb8d"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableMat3</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../d5/d81/classpl_mat3_template.htm">plMat3</a> &amp;value)</td></tr>
<tr class="memdesc:ad456a26f694ab5a9b034dcea17fdfb8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteMat3(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:ad456a26f694ab5a9b034dcea17fdfb8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8fdd15fafb06d3bb5363876e682f28f" id="r_ae8fdd15fafb06d3bb5363876e682f28f"><td class="memItemLeft" align="right" valign="top"><a id="ae8fdd15fafb06d3bb5363876e682f28f" name="ae8fdd15fafb06d3bb5363876e682f28f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableMat4</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../d4/dbd/classpl_mat4_template.htm">plMat4</a> &amp;value)</td></tr>
<tr class="memdesc:ae8fdd15fafb06d3bb5363876e682f28f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteMat4(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:ae8fdd15fafb06d3bb5363876e682f28f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e55eb23aea57aec93f6c16aa08fa698" id="r_a0e55eb23aea57aec93f6c16aa08fa698"><td class="memItemLeft" align="right" valign="top"><a id="a0e55eb23aea57aec93f6c16aa08fa698" name="a0e55eb23aea57aec93f6c16aa08fa698"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableDataBuffer</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../d0/d4e/classpl_dynamic_array.htm">plDataBuffer</a> &amp;value)</td></tr>
<tr class="memdesc:a0e55eb23aea57aec93f6c16aa08fa698"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteDataBuffer(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a0e55eb23aea57aec93f6c16aa08fa698"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c833e17245e09986f51572924da7895" id="r_a0c833e17245e09986f51572924da7895"><td class="memItemLeft" align="right" valign="top"><a id="a0c833e17245e09986f51572924da7895" name="a0c833e17245e09986f51572924da7895"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>AddVariableVariant</b> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName, const <a class="el" href="../../da/d4c/classpl_variant.htm">plVariant</a> &amp;value)</td></tr>
<tr class="memdesc:a0c833e17245e09986f51572924da7895"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shorthand for "BeginVariable(szName); WriteVariant(value); EndVariable(); ". <br /></td></tr>
<tr class="separator:a0c833e17245e09986f51572924da7895"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2de3a845cbdc894fc15c259cda9eea04" id="r_a2de3a845cbdc894fc15c259cda9eea04"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2de3a845cbdc894fc15c259cda9eea04">WriteBool</a> (bool value)=0</td></tr>
<tr class="memdesc:a2de3a845cbdc894fc15c259cda9eea04"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a bool to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:a2de3a845cbdc894fc15c259cda9eea04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac39a7a4003aba063886636e4c2088ad6" id="r_ac39a7a4003aba063886636e4c2088ad6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac39a7a4003aba063886636e4c2088ad6">WriteInt32</a> (plInt32 value)=0</td></tr>
<tr class="memdesc:ac39a7a4003aba063886636e4c2088ad6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes an int32 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:ac39a7a4003aba063886636e4c2088ad6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c04a88c09eda33fcb35a3f5ac0f911a" id="r_a1c04a88c09eda33fcb35a3f5ac0f911a"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a1c04a88c09eda33fcb35a3f5ac0f911a">WriteUInt32</a> (plUInt32 value)=0</td></tr>
<tr class="memdesc:a1c04a88c09eda33fcb35a3f5ac0f911a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a uint32 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:a1c04a88c09eda33fcb35a3f5ac0f911a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcac7ca17ade82d758b42884ac4b928f" id="r_adcac7ca17ade82d758b42884ac4b928f"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#adcac7ca17ade82d758b42884ac4b928f">WriteInt64</a> (plInt64 value)=0</td></tr>
<tr class="memdesc:adcac7ca17ade82d758b42884ac4b928f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes an int64 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:adcac7ca17ade82d758b42884ac4b928f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac698aafa87b596cc7e70f9012950590d" id="r_ac698aafa87b596cc7e70f9012950590d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac698aafa87b596cc7e70f9012950590d">WriteUInt64</a> (plUInt64 value)=0</td></tr>
<tr class="memdesc:ac698aafa87b596cc7e70f9012950590d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a uint64 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:ac698aafa87b596cc7e70f9012950590d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4cf1a4b14151eb6d0d9ebe9f10ca90b" id="r_af4cf1a4b14151eb6d0d9ebe9f10ca90b"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af4cf1a4b14151eb6d0d9ebe9f10ca90b">WriteFloat</a> (float value)=0</td></tr>
<tr class="memdesc:af4cf1a4b14151eb6d0d9ebe9f10ca90b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a float to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:af4cf1a4b14151eb6d0d9ebe9f10ca90b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5663f7a9f9f40976e9ef49a8e2724baf" id="r_a5663f7a9f9f40976e9ef49a8e2724baf"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5663f7a9f9f40976e9ef49a8e2724baf">WriteDouble</a> (double value)=0</td></tr>
<tr class="memdesc:a5663f7a9f9f40976e9ef49a8e2724baf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a double to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:a5663f7a9f9f40976e9ef49a8e2724baf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a632550ec23fdff56d86b83040c7d6843" id="r_a632550ec23fdff56d86b83040c7d6843"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a632550ec23fdff56d86b83040c7d6843">WriteString</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> value)=0</td></tr>
<tr class="memdesc:a632550ec23fdff56d86b83040c7d6843"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a string to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:a632550ec23fdff56d86b83040c7d6843"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd159430dae889f3a059834939cd7273" id="r_acd159430dae889f3a059834939cd7273"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#acd159430dae889f3a059834939cd7273">WriteNULL</a> ()=0</td></tr>
<tr class="memdesc:acd159430dae889f3a059834939cd7273"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes the value 'null' to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:acd159430dae889f3a059834939cd7273"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a346da1c8e48ec5dc81c07d8325445d19" id="r_a346da1c8e48ec5dc81c07d8325445d19"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a346da1c8e48ec5dc81c07d8325445d19">WriteTime</a> (<a class="el" href="../../d1/df6/structpl_time.htm">plTime</a> value)=0</td></tr>
<tr class="memdesc:a346da1c8e48ec5dc81c07d8325445d19"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a time value to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:a346da1c8e48ec5dc81c07d8325445d19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86485212233dcb8a5b716300bc750399" id="r_a86485212233dcb8a5b716300bc750399"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a86485212233dcb8a5b716300bc750399">WriteColor</a> (const <a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a> &amp;value)=0</td></tr>
<tr class="memdesc:a86485212233dcb8a5b716300bc750399"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes an <a class="el" href="../../d9/d1d/classpl_color.htm" title="plColor represents an RGBA color in linear color space. Values are stored as float,...">plColor</a> to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:a86485212233dcb8a5b716300bc750399"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0bf3dcbd7cc114920cad79fb2b7722d" id="r_ad0bf3dcbd7cc114920cad79fb2b7722d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad0bf3dcbd7cc114920cad79fb2b7722d">WriteColorGamma</a> (const <a class="el" href="../../dd/dd8/classpl_color_gamma_u_b.htm">plColorGammaUB</a> &amp;value)=0</td></tr>
<tr class="memdesc:ad0bf3dcbd7cc114920cad79fb2b7722d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes an <a class="el" href="../../dd/dd8/classpl_color_gamma_u_b.htm" title="A 8bit per channel unsigned normalized (values interpreted as 0-1) color storage format that represen...">plColorGammaUB</a> to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:ad0bf3dcbd7cc114920cad79fb2b7722d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec201ce7aa809b0bc877211de955d8f7" id="r_aec201ce7aa809b0bc877211de955d8f7"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aec201ce7aa809b0bc877211de955d8f7">WriteVec2</a> (const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2</a> &amp;value)=0</td></tr>
<tr class="memdesc:aec201ce7aa809b0bc877211de955d8f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes an plVec2 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:aec201ce7aa809b0bc877211de955d8f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd938fe601d885e636651d6d07149c71" id="r_acd938fe601d885e636651d6d07149c71"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#acd938fe601d885e636651d6d07149c71">WriteVec3</a> (const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;value)=0</td></tr>
<tr class="memdesc:acd938fe601d885e636651d6d07149c71"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes an plVec3 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:acd938fe601d885e636651d6d07149c71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac32d3953c81896103fe0859c1dc2684a" id="r_ac32d3953c81896103fe0859c1dc2684a"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac32d3953c81896103fe0859c1dc2684a">WriteVec4</a> (const <a class="el" href="../../d1/d4b/classpl_vec4_template.htm">plVec4</a> &amp;value)=0</td></tr>
<tr class="memdesc:ac32d3953c81896103fe0859c1dc2684a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes an plVec4 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:ac32d3953c81896103fe0859c1dc2684a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7afec4e39ba729ef0e9972b3e5de093d" id="r_a7afec4e39ba729ef0e9972b3e5de093d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7afec4e39ba729ef0e9972b3e5de093d">WriteVec2I32</a> (const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2I32</a> &amp;value)=0</td></tr>
<tr class="memdesc:a7afec4e39ba729ef0e9972b3e5de093d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes an plVec2I32 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:a7afec4e39ba729ef0e9972b3e5de093d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84f2f1b413781a47030409d5ac24b947" id="r_a84f2f1b413781a47030409d5ac24b947"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a84f2f1b413781a47030409d5ac24b947">WriteVec3I32</a> (const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3I32</a> &amp;value)=0</td></tr>
<tr class="memdesc:a84f2f1b413781a47030409d5ac24b947"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes an plVec3I32 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:a84f2f1b413781a47030409d5ac24b947"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca3e9cdfada4bd1b575bc6ceee38fdc3" id="r_aca3e9cdfada4bd1b575bc6ceee38fdc3"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aca3e9cdfada4bd1b575bc6ceee38fdc3">WriteVec4I32</a> (const <a class="el" href="../../d1/d4b/classpl_vec4_template.htm">plVec4I32</a> &amp;value)=0</td></tr>
<tr class="memdesc:aca3e9cdfada4bd1b575bc6ceee38fdc3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes an plVec4I32 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:aca3e9cdfada4bd1b575bc6ceee38fdc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac253121b7c9ccf67b17e5ea95471140e" id="r_ac253121b7c9ccf67b17e5ea95471140e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ac253121b7c9ccf67b17e5ea95471140e">WriteQuat</a> (const <a class="el" href="../../d6/dad/classpl_quat_template.htm">plQuat</a> &amp;value)=0</td></tr>
<tr class="memdesc:ac253121b7c9ccf67b17e5ea95471140e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes an plQuat to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:ac253121b7c9ccf67b17e5ea95471140e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85e89542a5c5e754d4ba239d4a645614" id="r_a85e89542a5c5e754d4ba239d4a645614"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a85e89542a5c5e754d4ba239d4a645614">WriteMat3</a> (const <a class="el" href="../../d5/d81/classpl_mat3_template.htm">plMat3</a> &amp;value)=0</td></tr>
<tr class="memdesc:a85e89542a5c5e754d4ba239d4a645614"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes an plMat3 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:a85e89542a5c5e754d4ba239d4a645614"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6699b33d940e87b4c1fbac0380c52a39" id="r_a6699b33d940e87b4c1fbac0380c52a39"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a6699b33d940e87b4c1fbac0380c52a39">WriteMat4</a> (const <a class="el" href="../../d4/dbd/classpl_mat4_template.htm">plMat4</a> &amp;value)=0</td></tr>
<tr class="memdesc:a6699b33d940e87b4c1fbac0380c52a39"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes an plMat4 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:a6699b33d940e87b4c1fbac0380c52a39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6f9134e78d853f9103632f6cb8da245" id="r_aa6f9134e78d853f9103632f6cb8da245"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa6f9134e78d853f9103632f6cb8da245">WriteUuid</a> (const <a class="el" href="../../d6/d33/classpl_uuid.htm">plUuid</a> &amp;value)=0</td></tr>
<tr class="memdesc:aa6f9134e78d853f9103632f6cb8da245"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes an <a class="el" href="../../d6/d33/classpl_uuid.htm" title="This data type is the abstraction for 128-bit Uuid (also known as GUID) instances.">plUuid</a> to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:aa6f9134e78d853f9103632f6cb8da245"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2eaee0b07d49bd1399c759cf6889fc28" id="r_a2eaee0b07d49bd1399c759cf6889fc28"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a2eaee0b07d49bd1399c759cf6889fc28">WriteAngle</a> (<a class="el" href="../../d4/dfd/classpl_angle.htm">plAngle</a> value)=0</td></tr>
<tr class="memdesc:a2eaee0b07d49bd1399c759cf6889fc28"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes an <a class="el" href="../../d4/dfd/classpl_angle.htm" title="Float wrapper struct for a safe usage and conversions of angles.">plAngle</a> to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:a2eaee0b07d49bd1399c759cf6889fc28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3656739d6db81def926f25be01fd061b" id="r_a3656739d6db81def926f25be01fd061b"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a3656739d6db81def926f25be01fd061b">WriteDataBuffer</a> (const <a class="el" href="../../d0/d4e/classpl_dynamic_array.htm">plDataBuffer</a> &amp;value)=0</td></tr>
<tr class="memdesc:a3656739d6db81def926f25be01fd061b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes an plDataBuffer to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>.  <br /></td></tr>
<tr class="separator:a3656739d6db81def926f25be01fd061b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae94f2056440b6a75fc78433f8f0b8961" id="r_ae94f2056440b6a75fc78433f8f0b8961"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae94f2056440b6a75fc78433f8f0b8961">WriteVariant</a> (const <a class="el" href="../../da/d4c/classpl_variant.htm">plVariant</a> &amp;value)</td></tr>
<tr class="memdesc:ae94f2056440b6a75fc78433f8f0b8961"><td class="mdescLeft">&#160;</td><td class="mdescRight">The default implementation dispatches all supported types to WriteBool, WriteInt32, etc. and asserts on the more complex types.  <br /></td></tr>
<tr class="separator:ae94f2056440b6a75fc78433f8f0b8961"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabccad48dedfc4d785add78d385121c6" id="r_aabccad48dedfc4d785add78d385121c6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aabccad48dedfc4d785add78d385121c6">WriteBinaryData</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sDataType, const void *pData, plUInt32 uiBytes, <a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sValueString=nullptr)=0</td></tr>
<tr class="memdesc:aabccad48dedfc4d785add78d385121c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Outputs a chunk of memory in some JSON form that can be interpreted as binary data when reading it again.  <br /></td></tr>
<tr class="separator:aabccad48dedfc4d785add78d385121c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63c9c62d9b33c92a807c3ecea326778d" id="r_a63c9c62d9b33c92a807c3ecea326778d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d">BeginVariable</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName)=0</td></tr>
<tr class="memdesc:a63c9c62d9b33c92a807c3ecea326778d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Begins outputting a variable. <em>szName</em> is the variable name.  <br /></td></tr>
<tr class="separator:a63c9c62d9b33c92a807c3ecea326778d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc5513e41881417d442baaf01850ee31" id="r_adc5513e41881417d442baaf01850ee31"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#adc5513e41881417d442baaf01850ee31">EndVariable</a> ()=0</td></tr>
<tr class="memdesc:adc5513e41881417d442baaf01850ee31"><td class="mdescLeft">&#160;</td><td class="mdescRight">Ends outputting a variable.  <br /></td></tr>
<tr class="separator:adc5513e41881417d442baaf01850ee31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a313dd46de4ebef09a89856f8de796661" id="r_a313dd46de4ebef09a89856f8de796661"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a313dd46de4ebef09a89856f8de796661">BeginArray</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName=nullptr)=0</td></tr>
<tr class="memdesc:a313dd46de4ebef09a89856f8de796661"><td class="mdescLeft">&#160;</td><td class="mdescRight">Begins outputting an array variable.  <br /></td></tr>
<tr class="separator:a313dd46de4ebef09a89856f8de796661"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae00f9321179a3443f7510eaaef6cc245" id="r_ae00f9321179a3443f7510eaaef6cc245"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae00f9321179a3443f7510eaaef6cc245">EndArray</a> ()=0</td></tr>
<tr class="memdesc:ae00f9321179a3443f7510eaaef6cc245"><td class="mdescLeft">&#160;</td><td class="mdescRight">Ends outputting an array variable.  <br /></td></tr>
<tr class="separator:ae00f9321179a3443f7510eaaef6cc245"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20d5bbee34268194b0f0c353bd732519" id="r_a20d5bbee34268194b0f0c353bd732519"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a20d5bbee34268194b0f0c353bd732519">BeginObject</a> (<a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sName=nullptr)=0</td></tr>
<tr class="memdesc:a20d5bbee34268194b0f0c353bd732519"><td class="mdescLeft">&#160;</td><td class="mdescRight">Begins outputting an object variable.  <br /></td></tr>
<tr class="separator:a20d5bbee34268194b0f0c353bd732519"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a177c92840f1657a9db1537013a12f9ea" id="r_a177c92840f1657a9db1537013a12f9ea"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a177c92840f1657a9db1537013a12f9ea">EndObject</a> ()=0</td></tr>
<tr class="memdesc:a177c92840f1657a9db1537013a12f9ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Ends outputting an object variable.  <br /></td></tr>
<tr class="separator:a177c92840f1657a9db1537013a12f9ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7eb1f51c210e80ede4807cf885b6938d" id="r_a7eb1f51c210e80ede4807cf885b6938d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7eb1f51c210e80ede4807cf885b6938d">HadWriteError</a> () const</td></tr>
<tr class="memdesc:a7eb1f51c210e80ede4807cf885b6938d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indicates if an error was encountered while writing.  <br /></td></tr>
<tr class="separator:a7eb1f51c210e80ede4807cf885b6938d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-methods" name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a09ffa3bc6302141e81a9d519e90828b7" id="r_a09ffa3bc6302141e81a9d519e90828b7"><td class="memItemLeft" align="right" valign="top"><a id="a09ffa3bc6302141e81a9d519e90828b7" name="a09ffa3bc6302141e81a9d519e90828b7"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetWriteErrorState</b> ()</td></tr>
<tr class="memdesc:a09ffa3bc6302141e81a9d519e90828b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">called internally when there was an error during writing <br /></td></tr>
<tr class="separator:a09ffa3bc6302141e81a9d519e90828b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-attribs" name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:abf45e32ce485e88b7f982fd3faa52037" id="r_abf45e32ce485e88b7f982fd3faa52037"><td class="memItemLeft" align="right" valign="top"><a id="abf45e32ce485e88b7f982fd3faa52037" name="abf45e32ce485e88b7f982fd3faa52037"></a>
<a class="el" href="#ae6c53bd0fe35fde17db547951607bc40">WhitespaceMode</a>&#160;</td><td class="memItemRight" valign="bottom"><b>m_WhitespaceMode</b> = <a class="el" href="#ae6c53bd0fe35fde17db547951607bc40ab1c94ca2fbc3e78fc30069c8d0f01680">WhitespaceMode::All</a></td></tr>
<tr class="separator:abf45e32ce485e88b7f982fd3faa52037"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74de23733a1cf3cbb8e2575be9d89314" id="r_a74de23733a1cf3cbb8e2575be9d89314"><td class="memItemLeft" align="right" valign="top"><a id="a74de23733a1cf3cbb8e2575be9d89314" name="a74de23733a1cf3cbb8e2575be9d89314"></a>
<a class="el" href="#ae0121c409d0e170ca20f3a00577da987">ArrayMode</a>&#160;</td><td class="memItemRight" valign="bottom"><b>m_ArrayMode</b> = <a class="el" href="#ae0121c409d0e170ca20f3a00577da987aefcb056b0921dbe898eb4c86e334c06c">ArrayMode::InOneLine</a></td></tr>
<tr class="separator:a74de23733a1cf3cbb8e2575be9d89314"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The base class for JSON writers. </p>
<p>Declares a common interface for writing JSON files. Also implements some utility functions built on top of the interface (AddVariable()). </p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="ae0121c409d0e170ca20f3a00577da987" name="ae0121c409d0e170ca20f3a00577da987"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0121c409d0e170ca20f3a00577da987">&#9670;&#160;</a></span>ArrayMode</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum class <a class="el" href="#ae0121c409d0e170ca20f3a00577da987">plJSONWriter::ArrayMode</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Modes to configure how arrays are written. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ae0121c409d0e170ca20f3a00577da987aefcb056b0921dbe898eb4c86e334c06c" name="ae0121c409d0e170ca20f3a00577da987aefcb056b0921dbe898eb4c86e334c06c"></a>InOneLine&#160;</td><td class="fielddoc"><p>All array items are written in a single line in the file. </p>
</td></tr>
<tr><td class="fieldname"><a id="ae0121c409d0e170ca20f3a00577da987a0a2c674aedb0dda5c5b29d44aa8c8549" name="ae0121c409d0e170ca20f3a00577da987a0a2c674aedb0dda5c5b29d44aa8c8549"></a>OneLinePerItem&#160;</td><td class="fielddoc"><p>Each array item is put on a separate line. </p>
</td></tr>
</table>

</div>
</div>
<a id="ae6c53bd0fe35fde17db547951607bc40" name="ae6c53bd0fe35fde17db547951607bc40"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6c53bd0fe35fde17db547951607bc40">&#9670;&#160;</a></span>WhitespaceMode</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum class <a class="el" href="#ae6c53bd0fe35fde17db547951607bc40">plJSONWriter::WhitespaceMode</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Modes to configure how much whitespace the JSON writer will output. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ae6c53bd0fe35fde17db547951607bc40ab1c94ca2fbc3e78fc30069c8d0f01680" name="ae6c53bd0fe35fde17db547951607bc40ab1c94ca2fbc3e78fc30069c8d0f01680"></a>All&#160;</td><td class="fielddoc"><p>All whitespace is output. This is the default, it should be used for files that are read by humans. </p>
</td></tr>
<tr><td class="fieldname"><a id="ae6c53bd0fe35fde17db547951607bc40af1b93b10a0f5f3fc4ac9a01b0e43ebc8" name="ae6c53bd0fe35fde17db547951607bc40af1b93b10a0f5f3fc4ac9a01b0e43ebc8"></a>LessIndentation&#160;</td><td class="fielddoc"><p>Saves some space by using less space for indentation. </p>
</td></tr>
<tr><td class="fieldname"><a id="ae6c53bd0fe35fde17db547951607bc40a77df809fc4dda1dfad604be6f3b09a9a" name="ae6c53bd0fe35fde17db547951607bc40a77df809fc4dda1dfad604be6f3b09a9a"></a>NoIndentation&#160;</td><td class="fielddoc"><p>Saves even more space by dropping all indentation from the output. The result will be noticeably less readable. </p>
</td></tr>
<tr><td class="fieldname"><a id="ae6c53bd0fe35fde17db547951607bc40a159988bd112cc0da6f701bc46843b89d" name="ae6c53bd0fe35fde17db547951607bc40a159988bd112cc0da6f701bc46843b89d"></a>NewlinesOnly&#160;</td><td class="fielddoc"><p>All unnecessary whitespace, except for newlines, is not output. </p>
</td></tr>
<tr><td class="fieldname"><a id="ae6c53bd0fe35fde17db547951607bc40a6adf97f83acf6453d4a6a4b1070f3754" name="ae6c53bd0fe35fde17db547951607bc40a6adf97f83acf6453d4a6a4b1070f3754"></a>None&#160;</td><td class="fielddoc"><p>No whitespace, not even newlines, is output. This should be used when JSON is used for data exchange, but probably not read by humans. </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a313dd46de4ebef09a89856f8de796661" name="a313dd46de4ebef09a89856f8de796661"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a313dd46de4ebef09a89856f8de796661">&#9670;&#160;</a></span>BeginArray()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plJSONWriter::BeginArray </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sName</em></span><span class="paramdefsep"> = </span><span class="paramdefval">nullptr</span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Begins outputting an array variable. </p>
<p>If szName is nullptr this will create an anonymous array, which is necessary when you want to put an array as a value into another array. <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> with a non-nullptr value for <em>szName</em> is identical to calling <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> first. In this case <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a> will also end the variable definition, so no additional call to <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> is required. </p>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#a4a9e0274b936827b0ff04a77019125a7">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="a20d5bbee34268194b0f0c353bd732519" name="a20d5bbee34268194b0f0c353bd732519"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20d5bbee34268194b0f0c353bd732519">&#9670;&#160;</a></span>BeginObject()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plJSONWriter::BeginObject </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sName</em></span><span class="paramdefsep"> = </span><span class="paramdefval">nullptr</span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Begins outputting an object variable. </p>
<p>If szName is nullptr this will create an anonymous object, which is necessary when you want to put an object as a value into an array. <a class="el" href="#a20d5bbee34268194b0f0c353bd732519" title="Begins outputting an object variable.">BeginObject()</a> with a non-nullptr value for <em>szName</em> is identical to calling <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> first. In this case <a class="el" href="#a177c92840f1657a9db1537013a12f9ea" title="Ends outputting an object variable.">EndObject()</a> will also end the variable definition, so no additional call to <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> is required. </p>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#ab06994bb514ab532bb62be4a8422b13f">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="a63c9c62d9b33c92a807c3ecea326778d" name="a63c9c62d9b33c92a807c3ecea326778d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63c9c62d9b33c92a807c3ecea326778d">&#9670;&#160;</a></span>BeginVariable()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plJSONWriter::BeginVariable </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sName</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Begins outputting a variable. <em>szName</em> is the variable name. </p>
<p>Between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> and <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> you can call the WriteXYZ functions once to write out the variable's data. You can also call <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> and <a class="el" href="#a20d5bbee34268194b0f0c353bd732519" title="Begins outputting an object variable.">BeginObject()</a> without a variable name to output an array or object variable. </p>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#a4a04d8f8d50b3504c7bfca51c3ee9e81">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="ae00f9321179a3443f7510eaaef6cc245" name="ae00f9321179a3443f7510eaaef6cc245"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae00f9321179a3443f7510eaaef6cc245">&#9670;&#160;</a></span>EndArray()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plJSONWriter::EndArray </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Ends outputting an array variable. </p>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#a6e0593e41f493722a5d858a4fc49ad81">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="a177c92840f1657a9db1537013a12f9ea" name="a177c92840f1657a9db1537013a12f9ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a177c92840f1657a9db1537013a12f9ea">&#9670;&#160;</a></span>EndObject()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plJSONWriter::EndObject </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Ends outputting an object variable. </p>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#a0a1ba5d6bcf753cf8592db1abdbf2b5e">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="adc5513e41881417d442baaf01850ee31" name="adc5513e41881417d442baaf01850ee31"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc5513e41881417d442baaf01850ee31">&#9670;&#160;</a></span>EndVariable()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plJSONWriter::EndVariable </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Ends outputting a variable. </p>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#a414b598a4003d3da5e8d8dbe4ceea73e">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="a7eb1f51c210e80ede4807cf885b6938d" name="a7eb1f51c210e80ede4807cf885b6938d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7eb1f51c210e80ede4807cf885b6938d">&#9670;&#160;</a></span>HadWriteError()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool plJSONWriter::HadWriteError </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Indicates if an error was encountered while writing. </p>
<p>If any error was encountered at any time during writing, this will return true </p>

</div>
</div>
<a id="a2eaee0b07d49bd1399c759cf6889fc28" name="a2eaee0b07d49bd1399c759cf6889fc28"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2eaee0b07d49bd1399c759cf6889fc28">&#9670;&#160;</a></span>WriteAngle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plJSONWriter::WriteAngle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d4/dfd/classpl_angle.htm">plAngle</a></td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes an <a class="el" href="../../d4/dfd/classpl_angle.htm" title="Float wrapper struct for a safe usage and conversions of angles.">plAngle</a> to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>
<dl class="section note"><dt>Note</dt><dd>Standard JSON does not have a suitable type for this. A derived class might turn this into an object or output it via <a class="el" href="#aabccad48dedfc4d785add78d385121c6" title="Outputs a chunk of memory in some JSON form that can be interpreted as binary data when reading it ag...">WriteBinaryData()</a>. </dd></dl>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#a70dd91f5887ae5235251dc6c7682138d">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="aabccad48dedfc4d785add78d385121c6" name="aabccad48dedfc4d785add78d385121c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aabccad48dedfc4d785add78d385121c6">&#9670;&#160;</a></span>WriteBinaryData()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plJSONWriter::WriteBinaryData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sDataType</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *</td>          <td class="paramname"><span class="paramname"><em>pData</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>uiBytes</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>sValueString</em></span><span class="paramdefsep"> = </span><span class="paramdefval">nullptr</span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Outputs a chunk of memory in some JSON form that can be interpreted as binary data when reading it again. </p>
<p>How exactly the raw data is represented in JSON is up to the derived class. <em>szDataType</em> allows to additionally output a string that identifies the type of data. </p>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#aaa13fdb6a1c83cb24be617634c78002a">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="a2de3a845cbdc894fc15c259cda9eea04" name="a2de3a845cbdc894fc15c259cda9eea04"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2de3a845cbdc894fc15c259cda9eea04">&#9670;&#160;</a></span>WriteBool()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plJSONWriter::WriteBool </td>
          <td>(</td>
          <td class="paramtype">bool</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes a bool to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#a1cca9687b4aa0ee7e1d7b77a270a5a11">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="a86485212233dcb8a5b716300bc750399" name="a86485212233dcb8a5b716300bc750399"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86485212233dcb8a5b716300bc750399">&#9670;&#160;</a></span>WriteColor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJSONWriter::WriteColor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes an <a class="el" href="../../d9/d1d/classpl_color.htm" title="plColor represents an RGBA color in linear color space. Values are stored as float,...">plColor</a> to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>
<dl class="section note"><dt>Note</dt><dd>Standard JSON does not have a suitable type for this. A derived class might turn this into an object or output it via <a class="el" href="#aabccad48dedfc4d785add78d385121c6" title="Outputs a chunk of memory in some JSON form that can be interpreted as binary data when reading it ag...">WriteBinaryData()</a>. </dd></dl>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#a2bc2d6bd4bb22c9ac7c02628baafa636">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="ad0bf3dcbd7cc114920cad79fb2b7722d" name="ad0bf3dcbd7cc114920cad79fb2b7722d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0bf3dcbd7cc114920cad79fb2b7722d">&#9670;&#160;</a></span>WriteColorGamma()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJSONWriter::WriteColorGamma </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../dd/dd8/classpl_color_gamma_u_b.htm">plColorGammaUB</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes an <a class="el" href="../../dd/dd8/classpl_color_gamma_u_b.htm" title="A 8bit per channel unsigned normalized (values interpreted as 0-1) color storage format that represen...">plColorGammaUB</a> to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>
<dl class="section note"><dt>Note</dt><dd>Standard JSON does not have a suitable type for this. A derived class might turn this into an object or output it via <a class="el" href="#aabccad48dedfc4d785add78d385121c6" title="Outputs a chunk of memory in some JSON form that can be interpreted as binary data when reading it ag...">WriteBinaryData()</a>. </dd></dl>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#a63afb645bbd51c2689ae66f613a8089d">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="a3656739d6db81def926f25be01fd061b" name="a3656739d6db81def926f25be01fd061b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3656739d6db81def926f25be01fd061b">&#9670;&#160;</a></span>WriteDataBuffer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJSONWriter::WriteDataBuffer </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d0/d4e/classpl_dynamic_array.htm">plDataBuffer</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes an plDataBuffer to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>
<dl class="section note"><dt>Note</dt><dd>Standard JSON does not have a suitable type for this. A derived class might turn this into an object or output it via <a class="el" href="#aabccad48dedfc4d785add78d385121c6" title="Outputs a chunk of memory in some JSON form that can be interpreted as binary data when reading it ag...">WriteBinaryData()</a>. </dd></dl>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#a472f9c5b2636004c30415478d942388c">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="a5663f7a9f9f40976e9ef49a8e2724baf" name="a5663f7a9f9f40976e9ef49a8e2724baf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5663f7a9f9f40976e9ef49a8e2724baf">&#9670;&#160;</a></span>WriteDouble()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plJSONWriter::WriteDouble </td>
          <td>(</td>
          <td class="paramtype">double</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes a double to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#a2e19e275f676713f15796f258294a8f2">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="af4cf1a4b14151eb6d0d9ebe9f10ca90b" name="af4cf1a4b14151eb6d0d9ebe9f10ca90b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4cf1a4b14151eb6d0d9ebe9f10ca90b">&#9670;&#160;</a></span>WriteFloat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plJSONWriter::WriteFloat </td>
          <td>(</td>
          <td class="paramtype">float</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes a float to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#a35ff38ccf8a21eca8df9c472d8e88010">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="ac39a7a4003aba063886636e4c2088ad6" name="ac39a7a4003aba063886636e4c2088ad6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac39a7a4003aba063886636e4c2088ad6">&#9670;&#160;</a></span>WriteInt32()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plJSONWriter::WriteInt32 </td>
          <td>(</td>
          <td class="paramtype">plInt32</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes an int32 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#a9a2cf4d7c61a65dea7cc79b396225b5b">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="adcac7ca17ade82d758b42884ac4b928f" name="adcac7ca17ade82d758b42884ac4b928f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adcac7ca17ade82d758b42884ac4b928f">&#9670;&#160;</a></span>WriteInt64()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plJSONWriter::WriteInt64 </td>
          <td>(</td>
          <td class="paramtype">plInt64</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes an int64 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#a9028b74ddaa6246a222803e5f8c1e419">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="a85e89542a5c5e754d4ba239d4a645614" name="a85e89542a5c5e754d4ba239d4a645614"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a85e89542a5c5e754d4ba239d4a645614">&#9670;&#160;</a></span>WriteMat3()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJSONWriter::WriteMat3 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d5/d81/classpl_mat3_template.htm">plMat3</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes an plMat3 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>
<dl class="section note"><dt>Note</dt><dd>Standard JSON does not have a suitable type for this. A derived class might turn this into an object or output it via <a class="el" href="#aabccad48dedfc4d785add78d385121c6" title="Outputs a chunk of memory in some JSON form that can be interpreted as binary data when reading it ag...">WriteBinaryData()</a>. </dd></dl>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#af1f2a6a730d0cb5a1b352a7f83ef621a">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="a6699b33d940e87b4c1fbac0380c52a39" name="a6699b33d940e87b4c1fbac0380c52a39"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6699b33d940e87b4c1fbac0380c52a39">&#9670;&#160;</a></span>WriteMat4()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJSONWriter::WriteMat4 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d4/dbd/classpl_mat4_template.htm">plMat4</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes an plMat4 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>
<dl class="section note"><dt>Note</dt><dd>Standard JSON does not have a suitable type for this. A derived class might turn this into an object or output it via <a class="el" href="#aabccad48dedfc4d785add78d385121c6" title="Outputs a chunk of memory in some JSON form that can be interpreted as binary data when reading it ag...">WriteBinaryData()</a>. </dd></dl>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#a1a0de95f78eacf359c06e82bce46808b">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="acd159430dae889f3a059834939cd7273" name="acd159430dae889f3a059834939cd7273"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd159430dae889f3a059834939cd7273">&#9670;&#160;</a></span>WriteNULL()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plJSONWriter::WriteNULL </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes the value 'null' to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#a3b1cbf15ee49c2f2ac84a83e0fd0b0fa">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="ac253121b7c9ccf67b17e5ea95471140e" name="ac253121b7c9ccf67b17e5ea95471140e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac253121b7c9ccf67b17e5ea95471140e">&#9670;&#160;</a></span>WriteQuat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJSONWriter::WriteQuat </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/dad/classpl_quat_template.htm">plQuat</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes an plQuat to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>
<dl class="section note"><dt>Note</dt><dd>Standard JSON does not have a suitable type for this. A derived class might turn this into an object or output it via <a class="el" href="#aabccad48dedfc4d785add78d385121c6" title="Outputs a chunk of memory in some JSON form that can be interpreted as binary data when reading it ag...">WriteBinaryData()</a>. </dd></dl>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#aedb594f6bd10b0a8410ac598aa2cbe27">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="a632550ec23fdff56d86b83040c7d6843" name="a632550ec23fdff56d86b83040c7d6843"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a632550ec23fdff56d86b83040c7d6843">&#9670;&#160;</a></span>WriteString()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plJSONWriter::WriteString </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d79/classpl_string_view.htm">plStringView</a></td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes a string to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#ae897572a415ff2e76c74d797909cfc13">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="a346da1c8e48ec5dc81c07d8325445d19" name="a346da1c8e48ec5dc81c07d8325445d19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a346da1c8e48ec5dc81c07d8325445d19">&#9670;&#160;</a></span>WriteTime()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plJSONWriter::WriteTime </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d1/df6/structpl_time.htm">plTime</a></td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes a time value to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#ad5719293d2dc1ac7912a40001f13645f">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="a1c04a88c09eda33fcb35a3f5ac0f911a" name="a1c04a88c09eda33fcb35a3f5ac0f911a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c04a88c09eda33fcb35a3f5ac0f911a">&#9670;&#160;</a></span>WriteUInt32()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plJSONWriter::WriteUInt32 </td>
          <td>(</td>
          <td class="paramtype">plUInt32</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes a uint32 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#a7b308240d39ef2f67ac4979719ee45e0">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="ac698aafa87b596cc7e70f9012950590d" name="ac698aafa87b596cc7e70f9012950590d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac698aafa87b596cc7e70f9012950590d">&#9670;&#160;</a></span>WriteUInt64()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plJSONWriter::WriteUInt64 </td>
          <td>(</td>
          <td class="paramtype">plUInt64</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes a uint64 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#ad293c05a4036cbc54fbb5c53da2d8dae">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="aa6f9134e78d853f9103632f6cb8da245" name="aa6f9134e78d853f9103632f6cb8da245"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6f9134e78d853f9103632f6cb8da245">&#9670;&#160;</a></span>WriteUuid()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void plJSONWriter::WriteUuid </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d6/d33/classpl_uuid.htm">plUuid</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes an <a class="el" href="../../d6/d33/classpl_uuid.htm" title="This data type is the abstraction for 128-bit Uuid (also known as GUID) instances.">plUuid</a> to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>
<dl class="section note"><dt>Note</dt><dd>Standard JSON does not have a suitable type for this. A derived class might turn this into an object or output it via <a class="el" href="#aabccad48dedfc4d785add78d385121c6" title="Outputs a chunk of memory in some JSON form that can be interpreted as binary data when reading it ag...">WriteBinaryData()</a>. </dd></dl>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#a6001cd65ef61b63e5d10a26d06ee2885">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="ae94f2056440b6a75fc78433f8f0b8961" name="ae94f2056440b6a75fc78433f8f0b8961"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae94f2056440b6a75fc78433f8f0b8961">&#9670;&#160;</a></span>WriteVariant()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJSONWriter::WriteVariant </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../da/d4c/classpl_variant.htm">plVariant</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The default implementation dispatches all supported types to WriteBool, WriteInt32, etc. and asserts on the more complex types. </p>
<p>A derived class may override this function to implement support for the remaining variant types, if required. </p>

</div>
</div>
<a id="aec201ce7aa809b0bc877211de955d8f7" name="aec201ce7aa809b0bc877211de955d8f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec201ce7aa809b0bc877211de955d8f7">&#9670;&#160;</a></span>WriteVec2()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJSONWriter::WriteVec2 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes an plVec2 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>
<dl class="section note"><dt>Note</dt><dd>Standard JSON does not have a suitable type for this. A derived class might turn this into an object or output it via <a class="el" href="#aabccad48dedfc4d785add78d385121c6" title="Outputs a chunk of memory in some JSON form that can be interpreted as binary data when reading it ag...">WriteBinaryData()</a>. </dd></dl>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#a6354c042b68727116fbe8c8bf6e97bbf">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="a7afec4e39ba729ef0e9972b3e5de093d" name="a7afec4e39ba729ef0e9972b3e5de093d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7afec4e39ba729ef0e9972b3e5de093d">&#9670;&#160;</a></span>WriteVec2I32()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJSONWriter::WriteVec2I32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2I32</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes an plVec2I32 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>
<dl class="section note"><dt>Note</dt><dd>Standard JSON does not have a suitable type for this. A derived class might turn this into an object or output it via <a class="el" href="#aabccad48dedfc4d785add78d385121c6" title="Outputs a chunk of memory in some JSON form that can be interpreted as binary data when reading it ag...">WriteBinaryData()</a>. </dd></dl>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#af9096629ce17a2e7ee6b235ebaf8c0fe">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="acd938fe601d885e636651d6d07149c71" name="acd938fe601d885e636651d6d07149c71"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd938fe601d885e636651d6d07149c71">&#9670;&#160;</a></span>WriteVec3()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJSONWriter::WriteVec3 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes an plVec3 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>
<dl class="section note"><dt>Note</dt><dd>Standard JSON does not have a suitable type for this. A derived class might turn this into an object or output it via <a class="el" href="#aabccad48dedfc4d785add78d385121c6" title="Outputs a chunk of memory in some JSON form that can be interpreted as binary data when reading it ag...">WriteBinaryData()</a>. </dd></dl>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#a3332699cbe91b58e408bc70c78d405e5">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="a84f2f1b413781a47030409d5ac24b947" name="a84f2f1b413781a47030409d5ac24b947"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84f2f1b413781a47030409d5ac24b947">&#9670;&#160;</a></span>WriteVec3I32()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJSONWriter::WriteVec3I32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3I32</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes an plVec3I32 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>
<dl class="section note"><dt>Note</dt><dd>Standard JSON does not have a suitable type for this. A derived class might turn this into an object or output it via <a class="el" href="#aabccad48dedfc4d785add78d385121c6" title="Outputs a chunk of memory in some JSON form that can be interpreted as binary data when reading it ag...">WriteBinaryData()</a>. </dd></dl>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#aec1b2d980e099bbecdb909c517c65ec4">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="ac32d3953c81896103fe0859c1dc2684a" name="ac32d3953c81896103fe0859c1dc2684a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac32d3953c81896103fe0859c1dc2684a">&#9670;&#160;</a></span>WriteVec4()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJSONWriter::WriteVec4 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d1/d4b/classpl_vec4_template.htm">plVec4</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes an plVec4 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>
<dl class="section note"><dt>Note</dt><dd>Standard JSON does not have a suitable type for this. A derived class might turn this into an object or output it via <a class="el" href="#aabccad48dedfc4d785add78d385121c6" title="Outputs a chunk of memory in some JSON form that can be interpreted as binary data when reading it ag...">WriteBinaryData()</a>. </dd></dl>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#a2412a879411105fb689ef98752cde996">plStandardJSONWriter</a>.</p>

</div>
</div>
<a id="aca3e9cdfada4bd1b575bc6ceee38fdc3" name="aca3e9cdfada4bd1b575bc6ceee38fdc3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca3e9cdfada4bd1b575bc6ceee38fdc3">&#9670;&#160;</a></span>WriteVec4I32()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJSONWriter::WriteVec4I32 </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d1/d4b/classpl_vec4_template.htm">plVec4I32</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Writes an plVec4I32 to the JSON file. Can only be called between <a class="el" href="#a63c9c62d9b33c92a807c3ecea326778d" title="Begins outputting a variable. szName is the variable name.">BeginVariable()</a> / <a class="el" href="#adc5513e41881417d442baaf01850ee31" title="Ends outputting a variable.">EndVariable()</a> or <a class="el" href="#a313dd46de4ebef09a89856f8de796661" title="Begins outputting an array variable.">BeginArray()</a> / <a class="el" href="#ae00f9321179a3443f7510eaaef6cc245" title="Ends outputting an array variable.">EndArray()</a>. </p>
<dl class="section note"><dt>Note</dt><dd>Standard JSON does not have a suitable type for this. A derived class might turn this into an object or output it via <a class="el" href="#aabccad48dedfc4d785add78d385121c6" title="Outputs a chunk of memory in some JSON form that can be interpreted as binary data when reading it ag...">WriteBinaryData()</a>. </dd></dl>

<p>Implemented in <a class="el" href="../../d9/d73/classpl_standard_j_s_o_n_writer.htm#a6b121a035b775bd204fce3536331549c">plStandardJSONWriter</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/Engine/Foundation/IO/<a class="el" href="../../d7/d97/_j_s_o_n_writer_8h_source.htm">JSONWriter.h</a></li>
<li>Code/Engine/Foundation/IO/Implementation/<b>JSONWriter.cpp</b></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../da/dcd/classpl_j_s_o_n_writer.htm">plJSONWriter</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
