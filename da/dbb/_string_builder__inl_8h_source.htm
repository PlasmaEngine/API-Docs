<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>plEngine: Code/Engine/Foundation/Strings/Implementation/StringBuilder_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only.css" rel="stylesheet" type="text/css"/>
<link href="../../doxygen-awesome-sidebar-only-darkmode-toggle.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">plEngine<span id="projectnumber">&#160;Release 2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('da/dbb/_string_builder__inl_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">StringBuilder_inl.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;Foundation/Strings/StringConversion.h&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span> </div>
<div class="foldopen" id="foldopen00005" data-start="{" data-end="}">
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#a107a88ba85547554b2b2e1ceccbec431">    5</a></span><span class="keyword">inline</span> <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a107a88ba85547554b2b2e1ceccbec431">plStringBuilder::plStringBuilder</a>(<a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span>  : m_Data(pAllocator)</div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span>{</div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span>  AppendTerminator();</div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span>}</div>
</div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span> </div>
<div class="foldopen" id="foldopen00011" data-start="{" data-end="}">
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#a5f4030d97079e15e4fdaa1ccc27355ec">   11</a></span><span class="keyword">inline</span> <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a107a88ba85547554b2b2e1ceccbec431">plStringBuilder::plStringBuilder</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d3/d2d/classpl_string_builder.htm">plStringBuilder</a>&amp; rhs)</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>  : m_Data(rhs.GetAllocator())</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>{</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>  AppendTerminator();</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span> </div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span>  *<span class="keyword">this</span> = rhs;</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>}</div>
</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span> </div>
<div class="foldopen" id="foldopen00019" data-start="{" data-end="}">
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#a885d1316c14692949ee50cf6598a8a5d">   19</a></span><span class="keyword">inline</span> <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a107a88ba85547554b2b2e1ceccbec431">plStringBuilder::plStringBuilder</a>(<a class="code hl_class" href="../../d3/d2d/classpl_string_builder.htm">plStringBuilder</a>&amp;&amp; rhs) noexcept</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>  : m_Data(rhs.GetAllocator())</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>{</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>  AppendTerminator();</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span> </div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>  *<span class="keyword">this</span> = std::move(rhs);</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>}</div>
</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span> </div>
<div class="foldopen" id="foldopen00027" data-start="{" data-end="}">
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#ae543378265bd7df0a30554d85bc0144b">   27</a></span><span class="keyword">inline</span> <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a107a88ba85547554b2b2e1ceccbec431">plStringBuilder::plStringBuilder</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szUTF8, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>  : m_Data(pAllocator)</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>{</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>  AppendTerminator();</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span> </div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span>  *<span class="keyword">this</span> = szUTF8;</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>}</div>
</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span> </div>
<div class="foldopen" id="foldopen00035" data-start="{" data-end="}">
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#adca8ee552025274a266b7dbcc4624f43">   35</a></span><span class="keyword">inline</span> <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a107a88ba85547554b2b2e1ceccbec431">plStringBuilder::plStringBuilder</a>(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* pWChar, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>  : m_Data(pAllocator)</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>{</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>  AppendTerminator();</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span> </div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span>  *<span class="keyword">this</span> = pWChar;</div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span>}</div>
</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span> </div>
<div class="foldopen" id="foldopen00043" data-start="{" data-end="}">
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#a2d91cf295edf9eaef57d01a27bfc36b2">   43</a></span><span class="keyword">inline</span> <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a107a88ba85547554b2b2e1ceccbec431">plStringBuilder::plStringBuilder</a>(<a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> rhs, <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* pAllocator)</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>  : m_Data(pAllocator)</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>{</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>  AppendTerminator();</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span> </div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>  *<span class="keyword">this</span> = rhs;</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>}</div>
</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span> </div>
<div class="foldopen" id="foldopen00051" data-start="{" data-end="}">
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#a0f3754f7b55c07f871886605f64292e1">   51</a></span>PL_ALWAYS_INLINE <a class="code hl_class" href="../../da/df3/classpl_allocator.htm">plAllocator</a>* <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a0f3754f7b55c07f871886605f64292e1">plStringBuilder::GetAllocator</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span>  <span class="keywordflow">return</span> m_Data.<a class="code hl_function" href="../../d7/d89/classpl_dynamic_array_base.htm#a2e798e376d697a13db7f7ab27c59327e">GetAllocator</a>();</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>}</div>
</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span> </div>
<div class="foldopen" id="foldopen00056" data-start="{" data-end="}">
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#aa066fdeaae380f774ce5cd81dbcece97">   56</a></span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a40eb7c51f4583a00a3c15f812d3c0df7">plStringBuilder::operator=</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szUTF8)</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>{</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>  <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a4c6ccfde7c01b833dc54892236eec2c9">Set</a>(szUTF8);</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>}</div>
</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span> </div>
<div class="foldopen" id="foldopen00061" data-start="{" data-end="}">
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#a401f72f9fa0a5f359354deace282edab">   61</a></span>PL_FORCE_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a40eb7c51f4583a00a3c15f812d3c0df7">plStringBuilder::operator=</a>(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* pWChar)</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>{</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>  <span class="comment">// fine to do this, szWChar can never come from the stringbuilder&#39;s own data array</span></div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>  <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a0bf2e1b97d7c871a7cba08615bc82357">Clear</a>();</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>  <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a1e8c97d8bcb6e24fbe61f79cfe2d90db">Append</a>(pWChar);</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>}</div>
</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span> </div>
<div class="foldopen" id="foldopen00068" data-start="{" data-end="}">
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#a40eb7c51f4583a00a3c15f812d3c0df7">   68</a></span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a40eb7c51f4583a00a3c15f812d3c0df7">plStringBuilder::operator=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d3/d2d/classpl_string_builder.htm">plStringBuilder</a>&amp; rhs)</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>{</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>  m_Data = rhs.m_Data;</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>}</div>
</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span> </div>
<div class="foldopen" id="foldopen00073" data-start="{" data-end="}">
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#ae647e439b4cfc0fec9255aa5b42945e9">   73</a></span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a40eb7c51f4583a00a3c15f812d3c0df7">plStringBuilder::operator=</a>(<a class="code hl_class" href="../../d3/d2d/classpl_string_builder.htm">plStringBuilder</a>&amp;&amp; rhs) <span class="keyword">noexcept</span></div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>{</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>  m_Data = std::move(rhs.m_Data);</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>}</div>
</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span> </div>
<div class="foldopen" id="foldopen00078" data-start="{" data-end="}">
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#a1db6c0e59e3929a325acbc6deaa85ce9">   78</a></span>PL_ALWAYS_INLINE plUInt32 <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a1db6c0e59e3929a325acbc6deaa85ce9">plStringBuilder::GetElementCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>  <span class="keywordflow">return</span> m_Data.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#af1fcadea5a992d6b5d0a1788a379de65">GetCount</a>() - 1; <span class="comment">// exclude the &#39;\0&#39; terminator</span></div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>}</div>
</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span> </div>
<div class="foldopen" id="foldopen00083" data-start="{" data-end="}">
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#a50431616657824d4039932e5b5923882">   83</a></span>PL_ALWAYS_INLINE plUInt32 <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a50431616657824d4039932e5b5923882">plStringBuilder::GetCharacterCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#ad62540cef4e31838952f7cfc846ef9f2">plStringUtils::GetCharacterCount</a>(m_Data.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#a4350a1a63cc30d8c0b7f567f7a71d228">GetData</a>());</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>}</div>
</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span> </div>
<div class="foldopen" id="foldopen00088" data-start="{" data-end="}">
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#a0bf2e1b97d7c871a7cba08615bc82357">   88</a></span>PL_FORCE_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a0bf2e1b97d7c871a7cba08615bc82357">plStringBuilder::Clear</a>()</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>{</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>  m_Data.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#a6bf05fc414d10cd1945a8aa42b5981ce">SetCountUninitialized</a>(1);</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>  m_Data[0] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>}</div>
</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span> </div>
<div class="foldopen" id="foldopen00094" data-start="{" data-end="}">
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#a1e8c97d8bcb6e24fbe61f79cfe2d90db">   94</a></span><span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a1e8c97d8bcb6e24fbe61f79cfe2d90db">plStringBuilder::Append</a>(plUInt32 uiChar)</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>{</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>  <span class="keywordtype">char</span> szChar[6] = {0, 0, 0, 0, 0, 0};</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>  <span class="keywordtype">char</span>* pChar = &amp;szChar[0];</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span> </div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>  <a class="code hl_function" href="../../d5/de1/classpl_unicode_utils.htm#ab3581cf79af0cc5f771f2fe3275ae02a">plUnicodeUtils::EncodeUtf32ToUtf8</a>(uiChar, pChar);</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>  plUInt32 uiCharLen = (plUInt32)(pChar - szChar);</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>  plUInt32 uiOldCount = m_Data.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#af1fcadea5a992d6b5d0a1788a379de65">GetCount</a>();</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>  m_Data.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#a6bf05fc414d10cd1945a8aa42b5981ce">SetCountUninitialized</a>(uiOldCount + uiCharLen);</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>  uiOldCount--;</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>  <span class="keywordflow">for</span> (plUInt32 i = 0; i &lt; uiCharLen; i++)</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>  {</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>    m_Data[uiOldCount + i] = szChar[i];</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>  }</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>  m_Data[uiOldCount + uiCharLen] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>}</div>
</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span> </div>
<div class="foldopen" id="foldopen00111" data-start="{" data-end="}">
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#a3f8180f9332f6e267dee6be0ccceff75">  111</a></span><span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a3f8180f9332f6e267dee6be0ccceff75">plStringBuilder::Prepend</a>(plUInt32 uiChar)</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>{</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>  <span class="keywordtype">char</span> szChar[6] = {0, 0, 0, 0, 0, 0};</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>  <span class="keywordtype">char</span>* pChar = &amp;szChar[0];</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span> </div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>  <a class="code hl_function" href="../../d5/de1/classpl_unicode_utils.htm#ab3581cf79af0cc5f771f2fe3275ae02a">plUnicodeUtils::EncodeUtf32ToUtf8</a>(uiChar, pChar);</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>  <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a3f8180f9332f6e267dee6be0ccceff75">Prepend</a>(szChar);</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>}</div>
</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span> </div>
<div class="foldopen" id="foldopen00120" data-start="{" data-end="}">
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#a16e5d8f18f95040deabb96572cd34025">  120</a></span><span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a1e8c97d8bcb6e24fbe61f79cfe2d90db">plStringBuilder::Append</a>(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* pData1, <span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* pData2, <span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* pData3, <span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* pData4, <span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* pData5, <span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* pData6)</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>{</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>  <span class="comment">// this is a bit heavy on the stack size (6KB)</span></div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>  <span class="comment">// but it is really only a convenience function, as one could always just use the char* Append function and convert explicitly</span></div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>  <a class="code hl_class" href="../../d4/d66/classpl_string_utf8.htm">plStringUtf8</a> s1(pData1, m_Data.<a class="code hl_function" href="../../d7/d89/classpl_dynamic_array_base.htm#a2e798e376d697a13db7f7ab27c59327e">GetAllocator</a>());</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>  <a class="code hl_class" href="../../d4/d66/classpl_string_utf8.htm">plStringUtf8</a> s2(pData2, m_Data.<a class="code hl_function" href="../../d7/d89/classpl_dynamic_array_base.htm#a2e798e376d697a13db7f7ab27c59327e">GetAllocator</a>());</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>  <a class="code hl_class" href="../../d4/d66/classpl_string_utf8.htm">plStringUtf8</a> s3(pData3, m_Data.<a class="code hl_function" href="../../d7/d89/classpl_dynamic_array_base.htm#a2e798e376d697a13db7f7ab27c59327e">GetAllocator</a>());</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>  <a class="code hl_class" href="../../d4/d66/classpl_string_utf8.htm">plStringUtf8</a> s4(pData4, m_Data.<a class="code hl_function" href="../../d7/d89/classpl_dynamic_array_base.htm#a2e798e376d697a13db7f7ab27c59327e">GetAllocator</a>());</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>  <a class="code hl_class" href="../../d4/d66/classpl_string_utf8.htm">plStringUtf8</a> s5(pData5, m_Data.<a class="code hl_function" href="../../d7/d89/classpl_dynamic_array_base.htm#a2e798e376d697a13db7f7ab27c59327e">GetAllocator</a>());</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>  <a class="code hl_class" href="../../d4/d66/classpl_string_utf8.htm">plStringUtf8</a> s6(pData6, m_Data.<a class="code hl_function" href="../../d7/d89/classpl_dynamic_array_base.htm#a2e798e376d697a13db7f7ab27c59327e">GetAllocator</a>());</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span> </div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>  <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a1e8c97d8bcb6e24fbe61f79cfe2d90db">Append</a>(s1.GetView(), s2.GetView(), s3.GetView(), s4.GetView(), s5.GetView(), s6.GetView());</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>}</div>
</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span> </div>
<div class="foldopen" id="foldopen00134" data-start="{" data-end="}">
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#acafaa82e8b5b9f851fe20f18189d87e4">  134</a></span><span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a3f8180f9332f6e267dee6be0ccceff75">plStringBuilder::Prepend</a>(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* pData1, <span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* pData2, <span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* pData3, <span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* pData4, <span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* pData5, <span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* pData6)</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>{</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>  <span class="comment">// this is a bit heavy on the stack size (6KB)</span></div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>  <span class="comment">// but it is really only a convenience function, as one could always just use the char* Append function and convert explicitly</span></div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>  <a class="code hl_class" href="../../d4/d66/classpl_string_utf8.htm">plStringUtf8</a> s1(pData1, m_Data.<a class="code hl_function" href="../../d7/d89/classpl_dynamic_array_base.htm#a2e798e376d697a13db7f7ab27c59327e">GetAllocator</a>());</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>  <a class="code hl_class" href="../../d4/d66/classpl_string_utf8.htm">plStringUtf8</a> s2(pData2, m_Data.<a class="code hl_function" href="../../d7/d89/classpl_dynamic_array_base.htm#a2e798e376d697a13db7f7ab27c59327e">GetAllocator</a>());</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>  <a class="code hl_class" href="../../d4/d66/classpl_string_utf8.htm">plStringUtf8</a> s3(pData3, m_Data.<a class="code hl_function" href="../../d7/d89/classpl_dynamic_array_base.htm#a2e798e376d697a13db7f7ab27c59327e">GetAllocator</a>());</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>  <a class="code hl_class" href="../../d4/d66/classpl_string_utf8.htm">plStringUtf8</a> s4(pData4, m_Data.<a class="code hl_function" href="../../d7/d89/classpl_dynamic_array_base.htm#a2e798e376d697a13db7f7ab27c59327e">GetAllocator</a>());</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>  <a class="code hl_class" href="../../d4/d66/classpl_string_utf8.htm">plStringUtf8</a> s5(pData5, m_Data.<a class="code hl_function" href="../../d7/d89/classpl_dynamic_array_base.htm#a2e798e376d697a13db7f7ab27c59327e">GetAllocator</a>());</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>  <a class="code hl_class" href="../../d4/d66/classpl_string_utf8.htm">plStringUtf8</a> s6(pData6, m_Data.<a class="code hl_function" href="../../d7/d89/classpl_dynamic_array_base.htm#a2e798e376d697a13db7f7ab27c59327e">GetAllocator</a>());</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span> </div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>  <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a3f8180f9332f6e267dee6be0ccceff75">Prepend</a>(s1.GetView(), s2.GetView(), s3.GetView(), s4.GetView(), s5.GetView(), s6.GetView());</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>}</div>
</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span> </div>
<div class="foldopen" id="foldopen00148" data-start="{" data-end="}">
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#a11fe75866ee3add6ceaac9690549f908">  148</a></span>PL_ALWAYS_INLINE <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a11fe75866ee3add6ceaac9690549f908">plStringBuilder::GetData</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>  PL_ASSERT_DEBUG(!m_Data.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#addd94d248b34174e025b8c053c65b422">IsEmpty</a>(), <span class="stringliteral">&quot;plStringBuilder has been corrupted, the array can never be empty.&quot;</span>);</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span> </div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>  <span class="keywordflow">return</span> &amp;m_Data[0];</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>}</div>
</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span> </div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span><span class="keyword">inline</span> <span class="keywordtype">void</span> plStringBuilder::AppendTerminator()</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>{</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>  <span class="comment">// make sure the string terminates with a zero.</span></div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>  <span class="keywordflow">if</span> (m_Data.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#addd94d248b34174e025b8c053c65b422">IsEmpty</a>() || (m_Data.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#ac491d69cbb1f33194cd1dedc3847fdb2">PeekBack</a>() != <span class="charliteral">&#39;\0&#39;</span>))</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>    m_Data.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#a3e8ff51c4a7aa0afcfac3aa6206e08ff">PushBack</a>(<span class="charliteral">&#39;\0&#39;</span>);</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>}</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span> </div>
<div class="foldopen" id="foldopen00162" data-start="{" data-end="}">
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#a3d35e2061079fb363565cd0a3ac59661">  162</a></span><span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a3d35e2061079fb363565cd0a3ac59661">plStringBuilder::ToUpper</a>()</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>{</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>  <span class="keyword">const</span> plUInt32 uiNewStringLength = <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#aef4298ad9140576729bb32b7f70c9e71">plStringUtils::ToUpperString</a>(&amp;m_Data[0]);</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span> </div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>  <span class="comment">// the array stores the number of bytes, so set the count to the actually used number of bytes</span></div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>  m_Data.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#a6bf05fc414d10cd1945a8aa42b5981ce">SetCountUninitialized</a>(uiNewStringLength + 1);</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span>}</div>
</div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span> </div>
<div class="foldopen" id="foldopen00170" data-start="{" data-end="}">
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#af67042b86e2f2977581fa6f41f738059">  170</a></span><span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#af67042b86e2f2977581fa6f41f738059">plStringBuilder::ToLower</a>()</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>{</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>  <span class="keyword">const</span> plUInt32 uiNewStringLength = <a class="code hl_function" href="../../de/d4d/classpl_string_utils.htm#ad63b1621cbd8468cd17c7e662e0187b3">plStringUtils::ToLowerString</a>(&amp;m_Data[0]);</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span> </div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>  <span class="comment">// the array stores the number of bytes, so set the count to the actually used number of bytes</span></div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>  m_Data.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#a6bf05fc414d10cd1945a8aa42b5981ce">SetCountUninitialized</a>(uiNewStringLength + 1);</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>}</div>
</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span> </div>
<div class="foldopen" id="foldopen00178" data-start="{" data-end="}">
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#ad27e890445b6f6a5c0bcbb88026d19dd">  178</a></span><span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#ad27e890445b6f6a5c0bcbb88026d19dd">plStringBuilder::ChangeCharacter</a>(iterator&amp; ref_it, plUInt32 uiCharacter)</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>{</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>  PL_ASSERT_DEV(ref_it.IsValid(), <span class="stringliteral">&quot;The given character iterator does not point to a valid character.&quot;</span>);</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>  PL_ASSERT_DEV(ref_it.GetData() &gt;= <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a11fe75866ee3add6ceaac9690549f908">GetData</a>() &amp;&amp; ref_it.GetData() &lt; <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a11fe75866ee3add6ceaac9690549f908">GetData</a>() + <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a1db6c0e59e3929a325acbc6deaa85ce9">GetElementCount</a>(),</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>    <span class="stringliteral">&quot;The given character iterator does not point into this string. It was either created from another string, or this string &quot;</span></div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>    <span class="stringliteral">&quot;has been reallocated in the mean time.&quot;</span>);</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span> </div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>  <span class="comment">// this is only an optimization for pure ASCII strings</span></div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>  <span class="comment">// without it, the code below would still work</span></div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>  <span class="keywordflow">if</span> (<a class="code hl_function" href="../../d5/de1/classpl_unicode_utils.htm#a78c9537de46536a987491d933de8c934">plUnicodeUtils::IsASCII</a>(*ref_it) &amp;&amp; <a class="code hl_function" href="../../d5/de1/classpl_unicode_utils.htm#a78c9537de46536a987491d933de8c934">plUnicodeUtils::IsASCII</a>(uiCharacter))</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>  {</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>    <span class="keywordtype">char</span>* pPos = <span class="keyword">const_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(ref_it.GetData()); <span class="comment">// yes, I know...</span></div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>    *pPos = uiCharacter &amp; 0xFF;</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>    <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>  }</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span> </div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>  ChangeCharacterNonASCII(ref_it, uiCharacter);</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>}</div>
</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span> </div>
<div class="foldopen" id="foldopen00197" data-start="{" data-end="}">
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#a9b1c07522ac75c77af1198eb6644ffd5">  197</a></span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a9b1c07522ac75c77af1198eb6644ffd5">plStringBuilder::Reserve</a>(plUInt32 uiNumElements)</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>{</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>  m_Data.<a class="code hl_function" href="../../d7/d89/classpl_dynamic_array_base.htm#aa96e27368b10b59593239a9981eba7d0">Reserve</a>(uiNumElements);</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>}</div>
</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span> </div>
<div class="foldopen" id="foldopen00202" data-start="{" data-end="}">
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#a35cccd046dac504634c2c4c96e509ff0">  202</a></span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a35cccd046dac504634c2c4c96e509ff0">plStringBuilder::Insert</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szInsertAtPos, <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a> sTextToInsert)</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>{</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>  <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a71ba6bfb35650f02bc06938b8a7d2572">ReplaceSubString</a>(szInsertAtPos, szInsertAtPos, sTextToInsert);</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>}</div>
</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span> </div>
<div class="foldopen" id="foldopen00207" data-start="{" data-end="}">
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno"><a class="line" href="../../d3/d2d/classpl_string_builder.htm#aaa3ea6e5ace739bf2ac26ac6c3a67251">  207</a></span>PL_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#aaa3ea6e5ace739bf2ac26ac6c3a67251">plStringBuilder::Remove</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szRemoveFromPos, <span class="keyword">const</span> <span class="keywordtype">char</span>* szRemoveToPos)</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>{</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span>  <a class="code hl_function" href="../../d3/d2d/classpl_string_builder.htm#a71ba6bfb35650f02bc06938b8a7d2572">ReplaceSubString</a>(szRemoveFromPos, szRemoveToPos, <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a>());</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>}</div>
</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span> </div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</div>
<div class="foldopen" id="foldopen00213" data-start="{" data-end="}">
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno"><a class="line" href="../../d5/de1/classpl_unicode_utils.htm#ad95d011dbd4ed9d68093141d959d3b0a">  213</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/de1/classpl_unicode_utils.htm#ad95d011dbd4ed9d68093141d959d3b0a">plUnicodeUtils::RepairNonUtf8Text</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* pStartData, <span class="keyword">const</span> <span class="keywordtype">char</span>* pEndData, Container&amp; out_result)</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>{</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>  <span class="keywordflow">if</span> (<a class="code hl_function" href="../../d5/de1/classpl_unicode_utils.htm#ad68fa1d15b759829a35eebfe7d93928d">plUnicodeUtils::IsValidUtf8</a>(pStartData, pEndData))</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>  {</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span>    out_result = <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a>(pStartData, pEndData);</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>  }</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span> </div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>  out_result.Clear();</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span> </div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>  <a class="code hl_class" href="../../d8/dcc/classpl_hybrid_array.htm">plHybridArray&lt;char, 1024&gt;</a> fixedText;</div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span>  <a class="code hl_struct" href="../../d1/d37/structpl_unicode_utils_1_1_utf_inserter.htm">plUnicodeUtils::UtfInserter</a>&lt;char, <span class="keyword">decltype</span>(fixedText)&gt; inserter(&amp;fixedText);</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span> </div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>  <span class="keywordflow">while</span> (pStartData &lt; pEndData)</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>  {</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>    <span class="keyword">const</span> plUInt32 uiChar = <a class="code hl_function" href="../../d5/de1/classpl_unicode_utils.htm#a362392068cfe8dfdb0e47f6aec5f9b90">plUnicodeUtils::DecodeUtf8ToUtf32</a>(pStartData);</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>    <a class="code hl_function" href="../../d5/de1/classpl_unicode_utils.htm#ab3581cf79af0cc5f771f2fe3275ae02a">plUnicodeUtils::EncodeUtf32ToUtf8</a>(uiChar, inserter);</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span>  }</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span> </div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>  PL_ASSERT_DEV(<a class="code hl_function" href="../../d5/de1/classpl_unicode_utils.htm#ad68fa1d15b759829a35eebfe7d93928d">plUnicodeUtils::IsValidUtf8</a>(fixedText.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#a4350a1a63cc30d8c0b7f567f7a71d228">GetData</a>(), fixedText.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#a4350a1a63cc30d8c0b7f567f7a71d228">GetData</a>() + fixedText.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#af1fcadea5a992d6b5d0a1788a379de65">GetCount</a>()), <span class="stringliteral">&quot;Repaired text is still not a valid Utf8 string.&quot;</span>);</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span> </div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span>  out_result = <a class="code hl_class" href="../../d6/d79/classpl_string_view.htm">plStringView</a>(fixedText.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#a4350a1a63cc30d8c0b7f567f7a71d228">GetData</a>(), fixedText.<a class="code hl_function" href="../../d4/dc8/classpl_array_base.htm#af1fcadea5a992d6b5d0a1788a379de65">GetCount</a>());</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>}</div>
</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span> </div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span><span class="preprocessor">#include &lt;Foundation/Strings/Implementation/AllStrings_inl.h&gt;</span></div>
<div class="ttc" id="aclasspl_allocator_htm"><div class="ttname"><a href="../../da/df3/classpl_allocator.htm">plAllocator</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition</b> Allocator.h:23</div></div>
<div class="ttc" id="aclasspl_array_base_htm_a3e8ff51c4a7aa0afcfac3aa6206e08ff"><div class="ttname"><a href="../../d4/dc8/classpl_array_base.htm#a3e8ff51c4a7aa0afcfac3aa6206e08ff">plArrayBase::PushBack</a></div><div class="ttdeci">void PushBack(const T &amp;value)</div><div class="ttdoc">Pushes value at the end of the array.</div><div class="ttdef"><b>Definition</b> ArrayBase_inl.h:333</div></div>
<div class="ttc" id="aclasspl_array_base_htm_a4350a1a63cc30d8c0b7f567f7a71d228"><div class="ttname"><a href="../../d4/dc8/classpl_array_base.htm#a4350a1a63cc30d8c0b7f567f7a71d228">plArrayBase::GetData</a></div><div class="ttdeci">T * GetData()</div><div class="ttdoc">Returns a pointer to the array data, or nullptr if the array is empty.</div><div class="ttdef"><b>Definition</b> ArrayBase_inl.h:423</div></div>
<div class="ttc" id="aclasspl_array_base_htm_a6bf05fc414d10cd1945a8aa42b5981ce"><div class="ttname"><a href="../../d4/dc8/classpl_array_base.htm#a6bf05fc414d10cd1945a8aa42b5981ce">plArrayBase::SetCountUninitialized</a></div><div class="ttdeci">void SetCountUninitialized(plUInt32 uiCount)</div><div class="ttdoc">Resizes the array to have exactly uiCount elements. Extra elements might be uninitialized.</div><div class="ttdef"><b>Definition</b> ArrayBase_inl.h:155</div></div>
<div class="ttc" id="aclasspl_array_base_htm_ac491d69cbb1f33194cd1dedc3847fdb2"><div class="ttname"><a href="../../d4/dc8/classpl_array_base.htm#ac491d69cbb1f33194cd1dedc3847fdb2">plArrayBase::PeekBack</a></div><div class="ttdeci">T &amp; PeekBack()</div><div class="ttdoc">Returns the last element of the array.</div><div class="ttdef"><b>Definition</b> ArrayBase_inl.h:388</div></div>
<div class="ttc" id="aclasspl_array_base_htm_addd94d248b34174e025b8c053c65b422"><div class="ttname"><a href="../../d4/dc8/classpl_array_base.htm#addd94d248b34174e025b8c053c65b422">plArrayBase::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns true, if the array does not contain any elements.</div><div class="ttdef"><b>Definition</b> ArrayBase_inl.h:178</div></div>
<div class="ttc" id="aclasspl_array_base_htm_af1fcadea5a992d6b5d0a1788a379de65"><div class="ttname"><a href="../../d4/dc8/classpl_array_base.htm#af1fcadea5a992d6b5d0a1788a379de65">plArrayBase::GetCount</a></div><div class="ttdeci">plUInt32 GetCount() const</div><div class="ttdoc">Returns the number of active elements in the array.</div><div class="ttdef"><b>Definition</b> ArrayBase_inl.h:172</div></div>
<div class="ttc" id="aclasspl_dynamic_array_base_htm_a2e798e376d697a13db7f7ab27c59327e"><div class="ttname"><a href="../../d7/d89/classpl_dynamic_array_base.htm#a2e798e376d697a13db7f7ab27c59327e">plDynamicArrayBase::GetAllocator</a></div><div class="ttdeci">plAllocator * GetAllocator() const</div><div class="ttdoc">Returns the allocator that is used by this instance.</div><div class="ttdef"><b>Definition</b> DynamicArray.h:53</div></div>
<div class="ttc" id="aclasspl_dynamic_array_base_htm_aa96e27368b10b59593239a9981eba7d0"><div class="ttname"><a href="../../d7/d89/classpl_dynamic_array_base.htm#aa96e27368b10b59593239a9981eba7d0">plDynamicArrayBase::Reserve</a></div><div class="ttdeci">void Reserve(plUInt32 uiCapacity)</div><div class="ttdoc">Expands the array so it can at least store the given capacity.</div><div class="ttdef"><b>Definition</b> DynamicArray_inl.h:179</div></div>
<div class="ttc" id="aclasspl_hybrid_array_htm"><div class="ttname"><a href="../../d8/dcc/classpl_hybrid_array.htm">plHybridArray</a></div><div class="ttdoc">A hybrid array uses in-place storage to handle the first few elements without any allocation....</div><div class="ttdef"><b>Definition</b> HybridArray.h:12</div></div>
<div class="ttc" id="aclasspl_string_builder_htm"><div class="ttname"><a href="../../d3/d2d/classpl_string_builder.htm">plStringBuilder</a></div><div class="ttdoc">plStringBuilder is a class that is meant for creating and modifying strings.</div><div class="ttdef"><b>Definition</b> StringBuilder.h:35</div></div>
<div class="ttc" id="aclasspl_string_builder_htm_a0bf2e1b97d7c871a7cba08615bc82357"><div class="ttname"><a href="../../d3/d2d/classpl_string_builder.htm#a0bf2e1b97d7c871a7cba08615bc82357">plStringBuilder::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Resets this string to be empty. Does not deallocate any previously allocated data,...</div><div class="ttdef"><b>Definition</b> StringBuilder_inl.h:88</div></div>
<div class="ttc" id="aclasspl_string_builder_htm_a0f3754f7b55c07f871886605f64292e1"><div class="ttname"><a href="../../d3/d2d/classpl_string_builder.htm#a0f3754f7b55c07f871886605f64292e1">plStringBuilder::GetAllocator</a></div><div class="ttdeci">plAllocator * GetAllocator() const</div><div class="ttdoc">Returns the allocator that is used by this object.</div><div class="ttdef"><b>Definition</b> StringBuilder_inl.h:51</div></div>
<div class="ttc" id="aclasspl_string_builder_htm_a107a88ba85547554b2b2e1ceccbec431"><div class="ttname"><a href="../../d3/d2d/classpl_string_builder.htm#a107a88ba85547554b2b2e1ceccbec431">plStringBuilder::plStringBuilder</a></div><div class="ttdeci">plStringBuilder(plAllocator *pAllocator=plFoundation::GetDefaultAllocator())</div><div class="ttdoc">Initializes the string to be empty. No data is allocated, but the plStringBuilder ALWAYS creates an a...</div><div class="ttdef"><b>Definition</b> StringBuilder_inl.h:5</div></div>
<div class="ttc" id="aclasspl_string_builder_htm_a11fe75866ee3add6ceaac9690549f908"><div class="ttname"><a href="../../d3/d2d/classpl_string_builder.htm#a11fe75866ee3add6ceaac9690549f908">plStringBuilder::GetData</a></div><div class="ttdeci">const char * GetData() const</div><div class="ttdoc">Returns a char pointer to the internal Utf8 data.</div><div class="ttdef"><b>Definition</b> StringBuilder_inl.h:148</div></div>
<div class="ttc" id="aclasspl_string_builder_htm_a1db6c0e59e3929a325acbc6deaa85ce9"><div class="ttname"><a href="../../d3/d2d/classpl_string_builder.htm#a1db6c0e59e3929a325acbc6deaa85ce9">plStringBuilder::GetElementCount</a></div><div class="ttdeci">plUInt32 GetElementCount() const</div><div class="ttdoc">Returns the number of bytes that this string takes up.</div><div class="ttdef"><b>Definition</b> StringBuilder_inl.h:78</div></div>
<div class="ttc" id="aclasspl_string_builder_htm_a1e8c97d8bcb6e24fbe61f79cfe2d90db"><div class="ttname"><a href="../../d3/d2d/classpl_string_builder.htm#a1e8c97d8bcb6e24fbe61f79cfe2d90db">plStringBuilder::Append</a></div><div class="ttdeci">void Append(plUInt32 uiChar)</div><div class="ttdoc">Appends a single Utf32 character.</div><div class="ttdef"><b>Definition</b> StringBuilder_inl.h:94</div></div>
<div class="ttc" id="aclasspl_string_builder_htm_a35cccd046dac504634c2c4c96e509ff0"><div class="ttname"><a href="../../d3/d2d/classpl_string_builder.htm#a35cccd046dac504634c2c4c96e509ff0">plStringBuilder::Insert</a></div><div class="ttdeci">void Insert(const char *szInsertAtPos, plStringView sTextToInsert)</div><div class="ttdoc">A wrapper around ReplaceSubString. Will insert the given string at szInsertAtPos.</div><div class="ttdef"><b>Definition</b> StringBuilder_inl.h:202</div></div>
<div class="ttc" id="aclasspl_string_builder_htm_a3d35e2061079fb363565cd0a3ac59661"><div class="ttname"><a href="../../d3/d2d/classpl_string_builder.htm#a3d35e2061079fb363565cd0a3ac59661">plStringBuilder::ToUpper</a></div><div class="ttdeci">void ToUpper()</div><div class="ttdoc">Converts all characters to upper case. Might move the string data around, so all iterators to the dat...</div><div class="ttdef"><b>Definition</b> StringBuilder_inl.h:162</div></div>
<div class="ttc" id="aclasspl_string_builder_htm_a3f8180f9332f6e267dee6be0ccceff75"><div class="ttname"><a href="../../d3/d2d/classpl_string_builder.htm#a3f8180f9332f6e267dee6be0ccceff75">plStringBuilder::Prepend</a></div><div class="ttdeci">void Prepend(plUInt32 uiChar)</div><div class="ttdoc">Prepends a single Utf32 character.</div><div class="ttdef"><b>Definition</b> StringBuilder_inl.h:111</div></div>
<div class="ttc" id="aclasspl_string_builder_htm_a40eb7c51f4583a00a3c15f812d3c0df7"><div class="ttname"><a href="../../d3/d2d/classpl_string_builder.htm#a40eb7c51f4583a00a3c15f812d3c0df7">plStringBuilder::operator=</a></div><div class="ttdeci">void operator=(const plStringBuilder &amp;rhs)</div><div class="ttdoc">Copies the given string into this one.</div><div class="ttdef"><b>Definition</b> StringBuilder_inl.h:68</div></div>
<div class="ttc" id="aclasspl_string_builder_htm_a4c6ccfde7c01b833dc54892236eec2c9"><div class="ttname"><a href="../../d3/d2d/classpl_string_builder.htm#a4c6ccfde7c01b833dc54892236eec2c9">plStringBuilder::Set</a></div><div class="ttdeci">void Set(plStringView sData1)</div><div class="ttdoc">Sets the string to the given string.</div><div class="ttdef"><b>Definition</b> StringBuilder.cpp:16</div></div>
<div class="ttc" id="aclasspl_string_builder_htm_a50431616657824d4039932e5b5923882"><div class="ttname"><a href="../../d3/d2d/classpl_string_builder.htm#a50431616657824d4039932e5b5923882">plStringBuilder::GetCharacterCount</a></div><div class="ttdeci">plUInt32 GetCharacterCount() const</div><div class="ttdoc">Returns the number of characters of which this string consists. Might be less than GetElementCount,...</div><div class="ttdef"><b>Definition</b> StringBuilder_inl.h:83</div></div>
<div class="ttc" id="aclasspl_string_builder_htm_a71ba6bfb35650f02bc06938b8a7d2572"><div class="ttname"><a href="../../d3/d2d/classpl_string_builder.htm#a71ba6bfb35650f02bc06938b8a7d2572">plStringBuilder::ReplaceSubString</a></div><div class="ttdeci">void ReplaceSubString(const char *szStartPos, const char *szEndPos, plStringView sReplaceWith)</div><div class="ttdoc">Replaces the string that starts at szStartPos and ends at szEndPos with the string szReplaceWith.</div><div class="ttdef"><b>Definition</b> StringBuilder.cpp:427</div></div>
<div class="ttc" id="aclasspl_string_builder_htm_a9b1c07522ac75c77af1198eb6644ffd5"><div class="ttname"><a href="../../d3/d2d/classpl_string_builder.htm#a9b1c07522ac75c77af1198eb6644ffd5">plStringBuilder::Reserve</a></div><div class="ttdeci">void Reserve(plUInt32 uiNumElements)</div><div class="ttdoc">Reserves uiNumElements bytes.</div><div class="ttdef"><b>Definition</b> StringBuilder_inl.h:197</div></div>
<div class="ttc" id="aclasspl_string_builder_htm_aaa3ea6e5ace739bf2ac26ac6c3a67251"><div class="ttname"><a href="../../d3/d2d/classpl_string_builder.htm#aaa3ea6e5ace739bf2ac26ac6c3a67251">plStringBuilder::Remove</a></div><div class="ttdeci">void Remove(const char *szRemoveFromPos, const char *szRemoveToPos)</div><div class="ttdoc">A wrapper around ReplaceSubString. Will remove the substring which starts at szRemoveFromPos and ends...</div><div class="ttdef"><b>Definition</b> StringBuilder_inl.h:207</div></div>
<div class="ttc" id="aclasspl_string_builder_htm_ad27e890445b6f6a5c0bcbb88026d19dd"><div class="ttname"><a href="../../d3/d2d/classpl_string_builder.htm#ad27e890445b6f6a5c0bcbb88026d19dd">plStringBuilder::ChangeCharacter</a></div><div class="ttdeci">void ChangeCharacter(iterator &amp;ref_it, plUInt32 uiCharacter)</div><div class="ttdoc">Changes the single character in this string, to which the iterator currently points.</div><div class="ttdef"><b>Definition</b> StringBuilder_inl.h:178</div></div>
<div class="ttc" id="aclasspl_string_builder_htm_af67042b86e2f2977581fa6f41f738059"><div class="ttname"><a href="../../d3/d2d/classpl_string_builder.htm#af67042b86e2f2977581fa6f41f738059">plStringBuilder::ToLower</a></div><div class="ttdeci">void ToLower()</div><div class="ttdoc">Converts all characters to lower case. Might move the string data around, so all iterators to the dat...</div><div class="ttdef"><b>Definition</b> StringBuilder_inl.h:170</div></div>
<div class="ttc" id="aclasspl_string_utf8_htm"><div class="ttname"><a href="../../d4/d66/classpl_string_utf8.htm">plStringUtf8</a></div><div class="ttdoc">A small string class that converts any other encoding to Utf8.</div><div class="ttdef"><b>Definition</b> StringConversion.h:47</div></div>
<div class="ttc" id="aclasspl_string_utils_htm_ad62540cef4e31838952f7cfc846ef9f2"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#ad62540cef4e31838952f7cfc846ef9f2">plStringUtils::GetCharacterCount</a></div><div class="ttdeci">static plUInt32 GetCharacterCount(const char *szUtf8, const char *pStringEnd=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns the number of characters (not Bytes!) in a Utf8 string (excluding the zero terminator),...</div><div class="ttdef"><b>Definition</b> StringUtils_inl.h:81</div></div>
<div class="ttc" id="aclasspl_string_utils_htm_ad63b1621cbd8468cd17c7e662e0187b3"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#ad63b1621cbd8468cd17c7e662e0187b3">plStringUtils::ToLowerString</a></div><div class="ttdeci">static plUInt32 ToLowerString(char *szString, const char *pStringEnd=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Converts a (UTF-8) string in-place to lower case.</div><div class="ttdef"><b>Definition</b> StringUtils.cpp:176</div></div>
<div class="ttc" id="aclasspl_string_utils_htm_aef4298ad9140576729bb32b7f70c9e71"><div class="ttname"><a href="../../de/d4d/classpl_string_utils.htm#aef4298ad9140576729bb32b7f70c9e71">plStringUtils::ToUpperString</a></div><div class="ttdeci">static plUInt32 ToUpperString(char *szString, const char *pStringEnd=plUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Converts a (UTF-8) string in-place to upper case.</div><div class="ttdef"><b>Definition</b> StringUtils.cpp:158</div></div>
<div class="ttc" id="aclasspl_string_view_htm"><div class="ttname"><a href="../../d6/d79/classpl_string_view.htm">plStringView</a></div><div class="ttdoc">plStringView represent a read-only sub-string of a larger string, as it can store a dedicated string ...</div><div class="ttdef"><b>Definition</b> StringView.h:34</div></div>
<div class="ttc" id="aclasspl_unicode_utils_htm_a362392068cfe8dfdb0e47f6aec5f9b90"><div class="ttname"><a href="../../d5/de1/classpl_unicode_utils.htm#a362392068cfe8dfdb0e47f6aec5f9b90">plUnicodeUtils::DecodeUtf8ToUtf32</a></div><div class="ttdeci">static plUInt32 DecodeUtf8ToUtf32(ByteIterator &amp;ref_szUtf8Iterator)</div><div class="ttdoc">Decodes the next character from the given Utf8 sequence to Utf32 and increments the iterator as far a...</div><div class="ttdef"><b>Definition</b> UnicodeUtils_inl.h:51</div></div>
<div class="ttc" id="aclasspl_unicode_utils_htm_a78c9537de46536a987491d933de8c934"><div class="ttname"><a href="../../d5/de1/classpl_unicode_utils.htm#a78c9537de46536a987491d933de8c934">plUnicodeUtils::IsASCII</a></div><div class="ttdeci">static bool IsASCII(plUInt32 uiChar)</div><div class="ttdoc">Returns whether a character is a pure ASCII character (only the first 7 Bits are used)</div><div class="ttdef"><b>Definition</b> UnicodeUtils_inl.h:23</div></div>
<div class="ttc" id="aclasspl_unicode_utils_htm_ab3581cf79af0cc5f771f2fe3275ae02a"><div class="ttname"><a href="../../d5/de1/classpl_unicode_utils.htm#ab3581cf79af0cc5f771f2fe3275ae02a">plUnicodeUtils::EncodeUtf32ToUtf8</a></div><div class="ttdeci">static void EncodeUtf32ToUtf8(plUInt32 uiUtf32, ByteIterator &amp;ref_szUtf8Output)</div><div class="ttdoc">Encodes the given Utf32 character to Utf8 and writes as many bytes to the output iterator,...</div><div class="ttdef"><b>Definition</b> UnicodeUtils_inl.h:92</div></div>
<div class="ttc" id="aclasspl_unicode_utils_htm_ad68fa1d15b759829a35eebfe7d93928d"><div class="ttname"><a href="../../d5/de1/classpl_unicode_utils.htm#ad68fa1d15b759829a35eebfe7d93928d">plUnicodeUtils::IsValidUtf8</a></div><div class="ttdeci">static bool IsValidUtf8(const char *szString, const char *szStringEnd=GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns false if the given string does not contain a completely valid Utf8 string.</div><div class="ttdef"><b>Definition</b> UnicodeUtils_inl.h:150</div></div>
<div class="ttc" id="aclasspl_unicode_utils_htm_ad95d011dbd4ed9d68093141d959d3b0a"><div class="ttname"><a href="../../d5/de1/classpl_unicode_utils.htm#ad95d011dbd4ed9d68093141d959d3b0a">plUnicodeUtils::RepairNonUtf8Text</a></div><div class="ttdeci">static bool RepairNonUtf8Text(const char *pStartData, const char *pEndData, Container &amp;out_result)</div><div class="ttdoc">Checks an array of char's, whether it is a valid Utf8 string. If not, it repairs the string,...</div><div class="ttdef"><b>Definition</b> StringBuilder_inl.h:213</div></div>
<div class="ttc" id="astructpl_unicode_utils_1_1_utf_inserter_htm"><div class="ttname"><a href="../../d1/d37/structpl_unicode_utils_1_1_utf_inserter.htm">plUnicodeUtils::UtfInserter</a></div><div class="ttdoc">[internal] Small helper class to append bytes to some arbitrary container. Used for Utf8 string build...</div><div class="ttdef"><b>Definition</b> UnicodeUtils.h:111</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_93f3a51c0220f51fc2c286c08d531e1e.htm">Strings</a></li><li class="navelem"><a class="el" href="../../dir_fec2b21556ce2cf7e27237dfb4edc8a6.htm">Implementation</a></li><li class="navelem"><b>StringBuilder_inl.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
