<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<!-- BEGIN opengraph metadata -->
<meta property="og:title" content="Doxygen Awesome" />
<meta property="og:image" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta property="og:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<meta property="og:url" content="https://jothepro.github.io/doxygen-awesome-css/" />
<!-- END opengraph metadata -->
<!-- BEGIN twitter metadata -->
<meta name="twitter:image:src" content="https://repository-images.githubusercontent.com/348492097/4f16df80-88fb-11eb-9d31-4015ff22c452" />
<meta name="twitter:title" content="Doxygen Awesome" />
<meta name="twitter:description" content="Custom CSS theme for doxygen html-documentation with lots of customization parameters." />
<!-- END twitter metadata -->
<title>Plasma Engine: plJoltDefaultCharacterComponent Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<link rel="icon" type="image/svg+xml" href="logo.drawio.svg"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-paragraph-link.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript" src="../../doxygen-awesome-tabs.js"></script>
<script type="text/javascript" src="../../toggle-alternative-theme.js"></script>
<script type="text/javascript">
    DoxygenAwesomeFragmentCopyButton.init()
    DoxygenAwesomeDarkModeToggle.init()
    DoxygenAwesomeParagraphLink.init()
    DoxygenAwesomeInteractiveToc.init()
    DoxygenAwesomeTabs.init()
</script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Plasma Engine
   &#160;<span id="projectnumber">2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('da/d0f/classpl_jolt_default_character_component.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="../../d0/d7e/classpl_jolt_default_character_component-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">plJoltDefaultCharacterComponent Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p>An example character controller (CC) implementation build upon <a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm" title="Base class for character controllers (CC).">plJoltCharacterControllerComponent</a>.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d0/d05/_jolt_default_character_component_8h_source.htm">JoltDefaultCharacterComponent.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for plJoltDefaultCharacterComponent:</div>
<div class="dyncontent">
<div class="center"><img src="../../dc/d83/classpl_jolt_default_character_component__inherit__graph.png" border="0" usemap="#apl_jolt_default_character_component_inherit__map" alt="Inheritance graph"/></div>
<map name="apl_jolt_default_character_component_inherit__map" id="apl_jolt_default_character_component_inherit__map">
<area shape="rect" title="An example character controller (CC) implementation build upon plJoltCharacterControllerComponent." alt="" coords="5,395,219,421"/>
<area shape="rect" href="../../d4/d29/classpl_jolt_character_controller_component.htm" title="Base class for character controllers (CC)." alt="" coords="31,304,193,347"/>
<area shape="poly" title=" " alt="" coords="115,363,115,394,109,394,109,363"/>
<area shape="rect" href="../../db/dab/classpl_character_controller_component.htm" title="Base class for implementations of a character controller." alt="" coords="8,229,216,256"/>
<area shape="poly" title=" " alt="" coords="115,272,115,304,109,304,109,272"/>
<area shape="rect" href="../../d1/d81/classpl_component.htm" title="Base class of all component types." alt="" coords="63,155,161,181"/>
<area shape="poly" title=" " alt="" coords="115,197,115,229,109,229,109,197"/>
<area shape="rect" href="../../d4/d91/classpl_reflected_class.htm" title="All classes that should be dynamically reflectable, need to be derived from this base class." alt="" coords="53,80,171,107"/>
<area shape="poly" title=" " alt="" coords="115,122,115,154,109,154,109,122"/>
<area shape="rect" href="../../de/dc4/classpl_no_base.htm" title="Dummy type to pass to templates and macros that expect a base type for a class that has no base." alt="" coords="73,5,151,32"/>
<area shape="poly" title=" " alt="" coords="115,48,115,80,109,80,109,48"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/da6/structpl_jolt_default_character_component_1_1_config.htm">Config</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a74a4b0927bf8469ca8b98810ef36c7bb" id="r_a74a4b0927bf8469ca8b98810ef36c7bb"><td class="memItemLeft" align="right" valign="top">enum class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a74a4b0927bf8469ca8b98810ef36c7bb">GroundState</a> : plUInt8 { <a class="el" href="#a74a4b0927bf8469ca8b98810ef36c7bba2b9beed57034f5727573d7ded76cf777">OnGround</a>
, <a class="el" href="#a74a4b0927bf8469ca8b98810ef36c7bbad82906db8c91bad0508406f71a9f3b7f">Sliding</a>
, <a class="el" href="#a74a4b0927bf8469ca8b98810ef36c7bbaee4e669a07b061d70b9b79dfed9cb5e7">InAir</a>
 }</td></tr>
<tr class="separator:a74a4b0927bf8469ca8b98810ef36c7bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad33615c8ece3afc757d5be3dd4e9c15b" id="r_ad33615c8ece3afc757d5be3dd4e9c15b"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad33615c8ece3afc757d5be3dd4e9c15b">SerializeComponent</a> (<a class="el" href="../../dc/dd6/classpl_world_writer.htm">plWorldWriter</a> &amp;inout_stream) const override</td></tr>
<tr class="memdesc:ad33615c8ece3afc757d5be3dd4e9c15b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this to save the current state of the component to the given stream.  <br /></td></tr>
<tr class="separator:ad33615c8ece3afc757d5be3dd4e9c15b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04c9f40a66c878624597bf7715d63424" id="r_a04c9f40a66c878624597bf7715d63424"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a04c9f40a66c878624597bf7715d63424">DeserializeComponent</a> (<a class="el" href="../../d3/d63/classpl_world_reader.htm">plWorldReader</a> &amp;inout_stream) override</td></tr>
<tr class="memdesc:a04c9f40a66c878624597bf7715d63424"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this to load the current state of the component from the given stream.  <br /></td></tr>
<tr class="separator:a04c9f40a66c878624597bf7715d63424"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06c87023421115350dfb843926f58216" id="r_a06c87023421115350dfb843926f58216"><td class="memItemLeft" align="right" valign="top"><a id="a06c87023421115350dfb843926f58216" name="a06c87023421115350dfb843926f58216"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>GetAllowJumpInAir</b> () const</td></tr>
<tr class="separator:a06c87023421115350dfb843926f58216"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7399c5d4c6dfff3a12e723afe30d2f1" id="r_ae7399c5d4c6dfff3a12e723afe30d2f1"><td class="memItemLeft" align="right" valign="top"><a id="ae7399c5d4c6dfff3a12e723afe30d2f1" name="ae7399c5d4c6dfff3a12e723afe30d2f1"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetAllowJumpInAir</b> (bool inAllow)</td></tr>
<tr class="separator:ae7399c5d4c6dfff3a12e723afe30d2f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaff598280aac3fcb619dcb79080bafbd" id="r_aaff598280aac3fcb619dcb79080bafbd"><td class="memItemLeft" align="right" valign="top"><a id="aaff598280aac3fcb619dcb79080bafbd" name="aaff598280aac3fcb619dcb79080bafbd"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetWalkSurfaceInteraction</b> (const char *szName)</td></tr>
<tr class="separator:aaff598280aac3fcb619dcb79080bafbd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab47f6403a2d95e1834c77b26a59c58db" id="r_ab47f6403a2d95e1834c77b26a59c58db"><td class="memItemLeft" align="right" valign="top"><a id="ab47f6403a2d95e1834c77b26a59c58db" name="ab47f6403a2d95e1834c77b26a59c58db"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><b>GetWalkSurfaceInteraction</b> () const</td></tr>
<tr class="separator:ab47f6403a2d95e1834c77b26a59c58db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33a3af14d355f183eba92cc1b5629816" id="r_a33a3af14d355f183eba92cc1b5629816"><td class="memItemLeft" align="right" valign="top"><a id="a33a3af14d355f183eba92cc1b5629816" name="a33a3af14d355f183eba92cc1b5629816"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetFallbackWalkSurfaceFile</b> (const char *szFile)</td></tr>
<tr class="separator:a33a3af14d355f183eba92cc1b5629816"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab90cdf6cf28c474f2e8b3722b3a37000" id="r_ab90cdf6cf28c474f2e8b3722b3a37000"><td class="memItemLeft" align="right" valign="top"><a id="ab90cdf6cf28c474f2e8b3722b3a37000" name="ab90cdf6cf28c474f2e8b3722b3a37000"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><b>GetFallbackWalkSurfaceFile</b> () const</td></tr>
<tr class="separator:ab90cdf6cf28c474f2e8b3722b3a37000"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9a0cd3a3b9ac1a59561e472b671251f" id="r_ae9a0cd3a3b9ac1a59561e472b671251f"><td class="memItemLeft" align="right" valign="top"><a id="ae9a0cd3a3b9ac1a59561e472b671251f" name="ae9a0cd3a3b9ac1a59561e472b671251f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetHeadObjectReference</b> (const char *szReference)</td></tr>
<tr class="memdesc:ae9a0cd3a3b9ac1a59561e472b671251f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets an object GUID for an object that is the 'head' (controls the camera). <br /></td></tr>
<tr class="separator:ae9a0cd3a3b9ac1a59561e472b671251f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3e7685c6a696275d5bba1b0eb867bac" id="r_aa3e7685c6a696275d5bba1b0eb867bac"><td class="memItemLeft" align="right" valign="top"><a id="aa3e7685c6a696275d5bba1b0eb867bac" name="aa3e7685c6a696275d5bba1b0eb867bac"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetInputState</b> (<a class="el" href="../../d5/daa/structpl_msg_move_character_controller.htm">plMsgMoveCharacterController</a> &amp;ref_msg)</td></tr>
<tr class="memdesc:aa3e7685c6a696275d5bba1b0eb867bac"><td class="mdescLeft">&#160;</td><td class="mdescRight">This message is used to steer the CC. <br /></td></tr>
<tr class="separator:aa3e7685c6a696275d5bba1b0eb867bac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8a7c3c9dd82e6adc183481d7fbe0b9e" id="r_ae8a7c3c9dd82e6adc183481d7fbe0b9e"><td class="memItemLeft" align="right" valign="top"><a id="ae8a7c3c9dd82e6adc183481d7fbe0b9e" name="ae8a7c3c9dd82e6adc183481d7fbe0b9e"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurrentCapsuleHeight</b> () const</td></tr>
<tr class="memdesc:ae8a7c3c9dd82e6adc183481d7fbe0b9e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the current height of the entire capsule (crouching or standing). <br /></td></tr>
<tr class="separator:ae8a7c3c9dd82e6adc183481d7fbe0b9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75423c38a57ba214786f5462ba7a61f6" id="r_a75423c38a57ba214786f5462ba7a61f6"><td class="memItemLeft" align="right" valign="top"><a id="a75423c38a57ba214786f5462ba7a61f6" name="a75423c38a57ba214786f5462ba7a61f6"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>GetCurrentCylinderHeight</b> () const</td></tr>
<tr class="memdesc:a75423c38a57ba214786f5462ba7a61f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the current height of the cylindrical part of the capsule (crouching or standing). <br /></td></tr>
<tr class="separator:a75423c38a57ba214786f5462ba7a61f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad97dc8b2b0576e4ebeac0e6111286cad" id="r_ad97dc8b2b0576e4ebeac0e6111286cad"><td class="memItemLeft" align="right" valign="top">virtual float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ad97dc8b2b0576e4ebeac0e6111286cad">GetShapeRadius</a> () const override</td></tr>
<tr class="memdesc:ad97dc8b2b0576e4ebeac0e6111286cad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the radius of the shape. This never changes at runtime.  <br /></td></tr>
<tr class="separator:ad97dc8b2b0576e4ebeac0e6111286cad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96af09869b1ce5e58efa734d65a7ca73" id="r_a96af09869b1ce5e58efa734d65a7ca73"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a96af09869b1ce5e58efa734d65a7ca73">IsTouchingGround</a> () override</td></tr>
<tr class="memdesc:a96af09869b1ce5e58efa734d65a7ca73"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the CC is currently touching the ground.  <br /></td></tr>
<tr class="separator:a96af09869b1ce5e58efa734d65a7ca73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83f37563335aab625ec603668e4da8e0" id="r_a83f37563335aab625ec603668e4da8e0"><td class="memItemLeft" align="right" valign="top"><a id="a83f37563335aab625ec603668e4da8e0" name="a83f37563335aab625ec603668e4da8e0"></a>
<a class="el" href="#a74a4b0927bf8469ca8b98810ef36c7bb">GroundState</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetGroundState</b> () const</td></tr>
<tr class="separator:a83f37563335aab625ec603668e4da8e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa759f340e3ff238249e0e2c3affb7c34" id="r_aa759f340e3ff238249e0e2c3affb7c34"><td class="memItemLeft" align="right" valign="top"><a id="aa759f340e3ff238249e0e2c3affb7c34" name="aa759f340e3ff238249e0e2c3affb7c34"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsStandingOnGround</b> () const</td></tr>
<tr class="separator:aa759f340e3ff238249e0e2c3affb7c34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a07778156ae060fd8ec277f1362a83f" id="r_a8a07778156ae060fd8ec277f1362a83f"><td class="memItemLeft" align="right" valign="top"><a id="a8a07778156ae060fd8ec277f1362a83f" name="a8a07778156ae060fd8ec277f1362a83f"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsSlidingOnGround</b> () const</td></tr>
<tr class="separator:a8a07778156ae060fd8ec277f1362a83f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c4826f9c60de5947d99c37a2e176f36" id="r_a6c4826f9c60de5947d99c37a2e176f36"><td class="memItemLeft" align="right" valign="top"><a id="a6c4826f9c60de5947d99c37a2e176f36" name="a6c4826f9c60de5947d99c37a2e176f36"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsInAir</b> () const</td></tr>
<tr class="separator:a6c4826f9c60de5947d99c37a2e176f36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a4071b29529b525bf8398c4b54ca6cd" id="r_a1a4071b29529b525bf8398c4b54ca6cd"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a1a4071b29529b525bf8398c4b54ca6cd">IsCrouching</a> () override</td></tr>
<tr class="memdesc:a1a4071b29529b525bf8398c4b54ca6cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the CC is currently in the crouch state.  <br /></td></tr>
<tr class="separator:a1a4071b29529b525bf8398c4b54ca6cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36d9fc741dca1eb2c33cac8bf8fdaef1" id="r_a36d9fc741dca1eb2c33cac8bf8fdaef1"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a36d9fc741dca1eb2c33cac8bf8fdaef1">TeleportCharacter</a> (const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;vGlobalFootPosition) override</td></tr>
<tr class="memdesc:a36d9fc741dca1eb2c33cac8bf8fdaef1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Instantly teleports the character to the target position. Doesn't change its rotation.  <br /></td></tr>
<tr class="separator:a36d9fc741dca1eb2c33cac8bf8fdaef1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classpl_jolt_character_controller_component"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_classpl_jolt_character_controller_component')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm">plJoltCharacterControllerComponent</a></td></tr>
<tr class="memitem:aa00cfac05079dafc3e850c3136a62e10 inherit pub_methods_classpl_jolt_character_controller_component" id="r_aa00cfac05079dafc3e850c3136a62e10"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm#aa00cfac05079dafc3e850c3136a62e10">SetObjectToIgnore</a> (plUInt32 uiObjectFilterID)</td></tr>
<tr class="memdesc:aa00cfac05079dafc3e850c3136a62e10 inherit pub_methods_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">The CC will move through the given physics body.  <br /></td></tr>
<tr class="separator:aa00cfac05079dafc3e850c3136a62e10 inherit pub_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d614e1cf8606559bd81f5ae9b760c10 inherit pub_methods_classpl_jolt_character_controller_component" id="r_a3d614e1cf8606559bd81f5ae9b760c10"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm#a3d614e1cf8606559bd81f5ae9b760c10">ClearObjectToIgnore</a> ()</td></tr>
<tr class="separator:a3d614e1cf8606559bd81f5ae9b760c10 inherit pub_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8bb188fc3bfaf900a09a3b9a1053b6b0 inherit pub_methods_classpl_jolt_character_controller_component" id="r_a8bb188fc3bfaf900a09a3b9a1053b6b0"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetMaxClimbingSlope</b> (<a class="el" href="../../d4/dfd/classpl_angle.htm">plAngle</a> slope)</td></tr>
<tr class="memdesc:a8bb188fc3bfaf900a09a3b9a1053b6b0 inherit pub_methods_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">The maximum slope that the character can walk up. <br /></td></tr>
<tr class="separator:a8bb188fc3bfaf900a09a3b9a1053b6b0 inherit pub_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b6fd8401e943ad1485449f8626cf8e6 inherit pub_methods_classpl_jolt_character_controller_component" id="r_a4b6fd8401e943ad1485449f8626cf8e6"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../d4/dfd/classpl_angle.htm">plAngle</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetMaxClimbingSlope</b> () const</td></tr>
<tr class="separator:a4b6fd8401e943ad1485449f8626cf8e6 inherit pub_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a740681308d7ce30db54fc7d49cd23275 inherit pub_methods_classpl_jolt_character_controller_component" id="r_a740681308d7ce30db54fc7d49cd23275"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetMass</b> (float fMass)</td></tr>
<tr class="memdesc:a740681308d7ce30db54fc7d49cd23275 inherit pub_methods_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">The mass with which the character will push down on objects that it is standing on. <br /></td></tr>
<tr class="separator:a740681308d7ce30db54fc7d49cd23275 inherit pub_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa521415db487f69d7091bc3d91a8efb8 inherit pub_methods_classpl_jolt_character_controller_component" id="r_aa521415db487f69d7091bc3d91a8efb8"><td class="memItemLeft" align="right" valign="top">
float&#160;</td><td class="memItemRight" valign="bottom"><b>GetMass</b> () const</td></tr>
<tr class="separator:aa521415db487f69d7091bc3d91a8efb8 inherit pub_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a804bc11b5db96664e6acf8dec6385464 inherit pub_methods_classpl_jolt_character_controller_component" id="r_a804bc11b5db96664e6acf8dec6385464"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetStrength</b> (float fStrength)</td></tr>
<tr class="memdesc:a804bc11b5db96664e6acf8dec6385464 inherit pub_methods_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">The strength with which the character will push against objects that it is running into. <br /></td></tr>
<tr class="separator:a804bc11b5db96664e6acf8dec6385464 inherit pub_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa37094915ca2b4a7a82264ecdb7c15ff inherit pub_methods_classpl_jolt_character_controller_component" id="r_aa37094915ca2b4a7a82264ecdb7c15ff"><td class="memItemLeft" align="right" valign="top">
float&#160;</td><td class="memItemRight" valign="bottom"><b>GetStrength</b> () const</td></tr>
<tr class="separator:aa37094915ca2b4a7a82264ecdb7c15ff inherit pub_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fddcc81cc87008a489af4897ba0eef1 inherit pub_methods_classpl_jolt_character_controller_component" id="r_a3fddcc81cc87008a489af4897ba0eef1"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm#a3fddcc81cc87008a489af4897ba0eef1">RawMove</a> (const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;vMoveDeltaGlobal) override</td></tr>
<tr class="memdesc:a3fddcc81cc87008a489af4897ba0eef1 inherit pub_methods_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attempts to move the character into the given direction.  <br /></td></tr>
<tr class="separator:a3fddcc81cc87008a489af4897ba0eef1 inherit pub_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd1a06190baca6803f03b50a46ed1753 inherit pub_methods_classpl_jolt_character_controller_component" id="r_abd1a06190baca6803f03b50a46ed1753"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm#abd1a06190baca6803f03b50a46ed1753">MoveCharacter</a> (<a class="el" href="../../d5/daa/structpl_msg_move_character_controller.htm">plMsgMoveCharacterController</a> &amp;msg) override</td></tr>
<tr class="memdesc:abd1a06190baca6803f03b50a46ed1753 inherit pub_methods_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Instructs the CC to move in certain directions. An implementation can queue the request for later processing.  <br /></td></tr>
<tr class="separator:abd1a06190baca6803f03b50a46ed1753 inherit pub_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4ce99acfcfaa84e67e306f186fb57fc inherit pub_methods_classpl_jolt_character_controller_component" id="r_ae4ce99acfcfaa84e67e306f186fb57fc"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm#ae4ce99acfcfaa84e67e306f186fb57fc">IsDestinationUnobstructed</a> (const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;vGlobalFootPos, float fCharacterHeight) override</td></tr>
<tr class="memdesc:ae4ce99acfcfaa84e67e306f186fb57fc inherit pub_methods_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the CC can be teleported to the target position without getting stuck.  <br /></td></tr>
<tr class="separator:ae4ce99acfcfaa84e67e306f186fb57fc inherit pub_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classpl_component"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_classpl_component')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../d1/d81/classpl_component.htm">plComponent</a></td></tr>
<tr class="memitem:a705a8aac8daabbdfd517f152c824457f inherit pub_methods_classpl_component" id="r_a705a8aac8daabbdfd517f152c824457f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d81/classpl_component.htm#a705a8aac8daabbdfd517f152c824457f">SetActiveFlag</a> (bool bEnabled)</td></tr>
<tr class="memdesc:a705a8aac8daabbdfd517f152c824457f inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the active flag of the component, which affects its active state.  <br /></td></tr>
<tr class="separator:a705a8aac8daabbdfd517f152c824457f inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d63d25bf53a95bcde35a3f8988eef44 inherit pub_methods_classpl_component" id="r_a0d63d25bf53a95bcde35a3f8988eef44"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d81/classpl_component.htm#a0d63d25bf53a95bcde35a3f8988eef44">GetActiveFlag</a> () const</td></tr>
<tr class="memdesc:a0d63d25bf53a95bcde35a3f8988eef44 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the 'active flag' is set on this component. Note that this does not mean that the component is also 'active'.  <br /></td></tr>
<tr class="separator:a0d63d25bf53a95bcde35a3f8988eef44 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a772ab4db4df4e64f224ebf5478bac3b7 inherit pub_methods_classpl_component" id="r_a772ab4db4df4e64f224ebf5478bac3b7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d81/classpl_component.htm#a772ab4db4df4e64f224ebf5478bac3b7">IsActive</a> () const</td></tr>
<tr class="memdesc:a772ab4db4df4e64f224ebf5478bac3b7 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether this component is in an active state.  <br /></td></tr>
<tr class="separator:a772ab4db4df4e64f224ebf5478bac3b7 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:addc29bc0b56aa0fdc0161238bf5dea7d inherit pub_methods_classpl_component" id="r_addc29bc0b56aa0fdc0161238bf5dea7d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d81/classpl_component.htm#addc29bc0b56aa0fdc0161238bf5dea7d">IsActiveAndInitialized</a> () const</td></tr>
<tr class="memdesc:addc29bc0b56aa0fdc0161238bf5dea7d inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether this component is active and initialized.  <br /></td></tr>
<tr class="separator:addc29bc0b56aa0fdc0161238bf5dea7d inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b52490701fd55597a91bbdc84761e08 inherit pub_methods_classpl_component" id="r_a4b52490701fd55597a91bbdc84761e08"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d81/classpl_component.htm#a4b52490701fd55597a91bbdc84761e08">IsActiveAndSimulating</a> () const</td></tr>
<tr class="memdesc:a4b52490701fd55597a91bbdc84761e08 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Whether the component is currently active and simulation has been started as well.  <br /></td></tr>
<tr class="separator:a4b52490701fd55597a91bbdc84761e08 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a903bd52296af50164853eaa2e33f452f inherit pub_methods_classpl_component" id="r_a903bd52296af50164853eaa2e33f452f"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../d2/db6/classpl_component_manager_base.htm">plComponentManagerBase</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetOwningManager</b> ()</td></tr>
<tr class="memdesc:a903bd52296af50164853eaa2e33f452f inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the corresponding manager for this component. <br /></td></tr>
<tr class="separator:a903bd52296af50164853eaa2e33f452f inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f27c03873939fb7bc64301f5ddff71c inherit pub_methods_classpl_component" id="r_a8f27c03873939fb7bc64301f5ddff71c"><td class="memItemLeft" align="right" valign="top">
const <a class="el" href="../../d2/db6/classpl_component_manager_base.htm">plComponentManagerBase</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetOwningManager</b> () const</td></tr>
<tr class="memdesc:a8f27c03873939fb7bc64301f5ddff71c inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the corresponding manager for this component. <br /></td></tr>
<tr class="separator:a8f27c03873939fb7bc64301f5ddff71c inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af49a8b898be5eceed4d8a15a9549a15f inherit pub_methods_classpl_component" id="r_af49a8b898be5eceed4d8a15a9549a15f"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../d4/d82/classpl_game_object.htm">plGameObject</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetOwner</b> ()</td></tr>
<tr class="memdesc:af49a8b898be5eceed4d8a15a9549a15f inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the owner game object if the component is attached to one or nullptr. <br /></td></tr>
<tr class="separator:af49a8b898be5eceed4d8a15a9549a15f inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ae8039cab69f5641013169d2090cfa7 inherit pub_methods_classpl_component" id="r_a1ae8039cab69f5641013169d2090cfa7"><td class="memItemLeft" align="right" valign="top">
const <a class="el" href="../../d4/d82/classpl_game_object.htm">plGameObject</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetOwner</b> () const</td></tr>
<tr class="memdesc:a1ae8039cab69f5641013169d2090cfa7 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the owner game object if the component is attached to one or nullptr. <br /></td></tr>
<tr class="separator:a1ae8039cab69f5641013169d2090cfa7 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a905d6cd59c46d6257d07d0501ea40a52 inherit pub_methods_classpl_component" id="r_a905d6cd59c46d6257d07d0501ea40a52"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../d2/d12/classpl_world.htm">plWorld</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetWorld</b> ()</td></tr>
<tr class="memdesc:a905d6cd59c46d6257d07d0501ea40a52 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the corresponding world for this component. <br /></td></tr>
<tr class="separator:a905d6cd59c46d6257d07d0501ea40a52 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd9649421b35956c12e08f879d230540 inherit pub_methods_classpl_component" id="r_abd9649421b35956c12e08f879d230540"><td class="memItemLeft" align="right" valign="top">
const <a class="el" href="../../d2/d12/classpl_world.htm">plWorld</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetWorld</b> () const</td></tr>
<tr class="memdesc:abd9649421b35956c12e08f879d230540 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the corresponding world for this component. <br /></td></tr>
<tr class="separator:abd9649421b35956c12e08f879d230540 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a454f7bb0d554020851abacee2cf91ef6 inherit pub_methods_classpl_component" id="r_a454f7bb0d554020851abacee2cf91ef6"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../d5/d04/structpl_component_handle.htm">plComponentHandle</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetHandle</b> () const</td></tr>
<tr class="memdesc:a454f7bb0d554020851abacee2cf91ef6 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a handle to this component. <br /></td></tr>
<tr class="separator:a454f7bb0d554020851abacee2cf91ef6 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6bb9d0ffefb9d981d4453513b7a08d5 inherit pub_methods_classpl_component" id="r_ab6bb9d0ffefb9d981d4453513b7a08d5"><td class="memItemLeft" align="right" valign="top">
plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GetUniqueID</b> () const</td></tr>
<tr class="memdesc:ab6bb9d0ffefb9d981d4453513b7a08d5 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the unique id for this component. <br /></td></tr>
<tr class="separator:ab6bb9d0ffefb9d981d4453513b7a08d5 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff1ea68fa1e675be5e8410c42e97d0b5 inherit pub_methods_classpl_component" id="r_aff1ea68fa1e675be5e8410c42e97d0b5"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetUniqueID</b> (plUInt32 uiUniqueID)</td></tr>
<tr class="memdesc:aff1ea68fa1e675be5e8410c42e97d0b5 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the unique id for this component. <br /></td></tr>
<tr class="separator:aff1ea68fa1e675be5e8410c42e97d0b5 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f63c363b76cfdf2f391d566af2f4569 inherit pub_methods_classpl_component" id="r_a7f63c363b76cfdf2f391d566af2f4569"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>EnsureInitialized</b> ()</td></tr>
<tr class="memdesc:a7f63c363b76cfdf2f391d566af2f4569 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Ensures that the component is initialized. Must only be called from another component's Initialize callback. <br /></td></tr>
<tr class="separator:a7f63c363b76cfdf2f391d566af2f4569 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a134a5c4e9085fffb9a13fee1737d6faf inherit pub_methods_classpl_component" id="r_a134a5c4e9085fffb9a13fee1737d6faf"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>EnsureSimulationStarted</b> ()</td></tr>
<tr class="memdesc:a134a5c4e9085fffb9a13fee1737d6faf inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Ensures that the OnSimulationStarted method has been called. Must only be called from another component's OnSimulationStarted callback. <br /></td></tr>
<tr class="separator:a134a5c4e9085fffb9a13fee1737d6faf inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72d16828092c9b039b3c4b765032f0c3 inherit pub_methods_classpl_component" id="r_a72d16828092c9b039b3c4b765032f0c3"><td class="memItemLeft" align="right" valign="top">
PL_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>SendMessage</b> (<a class="el" href="../../d0/dde/classpl_message.htm">plMessage</a> &amp;ref_msg)</td></tr>
<tr class="memdesc:a72d16828092c9b039b3c4b765032f0c3 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sends a message to this component. <br /></td></tr>
<tr class="separator:a72d16828092c9b039b3c4b765032f0c3 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a210388704ffa2b9490969018c4f39fee inherit pub_methods_classpl_component" id="r_a210388704ffa2b9490969018c4f39fee"><td class="memItemLeft" align="right" valign="top">
PL_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>SendMessage</b> (<a class="el" href="../../d0/dde/classpl_message.htm">plMessage</a> &amp;ref_msg) const</td></tr>
<tr class="separator:a210388704ffa2b9490969018c4f39fee inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c1551daefaabde76dfbbb19f4059da9 inherit pub_methods_classpl_component" id="r_a3c1551daefaabde76dfbbb19f4059da9"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>PostMessage</b> (const <a class="el" href="../../d0/dde/classpl_message.htm">plMessage</a> &amp;msg, <a class="el" href="../../d1/df6/structpl_time.htm">plTime</a> delay=<a class="el" href="../../d1/df6/structpl_time.htm#a48cd39d05bfa55f8504cc3c056576c9e">plTime::MakeZero</a>(), <a class="el" href="../../d5/d06/structpl_object_msg_queue_type.htm#a17fe916fa4e797a7186aed5f0d795c30">plObjectMsgQueueType::Enum</a> queueType=<a class="el" href="../../d5/d06/structpl_object_msg_queue_type.htm#a17fe916fa4e797a7186aed5f0d795c30a2404b64a3633334367c032b2ea935c1a">plObjectMsgQueueType::NextFrame</a>) const</td></tr>
<tr class="memdesc:a3c1551daefaabde76dfbbb19f4059da9 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Queues the message for the given phase. The message is processed after the given delay in the corresponding phase. <br /></td></tr>
<tr class="separator:a3c1551daefaabde76dfbbb19f4059da9 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa024f2be3bc18309d9b9ebb40c855588 inherit pub_methods_classpl_component" id="r_aa024f2be3bc18309d9b9ebb40c855588"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d81/classpl_component.htm#aa024f2be3bc18309d9b9ebb40c855588">HandlesMessage</a> (const <a class="el" href="../../d0/dde/classpl_message.htm">plMessage</a> &amp;msg) const</td></tr>
<tr class="memdesc:aa024f2be3bc18309d9b9ebb40c855588 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the given Message is handled by this component.  <br /></td></tr>
<tr class="separator:aa024f2be3bc18309d9b9ebb40c855588 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade4780ed0d2872272c3cfe8029b358e0 inherit pub_methods_classpl_component" id="r_ade4780ed0d2872272c3cfe8029b358e0"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetUserFlag</b> (plUInt8 uiFlagIndex, bool bSet)</td></tr>
<tr class="memdesc:ade4780ed0d2872272c3cfe8029b358e0 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Be careful to check which flags may already be in use by base classes. <br /></td></tr>
<tr class="separator:ade4780ed0d2872272c3cfe8029b358e0 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7bd2c9eb96fd9a1c0ebdb26ca7ac9a8 inherit pub_methods_classpl_component" id="r_ac7bd2c9eb96fd9a1c0ebdb26ca7ac9a8"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>GetUserFlag</b> (plUInt8 uiFlagIndex) const</td></tr>
<tr class="memdesc:ac7bd2c9eb96fd9a1c0ebdb26ca7ac9a8 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves a custom flag. Index must be between 0 and 7. <br /></td></tr>
<tr class="separator:ac7bd2c9eb96fd9a1c0ebdb26ca7ac9a8 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8460d025c4558232c9dfe1fc5255fe44 inherit pub_methods_classpl_component" id="r_a8460d025c4558232c9dfe1fc5255fe44"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetCreatedByPrefab</b> ()</td></tr>
<tr class="memdesc:a8460d025c4558232c9dfe1fc5255fe44 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds <a class="el" href="../../da/d5a/structpl_object_flags.htm#a204835e2b603739b341f847120a8cd7da00958bc56c4c626b7c5fa35887be39ad" title="Such flagged objects and components are ignored during scene export (see plWorldWriter) and will be r...">plObjectFlags::CreatedByPrefab</a> to the component. See the flag for details. <br /></td></tr>
<tr class="separator:a8460d025c4558232c9dfe1fc5255fe44 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35e955206b96cfb15cedbaaea9d61690 inherit pub_methods_classpl_component" id="r_a35e955206b96cfb15cedbaaea9d61690"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>WasCreatedByPrefab</b> () const</td></tr>
<tr class="memdesc:a35e955206b96cfb15cedbaaea9d61690 inherit pub_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the <a class="el" href="../../da/d5a/structpl_object_flags.htm#a204835e2b603739b341f847120a8cd7da00958bc56c4c626b7c5fa35887be39ad" title="Such flagged objects and components are ignored during scene export (see plWorldWriter) and will be r...">plObjectFlags::CreatedByPrefab</a> flag is set on this component. <br /></td></tr>
<tr class="separator:a35e955206b96cfb15cedbaaea9d61690 inherit pub_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classpl_reflected_class"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_classpl_reflected_class')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../d4/d91/classpl_reflected_class.htm">plReflectedClass</a></td></tr>
<tr class="memitem:a30a01812783d348746ff11a6db47d63f inherit pub_methods_classpl_reflected_class" id="r_a30a01812783d348746ff11a6db47d63f"><td class="memItemLeft" align="right" valign="top">
virtual const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetDynamicRTTI</b> () const</td></tr>
<tr class="separator:a30a01812783d348746ff11a6db47d63f inherit pub_methods_classpl_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa092c6d843ea7030165419c3c19dfe46 inherit pub_methods_classpl_reflected_class" id="r_aa092c6d843ea7030165419c3c19dfe46"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsInstanceOf</b> (const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *pType) const</td></tr>
<tr class="memdesc:aa092c6d843ea7030165419c3c19dfe46 inherit pub_methods_classpl_reflected_class"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the type of this instance is of the given type or derived from it. <br /></td></tr>
<tr class="separator:aa092c6d843ea7030165419c3c19dfe46 inherit pub_methods_classpl_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class" id="r_aa77e5cf0d600ccf2ec569e5d13c70887"><td class="memTemplParams" colspan="2">
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class"><td class="memTemplItemLeft" align="right" valign="top">PL_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsInstanceOf</b> () const</td></tr>
<tr class="memdesc:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the type of this instance is of the given type or derived from it. <br /></td></tr>
<tr class="separator:aa77e5cf0d600ccf2ec569e5d13c70887 inherit pub_methods_classpl_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-attribs" name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a4383df6a8ff058722e920d5884ebd7cf" id="r_a4383df6a8ff058722e920d5884ebd7cf"><td class="memItemLeft" align="right" valign="top"><a id="a4383df6a8ff058722e920d5884ebd7cf" name="a4383df6a8ff058722e920d5884ebd7cf"></a>
<a class="el" href="../../d4/dfd/classpl_angle.htm">plAngle</a>&#160;</td><td class="memItemRight" valign="bottom"><b>m_RotateSpeed</b> = <a class="el" href="../../d4/dfd/classpl_angle.htm#a820bec90fccc557f524890ed3d294d33">plAngle::MakeFromDegree</a>(90.0f)</td></tr>
<tr class="memdesc:a4383df6a8ff058722e920d5884ebd7cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">How many degrees per second the character turns. <br /></td></tr>
<tr class="separator:a4383df6a8ff058722e920d5884ebd7cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef9df780b76f0a8693cd46413ac1dc3e" id="r_aef9df780b76f0a8693cd46413ac1dc3e"><td class="memItemLeft" align="right" valign="top"><a id="aef9df780b76f0a8693cd46413ac1dc3e" name="aef9df780b76f0a8693cd46413ac1dc3e"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>m_fShapeRadius</b> = 0.25f</td></tr>
<tr class="memdesc:aef9df780b76f0a8693cd46413ac1dc3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">The radius of the capsule shape. <br /></td></tr>
<tr class="separator:aef9df780b76f0a8693cd46413ac1dc3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e7ea8b2295f768d52ee166c14df62a9" id="r_a9e7ea8b2295f768d52ee166c14df62a9"><td class="memItemLeft" align="right" valign="top"><a id="a9e7ea8b2295f768d52ee166c14df62a9" name="a9e7ea8b2295f768d52ee166c14df62a9"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>m_fCylinderHeightCrouch</b> = 0.9f</td></tr>
<tr class="memdesc:a9e7ea8b2295f768d52ee166c14df62a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">The total cylinder height when the character crouches. <br /></td></tr>
<tr class="separator:a9e7ea8b2295f768d52ee166c14df62a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abadaa259a1fbb6c7c1b3efa0509dd1a9" id="r_abadaa259a1fbb6c7c1b3efa0509dd1a9"><td class="memItemLeft" align="right" valign="top"><a id="abadaa259a1fbb6c7c1b3efa0509dd1a9" name="abadaa259a1fbb6c7c1b3efa0509dd1a9"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>m_fCylinderHeightStand</b> = 1.7f</td></tr>
<tr class="memdesc:abadaa259a1fbb6c7c1b3efa0509dd1a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">The total cylinder height when the character stands. <br /></td></tr>
<tr class="separator:abadaa259a1fbb6c7c1b3efa0509dd1a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8fe366520776601615c7b762acf83af" id="r_ac8fe366520776601615c7b762acf83af"><td class="memItemLeft" align="right" valign="top"><a id="ac8fe366520776601615c7b762acf83af" name="ac8fe366520776601615c7b762acf83af"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>m_fFootRadius</b> = 0.15f</td></tr>
<tr class="memdesc:ac8fe366520776601615c7b762acf83af"><td class="mdescLeft">&#160;</td><td class="mdescRight">The radius of the feet area, where it is checked whether the CC properly stands on the ground. <br /></td></tr>
<tr class="separator:ac8fe366520776601615c7b762acf83af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae859d6a7581e78727a80da09b73d4418" id="r_ae859d6a7581e78727a80da09b73d4418"><td class="memItemLeft" align="right" valign="top"><a id="ae859d6a7581e78727a80da09b73d4418" name="ae859d6a7581e78727a80da09b73d4418"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>m_fWalkSpeedCrouching</b> = 0.5f</td></tr>
<tr class="memdesc:ae859d6a7581e78727a80da09b73d4418"><td class="mdescLeft">&#160;</td><td class="mdescRight">Meters per second movement speed when crouching. <br /></td></tr>
<tr class="separator:ae859d6a7581e78727a80da09b73d4418"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4fc8a8bb9523da5ffc6049e42ce15542" id="r_a4fc8a8bb9523da5ffc6049e42ce15542"><td class="memItemLeft" align="right" valign="top"><a id="a4fc8a8bb9523da5ffc6049e42ce15542" name="a4fc8a8bb9523da5ffc6049e42ce15542"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>m_fWalkSpeedStanding</b> = 1.5f</td></tr>
<tr class="memdesc:a4fc8a8bb9523da5ffc6049e42ce15542"><td class="mdescLeft">&#160;</td><td class="mdescRight">Meters per second movement speed when standing. <br /></td></tr>
<tr class="separator:a4fc8a8bb9523da5ffc6049e42ce15542"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74cb9e736281439f2d5c9c6c900f70fd" id="r_a74cb9e736281439f2d5c9c6c900f70fd"><td class="memItemLeft" align="right" valign="top"><a id="a74cb9e736281439f2d5c9c6c900f70fd" name="a74cb9e736281439f2d5c9c6c900f70fd"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>m_fWalkSpeedRunning</b> = 3.5f</td></tr>
<tr class="memdesc:a74cb9e736281439f2d5c9c6c900f70fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Meters per second movement speed when standing and running. <br /></td></tr>
<tr class="separator:a74cb9e736281439f2d5c9c6c900f70fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3e9a914c8d9619a973fc2d6f9832871" id="r_af3e9a914c8d9619a973fc2d6f9832871"><td class="memItemLeft" align="right" valign="top"><a id="af3e9a914c8d9619a973fc2d6f9832871" name="af3e9a914c8d9619a973fc2d6f9832871"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>m_fMaxStepUp</b> = 0.25f</td></tr>
<tr class="memdesc:af3e9a914c8d9619a973fc2d6f9832871"><td class="mdescLeft">&#160;</td><td class="mdescRight">The maximum step height that the CC can step up in a single frame. <br /></td></tr>
<tr class="separator:af3e9a914c8d9619a973fc2d6f9832871"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a232806e3d54ca0f49e6c68b61be6614e" id="r_a232806e3d54ca0f49e6c68b61be6614e"><td class="memItemLeft" align="right" valign="top"><a id="a232806e3d54ca0f49e6c68b61be6614e" name="a232806e3d54ca0f49e6c68b61be6614e"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>m_fMaxStepDown</b> = 0.25f</td></tr>
<tr class="memdesc:a232806e3d54ca0f49e6c68b61be6614e"><td class="mdescLeft">&#160;</td><td class="mdescRight">The maximum step height that the CC can step down in a single frame (without 'falling'). <br /></td></tr>
<tr class="separator:a232806e3d54ca0f49e6c68b61be6614e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad9b1b4f57f8ad2501b36191386c7676" id="r_aad9b1b4f57f8ad2501b36191386c7676"><td class="memItemLeft" align="right" valign="top"><a id="aad9b1b4f57f8ad2501b36191386c7676" name="aad9b1b4f57f8ad2501b36191386c7676"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>m_fJumpImpulse</b> = 5.0f</td></tr>
<tr class="memdesc:aad9b1b4f57f8ad2501b36191386c7676"><td class="mdescLeft">&#160;</td><td class="mdescRight">The physics impulse to use for jumping. <br /></td></tr>
<tr class="separator:aad9b1b4f57f8ad2501b36191386c7676"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4ed992deccc1cef4b20d5906e585747" id="r_af4ed992deccc1cef4b20d5906e585747"><td class="memItemLeft" align="right" valign="top"><a id="af4ed992deccc1cef4b20d5906e585747" name="af4ed992deccc1cef4b20d5906e585747"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>m_bAllowJumpInAir</b> = false</td></tr>
<tr class="memdesc:af4ed992deccc1cef4b20d5906e585747"><td class="mdescLeft">&#160;</td><td class="mdescRight">Do we allow the CC to jump in the air? such as double jumping. <br /></td></tr>
<tr class="separator:af4ed992deccc1cef4b20d5906e585747"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a351f743b882491291bbf295bc7f445ab" id="r_a351f743b882491291bbf295bc7f445ab"><td class="memItemLeft" align="right" valign="top"><a id="a351f743b882491291bbf295bc7f445ab" name="a351f743b882491291bbf295bc7f445ab"></a>
<a class="el" href="../../d0/dc8/classpl_hashed_string.htm">plHashedString</a>&#160;</td><td class="memItemRight" valign="bottom"><b>m_sWalkSurfaceInteraction</b></td></tr>
<tr class="memdesc:a351f743b882491291bbf295bc7f445ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">The surface interaction to spawn regularly when walking. <br /></td></tr>
<tr class="separator:a351f743b882491291bbf295bc7f445ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9ee812617af4d7fc0ae7622e440a740" id="r_ab9ee812617af4d7fc0ae7622e440a740"><td class="memItemLeft" align="right" valign="top"><a id="ab9ee812617af4d7fc0ae7622e440a740" name="ab9ee812617af4d7fc0ae7622e440a740"></a>
<a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plSurfaceResourceHandle</a>&#160;</td><td class="memItemRight" valign="bottom"><b>m_hFallbackWalkSurface</b></td></tr>
<tr class="memdesc:ab9ee812617af4d7fc0ae7622e440a740"><td class="mdescLeft">&#160;</td><td class="mdescRight">The surface type to use for interactions, when no other surface type is available. <br /></td></tr>
<tr class="separator:ab9ee812617af4d7fc0ae7622e440a740"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d41641e5d2addf9da18628e83027f96" id="r_a3d41641e5d2addf9da18628e83027f96"><td class="memItemLeft" align="right" valign="top"><a id="a3d41641e5d2addf9da18628e83027f96" name="a3d41641e5d2addf9da18628e83027f96"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>m_fWalkInteractionDistance</b> = 1.0f</td></tr>
<tr class="memdesc:a3d41641e5d2addf9da18628e83027f96"><td class="mdescLeft">&#160;</td><td class="mdescRight">How far the CC has to walk for spawning another surface interaction. <br /></td></tr>
<tr class="separator:a3d41641e5d2addf9da18628e83027f96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a238ab5808442545520b8a42037082baf" id="r_a238ab5808442545520b8a42037082baf"><td class="memItemLeft" align="right" valign="top"><a id="a238ab5808442545520b8a42037082baf" name="a238ab5808442545520b8a42037082baf"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>m_fRunInteractionDistance</b> = 3.0f</td></tr>
<tr class="memdesc:a238ab5808442545520b8a42037082baf"><td class="mdescLeft">&#160;</td><td class="mdescRight">How far the CC has to run for spawning another surface interaction. <br /></td></tr>
<tr class="separator:a238ab5808442545520b8a42037082baf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af41de7607dcb3126cd47f5bd42a45475" id="r_af41de7607dcb3126cd47f5bd42a45475"><td class="memItemLeft" align="right" valign="top"><a id="af41de7607dcb3126cd47f5bd42a45475" name="af41de7607dcb3126cd47f5bd42a45475"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>m_fAirSpeed</b> = 2.5f</td></tr>
<tr class="memdesc:af41de7607dcb3126cd47f5bd42a45475"><td class="mdescLeft">&#160;</td><td class="mdescRight">How fast to move while falling. The higher, the more "air control" the player has. <br /></td></tr>
<tr class="separator:af41de7607dcb3126cd47f5bd42a45475"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8410b7c1e8b16fca27b342670ed7f438" id="r_a8410b7c1e8b16fca27b342670ed7f438"><td class="memItemLeft" align="right" valign="top"><a id="a8410b7c1e8b16fca27b342670ed7f438" name="a8410b7c1e8b16fca27b342670ed7f438"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>m_fAirFriction</b> = 0.5f</td></tr>
<tr class="memdesc:a8410b7c1e8b16fca27b342670ed7f438"><td class="mdescLeft">&#160;</td><td class="mdescRight">How much lateral motion to lose while falling. <br /></td></tr>
<tr class="separator:a8410b7c1e8b16fca27b342670ed7f438"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_attribs_classpl_jolt_character_controller_component"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_attribs_classpl_jolt_character_controller_component')"><img src="../../closed.png" alt="-"/>&#160;Public Attributes inherited from <a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm">plJoltCharacterControllerComponent</a></td></tr>
<tr class="memitem:a80333a26d615232543fea0bbcb9cb70e inherit pub_attribs_classpl_jolt_character_controller_component" id="r_a80333a26d615232543fea0bbcb9cb70e"><td class="memItemLeft" align="right" valign="top">plUInt8&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm#a80333a26d615232543fea0bbcb9cb70e">m_uiCollisionLayer</a> = 0</td></tr>
<tr class="memdesc:a80333a26d615232543fea0bbcb9cb70e inherit pub_attribs_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">The collision layer determines with which other actors this actor collides.  <br /></td></tr>
<tr class="separator:a80333a26d615232543fea0bbcb9cb70e inherit pub_attribs_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac41c70deb05f6fdc6cde799133f243de inherit pub_attribs_classpl_jolt_character_controller_component" id="r_ac41c70deb05f6fdc6cde799133f243de"><td class="memItemLeft" align="right" valign="top">
plUInt8&#160;</td><td class="memItemRight" valign="bottom"><b>m_uiPresenceCollisionLayer</b> = 0</td></tr>
<tr class="memdesc:ac41c70deb05f6fdc6cde799133f243de inherit pub_attribs_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">In case a 'presence shape' is used, this defines which geometry the presence bodies collides with. <br /></td></tr>
<tr class="separator:ac41c70deb05f6fdc6cde799133f243de inherit pub_attribs_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a280eec200663c2304f7235efbf6cce7b inherit pub_attribs_classpl_jolt_character_controller_component" id="r_a280eec200663c2304f7235efbf6cce7b"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../df/dd9/structpl_bitflags.htm">plBitflags</a>&lt; plJoltCharacterDebugFlags &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>m_DebugFlags</b></td></tr>
<tr class="memdesc:a280eec200663c2304f7235efbf6cce7b inherit pub_attribs_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">What aspects of the CC to visualize. <br /></td></tr>
<tr class="separator:a280eec200663c2304f7235efbf6cce7b inherit pub_attribs_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-methods" name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a7ca3f2cceddba11ace8e0822ac18cb09" id="r_a7ca3f2cceddba11ace8e0822ac18cb09"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7ca3f2cceddba11ace8e0822ac18cb09">OnSimulationStarted</a> () override</td></tr>
<tr class="memdesc:a7ca3f2cceddba11ace8e0822ac18cb09"><td class="mdescLeft">&#160;</td><td class="mdescRight">This method is called once for active components, at the start of the next world update, but only when the world is simulated.  <br /></td></tr>
<tr class="separator:a7ca3f2cceddba11ace8e0822ac18cb09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19092624a5686d47c4758fbe2ace9b80" id="r_a19092624a5686d47c4758fbe2ace9b80"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a19092624a5686d47c4758fbe2ace9b80">OnActivated</a> () override</td></tr>
<tr class="memdesc:a19092624a5686d47c4758fbe2ace9b80"><td class="mdescLeft">&#160;</td><td class="mdescRight">This method is called when the component gets activated.  <br /></td></tr>
<tr class="separator:a19092624a5686d47c4758fbe2ace9b80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26ccea0e710ddca2212f7178dd198b50" id="r_a26ccea0e710ddca2212f7178dd198b50"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a26ccea0e710ddca2212f7178dd198b50">OnDeactivated</a> () override</td></tr>
<tr class="memdesc:a26ccea0e710ddca2212f7178dd198b50"><td class="mdescLeft">&#160;</td><td class="mdescRight">This method is called when the component gets deactivated.  <br /></td></tr>
<tr class="separator:a26ccea0e710ddca2212f7178dd198b50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8cfd1401f2a0d0a2be2bc3a48a23bae3" id="r_a8cfd1401f2a0d0a2be2bc3a48a23bae3"><td class="memItemLeft" align="right" valign="top"><a id="a8cfd1401f2a0d0a2be2bc3a48a23bae3" name="a8cfd1401f2a0d0a2be2bc3a48a23bae3"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>OnUpdateLocalBounds</b> (<a class="el" href="../../d1/d06/structpl_msg_update_local_bounds.htm">plMsgUpdateLocalBounds</a> &amp;msg) const</td></tr>
<tr class="separator:a8cfd1401f2a0d0a2be2bc3a48a23bae3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50fbad75e502ef03955ce04793b1ec6c" id="r_a50fbad75e502ef03955ce04793b1ec6c"><td class="memItemLeft" align="right" valign="top"><a id="a50fbad75e502ef03955ce04793b1ec6c" name="a50fbad75e502ef03955ce04793b1ec6c"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><b>OnApplyRootMotion</b> (<a class="el" href="../../df/d1a/structpl_msg_apply_root_motion.htm">plMsgApplyRootMotion</a> &amp;msg)</td></tr>
<tr class="separator:a50fbad75e502ef03955ce04793b1ec6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a6b422c756170528381c72e567c4057" id="r_a3a6b422c756170528381c72e567c4057"><td class="memItemLeft" align="right" valign="top"><a id="a3a6b422c756170528381c72e567c4057" name="a3a6b422c756170528381c72e567c4057"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><b>DetermineConfig</b> (<a class="el" href="../../da/da6/structpl_jolt_default_character_component_1_1_config.htm">Config</a> &amp;out_inputs)</td></tr>
<tr class="separator:a3a6b422c756170528381c72e567c4057"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af65a5e8c03f818586b948ac311f1aac7" id="r_af65a5e8c03f818586b948ac311f1aac7"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af65a5e8c03f818586b948ac311f1aac7">UpdateCharacter</a> () override</td></tr>
<tr class="memdesc:af65a5e8c03f818586b948ac311f1aac7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Called up to once per frame, but potentially less often, if physics updates were skipped due to high framerates.  <br /></td></tr>
<tr class="separator:af65a5e8c03f818586b948ac311f1aac7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6eeb7074dfa5860dbee8137c09c003d1" id="r_a6eeb7074dfa5860dbee8137c09c003d1"><td class="memItemLeft" align="right" valign="top"><a id="a6eeb7074dfa5860dbee8137c09c003d1" name="a6eeb7074dfa5860dbee8137c09c003d1"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><b>ApplyRotationZ</b> ()</td></tr>
<tr class="separator:a6eeb7074dfa5860dbee8137c09c003d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e186167e7e1d036f8d4312ed4f7378f" id="r_a1e186167e7e1d036f8d4312ed4f7378f"><td class="memItemLeft" align="right" valign="top"><a id="a1e186167e7e1d036f8d4312ed4f7378f" name="a1e186167e7e1d036f8d4312ed4f7378f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>ResetInputState</b> ()</td></tr>
<tr class="memdesc:a1e186167e7e1d036f8d4312ed4f7378f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clears the input states to neutral values. <br /></td></tr>
<tr class="separator:a1e186167e7e1d036f8d4312ed4f7378f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd24a01506044a574df7d18478eda96a" id="r_acd24a01506044a574df7d18478eda96a"><td class="memItemLeft" align="right" valign="top"><a id="acd24a01506044a574df7d18478eda96a" name="acd24a01506044a574df7d18478eda96a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>ResetInternalState</b> ()</td></tr>
<tr class="separator:acd24a01506044a574df7d18478eda96a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6c734fd3de34dcda32b85a692b76de1" id="r_aa6c734fd3de34dcda32b85a692b76de1"><td class="memItemLeft" align="right" valign="top">virtual JPH::Ref&lt; JPH::Shape &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa6c734fd3de34dcda32b85a692b76de1">MakeNextCharacterShape</a> () override</td></tr>
<tr class="memdesc:aa6c734fd3de34dcda32b85a692b76de1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a new shape with the given height (and fixed radius)  <br /></td></tr>
<tr class="separator:aa6c734fd3de34dcda32b85a692b76de1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa3dcb021e6694af1f7e54bf7cbf373a" id="r_afa3dcb021e6694af1f7e54bf7cbf373a"><td class="memItemLeft" align="right" valign="top"><a id="afa3dcb021e6694af1f7e54bf7cbf373a" name="afa3dcb021e6694af1f7e54bf7cbf373a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>ApplyCrouchState</b> ()</td></tr>
<tr class="separator:afa3dcb021e6694af1f7e54bf7cbf373a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6fafe3042c0d97baab9d57a8dfd2d81" id="r_af6fafe3042c0d97baab9d57a8dfd2d81"><td class="memItemLeft" align="right" valign="top"><a id="af6fafe3042c0d97baab9d57a8dfd2d81" name="af6fafe3042c0d97baab9d57a8dfd2d81"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>InteractWithSurfaces</b> (const <a class="el" href="../../d9/dff/structpl_jolt_character_controller_component_1_1_contact_point.htm">ContactPoint</a> &amp;contact, const <a class="el" href="../../da/da6/structpl_jolt_default_character_component_1_1_config.htm">Config</a> &amp;cfg)</td></tr>
<tr class="separator:af6fafe3042c0d97baab9d57a8dfd2d81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12be9ac3cb394eafeae2dd166e4f1a15" id="r_a12be9ac3cb394eafeae2dd166e4f1a15"><td class="memItemLeft" align="right" valign="top"><a id="a12be9ac3cb394eafeae2dd166e4f1a15" name="a12be9ac3cb394eafeae2dd166e4f1a15"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>StoreLateralVelocity</b> ()</td></tr>
<tr class="separator:a12be9ac3cb394eafeae2dd166e4f1a15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3bd479ba36aeb91f0955cab3dc05b3a" id="r_ae3bd479ba36aeb91f0955cab3dc05b3a"><td class="memItemLeft" align="right" valign="top"><a id="ae3bd479ba36aeb91f0955cab3dc05b3a" name="ae3bd479ba36aeb91f0955cab3dc05b3a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>ClampLateralVelocity</b> ()</td></tr>
<tr class="separator:ae3bd479ba36aeb91f0955cab3dc05b3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a450a96f58f6fe9bd17cb3f636030b852" id="r_a450a96f58f6fe9bd17cb3f636030b852"><td class="memItemLeft" align="right" valign="top"><a id="a450a96f58f6fe9bd17cb3f636030b852" name="a450a96f58f6fe9bd17cb3f636030b852"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>MoveHeadObject</b> ()</td></tr>
<tr class="separator:a450a96f58f6fe9bd17cb3f636030b852"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11a07209b03e78853221fa542b7dd4b0" id="r_a11a07209b03e78853221fa542b7dd4b0"><td class="memItemLeft" align="right" valign="top"><a id="a11a07209b03e78853221fa542b7dd4b0" name="a11a07209b03e78853221fa542b7dd4b0"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>DebugVisualizations</b> ()</td></tr>
<tr class="separator:a11a07209b03e78853221fa542b7dd4b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4106ef6b4f9f07b3bd2e3ff2dcbed27" id="r_ad4106ef6b4f9f07b3bd2e3ff2dcbed27"><td class="memItemLeft" align="right" valign="top"><a id="ad4106ef6b4f9f07b3bd2e3ff2dcbed27" name="ad4106ef6b4f9f07b3bd2e3ff2dcbed27"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>CheckFeet</b> ()</td></tr>
<tr class="separator:ad4106ef6b4f9f07b3bd2e3ff2dcbed27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classpl_jolt_character_controller_component"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_methods_classpl_jolt_character_controller_component')"><img src="../../closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm">plJoltCharacterControllerComponent</a></td></tr>
<tr class="memitem:a3c5a59966dce4fcc47d891689e5556c9 inherit pro_methods_classpl_jolt_character_controller_component" id="r_a3c5a59966dce4fcc47d891689e5556c9"><td class="memItemLeft" align="right" valign="top">
PL_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>GetUpdateTimeDelta</b> () const</td></tr>
<tr class="memdesc:a3c5a59966dce4fcc47d891689e5556c9 inherit pro_methods_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the time delta to use for updating the character. This may differ from the world delta. <br /></td></tr>
<tr class="separator:a3c5a59966dce4fcc47d891689e5556c9 inherit pro_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37fbde097a09aa1cb4f24689185a65b0 inherit pro_methods_classpl_jolt_character_controller_component" id="r_a37fbde097a09aa1cb4f24689185a65b0"><td class="memItemLeft" align="right" valign="top">
PL_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><b>GetInverseUpdateTimeDelta</b> () const</td></tr>
<tr class="memdesc:a37fbde097a09aa1cb4f24689185a65b0 inherit pro_methods_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the inverse of update time delta. <br /></td></tr>
<tr class="separator:a37fbde097a09aa1cb4f24689185a65b0 inherit pro_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe82ea420c46ef447d68aaab9752ba4e inherit pro_methods_classpl_jolt_character_controller_component" id="r_abe82ea420c46ef447d68aaab9752ba4e"><td class="memItemLeft" align="right" valign="top">
JPH::CharacterVirtual *&#160;</td><td class="memItemRight" valign="bottom"><b>GetJoltCharacter</b> ()</td></tr>
<tr class="memdesc:abe82ea420c46ef447d68aaab9752ba4e inherit pro_methods_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gives access to the internally used JPH::CharacterVirtual. <br /></td></tr>
<tr class="separator:abe82ea420c46ef447d68aaab9752ba4e inherit pro_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab6b78746bcda843a45245b5af28f48e inherit pro_methods_classpl_jolt_character_controller_component" id="r_aab6b78746bcda843a45245b5af28f48e"><td class="memItemLeft" align="right" valign="top">
const JPH::CharacterVirtual *&#160;</td><td class="memItemRight" valign="bottom"><b>GetJoltCharacter</b> () const</td></tr>
<tr class="separator:aab6b78746bcda843a45245b5af28f48e inherit pro_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a214e90e5f36dfa2bb4b9652d83e1745f inherit pro_methods_classpl_jolt_character_controller_component" id="r_a214e90e5f36dfa2bb4b9652d83e1745f"><td class="memItemLeft" align="right" valign="top">
<a class="el" href="../../da/dce/structpl_result.htm">plResult</a>&#160;</td><td class="memItemRight" valign="bottom"><b>TryChangeShape</b> (JPH::Shape *pNewShape)</td></tr>
<tr class="memdesc:a214e90e5f36dfa2bb4b9652d83e1745f inherit pro_methods_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Attempts to change the character shape to the new one. Fails if the new shape overlaps with surrounding geometry. <br /></td></tr>
<tr class="separator:a214e90e5f36dfa2bb4b9652d83e1745f inherit pro_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75fe8f3cc0047532397b30c912ed97ec inherit pro_methods_classpl_jolt_character_controller_component" id="r_a75fe8f3cc0047532397b30c912ed97ec"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>RawMoveWithVelocity</b> (const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;vVelocity, float fMaxStairStepUp, float fMaxStepDown)</td></tr>
<tr class="memdesc:a75fe8f3cc0047532397b30c912ed97ec inherit pro_methods_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the character using the given velocity and timestep, making it collide with and slide along obstacles. <br /></td></tr>
<tr class="separator:a75fe8f3cc0047532397b30c912ed97ec inherit pro_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae70c4f34aad06c8785e890a2f3e93db0 inherit pro_methods_classpl_jolt_character_controller_component" id="r_ae70c4f34aad06c8785e890a2f3e93db0"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>RawMoveIntoDirection</b> (const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;vDirection)</td></tr>
<tr class="memdesc:ae70c4f34aad06c8785e890a2f3e93db0 inherit pro_methods_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Variant of <a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm#a75fe8f3cc0047532397b30c912ed97ec" title="Moves the character using the given velocity and timestep, making it collide with and slide along obs...">RawMoveWithVelocity()</a> that takes a direction vector instead. <br /></td></tr>
<tr class="separator:ae70c4f34aad06c8785e890a2f3e93db0 inherit pro_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87fd8442f95353abe13d2d0e7de202d3 inherit pro_methods_classpl_jolt_character_controller_component" id="r_a87fd8442f95353abe13d2d0e7de202d3"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>RawMoveToPosition</b> (const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;vTargetPosition)</td></tr>
<tr class="memdesc:a87fd8442f95353abe13d2d0e7de202d3 inherit pro_methods_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Variant of <a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm#a75fe8f3cc0047532397b30c912ed97ec" title="Moves the character using the given velocity and timestep, making it collide with and slide along obs...">RawMoveWithVelocity()</a> that takes a target position instead. <br /></td></tr>
<tr class="separator:a87fd8442f95353abe13d2d0e7de202d3 inherit pro_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79d204c08126d6c8e6078c5672efa802 inherit pro_methods_classpl_jolt_character_controller_component" id="r_a79d204c08126d6c8e6078c5672efa802"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>TeleportToPosition</b> (const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;vGlobalFootPos)</td></tr>
<tr class="memdesc:a79d204c08126d6c8e6078c5672efa802 inherit pro_methods_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Teleports the character to the destination position, even if it would get stuck there. <br /></td></tr>
<tr class="separator:a79d204c08126d6c8e6078c5672efa802 inherit pro_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef90a307046cf89d5c39a8212b4fc9e3 inherit pro_methods_classpl_jolt_character_controller_component" id="r_aef90a307046cf89d5c39a8212b4fc9e3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm#aef90a307046cf89d5c39a8212b4fc9e3">StickToGround</a> (float fMaxDist)</td></tr>
<tr class="memdesc:aef90a307046cf89d5c39a8212b4fc9e3 inherit pro_methods_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the CC is slightly above the ground, this will move it down so that it touches the ground.  <br /></td></tr>
<tr class="separator:aef90a307046cf89d5c39a8212b4fc9e3 inherit pro_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca1952359f6a74704037a8e49bca7c6e inherit pro_methods_classpl_jolt_character_controller_component" id="r_aca1952359f6a74704037a8e49bca7c6e"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>CollectCastContacts</b> (<a class="el" href="../../d0/d4e/classpl_dynamic_array.htm">plDynamicArray</a>&lt; <a class="el" href="../../d9/dff/structpl_jolt_character_controller_component_1_1_contact_point.htm">ContactPoint</a> &gt; &amp;out_Contacts, const JPH::Shape *pShape, const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;vQueryPosition, const <a class="el" href="../../d6/dad/classpl_quat_template.htm">plQuat</a> &amp;qQueryRotation, const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;vSweepDir) const</td></tr>
<tr class="memdesc:aca1952359f6a74704037a8e49bca7c6e inherit pro_methods_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gathers all contact points that are found by sweeping the shape along a direction. <br /></td></tr>
<tr class="separator:aca1952359f6a74704037a8e49bca7c6e inherit pro_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92be6183aaa4b728868de79fd3e69b9e inherit pro_methods_classpl_jolt_character_controller_component" id="r_a92be6183aaa4b728868de79fd3e69b9e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm#a92be6183aaa4b728868de79fd3e69b9e">CollectContacts</a> (<a class="el" href="../../d0/d4e/classpl_dynamic_array.htm">plDynamicArray</a>&lt; <a class="el" href="../../d9/dff/structpl_jolt_character_controller_component_1_1_contact_point.htm">ContactPoint</a> &gt; &amp;out_Contacts, const JPH::Shape *pShape, const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;vQueryPosition, const <a class="el" href="../../d6/dad/classpl_quat_template.htm">plQuat</a> &amp;qQueryRotation, float fCollisionTolerance) const</td></tr>
<tr class="memdesc:a92be6183aaa4b728868de79fd3e69b9e inherit pro_methods_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gathers all contact points of the shape at the target position.  <br /></td></tr>
<tr class="separator:a92be6183aaa4b728868de79fd3e69b9e inherit pro_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4435101fefdefbe1c1e4b882292590c inherit pro_methods_classpl_jolt_character_controller_component" id="r_ad4435101fefdefbe1c1e4b882292590c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm#ad4435101fefdefbe1c1e4b882292590c">GetContactVelocityAndPushAway</a> (const <a class="el" href="../../d9/dff/structpl_jolt_character_controller_component_1_1_contact_point.htm">ContactPoint</a> &amp;contact, float fPushForce)</td></tr>
<tr class="memdesc:ad4435101fefdefbe1c1e4b882292590c inherit pro_methods_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Detects the velocity at the contact point. If it is a dynamic body, a force pushing it away is applied.  <br /></td></tr>
<tr class="separator:ad4435101fefdefbe1c1e4b882292590c inherit pro_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63ee8d5d7238d34ede06d3f2d9dbf7a0 inherit pro_methods_classpl_jolt_character_controller_component" id="r_a63ee8d5d7238d34ede06d3f2d9dbf7a0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm#a63ee8d5d7238d34ede06d3f2d9dbf7a0">SpawnContactInteraction</a> (const <a class="el" href="../../d9/dff/structpl_jolt_character_controller_component_1_1_contact_point.htm">ContactPoint</a> &amp;contact, const <a class="el" href="../../d0/dc8/classpl_hashed_string.htm">plHashedString</a> &amp;sSurfaceInteraction, <a class="el" href="../../d4/db4/classpl_typed_resource_handle.htm">plSurfaceResourceHandle</a> hFallbackSurface, const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;vInteractionNormal=<a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a>(0, 0, 1))</td></tr>
<tr class="memdesc:a63ee8d5d7238d34ede06d3f2d9dbf7a0 inherit pro_methods_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Spawns a surface interaction prefab at the given contact point.  <br /></td></tr>
<tr class="separator:a63ee8d5d7238d34ede06d3f2d9dbf7a0 inherit pro_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc2aeeaf037b271936d07b1d026eb129 inherit pro_methods_classpl_jolt_character_controller_component" id="r_adc2aeeaf037b271936d07b1d026eb129"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>VisualizeContact</b> (const <a class="el" href="../../d9/dff/structpl_jolt_character_controller_component_1_1_contact_point.htm">ContactPoint</a> &amp;contact, const <a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a> &amp;color) const</td></tr>
<tr class="memdesc:adc2aeeaf037b271936d07b1d026eb129 inherit pro_methods_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Debug draws the contact point. <br /></td></tr>
<tr class="separator:adc2aeeaf037b271936d07b1d026eb129 inherit pro_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4d8d52f9779287b717507243582df7c inherit pro_methods_classpl_jolt_character_controller_component" id="r_ad4d8d52f9779287b717507243582df7c"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>VisualizeContacts</b> (const <a class="el" href="../../d0/d4e/classpl_dynamic_array.htm">plDynamicArray</a>&lt; <a class="el" href="../../d9/dff/structpl_jolt_character_controller_component_1_1_contact_point.htm">ContactPoint</a> &gt; &amp;contacts, const <a class="el" href="../../d9/d1d/classpl_color.htm">plColor</a> &amp;color) const</td></tr>
<tr class="memdesc:ad4d8d52f9779287b717507243582df7c inherit pro_methods_classpl_jolt_character_controller_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Debug draws all the contact points. <br /></td></tr>
<tr class="separator:ad4d8d52f9779287b717507243582df7c inherit pro_methods_classpl_jolt_character_controller_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classpl_component"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_methods_classpl_component')"><img src="../../closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="../../d1/d81/classpl_component.htm">plComponent</a></td></tr>
<tr class="memitem:a87964bb877271bf63fd2f731f60bf938 inherit pro_methods_classpl_component" id="r_a87964bb877271bf63fd2f731f60bf938"><td class="memItemLeft" align="right" valign="top">
&#160;</td><td class="memItemRight" valign="bottom"><b>plComponent</b> ()</td></tr>
<tr class="memdesc:a87964bb877271bf63fd2f731f60bf938 inherit pro_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Keep the constructor private or protected in derived classes, so it cannot be called manually. <br /></td></tr>
<tr class="separator:a87964bb877271bf63fd2f731f60bf938 inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1a1c29b47c514aa7935766621eadd89 inherit pro_methods_classpl_component" id="r_ab1a1c29b47c514aa7935766621eadd89"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsDynamic</b> () const</td></tr>
<tr class="memdesc:ab1a1c29b47c514aa7935766621eadd89 inherit pro_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether this component is dynamic and thus can only be attached to dynamic game objects. <br /></td></tr>
<tr class="separator:ab1a1c29b47c514aa7935766621eadd89 inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f27b35a04bc477bb323dcdf7241e5cf inherit pro_methods_classpl_component" id="r_a5f27b35a04bc477bb323dcdf7241e5cf"><td class="memItemLeft" align="right" valign="top">
virtual plWorldModuleTypeId&#160;</td><td class="memItemRight" valign="bottom"><b>GetTypeId</b> () const =0</td></tr>
<tr class="separator:a5f27b35a04bc477bb323dcdf7241e5cf inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afccee654244ac9b963753f0a59253988 inherit pro_methods_classpl_component" id="r_afccee654244ac9b963753f0a59253988"><td class="memItemLeft" align="right" valign="top">
virtual plComponentMode::Enum&#160;</td><td class="memItemRight" valign="bottom"><b>GetMode</b> () const =0</td></tr>
<tr class="separator:afccee654244ac9b963753f0a59253988 inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9dbf922683e28fab0c4c18cac736e7fc inherit pro_methods_classpl_component" id="r_a9dbf922683e28fab0c4c18cac736e7fc"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d81/classpl_component.htm#a9dbf922683e28fab0c4c18cac736e7fc">Initialize</a> ()</td></tr>
<tr class="memdesc:a9dbf922683e28fab0c4c18cac736e7fc inherit pro_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Can be overridden for basic initialization that depends on a valid hierarchy and position.  <br /></td></tr>
<tr class="separator:a9dbf922683e28fab0c4c18cac736e7fc inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a264bf60654aa3ca836e2040d639308a4 inherit pro_methods_classpl_component" id="r_a264bf60654aa3ca836e2040d639308a4"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d81/classpl_component.htm#a264bf60654aa3ca836e2040d639308a4">Deinitialize</a> ()</td></tr>
<tr class="memdesc:a264bf60654aa3ca836e2040d639308a4 inherit pro_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">This method is called before the component is destroyed. A derived type can override this method to do common de-initialization work.  <br /></td></tr>
<tr class="separator:a264bf60654aa3ca836e2040d639308a4 inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad56bdbbefadfd6bde373e3a7920feb18 inherit pro_methods_classpl_component" id="r_ad56bdbbefadfd6bde373e3a7920feb18"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>EnableUnhandledMessageHandler</b> (bool enable)</td></tr>
<tr class="memdesc:ad56bdbbefadfd6bde373e3a7920feb18 inherit pro_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">By default disabled. Enable to have <a class="el" href="../../d1/d81/classpl_component.htm#a206f18497232d95227119c001e86d7a6" title="When EnableUnhandledMessageHandler() was activated, this is called for all messages for which there i...">OnUnhandledMessage()</a> called for every unhandled message. <br /></td></tr>
<tr class="separator:ad56bdbbefadfd6bde373e3a7920feb18 inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a206f18497232d95227119c001e86d7a6 inherit pro_methods_classpl_component" id="r_a206f18497232d95227119c001e86d7a6"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d81/classpl_component.htm#a206f18497232d95227119c001e86d7a6">OnUnhandledMessage</a> (<a class="el" href="../../d0/dde/classpl_message.htm">plMessage</a> &amp;msg, bool bWasPostedMsg)</td></tr>
<tr class="memdesc:a206f18497232d95227119c001e86d7a6 inherit pro_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">When <a class="el" href="../../d1/d81/classpl_component.htm#ad56bdbbefadfd6bde373e3a7920feb18" title="By default disabled. Enable to have OnUnhandledMessage() called for every unhandled message.">EnableUnhandledMessageHandler()</a> was activated, this is called for all messages for which there is no dedicated message handler.  <br /></td></tr>
<tr class="separator:a206f18497232d95227119c001e86d7a6 inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b8104e109e76ac2a4042ef598db59e7 inherit pro_methods_classpl_component" id="r_a2b8104e109e76ac2a4042ef598db59e7"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d81/classpl_component.htm#a2b8104e109e76ac2a4042ef598db59e7">OnUnhandledMessage</a> (<a class="el" href="../../d0/dde/classpl_message.htm">plMessage</a> &amp;msg, bool bWasPostedMsg) const</td></tr>
<tr class="memdesc:a2b8104e109e76ac2a4042ef598db59e7 inherit pro_methods_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">When <a class="el" href="../../d1/d81/classpl_component.htm#ad56bdbbefadfd6bde373e3a7920feb18" title="By default disabled. Enable to have OnUnhandledMessage() called for every unhandled message.">EnableUnhandledMessageHandler()</a> was activated, this is called for all messages for which there is no dedicated message handler.  <br /></td></tr>
<tr class="separator:a2b8104e109e76ac2a4042ef598db59e7 inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6b8f74ace1a1f0f20e016d0ad26c9ee inherit pro_methods_classpl_component" id="r_ad6b8f74ace1a1f0f20e016d0ad26c9ee"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsInitialized</b> () const</td></tr>
<tr class="separator:ad6b8f74ace1a1f0f20e016d0ad26c9ee inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89723afe5caad6e5eebe586ff70b394a inherit pro_methods_classpl_component" id="r_a89723afe5caad6e5eebe586ff70b394a"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsInitializing</b> () const</td></tr>
<tr class="separator:a89723afe5caad6e5eebe586ff70b394a inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ae1b81425640d8a281da5831e145334 inherit pro_methods_classpl_component" id="r_a4ae1b81425640d8a281da5831e145334"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsSimulationStarted</b> () const</td></tr>
<tr class="separator:a4ae1b81425640d8a281da5831e145334 inherit pro_methods_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-attribs" name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:ac6df6cf79522ea94a865ce89bf5e1cc2" id="r_ac6df6cf79522ea94a865ce89bf5e1cc2"><td class="memItemLeft" align="right" valign="top"><a id="ac6df6cf79522ea94a865ce89bf5e1cc2" name="ac6df6cf79522ea94a865ce89bf5e1cc2"></a>
<a class="el" href="#a74a4b0927bf8469ca8b98810ef36c7bb">GroundState</a>&#160;</td><td class="memItemRight" valign="bottom"><b>m_LastGroundState</b> = <a class="el" href="#a74a4b0927bf8469ca8b98810ef36c7bbaee4e669a07b061d70b9b79dfed9cb5e7">GroundState::InAir</a></td></tr>
<tr class="separator:ac6df6cf79522ea94a865ce89bf5e1cc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae605fe85dad3dd9528f06283c63ef23a" id="r_ae605fe85dad3dd9528f06283c63ef23a"><td class="memItemLeft" align="right" valign="top"><a id="ae605fe85dad3dd9528f06283c63ef23a" name="ae605fe85dad3dd9528f06283c63ef23a"></a>
plUInt8&#160;</td><td class="memItemRight" valign="bottom"><b>m_uiInputJumpBit</b>: 1</td></tr>
<tr class="separator:ae605fe85dad3dd9528f06283c63ef23a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1365b3676186f6a5979a31296152c68" id="r_ac1365b3676186f6a5979a31296152c68"><td class="memItemLeft" align="right" valign="top"><a id="ac1365b3676186f6a5979a31296152c68" name="ac1365b3676186f6a5979a31296152c68"></a>
plUInt8&#160;</td><td class="memItemRight" valign="bottom"><b>m_uiInputCrouchBit</b>: 1</td></tr>
<tr class="separator:ac1365b3676186f6a5979a31296152c68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e2c91509642ccb405357c4851803992" id="r_a4e2c91509642ccb405357c4851803992"><td class="memItemLeft" align="right" valign="top"><a id="a4e2c91509642ccb405357c4851803992" name="a4e2c91509642ccb405357c4851803992"></a>
plUInt8&#160;</td><td class="memItemRight" valign="bottom"><b>m_uiInputRunBit</b>: 1</td></tr>
<tr class="separator:a4e2c91509642ccb405357c4851803992"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd228175cbb68d595ce7992a6d29a47e" id="r_abd228175cbb68d595ce7992a6d29a47e"><td class="memItemLeft" align="right" valign="top"><a id="abd228175cbb68d595ce7992a6d29a47e" name="abd228175cbb68d595ce7992a6d29a47e"></a>
plUInt8&#160;</td><td class="memItemRight" valign="bottom"><b>m_uiIsCrouchingBit</b>: 1</td></tr>
<tr class="separator:abd228175cbb68d595ce7992a6d29a47e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab31acebe700c930c997f950a7d0b8684" id="r_ab31acebe700c930c997f950a7d0b8684"><td class="memItemLeft" align="right" valign="top"><a id="ab31acebe700c930c997f950a7d0b8684" name="ab31acebe700c930c997f950a7d0b8684"></a>
<a class="el" href="../../d4/dfd/classpl_angle.htm">plAngle</a>&#160;</td><td class="memItemRight" valign="bottom"><b>m_InputRotateZ</b></td></tr>
<tr class="separator:ab31acebe700c930c997f950a7d0b8684"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acefeb1effe87013e8c59acda3dff66bb" id="r_acefeb1effe87013e8c59acda3dff66bb"><td class="memItemLeft" align="right" valign="top"><a id="acefeb1effe87013e8c59acda3dff66bb" name="acefeb1effe87013e8c59acda3dff66bb"></a>
<a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2</a>&#160;</td><td class="memItemRight" valign="bottom"><b>m_vInputDirection</b> = <a class="el" href="../../d1/dd1/classpl_vec2_template.htm#a715d7506547cbafea5d021b48106db4e">plVec2::MakeZero</a>()</td></tr>
<tr class="separator:acefeb1effe87013e8c59acda3dff66bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af67119d412eac656ae78f2b47c9b7dc9" id="r_af67119d412eac656ae78f2b47c9b7dc9"><td class="memItemLeft" align="right" valign="top"><a id="af67119d412eac656ae78f2b47c9b7dc9" name="af67119d412eac656ae78f2b47c9b7dc9"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>m_fVelocityUp</b> = 0.0f</td></tr>
<tr class="separator:af67119d412eac656ae78f2b47c9b7dc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46243333d32754eee13f1f1f303ffed7" id="r_a46243333d32754eee13f1f1f303ffed7"><td class="memItemLeft" align="right" valign="top"><a id="a46243333d32754eee13f1f1f303ffed7" name="a46243333d32754eee13f1f1f303ffed7"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>m_fNextCylinderHeight</b> = 0</td></tr>
<tr class="separator:a46243333d32754eee13f1f1f303ffed7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab94b40a15bf841de0e2635653d96afaf" id="r_ab94b40a15bf841de0e2635653d96afaf"><td class="memItemLeft" align="right" valign="top"><a id="ab94b40a15bf841de0e2635653d96afaf" name="ab94b40a15bf841de0e2635653d96afaf"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>m_fAccumulatedWalkDistance</b> = 0.0f</td></tr>
<tr class="separator:ab94b40a15bf841de0e2635653d96afaf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa514545c847dbd524c51111bf6d31333" id="r_aa514545c847dbd524c51111bf6d31333"><td class="memItemLeft" align="right" valign="top"><a id="aa514545c847dbd524c51111bf6d31333" name="aa514545c847dbd524c51111bf6d31333"></a>
<a class="el" href="../../d1/dd1/classpl_vec2_template.htm">plVec2</a>&#160;</td><td class="memItemRight" valign="bottom"><b>m_vVelocityLateral</b> = <a class="el" href="../../d1/dd1/classpl_vec2_template.htm#a715d7506547cbafea5d021b48106db4e">plVec2::MakeZero</a>()</td></tr>
<tr class="separator:aa514545c847dbd524c51111bf6d31333"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a615414f44f7a0c6fc7d6d6c743bd8b81" id="r_a615414f44f7a0c6fc7d6d6c743bd8b81"><td class="memItemLeft" align="right" valign="top"><a id="a615414f44f7a0c6fc7d6d6c743bd8b81" name="a615414f44f7a0c6fc7d6d6c743bd8b81"></a>
<a class="el" href="../../d6/d78/classpl_transform_template.htm">plTransform</a>&#160;</td><td class="memItemRight" valign="bottom"><b>m_PreviousTransform</b></td></tr>
<tr class="separator:a615414f44f7a0c6fc7d6d6c743bd8b81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64855197cc32fb4efdd541ed190d7f7c" id="r_a64855197cc32fb4efdd541ed190d7f7c"><td class="memItemLeft" align="right" valign="top"><a id="a64855197cc32fb4efdd541ed190d7f7c" name="a64855197cc32fb4efdd541ed190d7f7c"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>m_bFeetOnSolidGround</b> = false</td></tr>
<tr class="separator:a64855197cc32fb4efdd541ed190d7f7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ed00749a657a55fa9314e3b85c69bce" id="r_a9ed00749a657a55fa9314e3b85c69bce"><td class="memItemLeft" align="right" valign="top"><a id="a9ed00749a657a55fa9314e3b85c69bce" name="a9ed00749a657a55fa9314e3b85c69bce"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>m_fCurrentCylinderHeight</b> = 0</td></tr>
<tr class="separator:a9ed00749a657a55fa9314e3b85c69bce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53dca1fc74340082fb89a0b8584beca9" id="r_a53dca1fc74340082fb89a0b8584beca9"><td class="memItemLeft" align="right" valign="top"><a id="a53dca1fc74340082fb89a0b8584beca9" name="a53dca1fc74340082fb89a0b8584beca9"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>m_fHeadHeightOffset</b> = 0.0f</td></tr>
<tr class="separator:a53dca1fc74340082fb89a0b8584beca9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5aee6ff9cbd7d03ab80fe43c2b6d6534" id="r_a5aee6ff9cbd7d03ab80fe43c2b6d6534"><td class="memItemLeft" align="right" valign="top"><a id="a5aee6ff9cbd7d03ab80fe43c2b6d6534" name="a5aee6ff9cbd7d03ab80fe43c2b6d6534"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><b>m_fHeadTargetHeight</b> = 0.0f</td></tr>
<tr class="separator:a5aee6ff9cbd7d03ab80fe43c2b6d6534"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1dffb983d02c56b36c80a5e084c2b4b7" id="r_a1dffb983d02c56b36c80a5e084c2b4b7"><td class="memItemLeft" align="right" valign="top"><a id="a1dffb983d02c56b36c80a5e084c2b4b7" name="a1dffb983d02c56b36c80a5e084c2b4b7"></a>
<a class="el" href="../../d2/d49/structpl_game_object_handle.htm">plGameObjectHandle</a>&#160;</td><td class="memItemRight" valign="bottom"><b>m_hHeadObject</b></td></tr>
<tr class="separator:a1dffb983d02c56b36c80a5e084c2b4b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc954bb86fca8b11520304465705458d" id="r_afc954bb86fca8b11520304465705458d"><td class="memItemLeft" align="right" valign="top"><a id="afc954bb86fca8b11520304465705458d" name="afc954bb86fca8b11520304465705458d"></a>
<a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a>&#160;</td><td class="memItemRight" valign="bottom"><b>m_vAbsoluteRootMotion</b> = <a class="el" href="../../df/d1f/classpl_vec3_template.htm#a05620d472397f6aa16dbebab1dceeb48">plVec3::MakeZero</a>()</td></tr>
<tr class="separator:afc954bb86fca8b11520304465705458d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ce0dd4b47ee9096a285300ac142b658" id="r_a0ce0dd4b47ee9096a285300ac142b658"><td class="memItemLeft" align="right" valign="top"><a id="a0ce0dd4b47ee9096a285300ac142b658" name="a0ce0dd4b47ee9096a285300ac142b658"></a>
plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>m_uiUserDataIndex</b> = plInvalidIndex</td></tr>
<tr class="separator:a0ce0dd4b47ee9096a285300ac142b658"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f8f6da102dd5bc82cf078547db2f5de" id="r_a6f8f6da102dd5bc82cf078547db2f5de"><td class="memItemLeft" align="right" valign="top"><a id="a6f8f6da102dd5bc82cf078547db2f5de" name="a6f8f6da102dd5bc82cf078547db2f5de"></a>
plUInt32&#160;</td><td class="memItemRight" valign="bottom"><b>m_uiJoltBodyID</b> = plInvalidIndex</td></tr>
<tr class="separator:a6f8f6da102dd5bc82cf078547db2f5de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_classpl_component"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pro_attribs_classpl_component')"><img src="../../closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="../../d1/d81/classpl_component.htm">plComponent</a></td></tr>
<tr class="memitem:a007b5d682ee89be0b136dd97b90c557d inherit pro_attribs_classpl_component" id="r_a007b5d682ee89be0b136dd97b90c557d"><td class="memItemLeft" align="right" valign="top">
const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>m_pMessageDispatchType</b> = nullptr</td></tr>
<tr class="memdesc:a007b5d682ee89be0b136dd97b90c557d inherit pro_attribs_classpl_component"><td class="mdescLeft">&#160;</td><td class="mdescRight">Messages will be dispatched to this type. Default is what GetDynamicRTTI() returns, can be redirected if necessary. <br /></td></tr>
<tr class="separator:a007b5d682ee89be0b136dd97b90c557d inherit pro_attribs_classpl_component"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="inherited" name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_static_methods_classpl_no_base"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_static_methods_classpl_no_base')"><img src="../../closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="../../de/dc4/classpl_no_base.htm">plNoBase</a></td></tr>
<tr class="memitem:af5fef4e4ea9a9dc1842d1dd3812e5d7f inherit pub_static_methods_classpl_no_base" id="r_af5fef4e4ea9a9dc1842d1dd3812e5d7f"><td class="memItemLeft" align="right" valign="top">
static const <a class="el" href="../../d8/dec/classpl_r_t_t_i.htm">plRTTI</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetStaticRTTI</b> ()</td></tr>
<tr class="separator:af5fef4e4ea9a9dc1842d1dd3812e5d7f inherit pub_static_methods_classpl_no_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>An example character controller (CC) implementation build upon <a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm" title="Base class for character controllers (CC).">plJoltCharacterControllerComponent</a>. </p>
<p>This component implements typical behavior for an FPS type of game. It is mainly meant as an example, as most games would rather implement their own CC to control the exact details.</p>
<p>It is also possible to derive from this component and override some virtual functions to just tweak the behavior of this sample implementation, in case you only need minor tweaks. </p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="a74a4b0927bf8469ca8b98810ef36c7bb" name="a74a4b0927bf8469ca8b98810ef36c7bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74a4b0927bf8469ca8b98810ef36c7bb">&#9670;&#160;</a></span>GroundState</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum class <a class="el" href="#a74a4b0927bf8469ca8b98810ef36c7bb">plJoltDefaultCharacterComponent::GroundState</a> : plUInt8</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a74a4b0927bf8469ca8b98810ef36c7bba2b9beed57034f5727573d7ded76cf777" name="a74a4b0927bf8469ca8b98810ef36c7bba2b9beed57034f5727573d7ded76cf777"></a>OnGround&#160;</td><td class="fielddoc"><p>Character is touching the ground. </p>
</td></tr>
<tr><td class="fieldname"><a id="a74a4b0927bf8469ca8b98810ef36c7bbad82906db8c91bad0508406f71a9f3b7f" name="a74a4b0927bf8469ca8b98810ef36c7bbad82906db8c91bad0508406f71a9f3b7f"></a>Sliding&#160;</td><td class="fielddoc"><p>Character is touching a steep surface and therefore slides downwards. </p>
</td></tr>
<tr><td class="fieldname"><a id="a74a4b0927bf8469ca8b98810ef36c7bbaee4e669a07b061d70b9b79dfed9cb5e7" name="a74a4b0927bf8469ca8b98810ef36c7bbaee4e669a07b061d70b9b79dfed9cb5e7"></a>InAir&#160;</td><td class="fielddoc"><p>Character isn't touching any ground surface (may still touch a wall or ceiling) </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a04c9f40a66c878624597bf7715d63424" name="a04c9f40a66c878624597bf7715d63424"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a04c9f40a66c878624597bf7715d63424">&#9670;&#160;</a></span>DeserializeComponent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJoltDefaultCharacterComponent::DeserializeComponent </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d3/d63/classpl_world_reader.htm">plWorldReader</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>inout_stream</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this to load the current state of the component from the given stream. </p>
<p>The active state will be automatically serialized. The 'initialized' state is not serialized, all components will be initialized after creation, even if they were already in an initialized state when they were serialized. </p>

<p>Reimplemented from <a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm#a264e1b54789204dc500a8fd7c718aeec">plJoltCharacterControllerComponent</a>.</p>

</div>
</div>
<a id="ad97dc8b2b0576e4ebeac0e6111286cad" name="ad97dc8b2b0576e4ebeac0e6111286cad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad97dc8b2b0576e4ebeac0e6111286cad">&#9670;&#160;</a></span>GetShapeRadius()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">float plJoltDefaultCharacterComponent::GetShapeRadius </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the radius of the shape. This never changes at runtime. </p>

<p>Implements <a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm#a24cf8bafb2459d3eeede6eaca8a8f3c8">plJoltCharacterControllerComponent</a>.</p>

</div>
</div>
<a id="a1a4071b29529b525bf8398c4b54ca6cd" name="a1a4071b29529b525bf8398c4b54ca6cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a4071b29529b525bf8398c4b54ca6cd">&#9670;&#160;</a></span>IsCrouching()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool plJoltDefaultCharacterComponent::IsCrouching </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks whether the CC is currently in the crouch state. </p>

<p>Reimplemented from <a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm#a8fafd1240522b955b97dc2fde230966c">plJoltCharacterControllerComponent</a>.</p>

</div>
</div>
<a id="a96af09869b1ce5e58efa734d65a7ca73" name="a96af09869b1ce5e58efa734d65a7ca73"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a96af09869b1ce5e58efa734d65a7ca73">&#9670;&#160;</a></span>IsTouchingGround()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool plJoltDefaultCharacterComponent::IsTouchingGround </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks whether the CC is currently touching the ground. </p>

<p>Reimplemented from <a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm#a8d5cb824b1998b9bc8ed1c15977412b7">plJoltCharacterControllerComponent</a>.</p>

</div>
</div>
<a id="aa6c734fd3de34dcda32b85a692b76de1" name="aa6c734fd3de34dcda32b85a692b76de1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6c734fd3de34dcda32b85a692b76de1">&#9670;&#160;</a></span>MakeNextCharacterShape()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">JPH::Ref&lt; JPH::Shape &gt; plJoltDefaultCharacterComponent::MakeNextCharacterShape </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a new shape with the given height (and fixed radius) </p>

<p>Implements <a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm#a5422c8c5cfb02131c11632cd76e988fb">plJoltCharacterControllerComponent</a>.</p>

</div>
</div>
<a id="a19092624a5686d47c4758fbe2ace9b80" name="a19092624a5686d47c4758fbe2ace9b80"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19092624a5686d47c4758fbe2ace9b80">&#9670;&#160;</a></span>OnActivated()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJoltDefaultCharacterComponent::OnActivated </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This method is called when the component gets activated. </p>
<p>By default a component is active, but it can be created in an inactive state. In such a case <a class="el" href="#a19092624a5686d47c4758fbe2ace9b80" title="This method is called when the component gets activated.">OnActivated()</a> is only called once a component is activated. If a component gets switched between active and inactive at runtime, <a class="el" href="#a19092624a5686d47c4758fbe2ace9b80" title="This method is called when the component gets activated.">OnActivated()</a> and <a class="el" href="#a26ccea0e710ddca2212f7178dd198b50" title="This method is called when the component gets deactivated.">OnDeactivated()</a> are called accordingly. In contrast <a class="el" href="../../d1/d81/classpl_component.htm#a9dbf922683e28fab0c4c18cac736e7fc" title="Can be overridden for basic initialization that depends on a valid hierarchy and position.">Initialize()</a> and <a class="el" href="../../d1/d81/classpl_component.htm#a264bf60654aa3ca836e2040d639308a4" title="This method is called before the component is destroyed. A derived type can override this method to d...">Deinitialize()</a> are only ever called once.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="#a19092624a5686d47c4758fbe2ace9b80" title="This method is called when the component gets activated.">OnActivated()</a>, <a class="el" href="#a26ccea0e710ddca2212f7178dd198b50" title="This method is called when the component gets deactivated.">OnDeactivated()</a>, <a class="el" href="../../d1/d81/classpl_component.htm#a9dbf922683e28fab0c4c18cac736e7fc" title="Can be overridden for basic initialization that depends on a valid hierarchy and position.">Initialize()</a>, <a class="el" href="../../d1/d81/classpl_component.htm#a264bf60654aa3ca836e2040d639308a4" title="This method is called before the component is destroyed. A derived type can override this method to d...">Deinitialize()</a>, <a class="el" href="#a7ca3f2cceddba11ace8e0822ac18cb09" title="This method is called once for active components, at the start of the next world update,...">OnSimulationStarted()</a> </dd></dl>

<p>Reimplemented from <a class="el" href="../../d1/d81/classpl_component.htm#acd1bb5b4ed2d6e98a5e9aed2bcba7b98">plComponent</a>.</p>

</div>
</div>
<a id="a26ccea0e710ddca2212f7178dd198b50" name="a26ccea0e710ddca2212f7178dd198b50"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26ccea0e710ddca2212f7178dd198b50">&#9670;&#160;</a></span>OnDeactivated()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJoltDefaultCharacterComponent::OnDeactivated </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This method is called when the component gets deactivated. </p>
<p>Upon destruction, a component that is active first gets deactivated. Therefore <a class="el" href="#a26ccea0e710ddca2212f7178dd198b50" title="This method is called when the component gets deactivated.">OnDeactivated()</a> should be used for typical game code cleanup.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="#a19092624a5686d47c4758fbe2ace9b80" title="This method is called when the component gets activated.">OnActivated()</a>, <a class="el" href="#a26ccea0e710ddca2212f7178dd198b50" title="This method is called when the component gets deactivated.">OnDeactivated()</a>, <a class="el" href="../../d1/d81/classpl_component.htm#a9dbf922683e28fab0c4c18cac736e7fc" title="Can be overridden for basic initialization that depends on a valid hierarchy and position.">Initialize()</a>, <a class="el" href="../../d1/d81/classpl_component.htm#a264bf60654aa3ca836e2040d639308a4" title="This method is called before the component is destroyed. A derived type can override this method to d...">Deinitialize()</a>, <a class="el" href="#a7ca3f2cceddba11ace8e0822ac18cb09" title="This method is called once for active components, at the start of the next world update,...">OnSimulationStarted()</a> </dd></dl>

<p>Reimplemented from <a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm#a5870aaf08b93b11ac982427a3ac3cc18">plJoltCharacterControllerComponent</a>.</p>

</div>
</div>
<a id="a7ca3f2cceddba11ace8e0822ac18cb09" name="a7ca3f2cceddba11ace8e0822ac18cb09"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ca3f2cceddba11ace8e0822ac18cb09">&#9670;&#160;</a></span>OnSimulationStarted()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJoltDefaultCharacterComponent::OnSimulationStarted </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This method is called once for active components, at the start of the next world update, but only when the world is simulated. </p>
<p>This is the one preferred method to setup typical game logic. In a pure game environment there is no practical difference between <a class="el" href="#a19092624a5686d47c4758fbe2ace9b80" title="This method is called when the component gets activated.">OnActivated()</a> and <a class="el" href="#a7ca3f2cceddba11ace8e0822ac18cb09" title="This method is called once for active components, at the start of the next world update,...">OnSimulationStarted()</a>, as <a class="el" href="#a7ca3f2cceddba11ace8e0822ac18cb09" title="This method is called once for active components, at the start of the next world update,...">OnSimulationStarted()</a> will be called right after <a class="el" href="#a19092624a5686d47c4758fbe2ace9b80" title="This method is called when the component gets activated.">OnActivated()</a>.</p>
<p>However, when a scene is open inside the editor, there is an important difference: <a class="el" href="#a19092624a5686d47c4758fbe2ace9b80" title="This method is called when the component gets activated.">OnActivated()</a> is called once the component was created. <a class="el" href="#a7ca3f2cceddba11ace8e0822ac18cb09" title="This method is called once for active components, at the start of the next world update,...">OnSimulationStarted()</a> is only called once the game simulation is started inside the editor. As an example, if a component starts a sound in <a class="el" href="#a19092624a5686d47c4758fbe2ace9b80" title="This method is called when the component gets activated.">OnActivated()</a>, that sound will play right after the scene has been loaded into the editor. If instead the sound gets started in <a class="el" href="#a7ca3f2cceddba11ace8e0822ac18cb09" title="This method is called once for active components, at the start of the next world update,...">OnSimulationStarted()</a>, it will only play once the user starts the game mode inside the editor.</p>
<p>Additionally, <a class="el" href="#a7ca3f2cceddba11ace8e0822ac18cb09" title="This method is called once for active components, at the start of the next world update,...">OnSimulationStarted()</a> is only ever executed once on a component, even if the <a class="el" href="../../d2/d12/classpl_world.htm" title="A world encapsulates a scene graph of game objects and various component managers and their component...">plWorld</a> pauses and resumes world simulation multiple times. Thus components that should only execute a thing exactly once, will work correctly. In contrast <a class="el" href="#a19092624a5686d47c4758fbe2ace9b80" title="This method is called when the component gets activated.">OnActivated()</a> and <a class="el" href="#a26ccea0e710ddca2212f7178dd198b50" title="This method is called when the component gets deactivated.">OnDeactivated()</a> will be executed every time the component's active state is toggled, which could re-execute the same behavior multiple times.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="#a19092624a5686d47c4758fbe2ace9b80" title="This method is called when the component gets activated.">OnActivated()</a>, <a class="el" href="#a26ccea0e710ddca2212f7178dd198b50" title="This method is called when the component gets deactivated.">OnDeactivated()</a>, <a class="el" href="../../d1/d81/classpl_component.htm#a9dbf922683e28fab0c4c18cac736e7fc" title="Can be overridden for basic initialization that depends on a valid hierarchy and position.">Initialize()</a>, <a class="el" href="../../d1/d81/classpl_component.htm#a264bf60654aa3ca836e2040d639308a4" title="This method is called before the component is destroyed. A derived type can override this method to d...">Deinitialize()</a>, <a class="el" href="#a7ca3f2cceddba11ace8e0822ac18cb09" title="This method is called once for active components, at the start of the next world update,...">OnSimulationStarted()</a> </dd></dl>

<p>Reimplemented from <a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm#a0c2635f5493661c123e2454e5a17ef93">plJoltCharacterControllerComponent</a>.</p>

</div>
</div>
<a id="ad33615c8ece3afc757d5be3dd4e9c15b" name="ad33615c8ece3afc757d5be3dd4e9c15b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad33615c8ece3afc757d5be3dd4e9c15b">&#9670;&#160;</a></span>SerializeComponent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJoltDefaultCharacterComponent::SerializeComponent </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../dc/dd6/classpl_world_writer.htm">plWorldWriter</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>inout_stream</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this to save the current state of the component to the given stream. </p>

<p>Reimplemented from <a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm#aa43aedd3d3201c881ac835f0c5d4f655">plJoltCharacterControllerComponent</a>.</p>

</div>
</div>
<a id="a36d9fc741dca1eb2c33cac8bf8fdaef1" name="a36d9fc741dca1eb2c33cac8bf8fdaef1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a36d9fc741dca1eb2c33cac8bf8fdaef1">&#9670;&#160;</a></span>TeleportCharacter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJoltDefaultCharacterComponent::TeleportCharacter </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>vGlobalFootPosition</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Instantly teleports the character to the target position. Doesn't change its rotation. </p>

<p>Reimplemented from <a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm#a4dc87ff0827ed4e1fb76c519b8f80d19">plJoltCharacterControllerComponent</a>.</p>

</div>
</div>
<a id="af65a5e8c03f818586b948ac311f1aac7" name="af65a5e8c03f818586b948ac311f1aac7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af65a5e8c03f818586b948ac311f1aac7">&#9670;&#160;</a></span>UpdateCharacter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void plJoltDefaultCharacterComponent::UpdateCharacter </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called up to once per frame, but potentially less often, if physics updates were skipped due to high framerates. </p>
<p>All shape modifications and moves should only be executed during this step. The given deltaTime should be used, rather than the world's time diff. </p>

<p>Implements <a class="el" href="../../d4/d29/classpl_jolt_character_controller_component.htm#aaefaef5d28939eab0309e748067c5a67">plJoltCharacterControllerComponent</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>Code/EnginePlugins/JoltPlugin/Character/<a class="el" href="../../d0/d05/_jolt_default_character_component_8h_source.htm">JoltDefaultCharacterComponent.h</a></li>
<li>Code/EnginePlugins/JoltPlugin/Character/Implementation/<b>JoltDefaultCharacterComponent.cpp</b></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../da/d0f/classpl_jolt_default_character_component.htm">plJoltDefaultCharacterComponent</a></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
