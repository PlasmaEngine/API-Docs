<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Plasma Engine: Code/Engine/Foundation/Math/Implementation/AllClasses_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
<link href="../../custom.css" rel="stylesheet" type="text/css"/>
<link href="../../custom-alternative.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../pl-logo-64.png"/></td>
  <td id="projectalign">
   <div id="projectname">Plasma Engine<span id="projectnumber">&#160;2.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('da/d5c/_all_classes__inl_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">AllClasses_inl.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;Foundation/Math/BoundingBox.h&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="preprocessor">#include &lt;Foundation/Math/BoundingSphere.h&gt;</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#include &lt;Foundation/Math/Mat3.h&gt;</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">#include &lt;Foundation/Math/Mat4.h&gt;</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="preprocessor">#include &lt;Foundation/Math/Plane.h&gt;</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span> </div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00010" data-start="{" data-end="}">
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno"><a class="line" href="../../df/dc5/classpl_bounding_box_template.htm#a70d6f7e6691c53ee97e9a174c290af1c">   10</a></span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../df/dc5/classpl_bounding_box_template.htm#a900860caf256eb8a3ff443bba50b3de5">plBoundingBoxTemplate&lt;Type&gt;::Contains</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate&lt;Type&gt;</a>&amp; sphere)<span class="keyword"> const</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>  <span class="keywordflow">return</span> Contains(sphere.<a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#afbbf571f0f47578ee8b66e95eda6db4a">GetBoundingBox</a>());</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>}</div>
</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span> </div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00016" data-start="{" data-end="}">
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno"><a class="line" href="../../df/dc5/classpl_bounding_box_template.htm#a2accb42d6c8bff10b022ac9f9ac6630b">   16</a></span>PL_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../df/dc5/classpl_bounding_box_template.htm#a976c01e61a25d604e3857c4d2ed71c9a">plBoundingBoxTemplate&lt;Type&gt;::Overlaps</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate&lt;Type&gt;</a>&amp; sphere)<span class="keyword"> const</span></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>  <span class="comment">// check whether the closest point between box and sphere is inside the sphere (it is definitely inside the box)</span></div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>  <span class="keywordflow">return</span> sphere.<a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#af9fd1df82a6d6e0e27ed2dd857b9c29b">Contains</a>(GetClampedPoint(sphere.m_vCenter));</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>}</div>
</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span> </div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00023" data-start="{" data-end="}">
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno"><a class="line" href="../../df/dc5/classpl_bounding_box_template.htm#a7139f5726a45c41b5cf7e9d4e7e4b130">   23</a></span><span class="keyword">inline</span> Type <a class="code hl_function" href="../../df/dc5/classpl_bounding_box_template.htm#a486b7b54c36a5774164f1d05f21372ae">plBoundingBoxTemplate&lt;Type&gt;::GetDistanceTo</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate&lt;Type&gt;</a>&amp; sphere)<span class="keyword"> const</span></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>  <span class="keywordflow">return</span> (GetClampedPoint(sphere.m_vCenter) - sphere.m_vCenter).GetLength() - sphere.m_fRadius;</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>}</div>
</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span> </div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00029" data-start="{" data-end="}">
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno"><a class="line" href="../../df/dc5/classpl_bounding_box_template.htm#ace07e9e8ac46726c5f0002b2f0cf2652">   29</a></span><span class="keyword">inline</span> <span class="keyword">const</span> <a class="code hl_class" href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate&lt;Type&gt;</a> <a class="code hl_function" href="../../df/dc5/classpl_bounding_box_template.htm#ace07e9e8ac46726c5f0002b2f0cf2652">plBoundingBoxTemplate&lt;Type&gt;::GetBoundingSphere</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a23461a02721b01c4bc884ae28ab03e51">plBoundingSphereTemplate&lt;Type&gt;::MakeFromCenterAndRadius</a>(GetCenter(), (m_vMax - m_vMin).GetLength() * (Type)0.5);</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span>}</div>
</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span> </div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00035" data-start="{" data-end="}">
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#ad4a136efb3698923a2ec74309e8d1141">   35</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#ad73214e2fec34b11ab3d31d6aed63dcd">plBoundingSphereTemplate&lt;Type&gt;::ExpandToInclude</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/dc5/classpl_bounding_box_template.htm">plBoundingBoxTemplate&lt;Type&gt;</a>&amp; rhs)</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>{</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>  <span class="comment">// compute the min and max extends of the AABB relative to the sphere (sphere center is the new origin)</span></div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> vDiffMax = rhs.m_vMax - m_vCenter;</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> vDiffMin = rhs.m_vMin - m_vCenter;</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span> </div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span>  <span class="comment">// compute the absolute distance to each AABB extremum, per axis</span></div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> vDiffMaxAbs(<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#abd0ef20e6710b240c9833acdf6f2f8d7">plMath::Abs</a>(vDiffMax.x), <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#abd0ef20e6710b240c9833acdf6f2f8d7">plMath::Abs</a>(vDiffMax.y), <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#abd0ef20e6710b240c9833acdf6f2f8d7">plMath::Abs</a>(vDiffMax.z));</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> vDiffMinAbs(<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#abd0ef20e6710b240c9833acdf6f2f8d7">plMath::Abs</a>(vDiffMin.x), <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#abd0ef20e6710b240c9833acdf6f2f8d7">plMath::Abs</a>(vDiffMin.y), <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#abd0ef20e6710b240c9833acdf6f2f8d7">plMath::Abs</a>(vDiffMin.z));</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span> </div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>  <span class="comment">// take the maximum distance for each axis, to compute the point that is the farthest away from the sphere</span></div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> vMostDistantPoint = vDiffMinAbs.<a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a61632cae2206b10fbf8c06420a1d90fe">CompMax</a>(vDiffMaxAbs);</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span> </div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>  <span class="keyword">const</span> Type fDistSQR = vMostDistantPoint.<a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a572854a70177ef1a0f0b6c49ecb27843">GetLengthSquared</a>();</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span> </div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>  <span class="keywordflow">if</span> (<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a25ddcfae0bd88d04d015b266a236065f">plMath::Square</a>(m_fRadius) &lt; fDistSQR)</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>    m_fRadius = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#aae02023b382e3990f9ebf91f40473310">plMath::Sqrt</a>(fDistSQR);</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>}</div>
</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span> </div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00055" data-start="{" data-end="}">
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a1f3428c020a40d4abb7f3a69cad861d0">   55</a></span>Type <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a7f58c44afb68fa76264f0efcf11cbbb1">plBoundingSphereTemplate&lt;Type&gt;::GetDistanceTo</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/dc5/classpl_bounding_box_template.htm">plBoundingBoxTemplate&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> vPointOnBox = rhs.<a class="code hl_function" href="../../df/dc5/classpl_bounding_box_template.htm#a80af6b71f1137db09d5b2796e32bd407">GetClampedPoint</a>(m_vCenter);</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span> </div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>  <span class="keywordflow">return</span> GetDistanceTo(vPointOnBox);</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno"><a class="line" href="../../d5/d81/classpl_mat3_template.htm#a3b464e542db50f5631c0c0ae8067a284">   60</a></span>}</div>
</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span> </div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00063" data-start="{" data-end="}">
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#aeb3131a4d8fd0d33bfb0c5723c59c4c4">   63</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#af9fd1df82a6d6e0e27ed2dd857b9c29b">plBoundingSphereTemplate&lt;Type&gt;::Contains</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/dc5/classpl_bounding_box_template.htm">plBoundingBoxTemplate&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>  <span class="comment">// compute the min and max extends of the AABB relative to the sphere (sphere center is the new origin)</span></div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> vDiffMax = rhs.m_vMax - m_vCenter;</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> vDiffMin = rhs.m_vMin - m_vCenter;</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span> </div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>  <span class="comment">// compute the absolute distance to each AABB extremum, per axis</span></div>
<div class="foldopen" id="foldopen00070" data-start="{" data-end="}">
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#ad4a136efb3698923a2ec74309e8d1141">   70</a></span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> vDiffMaxAbs(<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#abd0ef20e6710b240c9833acdf6f2f8d7">plMath::Abs</a>(vDiffMax.x), <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#abd0ef20e6710b240c9833acdf6f2f8d7">plMath::Abs</a>(vDiffMax.y), <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#abd0ef20e6710b240c9833acdf6f2f8d7">plMath::Abs</a>(vDiffMax.z));</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> vDiffMinAbs(<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#abd0ef20e6710b240c9833acdf6f2f8d7">plMath::Abs</a>(vDiffMin.x), <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#abd0ef20e6710b240c9833acdf6f2f8d7">plMath::Abs</a>(vDiffMin.y), <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#abd0ef20e6710b240c9833acdf6f2f8d7">plMath::Abs</a>(vDiffMin.z));</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span> </div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>  <span class="comment">// take the maximum distance for each axis, to compute the point that is the farthest away from the sphere</span></div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3</a> vMostDistantPoint = vDiffMinAbs.<a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a61632cae2206b10fbf8c06420a1d90fe">CompMax</a>(vDiffMaxAbs);</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span> </div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>  <span class="comment">// if the squared length of that point is still smaller than the sphere radius, it is inside the sphere</span></div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>  <span class="comment">// and thus the whole AABB is inside the sphere</span></div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>  <span class="keywordflow">return</span> vMostDistantPoint.<a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a572854a70177ef1a0f0b6c49ecb27843">GetLengthSquared</a>() &lt;= m_fRadius * m_fRadius;</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>}</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span> </div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00082" data-start="{" data-end="}">
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#af9c1489b81e4bf712fb223673be96f9e">   82</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#ad5f22a515ddbc6d5d923dc2b845b0de5">plBoundingSphereTemplate&lt;Type&gt;::Overlaps</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/dc5/classpl_bounding_box_template.htm">plBoundingBoxTemplate&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>  <span class="keywordflow">return</span> Contains(rhs.<a class="code hl_function" href="../../df/dc5/classpl_bounding_box_template.htm#a80af6b71f1137db09d5b2796e32bd407">GetClampedPoint</a>(m_vCenter));</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>}</div>
</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span> </div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00088" data-start="{" data-end="}">
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#afbbf571f0f47578ee8b66e95eda6db4a">   88</a></span><span class="keyword">const</span> <a class="code hl_class" href="../../df/dc5/classpl_bounding_box_template.htm">plBoundingBoxTemplate&lt;Type&gt;</a> <a class="code hl_function" href="../../d5/dc0/classpl_bounding_sphere_template.htm#afbbf571f0f47578ee8b66e95eda6db4a">plBoundingSphereTemplate&lt;Type&gt;::GetBoundingBox</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span><span class="keyword"></span>{</div>
<div class="foldopen" id="foldopen00090" data-start="{" data-end="}">
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno"><a class="line" href="../../d4/d65/structpl_plane_template.htm#a0c8dab1831cd7ab136cc744703f295ae">   90</a></span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../df/dc5/classpl_bounding_box_template.htm#a799f7112093561712220b7b4a9314976">plBoundingBoxTemplate&lt;Type&gt;::MakeFromMinMax</a>(m_vCenter - <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>(m_fRadius), m_vCenter + <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>(m_fRadius));</div>
<div class="foldopen" id="foldopen00091" data-start="{" data-end="}">
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno"><a class="line" href="../../d5/d81/classpl_mat3_template.htm#a47e9ec129207990c918ca5c9d07d31d5">   91</a></span>}</div>
<div class="foldopen" id="foldopen00092" data-start="{" data-end="}">
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno"><a class="line" href="../../df/dc5/classpl_bounding_box_template.htm#a70d6f7e6691c53ee97e9a174c290af1c">   92</a></span> </div>
<div class="foldopen" id="foldopen00093" data-start="{" data-end="}">
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno"><a class="line" href="../../d4/d65/structpl_plane_template.htm#a4e5cb4d5312b93d67818be1920443ae4">   93</a></span> </div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00095" data-start="{" data-end="}">
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno"><a class="line" href="../../d4/d65/structpl_plane_template.htm#ad92f9ac5f43e23f9e0801ef7bd9d306c">   95</a></span><a class="code hl_enumeration" href="../../d1/da1/structpl_position_on_plane.htm#ac3747413b6d46cfdd51016a898716b9c">plPositionOnPlane::Enum</a> <a class="code hl_function" href="../../d4/d65/structpl_plane_template.htm#a2fbc68ecd044c6d8731757ec39b7dbfa">plPlaneTemplate&lt;Type&gt;::GetObjectPosition</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate&lt;Type&gt;</a>&amp; sphere)<span class="keyword"> const</span></div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>  <span class="keyword">const</span> Type fDist = GetDistanceTo(sphere.m_vCenter);</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span> </div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>  <span class="keywordflow">if</span> (fDist &gt;= sphere.m_fRadius)</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>    <span class="keywordflow">return</span> <a class="code hl_enumvalue" href="../../d1/da1/structpl_position_on_plane.htm#ac3747413b6d46cfdd51016a898716b9caf67c508c4d39ee5613dcd0c07a23b2be">plPositionOnPlane::Front</a>;</div>
<div class="foldopen" id="foldopen00101" data-start="{" data-end="}">
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno"><a class="line" href="../../df/dc5/classpl_bounding_box_template.htm#a2accb42d6c8bff10b022ac9f9ac6630b">  101</a></span> </div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>  <span class="keywordflow">if</span> (-fDist &gt;= sphere.m_fRadius)</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>    <span class="keywordflow">return</span> <a class="code hl_enumvalue" href="../../d1/da1/structpl_position_on_plane.htm#ac3747413b6d46cfdd51016a898716b9ca4e2adf6c3dd5926ecb4865bd3f6d2909">plPositionOnPlane::Back</a>;</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span> </div>
<div class="foldopen" id="foldopen00105" data-start="{" data-end="}">
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#a1f3428c020a40d4abb7f3a69cad861d0">  105</a></span>  <span class="keywordflow">return</span> <a class="code hl_enumvalue" href="../../d1/da1/structpl_position_on_plane.htm#ac3747413b6d46cfdd51016a898716b9ca0f1f61f8e0ec2c7993be56e9b8f76412">plPositionOnPlane::Spanning</a>;</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>}</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span> </div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00109" data-start="{" data-end="}">
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno"><a class="line" href="../../d4/d65/structpl_plane_template.htm#a43d707c2df3a0f28abcc11834feb7c8c">  109</a></span><a class="code hl_enumeration" href="../../d1/da1/structpl_position_on_plane.htm#ac3747413b6d46cfdd51016a898716b9c">plPositionOnPlane::Enum</a> <a class="code hl_function" href="../../d4/d65/structpl_plane_template.htm#a2fbc68ecd044c6d8731757ec39b7dbfa">plPlaneTemplate&lt;Type&gt;::GetObjectPosition</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/dc5/classpl_bounding_box_template.htm">plBoundingBoxTemplate&lt;Type&gt;</a>&amp; box)<span class="keyword"> const</span></div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>  <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> vPos = box.m_vMin;</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>  <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> vNeg = box.m_vMax;</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span> </div>
<div class="foldopen" id="foldopen00114" data-start="{" data-end="}">
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno"><a class="line" href="../../d4/d65/structpl_plane_template.htm#ad92f9ac5f43e23f9e0801ef7bd9d306c">  114</a></span>  <span class="keywordflow">if</span> (m_vNormal.x &gt;= (Type)0)</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>  {</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>    vPos.x = box.m_vMax.x;</div>
<div class="foldopen" id="foldopen00117" data-start="{" data-end="}">
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno"><a class="line" href="../../d4/d65/structpl_plane_template.htm#a43d707c2df3a0f28abcc11834feb7c8c">  117</a></span>    vNeg.x = box.m_vMin.x;</div>
<div class="foldopen" id="foldopen00118" data-start="{" data-end="}">
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno"><a class="line" href="../../d4/dbd/classpl_mat4_template.htm#aec0b223f8329fe869fadc2e921a7e219">  118</a></span>  }</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span> </div>
<div class="foldopen" id="foldopen00120" data-start="{" data-end="}">
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#aeb3131a4d8fd0d33bfb0c5723c59c4c4">  120</a></span>  <span class="keywordflow">if</span> (m_vNormal.y &gt;= (Type)0)</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>  {</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>    vPos.y = box.m_vMax.y;</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>    vNeg.y = box.m_vMin.y;</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>  }</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span> </div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>  <span class="keywordflow">if</span> (m_vNormal.z &gt;= (Type)0)</div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>  {</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>    vPos.z = box.m_vMax.z;</div>
<div class="foldopen" id="foldopen00129" data-start="{" data-end="}">
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#af9c1489b81e4bf712fb223673be96f9e">  129</a></span>    vNeg.z = box.m_vMin.z;</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>  }</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span> </div>
<div class="foldopen" id="foldopen00132" data-start="{" data-end="}">
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno"><a class="line" href="../../d5/dc0/classpl_bounding_sphere_template.htm#afbbf571f0f47578ee8b66e95eda6db4a">  132</a></span>  <span class="keywordflow">if</span> (GetDistanceTo(vPos) &lt;= (Type)0)</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>    <span class="keywordflow">return</span> <a class="code hl_enumvalue" href="../../d1/da1/structpl_position_on_plane.htm#ac3747413b6d46cfdd51016a898716b9ca4e2adf6c3dd5926ecb4865bd3f6d2909">plPositionOnPlane::Back</a>;</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span> </div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>  <span class="keywordflow">if</span> (GetDistanceTo(vNeg) &gt;= (Type)0)</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>    <span class="keywordflow">return</span> <a class="code hl_enumvalue" href="../../d1/da1/structpl_position_on_plane.htm#ac3747413b6d46cfdd51016a898716b9caf67c508c4d39ee5613dcd0c07a23b2be">plPositionOnPlane::Front</a>;</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span> </div>
<div class="foldopen" id="foldopen00138" data-start="{" data-end="}">
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno"><a class="line" href="../../df/dc5/classpl_bounding_box_template.htm#a7139f5726a45c41b5cf7e9d4e7e4b130">  138</a></span>  <span class="keywordflow">return</span> <a class="code hl_enumvalue" href="../../d1/da1/structpl_position_on_plane.htm#ac3747413b6d46cfdd51016a898716b9ca0f1f61f8e0ec2c7993be56e9b8f76412">plPositionOnPlane::Spanning</a>;</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>}</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span> </div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00142" data-start="{" data-end="}">
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno"><a class="line" href="../../d4/d65/structpl_plane_template.htm#a0c8dab1831cd7ab136cc744703f295ae">  142</a></span>Type <a class="code hl_function" href="../../d4/d65/structpl_plane_template.htm#ad0b95ea0712cee23dec49e2a5dac3df6">plPlaneTemplate&lt;Type&gt;::GetMinimumDistanceTo</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/dc5/classpl_bounding_box_template.htm">plBoundingBoxTemplate&lt;Type&gt;</a>&amp; box)<span class="keyword"> const</span></div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>  <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> vNeg = box.m_vMax;</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span> </div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>  <span class="keywordflow">if</span> (m_vNormal.x &gt;= (Type)0)</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>  {</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>    vNeg.x = box.m_vMin.x;</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>  }</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span> </div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>  <span class="keywordflow">if</span> (m_vNormal.y &gt;= (Type)0)</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>  {</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>    vNeg.y = box.m_vMin.y;</div>
<div class="foldopen" id="foldopen00154" data-start="{" data-end="}">
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno"><a class="line" href="../../df/dc5/classpl_bounding_box_template.htm#ace07e9e8ac46726c5f0002b2f0cf2652">  154</a></span>  }</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span> </div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>  <span class="keywordflow">if</span> (m_vNormal.z &gt;= (Type)0)</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>  {</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>    vNeg.z = box.m_vMin.z;</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>  }</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span> </div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>  <span class="keywordflow">return</span> GetDistanceTo(vNeg);</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>}</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span> </div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00165" data-start="{" data-end="}">
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno"><a class="line" href="../../d4/d65/structpl_plane_template.htm#a4e5cb4d5312b93d67818be1920443ae4">  165</a></span>Type <a class="code hl_function" href="../../d4/d65/structpl_plane_template.htm#a4e5cb4d5312b93d67818be1920443ae4">plPlaneTemplate&lt;Type&gt;::GetMaximumDistanceTo</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/dc5/classpl_bounding_box_template.htm">plBoundingBoxTemplate&lt;Type&gt;</a>&amp; box)<span class="keyword"> const</span></div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>  <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a> vPos = box.m_vMin;</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span> </div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>  <span class="keywordflow">if</span> (m_vNormal.x &gt;= (Type)0)</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>  {</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>    vPos.x = box.m_vMax.x;</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>  }</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span> </div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>  <span class="keywordflow">if</span> (m_vNormal.y &gt;= (Type)0)</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>  {</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>    vPos.y = box.m_vMax.y;</div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>  }</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span> </div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>  <span class="keywordflow">if</span> (m_vNormal.z &gt;= (Type)0)</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>  {</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>    vPos.z = box.m_vMax.z;</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>  }</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span> </div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>  <span class="keywordflow">return</span> GetDistanceTo(vPos);</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>}</div>
</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span> </div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span> </div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00189" data-start="{" data-end="}">
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno"><a class="line" href="../../d5/d81/classpl_mat3_template.htm#a3b464e542db50f5631c0c0ae8067a284">  189</a></span><a class="code hl_class" href="../../d5/d81/classpl_mat3_template.htm">plMat3Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d5/d81/classpl_mat3_template.htm#a3b464e542db50f5631c0c0ae8067a284">plMat3Template&lt;Type&gt;::MakeAxisRotation</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; vAxis, <a class="code hl_class" href="../../d4/dfd/classpl_angle.htm">plAngle</a> angle)</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>{</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>  PL_ASSERT_DEBUG(vAxis.<a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a48f7479d10c24b443b7df80df5407cef">IsNormalized</a>(0.1f), <span class="stringliteral">&quot;vAxis must be normalized.&quot;</span>);</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span> </div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>  <span class="keyword">const</span> Type cos = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ac9493ece7e4354a37df97ed08bb26eac">plMath::Cos</a>(angle);</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>  <span class="keyword">const</span> Type sin = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a3c10f39a9283445ab6001096104bb153">plMath::Sin</a>(angle);</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>  <span class="keyword">const</span> Type oneminuscos = (Type)1 - cos;</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span> </div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>  <span class="keyword">const</span> Type xy = vAxis.x * vAxis.y;</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>  <span class="keyword">const</span> Type xz = vAxis.x * vAxis.z;</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>  <span class="keyword">const</span> Type yz = vAxis.y * vAxis.z;</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span> </div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>  <span class="keyword">const</span> Type xsin = vAxis.x * sin;</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>  <span class="keyword">const</span> Type ysin = vAxis.y * sin;</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>  <span class="keyword">const</span> Type zsin = vAxis.z * sin;</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span> </div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>  <span class="keyword">const</span> Type onecos_xy = oneminuscos * xy;</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>  <span class="keyword">const</span> Type onecos_xz = oneminuscos * xz;</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>  <span class="keyword">const</span> Type onecos_yz = oneminuscos * yz;</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span> </div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span>  <a class="code hl_class" href="../../d5/d81/classpl_mat3_template.htm">plMat3Template&lt;Type&gt;</a> res;</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span> </div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span>  <span class="comment">// Column 1</span></div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>  res.Element(0, 0) = cos + (oneminuscos * (vAxis.x * vAxis.x));</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>  res.Element(0, 1) = onecos_xy + zsin;</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>  res.Element(0, 2) = onecos_xz - ysin;</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span> </div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>  <span class="comment">// Column 2  )</span></div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span>  res.Element(1, 0) = onecos_xy - zsin;</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>  res.Element(1, 1) = cos + (oneminuscos * (vAxis.y * vAxis.y));</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>  res.Element(1, 2) = onecos_yz + xsin;</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span> </div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>  <span class="comment">// Column 3  )</span></div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>  res.Element(2, 0) = onecos_xz + ysin;</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>  res.Element(2, 1) = onecos_yz - xsin;</div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span>  res.Element(2, 2) = cos + (oneminuscos * (vAxis.z * vAxis.z));</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span> </div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>  <span class="keywordflow">return</span> res;</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>}</div>
</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span> </div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00230" data-start="{" data-end="}">
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno"><a class="line" href="../../d5/d81/classpl_mat3_template.htm#a47e9ec129207990c918ca5c9d07d31d5">  230</a></span><a class="code hl_struct" href="../../da/dce/structpl_result.htm">plResult</a> <a class="code hl_function" href="../../d5/d81/classpl_mat3_template.htm#a47e9ec129207990c918ca5c9d07d31d5">plMat3Template&lt;Type&gt;::Invert</a>(Type fEpsilon)</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>{</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>  <span class="keyword">const</span> Type fDet = Element(0, 0) * (Element(2, 2) * Element(1, 1) - Element(1, 2) * Element(2, 1)) -</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>                    Element(0, 1) * (Element(2, 2) * Element(1, 0) - Element(1, 2) * Element(2, 0)) +</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span>                    Element(0, 2) * (Element(2, 1) * Element(1, 0) - Element(1, 1) * Element(2, 0));</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span> </div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>  <span class="keywordflow">if</span> (<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ab41c015ef2ef7ea68f915082545755ae">plMath::IsZero</a>(fDet, fEpsilon))</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span>    <span class="keywordflow">return</span> PL_FAILURE;</div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span> </div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>  <span class="keyword">const</span> Type fOneDivDet = (Type)1 / fDet;</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span> </div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>  <a class="code hl_class" href="../../d5/d81/classpl_mat3_template.htm">plMat3Template&lt;Type&gt;</a> Inverse;</div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span> </div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>  Inverse.Element(0, 0) = (Element(2, 2) * Element(1, 1) - Element(1, 2) * Element(2, 1));</div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>  Inverse.Element(0, 1) = -(Element(2, 2) * Element(0, 1) - Element(0, 2) * Element(2, 1));</div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>  Inverse.Element(0, 2) = (Element(1, 2) * Element(0, 1) - Element(0, 2) * Element(1, 1));</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span> </div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>  Inverse.Element(1, 0) = -(Element(2, 2) * Element(1, 0) - Element(1, 2) * Element(2, 0));</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>  Inverse.Element(1, 1) = (Element(2, 2) * Element(0, 0) - Element(0, 2) * Element(2, 0));</div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span>  Inverse.Element(1, 2) = -(Element(1, 2) * Element(0, 0) - Element(0, 2) * Element(1, 0));</div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span> </div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>  Inverse.Element(2, 0) = (Element(2, 1) * Element(1, 0) - Element(1, 1) * Element(2, 0));</div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>  Inverse.Element(2, 1) = -(Element(2, 1) * Element(0, 0) - Element(0, 1) * Element(2, 0));</div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span>  Inverse.Element(2, 2) = (Element(1, 1) * Element(0, 0) - Element(0, 1) * Element(1, 0));</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span> </div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span>  *<span class="keyword">this</span> = Inverse * fOneDivDet;</div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span>  <span class="keywordflow">return</span> PL_SUCCESS;</div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span>}</div>
</div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span> </div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00260" data-start="{" data-end="}">
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno"><a class="line" href="../../d4/dbd/classpl_mat4_template.htm#a199478276094229de565b469ab0c22e5">  260</a></span><a class="code hl_class" href="../../d4/dbd/classpl_mat4_template.htm">plMat4Template&lt;Type&gt;</a> <a class="code hl_function" href="../../d4/dbd/classpl_mat4_template.htm#a199478276094229de565b469ab0c22e5">plMat4Template&lt;Type&gt;::MakeAxisRotation</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt;Type&gt;</a>&amp; vAxis, <a class="code hl_class" href="../../d4/dfd/classpl_angle.htm">plAngle</a> angle)</div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span>{</div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span>  PL_ASSERT_DEBUG(vAxis.<a class="code hl_function" href="../../df/d1f/classpl_vec3_template.htm#a48f7479d10c24b443b7df80df5407cef">IsNormalized</a>(), <span class="stringliteral">&quot;vAxis must be normalized.&quot;</span>);</div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span> </div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>  <span class="keyword">const</span> Type cos = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ac9493ece7e4354a37df97ed08bb26eac">plMath::Cos</a>(angle);</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span>  <span class="keyword">const</span> Type sin = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a3c10f39a9283445ab6001096104bb153">plMath::Sin</a>(angle);</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span>  <span class="keyword">const</span> Type oneminuscos = (Type)1 - cos;</div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span> </div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span>  <span class="keyword">const</span> Type xy = vAxis.x * vAxis.y;</div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>  <span class="keyword">const</span> Type xz = vAxis.x * vAxis.z;</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span>  <span class="keyword">const</span> Type yz = vAxis.y * vAxis.z;</div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span> </div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span>  <span class="keyword">const</span> Type xsin = vAxis.x * sin;</div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span>  <span class="keyword">const</span> Type ysin = vAxis.y * sin;</div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span>  <span class="keyword">const</span> Type zsin = vAxis.z * sin;</div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span> </div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span>  <span class="keyword">const</span> Type onecos_xy = oneminuscos * xy;</div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span>  <span class="keyword">const</span> Type onecos_xz = oneminuscos * xz;</div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span>  <span class="keyword">const</span> Type onecos_yz = oneminuscos * yz;</div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span> </div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span>  <a class="code hl_class" href="../../d4/dbd/classpl_mat4_template.htm">plMat4Template&lt;Type&gt;</a> res;</div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span> </div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span>  <span class="comment">// Column 1</span></div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span>  res.Element(0, 0) = cos + (oneminuscos * (vAxis.x * vAxis.x));</div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span>  res.Element(0, 1) = onecos_xy + zsin;</div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span>  res.Element(0, 2) = onecos_xz - ysin;</div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span>  res.Element(0, 3) = 0;</div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span> </div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span>  <span class="comment">// Column 2</span></div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span>  res.Element(1, 0) = onecos_xy - zsin;</div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span>  res.Element(1, 1) = cos + (oneminuscos * (vAxis.y * vAxis.y));</div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span>  res.Element(1, 2) = onecos_yz + xsin;</div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span>  res.Element(1, 3) = 0;</div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span> </div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span>  <span class="comment">// Column 3</span></div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span>  res.Element(2, 0) = onecos_xz + ysin;</div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span>  res.Element(2, 1) = onecos_yz - xsin;</div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span>  res.Element(2, 2) = cos + (oneminuscos * (vAxis.z * vAxis.z));</div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span>  res.Element(2, 3) = 0;</div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span> </div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span>  <span class="comment">// Column 4</span></div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span>  res.Element(3, 0) = 0;</div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span>  res.Element(3, 1) = 0;</div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span>  res.Element(3, 2) = 0;</div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span>  res.Element(3, 3) = 1;</div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span> </div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span>  <span class="keywordflow">return</span> res;</div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span>}</div>
</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span> </div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00310" data-start="{" data-end="}">
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno"><a class="line" href="../../d4/dbd/classpl_mat4_template.htm#aec0b223f8329fe869fadc2e921a7e219">  310</a></span><a class="code hl_struct" href="../../da/dce/structpl_result.htm">plResult</a> <a class="code hl_function" href="../../d4/dbd/classpl_mat4_template.htm#aec0b223f8329fe869fadc2e921a7e219">plMat4Template&lt;Type&gt;::Invert</a>(Type fEpsilon)</div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span>{</div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span>  <a class="code hl_class" href="../../d4/dbd/classpl_mat4_template.htm">plMat4Template&lt;Type&gt;</a> Inverse;</div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span> </div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span>  <span class="keyword">const</span> Type fDet = GetDeterminantOf4x4Matrix(*<span class="keyword">this</span>);</div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span> </div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span>  <span class="keywordflow">if</span> (<a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#ab41c015ef2ef7ea68f915082545755ae">plMath::IsZero</a>(fDet, fEpsilon))</div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span>    <span class="keywordflow">return</span> PL_FAILURE;</div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span> </div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span>  Type fOneDivDet = <a class="code hl_function" href="../../d1/dbc/namespacepl_math.htm#a5e363339c8dfc76221563df0bf2302b3">plMath::Invert</a>(fDet);</div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span> </div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span>  <span class="keywordflow">for</span> (plInt32 i = 0; i &lt; 4; ++i)</div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span>  {</div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span> </div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span>    Inverse.Element(i, 0) = GetDeterminantOf3x3SubMatrix(*<span class="keyword">this</span>, i, 0) * fOneDivDet;</div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span>    fOneDivDet = -fOneDivDet;</div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span>    Inverse.Element(i, 1) = GetDeterminantOf3x3SubMatrix(*<span class="keyword">this</span>, i, 1) * fOneDivDet;</div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span>    fOneDivDet = -fOneDivDet;</div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span>    Inverse.Element(i, 2) = GetDeterminantOf3x3SubMatrix(*<span class="keyword">this</span>, i, 2) * fOneDivDet;</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span>    fOneDivDet = -fOneDivDet;</div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span>    Inverse.Element(i, 3) = GetDeterminantOf3x3SubMatrix(*<span class="keyword">this</span>, i, 3) * fOneDivDet;</div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span>  }</div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span> </div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span>  *<span class="keyword">this</span> = Inverse;</div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span>  <span class="keywordflow">return</span> PL_SUCCESS;</div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span>}</div>
</div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span> </div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span> </div>
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno">  339</span><span class="comment">// static</span></div>
<div class="line"><a id="l00340" name="l00340"></a><span class="lineno">  340</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="foldopen" id="foldopen00341" data-start="{" data-end="}">
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno"><a class="line" href="../../dc/d4d/structpl_comparison_operator.htm#a07fe18fc2f998c0dc9e79716dabd7297">  341</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../dc/d4d/structpl_comparison_operator.htm#a07fe18fc2f998c0dc9e79716dabd7297">plComparisonOperator::Compare</a>(plComparisonOperator::Enum cmp, <span class="keyword">const</span> T&amp; a, <span class="keyword">const</span> T&amp; b)</div>
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno">  342</span>{</div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span>  <span class="keywordflow">switch</span> (cmp)</div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span>  {</div>
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno">  345</span>    <span class="keywordflow">case</span> plComparisonOperator::Equal:</div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span>      <span class="keywordflow">return</span> a == b;</div>
<div class="line"><a id="l00347" name="l00347"></a><span class="lineno">  347</span>    <span class="keywordflow">case</span> plComparisonOperator::NotEqual:</div>
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno">  348</span>      <span class="keywordflow">return</span> !(a == b);</div>
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno">  349</span>    <span class="keywordflow">case</span> plComparisonOperator::Less:</div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span>      <span class="keywordflow">return</span> a &lt; b;</div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span>    <span class="keywordflow">case</span> plComparisonOperator::LessEqual:</div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span>      <span class="keywordflow">return</span> !(b &lt; a);</div>
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno">  353</span>    <span class="keywordflow">case</span> plComparisonOperator::Greater:</div>
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno">  354</span>      <span class="keywordflow">return</span> b &lt; a;</div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno">  355</span>    <span class="keywordflow">case</span> plComparisonOperator::GreaterEqual:</div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span>      <span class="keywordflow">return</span> !(a &lt; b);</div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span> </div>
<div class="line"><a id="l00358" name="l00358"></a><span class="lineno">  358</span>      PL_DEFAULT_CASE_NOT_IMPLEMENTED;</div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span>  }</div>
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno">  360</span> </div>
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno">  361</span>  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno">  362</span>}</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="ttc" id="aclasspl_angle_htm"><div class="ttname"><a href="../../d4/dfd/classpl_angle.htm">plAngle</a></div><div class="ttdoc">Float wrapper struct for a safe usage and conversions of angles.</div><div class="ttdef"><b>Definition</b> Angle.h:10</div></div>
<div class="ttc" id="aclasspl_bounding_box_template_htm"><div class="ttname"><a href="../../df/dc5/classpl_bounding_box_template.htm">plBoundingBoxTemplate</a></div><div class="ttdoc">An axis-aligned bounding box implementation.</div><div class="ttdef"><b>Definition</b> BoundingBox.h:12</div></div>
<div class="ttc" id="aclasspl_bounding_box_template_htm_a486b7b54c36a5774164f1d05f21372ae"><div class="ttname"><a href="../../df/dc5/classpl_bounding_box_template.htm#a486b7b54c36a5774164f1d05f21372ae">plBoundingBoxTemplate::GetDistanceTo</a></div><div class="ttdeci">Type GetDistanceTo(const plVec3Template&lt; Type &gt; &amp;vPoint) const</div><div class="ttdoc">Returns the minimum distance from the box's surface to the point. Zero if the point is inside the box...</div><div class="ttdef"><b>Definition</b> BoundingBox_inl.h:324</div></div>
<div class="ttc" id="aclasspl_bounding_box_template_htm_a799f7112093561712220b7b4a9314976"><div class="ttname"><a href="../../df/dc5/classpl_bounding_box_template.htm#a799f7112093561712220b7b4a9314976">plBoundingBoxTemplate::MakeFromMinMax</a></div><div class="ttdeci">static plBoundingBoxTemplate&lt; Type &gt; MakeFromMinMax(const plVec3Template&lt; Type &gt; &amp;vMin, const plVec3Template&lt; Type &gt; &amp;vMax)</div><div class="ttdoc">Creates a box with the given minimum and maximum values.</div><div class="ttdef"><b>Definition</b> BoundingBox_inl.h:42</div></div>
<div class="ttc" id="aclasspl_bounding_box_template_htm_a80af6b71f1137db09d5b2796e32bd407"><div class="ttname"><a href="../../df/dc5/classpl_bounding_box_template.htm#a80af6b71f1137db09d5b2796e32bd407">plBoundingBoxTemplate::GetClampedPoint</a></div><div class="ttdeci">const plVec3Template&lt; Type &gt; GetClampedPoint(const plVec3Template&lt; Type &gt; &amp;vPoint) const</div><div class="ttdoc">The given point is clamped to the volume of the box, i.e. it will be either inside the box or on its ...</div><div class="ttdef"><b>Definition</b> BoundingBox_inl.h:318</div></div>
<div class="ttc" id="aclasspl_bounding_box_template_htm_a900860caf256eb8a3ff443bba50b3de5"><div class="ttname"><a href="../../df/dc5/classpl_bounding_box_template.htm#a900860caf256eb8a3ff443bba50b3de5">plBoundingBoxTemplate::Contains</a></div><div class="ttdeci">bool Contains(const plVec3Template&lt; Type &gt; &amp;vPoint) const</div><div class="ttdoc">Checks whether the given point is inside the box.</div><div class="ttdef"><b>Definition</b> BoundingBox_inl.h:162</div></div>
<div class="ttc" id="aclasspl_bounding_box_template_htm_a976c01e61a25d604e3857c4d2ed71c9a"><div class="ttname"><a href="../../df/dc5/classpl_bounding_box_template.htm#a976c01e61a25d604e3857c4d2ed71c9a">plBoundingBoxTemplate::Overlaps</a></div><div class="ttdeci">bool Overlaps(const plBoundingBoxTemplate &amp;rhs) const</div><div class="ttdoc">Checks whether this box overlaps with the given box.</div><div class="ttdef"><b>Definition</b> BoundingBox_inl.h:197</div></div>
<div class="ttc" id="aclasspl_bounding_box_template_htm_ace07e9e8ac46726c5f0002b2f0cf2652"><div class="ttname"><a href="../../df/dc5/classpl_bounding_box_template.htm#ace07e9e8ac46726c5f0002b2f0cf2652">plBoundingBoxTemplate::GetBoundingSphere</a></div><div class="ttdeci">const plBoundingSphereTemplate&lt; Type &gt; GetBoundingSphere() const</div><div class="ttdoc">Returns a bounding sphere that encloses this box.</div><div class="ttdef"><b>Definition</b> AllClasses_inl.h:29</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm">plBoundingSphereTemplate</a></div><div class="ttdoc">An implementation of a bounding sphere.</div><div class="ttdef"><b>Definition</b> BoundingSphere.h:11</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_a23461a02721b01c4bc884ae28ab03e51"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#a23461a02721b01c4bc884ae28ab03e51">plBoundingSphereTemplate::MakeFromCenterAndRadius</a></div><div class="ttdeci">static plBoundingSphereTemplate&lt; Type &gt; MakeFromCenterAndRadius(const plVec3Template&lt; Type &gt; &amp;vCenter, Type fRadius)</div><div class="ttdoc">Creates a sphere with the provided center and radius.</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:35</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_a7f58c44afb68fa76264f0efcf11cbbb1"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#a7f58c44afb68fa76264f0efcf11cbbb1">plBoundingSphereTemplate::GetDistanceTo</a></div><div class="ttdeci">Type GetDistanceTo(const plVec3Template&lt; Type &gt; &amp;vPoint) const</div><div class="ttdoc">Computes the distance of the point to the sphere's surface. Returns negative values for points inside...</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:201</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_ad5f22a515ddbc6d5d923dc2b845b0de5"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#ad5f22a515ddbc6d5d923dc2b845b0de5">plBoundingSphereTemplate::Overlaps</a></div><div class="ttdeci">bool Overlaps(const plVec3Template&lt; Type &gt; *pPoints, plUInt32 uiNumPoints, plUInt32 uiStride=sizeof(plVec3Template&lt; Type &gt;)) const</div><div class="ttdoc">Checks whether any of the given points is inside the sphere.</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:270</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_ad73214e2fec34b11ab3d31d6aed63dcd"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#ad73214e2fec34b11ab3d31d6aed63dcd">plBoundingSphereTemplate::ExpandToInclude</a></div><div class="ttdeci">void ExpandToInclude(const plVec3Template&lt; Type &gt; &amp;vPoint)</div><div class="ttdoc">Increases the sphere's radius to include this point. Does NOT change its position,...</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:102</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_af9fd1df82a6d6e0e27ed2dd857b9c29b"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#af9fd1df82a6d6e0e27ed2dd857b9c29b">plBoundingSphereTemplate::Contains</a></div><div class="ttdeci">bool Contains(const plVec3Template&lt; Type &gt; &amp;vPoint) const</div><div class="ttdoc">Returns true if the given point is inside the sphere.</div><div class="ttdef"><b>Definition</b> BoundingSphere_inl.h:213</div></div>
<div class="ttc" id="aclasspl_bounding_sphere_template_htm_afbbf571f0f47578ee8b66e95eda6db4a"><div class="ttname"><a href="../../d5/dc0/classpl_bounding_sphere_template.htm#afbbf571f0f47578ee8b66e95eda6db4a">plBoundingSphereTemplate::GetBoundingBox</a></div><div class="ttdeci">const plBoundingBoxTemplate&lt; Type &gt; GetBoundingBox() const</div><div class="ttdoc">Returns a bounding box that encloses this sphere.</div><div class="ttdef"><b>Definition</b> AllClasses_inl.h:88</div></div>
<div class="ttc" id="aclasspl_mat3_template_htm"><div class="ttname"><a href="../../d5/d81/classpl_mat3_template.htm">plMat3Template</a></div><div class="ttdoc">A 3x3 component matrix class.</div><div class="ttdef"><b>Definition</b> Mat3.h:9</div></div>
<div class="ttc" id="aclasspl_mat3_template_htm_a3b464e542db50f5631c0c0ae8067a284"><div class="ttname"><a href="../../d5/d81/classpl_mat3_template.htm#a3b464e542db50f5631c0c0ae8067a284">plMat3Template::MakeAxisRotation</a></div><div class="ttdeci">static plMat3Template&lt; Type &gt; MakeAxisRotation(const plVec3Template&lt; Type &gt; &amp;vAxis, plAngle angle)</div><div class="ttdoc">Creates a matrix that is a rotation matrix around the given axis.</div><div class="ttdef"><b>Definition</b> AllClasses_inl.h:189</div></div>
<div class="ttc" id="aclasspl_mat3_template_htm_a47e9ec129207990c918ca5c9d07d31d5"><div class="ttname"><a href="../../d5/d81/classpl_mat3_template.htm#a47e9ec129207990c918ca5c9d07d31d5">plMat3Template::Invert</a></div><div class="ttdeci">plResult Invert(Type fEpsilon=plMath::SmallEpsilon&lt; Type &gt;())</div><div class="ttdoc">Inverts this matrix. Return value indicates whether the matrix could be Inverted.</div><div class="ttdef"><b>Definition</b> AllClasses_inl.h:230</div></div>
<div class="ttc" id="aclasspl_mat4_template_htm"><div class="ttname"><a href="../../d4/dbd/classpl_mat4_template.htm">plMat4Template</a></div><div class="ttdoc">A 4x4 component matrix class.</div><div class="ttdef"><b>Definition</b> Mat4.h:11</div></div>
<div class="ttc" id="aclasspl_mat4_template_htm_a199478276094229de565b469ab0c22e5"><div class="ttname"><a href="../../d4/dbd/classpl_mat4_template.htm#a199478276094229de565b469ab0c22e5">plMat4Template::MakeAxisRotation</a></div><div class="ttdeci">static plMat4Template&lt; Type &gt; MakeAxisRotation(const plVec3Template&lt; Type &gt; &amp;vAxis, plAngle angle)</div><div class="ttdoc">Creates a matrix that is a rotation matrix around the given axis.</div><div class="ttdef"><b>Definition</b> AllClasses_inl.h:260</div></div>
<div class="ttc" id="aclasspl_mat4_template_htm_aec0b223f8329fe869fadc2e921a7e219"><div class="ttname"><a href="../../d4/dbd/classpl_mat4_template.htm#aec0b223f8329fe869fadc2e921a7e219">plMat4Template::Invert</a></div><div class="ttdeci">plResult Invert(Type fEpsilon=plMath::SmallEpsilon&lt; Type &gt;())</div><div class="ttdoc">Inverts this matrix. Return value indicates whether the matrix could be inverted.</div><div class="ttdef"><b>Definition</b> AllClasses_inl.h:310</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm">plVec3Template&lt; float &gt;</a></div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a48f7479d10c24b443b7df80df5407cef"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a48f7479d10c24b443b7df80df5407cef">plVec3Template::IsNormalized</a></div><div class="ttdeci">PL_DECLARE_IF_FLOAT_TYPE bool IsNormalized(Type fEpsilon=plMath::HugeEpsilon&lt; Type &gt;()) const</div><div class="ttdoc">Returns, whether the squared length of this vector is between 0.999f and 1.001f.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:121</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a572854a70177ef1a0f0b6c49ecb27843"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a572854a70177ef1a0f0b6c49ecb27843">plVec3Template::GetLengthSquared</a></div><div class="ttdeci">Type GetLengthSquared() const</div><div class="ttdoc">Returns the squared length. Faster, since no square-root is taken. Useful, if one only wants to compa...</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:70</div></div>
<div class="ttc" id="aclasspl_vec3_template_htm_a61632cae2206b10fbf8c06420a1d90fe"><div class="ttname"><a href="../../df/d1f/classpl_vec3_template.htm#a61632cae2206b10fbf8c06420a1d90fe">plVec3Template::CompMax</a></div><div class="ttdeci">const plVec3Template&lt; Type &gt; CompMax(const plVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise maximum of *this and rhs.</div><div class="ttdef"><b>Definition</b> Vec3_inl.h:326</div></div>
<div class="ttc" id="anamespacepl_math_htm_a25ddcfae0bd88d04d015b266a236065f"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a25ddcfae0bd88d04d015b266a236065f">plMath::Square</a></div><div class="ttdeci">constexpr PL_ALWAYS_INLINE T Square(T f)</div><div class="ttdoc">Returns f * f.</div><div class="ttdef"><b>Definition</b> Math_inl.h:8</div></div>
<div class="ttc" id="anamespacepl_math_htm_a3c10f39a9283445ab6001096104bb153"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a3c10f39a9283445ab6001096104bb153">plMath::Sin</a></div><div class="ttdeci">PL_ALWAYS_INLINE float Sin(plAngle a)</div><div class="ttdoc">***** Trigonometric Functions *****</div><div class="ttdef"><b>Definition</b> MathFloat_inl.h:62</div></div>
<div class="ttc" id="anamespacepl_math_htm_a5e363339c8dfc76221563df0bf2302b3"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#a5e363339c8dfc76221563df0bf2302b3">plMath::Invert</a></div><div class="ttdeci">constexpr Type Invert(Type f)</div><div class="ttdoc">Returns 1 / f.</div><div class="ttdef"><b>Definition</b> Math_inl.h:63</div></div>
<div class="ttc" id="anamespacepl_math_htm_aae02023b382e3990f9ebf91f40473310"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#aae02023b382e3990f9ebf91f40473310">plMath::Sqrt</a></div><div class="ttdeci">PL_ALWAYS_INLINE double Sqrt(double f)</div><div class="ttdoc">Returns the square root of f.</div><div class="ttdef"><b>Definition</b> MathDouble_inl.h:99</div></div>
<div class="ttc" id="anamespacepl_math_htm_ab41c015ef2ef7ea68f915082545755ae"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#ab41c015ef2ef7ea68f915082545755ae">plMath::IsZero</a></div><div class="ttdeci">bool IsZero(Type f, Type fEpsilon)</div><div class="ttdoc">Checks whether the given number is close to zero.</div><div class="ttdef"><b>Definition</b> Math_inl.h:288</div></div>
<div class="ttc" id="anamespacepl_math_htm_abd0ef20e6710b240c9833acdf6f2f8d7"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#abd0ef20e6710b240c9833acdf6f2f8d7">plMath::Abs</a></div><div class="ttdeci">constexpr PL_ALWAYS_INLINE T Abs(T f)</div><div class="ttdoc">Returns the absolute value of f.</div><div class="ttdef"><b>Definition</b> Math_inl.h:21</div></div>
<div class="ttc" id="anamespacepl_math_htm_ac9493ece7e4354a37df97ed08bb26eac"><div class="ttname"><a href="../../d1/dbc/namespacepl_math.htm#ac9493ece7e4354a37df97ed08bb26eac">plMath::Cos</a></div><div class="ttdeci">PL_ALWAYS_INLINE float Cos(plAngle a)</div><div class="ttdoc">Takes an angle, returns its cosine.</div><div class="ttdef"><b>Definition</b> MathFloat_inl.h:67</div></div>
<div class="ttc" id="astructpl_comparison_operator_htm_a07fe18fc2f998c0dc9e79716dabd7297"><div class="ttname"><a href="../../dc/d4d/structpl_comparison_operator.htm#a07fe18fc2f998c0dc9e79716dabd7297">plComparisonOperator::Compare</a></div><div class="ttdeci">static bool Compare(plComparisonOperator::Enum cmp, const T &amp;a, const T &amp;b)</div><div class="ttdoc">Compares a to b with the given operator. This function only needs the == and &lt; operator for T.</div><div class="ttdef"><b>Definition</b> AllClasses_inl.h:341</div></div>
<div class="ttc" id="astructpl_plane_template_htm_a2fbc68ecd044c6d8731757ec39b7dbfa"><div class="ttname"><a href="../../d4/d65/structpl_plane_template.htm#a2fbc68ecd044c6d8731757ec39b7dbfa">plPlaneTemplate::GetObjectPosition</a></div><div class="ttdeci">plPositionOnPlane::Enum GetObjectPosition(const plVec3Template&lt; Type &gt; *const pPoints, plUInt32 uiVertices) const</div><div class="ttdoc">Returns on which side of the plane the set of points lies. Might be on both sides.</div><div class="ttdef"><b>Definition</b> Plane_inl.h:305</div></div>
<div class="ttc" id="astructpl_plane_template_htm_a4e5cb4d5312b93d67818be1920443ae4"><div class="ttname"><a href="../../d4/d65/structpl_plane_template.htm#a4e5cb4d5312b93d67818be1920443ae4">plPlaneTemplate::GetMaximumDistanceTo</a></div><div class="ttdeci">Type GetMaximumDistanceTo(const plBoundingBoxTemplate&lt; Type &gt; &amp;box) const</div><div class="ttdoc">Returns the maximum distance between given box and a plane.</div><div class="ttdef"><b>Definition</b> AllClasses_inl.h:165</div></div>
<div class="ttc" id="astructpl_plane_template_htm_ad0b95ea0712cee23dec49e2a5dac3df6"><div class="ttname"><a href="../../d4/d65/structpl_plane_template.htm#ad0b95ea0712cee23dec49e2a5dac3df6">plPlaneTemplate::GetMinimumDistanceTo</a></div><div class="ttdeci">Type GetMinimumDistanceTo(const plVec3Template&lt; Type &gt; *pPoints, plUInt32 uiNumPoints, plUInt32 uiStride=sizeof(plVec3Template&lt; Type &gt;)) const</div><div class="ttdoc">Returns the minimum distance that any of the given points had to the plane.</div><div class="ttdef"><b>Definition</b> Plane_inl.h:431</div></div>
<div class="ttc" id="astructpl_position_on_plane_htm_ac3747413b6d46cfdd51016a898716b9c"><div class="ttname"><a href="../../d1/da1/structpl_position_on_plane.htm#ac3747413b6d46cfdd51016a898716b9c">plPositionOnPlane::Enum</a></div><div class="ttdeci">Enum</div><div class="ttdef"><b>Definition</b> Plane.h:10</div></div>
<div class="ttc" id="astructpl_position_on_plane_htm_ac3747413b6d46cfdd51016a898716b9ca0f1f61f8e0ec2c7993be56e9b8f76412"><div class="ttname"><a href="../../d1/da1/structpl_position_on_plane.htm#ac3747413b6d46cfdd51016a898716b9ca0f1f61f8e0ec2c7993be56e9b8f76412">plPositionOnPlane::Spanning</a></div><div class="ttdeci">@ Spanning</div><div class="ttdoc">Something is spanning a plane, i.e. some points are on the front and some on the back.</div><div class="ttdef"><b>Definition</b> Plane.h:14</div></div>
<div class="ttc" id="astructpl_position_on_plane_htm_ac3747413b6d46cfdd51016a898716b9ca4e2adf6c3dd5926ecb4865bd3f6d2909"><div class="ttname"><a href="../../d1/da1/structpl_position_on_plane.htm#ac3747413b6d46cfdd51016a898716b9ca4e2adf6c3dd5926ecb4865bd3f6d2909">plPositionOnPlane::Back</a></div><div class="ttdeci">@ Back</div><div class="ttdoc">Something is completely on the back side of a plane.</div><div class="ttdef"><b>Definition</b> Plane.h:11</div></div>
<div class="ttc" id="astructpl_position_on_plane_htm_ac3747413b6d46cfdd51016a898716b9caf67c508c4d39ee5613dcd0c07a23b2be"><div class="ttname"><a href="../../d1/da1/structpl_position_on_plane.htm#ac3747413b6d46cfdd51016a898716b9caf67c508c4d39ee5613dcd0c07a23b2be">plPositionOnPlane::Front</a></div><div class="ttdeci">@ Front</div><div class="ttdoc">Something is completely in front of a plane.</div><div class="ttdef"><b>Definition</b> Plane.h:12</div></div>
<div class="ttc" id="astructpl_result_htm"><div class="ttname"><a href="../../da/dce/structpl_result.htm">plResult</a></div><div class="ttdoc">Default enum for returning failure or success, instead of using a bool.</div><div class="ttdef"><b>Definition</b> Types.h:54</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_23fdee2f6995db16c755697cdf620cf4.htm">Code</a></li><li class="navelem"><a class="el" href="../../dir_035128dd2074b3ffa643fb93d2ba646f.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_b4afbf48febc82b6d8264e96ce32f252.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_b421fc8dbee4bf114051d293564697bb.htm">Math</a></li><li class="navelem"><a class="el" href="../../dir_7df9876b976cc75bc915cc1184bc6f86.htm">Implementation</a></li><li class="navelem"><b>AllClasses_inl.h</b></li>
    <li class="footer">Generated by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
